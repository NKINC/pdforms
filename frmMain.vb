Imports System.IO
Imports System.Net
Imports System.String
Imports System.Drawing
Imports System.Drawing.Drawing2D
Imports iTextSharp.text
Imports iTextSharp.text.pdf
Imports System.Web
Imports System.Drawing.Imaging
Imports FDFApp
Imports FDFApp.FDFApp_Class
Imports FDFApp.FDFDoc_Class
Imports iTextSharp.text.html
Imports iTextSharp.text.xml
Imports System.util
Imports Org.BouncyCastle.Crypto
Imports Org.BouncyCastle.Pkcs
Imports Org.BouncyCastle.X509
Imports iTextSharp.text.pdf.security
Imports Encryption
Imports Encryption.Symmetric
Imports System.Security.Cryptography
Imports WIA
Imports Microsoft.Win32
Imports Newtonsoft.Json
Imports Newtonsoft.Json.JsonConvert
Imports Newtonsoft.Json.JsonConverter
Public Class frmMain
    ''' <summary>
    ''' PdForms.net - An open source pdf form editor
    ''' Copyright 2018 Nicholas Kowalewicz All Rights reserved.
    ''' PdForms.net utilizes iTextSharp technologies.
    ''' Website: www.pdforms.net (source code), www.pdforms.com (about)
    ''' </summary>
    Public _debugVariable As Boolean
    ''' <summary>
    ''' DEBUG MODE METHOD - BOOLEAN
    ''' </summary>
    ''' <value>TRUE = THROW and TRAP ERRORS; FALSE = CLEAR ERRORS</value>
    ''' <returns>TRUE,FALSE</returns>
    ''' <remarks></remarks>
    Public Property debugMode() As Boolean
        Get
            Return _debugVariable
        End Get
        Set(ByVal value As Boolean)
            _debugVariable = value
        End Set
    End Property
    Public appPath As String
    Public appPathTemp As String
    Public _debugFileName As String
    Public fpath As String
    Public ipath As String
    Public pdfReaderDoc As PdfReader
    Public pdfOwnerPassword As String
    Public _autoScrollPages As Boolean
    Public _PreserveUsageRights As Boolean
    Public cFDFApp As FDFApp.FDFApp_Class
    Public _cFDFDoc As FDFApp.FDFDoc_Class
    Public WHITE As iTextSharp.text.BaseColor
    Public LIGHT_GRAY As iTextSharp.text.BaseColor
    Public GRAY As iTextSharp.text.BaseColor
    Public DARK_GRAY As iTextSharp.text.BaseColor
    Public BLACK As iTextSharp.text.BaseColor
    Public RED As iTextSharp.text.BaseColor
    Public PINK As iTextSharp.text.BaseColor
    Public ORANGE As iTextSharp.text.BaseColor
    Public YELLOW As iTextSharp.text.BaseColor
    Public GREEN As iTextSharp.text.BaseColor
    Public MAGENTA As iTextSharp.text.BaseColor
    Public CYAN As iTextSharp.text.BaseColor
    Public BLUE As iTextSharp.text.BaseColor
    Public Transparent As iTextSharp.text.BaseColor
    Public FIELD_TYPE_TEXT As Integer
    Public FIELD_TYPE_SIGNATURE As Integer
    Public FIELD_TYPE_RADIOBUTTON As Integer
    Public FIELD_TYPE_PUSHBUTTON As Integer
    Public FIELD_TYPE_NONE As Integer
    Public FIELD_TYPE_LIST As Integer
    Public FIELD_TYPE_COMBO As Integer
    Public FIELD_TYPE_CHECKBOX As Integer
    Public dlg As dialogFTP
    Public dlgValues As List(Of String)
    Public ignoreClick As Boolean
    Public frmEmail1 As frmEmail
    Public fields_tab_order As List(Of FieldName_Rectangle)
    Public calculationOrderList As PdfArray
    Public _showMaxHistoryMaxShow As Integer
    Public PdfForm_FieldNames As List(Of String)
    Public changingPermissionRestrictionCombo As Boolean
    Public preventClickDialog As Boolean
    Public openHistoryListFile As String
    Public fldKidIndex As Integer
    Public scrollIndex As System.Drawing.Point
    Public scrollValue As Integer
    Public preventDragging As Boolean
    Public lockCursor As Boolean
    Public rotType As System.Drawing.RotateFlipType
    Public imgNewImage As System.Drawing.Image
    Public pnlFields_Dragging As Boolean, mousex As Integer, mousey As Integer
    Public fldNameHighlightedCopy As String
    Public removeKidFieldIndex As Integer
    Public _pictureBoxImage As System.Drawing.Image
    Public _outputIndex As Integer
    Public _outputIndexMax As Integer
    Public fldRectangles As Dictionary(Of String, System.Drawing.RectangleF)
    Public fldNameHighlighted As String
    Public _pdfW As Single, _pdfH As Single
    Public clsPreloadImagesThread As clsImageThreads
    Public preloadCount As Integer
    Public timeLogs As String
    Public LoadImageGs_InUse As Boolean
    Public drawBox As Boolean = False
    Public mMove As Boolean = False
    Public memName As String
    Public mem As Dictionary(Of String, Byte())
    Public dicColors As Dictionary(Of String, iTextSharp.text.BaseColor)
    Public iMyCustomColors() As Integer
    Public dicFieldTypes As Dictionary(Of String, Integer)
    Public pageSizes As Dictionary(Of String, iTextSharp.text.Rectangle)
    Public cUserRect As clsUserRect
    Public _clickPoints As List(Of System.Drawing.PointF)
    Public _dragging As Boolean
    Public tm As System.Text.StringBuilder
    Public fieldsOnPageList As List(Of String)
    Public PuchButton_Options_StateImageList As List(Of System.Drawing.Image)
    Public PuchButton_Options_StateImageListByte As List(Of Byte())
    Public PuchButton_Options_StateLabelList As List(Of String)
    Public ComboBox_SortItems_SelectedItems As List(Of String)
    Public ComboBox_SortItems_SelectedItemsVals As List(Of String)
    Public ComboBox_Original_Items As Dictionary(Of String, String)
    Public pictureboxThumb As List(Of PictureBox)
    Public _copy_Appearance_frmMain As clsCopy_Appearance_frmMain
    Public cLinks As clsLinks
    Public WithEvents tmrFireRefresh As Timer
    Public flash As frmFlashObject
    Public fieldNames As List(Of String)
    Public pwCrack As clsBruteForcePw
    Public frmSecurityPassword As dialogSecurityPassword
    Public frmImageRotation_ImageBytes() As Byte
    Public frmMassPopulateAndEmail1 As frmMerge
    Public clsFF As dialogListFiles
    Public SignatureImage As System.Drawing.Image
    Public dsBrowser As dialogDataSource
    Public ComboBoxSignatureAppearanceRenderMode As Integer
    Public pauseBtnTextChanged As Boolean
    Public sign_reason As String, sign_location As String, sign_lineColor As System.Drawing.Color, sign_AppearanceRenderModeIndex As Integer, sign_lineWidthIndex As Integer, sign_contact As String, sign_pfxPath As String, sign_pfxBytes() As Byte, sign_pfxPassword As String, sign_datetime As String, sign_creator As String
    Public comboBox4Selected As Boolean = False

    Private _pdfURI As String
    Private _pdfData() As Byte
    Private _fdfData() As Byte
    Private _outPutType As FDFApp.FDFApp_Class.FDFType
    Private _flatten As Boolean
    Private _openPassword As String
    Private _ownerPassword As String
    Private _sid As String
    Private _dimensionsList As List(Of Single)
    Private loadReaderCount As Integer
    Private _highlightedFieldCopy As String
    Private pnlFieldTabOrder_PauseUpdate As Boolean
    Private _pnlCompression_Pause As Boolean
    Private _pnlPageSizeAspectRatioW As Single
    Private _pnlPageSizeAspectRatioH As Single
    Private _pnlPageSizeAspectRatioPause As Boolean
    Private customFormatScripts() As String
    Private puchButtonIcon_Default_IconFitToBounds As Boolean
    Private puchButtonIcon_Default_ScaleIcon As Integer
    Private puchButtonIcon_Default_ProportionalIcon As Integer
    Private puchButtonIcon_Default_IconHorizontalAdjustment As Single
    Private puchButtonIcon_Default_IconVerticalAdjustment As Single
    Private tmpCombPercent As String, tmpPercent As Single
    Private bgButtonFaceColor As System.Drawing.Color
    Private btnMainLocation As Point
    Private lv As List(Of clsAutocomplete)
    Private cfdf As FDFApp.FDFDoc_Class
    Private cpdf As FDFApp.FDFApp_Class
    Public ReadOnly Property ApplicationDataFolder(Optional ByVal TrimEnd As Boolean = False, Optional subfolderName As String = "") As String
        Get
            Dim f As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)
            Try
                If Not Directory.Exists(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\") Then
                    Directory.CreateDirectory(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\")
                    'Directory.CreateDirectory(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\Resources\")
                    'Directory.CreateDirectory(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\notes\")
                    'Directory.CreateDirectory(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\temp\")
                    'Directory.CreateDirectory(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\signatures\")
                    'AddEveryoneToPathACL(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\")
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Try
                If Not Directory.Exists(f.ToString().TrimEnd("\"c) & "\NK-Inc.com\PdForms.net\Resources\") Then
                    Directory.CreateDirectory(f.ToString().TrimEnd("\"c) & "\NK-Inc.com\PdForms.net\Resources\")
                    'If Directory.Exists(appPath & "Resources") Then
                    For Each strFile As String In Directory.GetFiles(appPath & "Resources")
                            File.Copy(strFile, f.ToString().TrimEnd("\"c) & "\Resources\" & Path.GetFileName(strFile), True)
                        Next
                    'End If
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Try
                If Not Directory.Exists(f.ToString().TrimEnd("\"c) & "\NK-Inc.com\PdForms.net\notes\") Then
                    Directory.CreateDirectory(f.ToString().TrimEnd("\"c) & "\NK-Inc.com\PdForms.net\notes\")
                    'If Directory.Exists(appPath & "notes") Then
                    For Each strFile As String In Directory.GetFiles(appPath & "notes")
                            File.Copy(strFile, f.ToString().TrimEnd("\"c) & "\notes\" & Path.GetFileName(strFile), True)
                        Next
                    'End If
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Try
                If Not Directory.Exists(f.ToString().TrimEnd("\"c) & "\NK-Inc.com\PdForms.net\temp\") Then
                    Directory.CreateDirectory(f.ToString().TrimEnd("\"c) & "\NK-Inc.com\PdForms.net\temp\")
                    'If Directory.Exists(appPath & "temp") Then
                    For Each strFile As String In Directory.GetFiles(appPath & "temp")
                            File.Copy(strFile, f.ToString().TrimEnd("\"c) & "\temp\" & Path.GetFileName(strFile), True)
                        Next
                    'End If
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Try
                If Not Directory.Exists(f.ToString().TrimEnd("\"c) & "\NK-Inc.com\PdForms.net\signatures\") Then
                    Directory.CreateDirectory(f.ToString().TrimEnd("\"c) & "\NK-Inc.com\PdForms.net\signatures\")
                    'If Directory.Exists(appPath & "signatures") Then
                    For Each strFile As String In Directory.GetFiles(appPath & "signatures")
                        File.Copy(strFile, f.ToString().TrimEnd("\"c) & "\signatures\" & Path.GetFileName(strFile), True)
                    Next
                    'End If
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Try
                If Not File.Exists(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\readme.txt") Then
                    If File.Exists(appPath & "readme.txt") Then
                        File.Copy(appPath & "readme.txt", f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\readme.txt", False)
                    Else
                        File.WriteAllText(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\readme.txt", "")
                    End If
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Try
                If Not File.Exists(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\log.txt") Then
                    File.WriteAllText(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\log.txt", "")
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Try
                If Not File.Exists(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\open-history.txt") Then
                    If File.Exists(appPath & "open-history") Then
                        File.Copy(appPath & "open-history", f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\open-history", False)
                    Else
                        File.WriteAllText(f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net\open-history.txt", "")
                    End If
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Try
                If Not Directory.Exists((f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net" & "\" & subfolderName.ToString().TrimEnd("\"c)).TrimEnd("\"c) & IIf(TrimEnd, "", "\")) Then
                    Directory.CreateDirectory((f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net" & "\" & subfolderName.ToString().TrimEnd("\"c)).TrimEnd("\"c) & IIf(TrimEnd, "", "\"))
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Return (f.ToString.TrimEnd("\".ToCharArray()) & "\NK-Inc.com\PdForms.net" & "\" & subfolderName.ToString().TrimEnd("\"c)).TrimEnd("\"c) & IIf(TrimEnd, "", "\")
        End Get
    End Property
    Private WithEvents jsProcess As Dictionary(Of System.Windows.Forms.Control, Process)
    Public Function getStamper(ByRef reader As PdfReader, ByRef MemStream As MemoryStream) As PdfStamper
        If _PreserveUsageRights And reader.HasUsageRights() Then
            Return New iTextSharp.text.pdf.PdfStamper(reader, MemStream, Nothing, True)
        Else
            Return New iTextSharp.text.pdf.PdfStamper(reader, MemStream, PdfWriter.VERSION_1_7)
        End If
    End Function
    Public Function getStamper(ByRef reader As PdfReader, ByRef MemStream As MemoryStream, ByVal pdfVersion As String) As PdfStamper
        If _PreserveUsageRights And reader.HasUsageRights() Then
            Return New iTextSharp.text.pdf.PdfStamper(reader, MemStream, Nothing, True)
        Else
            Dim chrV As Char = Nothing
            If pdfVersion.Replace("1.", "").Length > 0 Then
                chrV = pdfVersion.Replace("1.", "").ToCharArray(0, 1)(0)
            End If
            Return New iTextSharp.text.pdf.PdfStamper(reader, MemStream, chrV)
        End If
    End Function
    Public Function HasUsageRights_PDF(ByVal reader As PdfReader) As Boolean
        Return reader.HasUsageRights()
    End Function
    ''' <summary>
    ''' Checks Usage Rights from a PDF
    ''' </summary>
    ''' <param name="PDFFile">Absolute File Name</param>
    ''' <returns>Returns true if PDF has usage rights enabled</returns>
    ''' <remarks></remarks>
    Public Function HasUsageRights_PDF(ByVal PDFFile As String) As Boolean
        Dim reader As New iTextSharp.text.pdf.PdfReader(PDFFile)
        Return reader.HasUsageRights()
    End Function
    ''' <summary>
    ''' Checks Usage Rights from a PDF
    ''' </summary>
    ''' <param name="PDFFile">PDF File Stream from a File Stream or Memory Stream</param>
    ''' <returns>Returns true if PDF has usage rights enabled</returns>
    ''' <remarks></remarks>
    Public Function HasUsageRights_PDF(ByVal PDFFile As Stream) As Boolean
        Dim reader As New iTextSharp.text.pdf.PdfReader(PDFFile)
        Return reader.HasUsageRights()
    End Function
    ''' <summary>
    ''' Checks Usage Rights from a PDF
    ''' </summary>
    ''' <param name="PDFFile">PDF Byte Array</param>
    ''' <returns>Returns true if PDF has usage rights enabled</returns>
    ''' <remarks></remarks>
    Public Function HasUsageRights_PDF(ByVal PDFFile As Byte()) As Boolean
        Dim reader As New iTextSharp.text.pdf.PdfReader(PDFFile)
        Return reader.HasUsageRights()
    End Function
    Public Function HasUsageRights_PDF() As Boolean
        If Not pdfReaderDoc Is Nothing Then Return pdfReaderDoc.HasUsageRights()
        Return False
    End Function
    Public Property AutoScrollPages() As Boolean
        Get
            Return _autoScrollPages
        End Get
        Set(ByVal value As Boolean)
            _autoScrollPages = value
        End Set
    End Property
    Public Function convertString2Bytes(ByVal str As String) As Byte()
        Try
            Return System.Text.Encoding.ASCII.GetBytes(str & "")
        Catch ex As Exception
            Return New Byte() {}
        End Try
    End Function
    Public Sub LoadPDFReaderDoc(Optional ByVal ownerPassword As String = "", Optional ByVal force As Boolean = True)
        Try
            If Not pdfReaderDoc Is Nothing Then
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If cFDFDoc Is Nothing Then
                If Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        _cFDFDoc = cFDFDoc()
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If HasUsageRights_PDF() And Not pdfReaderDoc Is Nothing Then
                If Not ownerPassword = "" Then
                    Dim bOP() As Byte = System.Text.Encoding.ASCII.GetBytes(ownerPassword)
                    If force Then
                        If Not Session Is Nothing Then
                            pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session, bOP)
                        End If
                    Else
                        If Not Session Is Nothing Then
                            If Session.Length > 0 Then
                                If pdfReaderDoc Is Nothing Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session, bOP)
                                ElseIf pdfReaderDoc.FileLength <= 0 Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session, bOP)
                                ElseIf pdfReaderDoc.FileLength <> Session.Length Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session, bOP)
                                End If
                            End If
                        End If
                    End If
                Else
                    If force Then
                        If Not Session Is Nothing Then
                            pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session)
                        End If
                    Else
                        If Not Session Is Nothing Then
                            If Session.Length > 0 Then
                                If pdfReaderDoc Is Nothing Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session)
                                ElseIf pdfReaderDoc.FileLength <= 0 Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session)
                                ElseIf pdfReaderDoc.FileLength <> Session.Length Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session)
                                End If
                            End If
                        End If
                    End If
                End If
            Else
                If Not ownerPassword = "" Then
                    Dim bOP() As Byte = getBytes(ownerPassword)
                    If force Then
                        If Not Session Is Nothing Then
                            pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session, bOP)
                        End If
                    Else
                        If Not Session Is Nothing Then
                            If Session.Length > 0 Then
                                If pdfReaderDoc Is Nothing Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session, bOP)
                                ElseIf pdfReaderDoc.FileLength <= 0 Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session, bOP)
                                ElseIf pdfReaderDoc.FileLength <> Session.Length Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session, bOP)
                                End If
                            End If
                        End If
                    End If
                Else
                    If force Then
                        If Not Session Is Nothing Then
                            pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session)
                        End If
                    Else
                        If Not Session Is Nothing Then
                            If Session.Length > 0 Then
                                If pdfReaderDoc Is Nothing Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session)
                                ElseIf pdfReaderDoc.FileLength <= 0 Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session)
                                ElseIf pdfReaderDoc.FileLength <> Session.Length Then
                                    pdfReaderDoc = New iTextSharp.text.pdf.PdfReader(Session)
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            Session("pdfreader_bytes") = Session("output")
            _cFDFDoc = cFDFDoc(force)
        End Try
        loadReaderCount += 1
    End Sub
    Public Function CheckfieldNameExits(ByVal fieldName As String, Optional ByVal forceRefresh As Boolean = False) As Boolean
        Try
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    If forceRefresh Or pdfReaderDoc Is Nothing Then
                        LoadPDFReaderDoc(pdfOwnerPassword & "", False)
                    End If
                    If (pdfReaderDoc.AcroFields.Fields.Count > 0) Then
                        PdfForm_FieldNames.Clear()
                        For Each f As String In pdfReaderDoc.AcroFields.Fields.Keys
                            If Not String.IsNullOrEmpty(f.Trim() & "") Then
                                PdfForm_FieldNames.Add(f.ToString.Trim().ToLower() & "")
                            End If
                        Next
                    End If
                Else
                    Return False
                End If
            Else
                Return False
            End If
            If PdfForm_FieldNames.Count <= 0 Then
                Return False
            End If
            If PdfForm_FieldNames.Contains(fieldName.ToString.Trim().ToLower() & "") Then
                Return True
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return False
    End Function
    Public Function DeleteField(ByRef PDFBytes() As Byte, ByVal fieldName As String) As Byte()
        If Not PDFBytes Is Nothing Then
            If PDFBytes.Length > 0 Then
                For Each f As String In cFDFApp.getXFAFieldNames(PDFBytes).ToArray
                    If f.ToString.ToLower = fieldName.ToString.ToLower Then
                        Return PDFBytes
                    End If
                Next
            End If
        End If
        Return PDFBytes
    End Function
    Public Function LoadImageGsGood(ByVal pdfData() As Byte) As Byte()
        Try
            Dim x As String = appPath
            Dim tmpname As String = Path.GetRandomFileName & ".pdf"
            System.IO.File.WriteAllBytes(tmpname, (pdfData))
            Dim tmpImg As String = Path.GetRandomFileName & ".jpg"
            Dim cPDF2Image As New PdfToImage.PDFConvert()
            cPDF2Image.OutputToMultipleFile = False
            cPDF2Image.FirstPageToConvert = CInt(page)
            cPDF2Image.LastPageToConvert = CInt(page)
            cPDF2Image.FitPage = True
            cPDF2Image.JPEGQuality = 100
            cPDF2Image.GraphicsAlphaBit = 4
            cPDF2Image.TextAlphaBit = 4
            cPDF2Image.OutputFormat = "bmp16m"
            cPDF2Image.ResolutionX = 600
            cPDF2Image.ResolutionY = 600
            cPDF2Image.Width = CInt(getPDFWidth(pdfData)) + 0
            cPDF2Image.Height = CInt(getPDFHeight(pdfData)) + 0
            cPDF2Image.GhostScriptDLLDirectory = appPath
            cPDF2Image.Convert(x & tmpname, x & tmpImg)
            Try
                System.IO.File.Delete(x & tmpname)
            Catch ex As Exception
            End Try
            Try
                Return File.ReadAllBytes(x & tmpImg)
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            Finally
                Try
                    System.IO.File.Delete(x & tmpImg)
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            End Try
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function A0_LoadImageMagick(ByVal pdfData() As Byte, Optional MakeFieldsVisible As Boolean = True) As Byte()
        Dim pdfRead As PdfReader = Nothing
        Dim startCount As Integer = 0
        Try
            If LoadImageGs_InUse Then
                If Not clsPreloadImagesThread Is Nothing Then
                    clsPreloadImagesThread.StopTimer()
                End If
            End If
            Dim cntr As Integer = 0
            Do While LoadImageGs_InUse
                If DoEvents_Wait(100) Then
                    cntr += 1
                    If cntr > 30 Then
                        LoadImageGs_InUse = False
                        Exit Do
                    End If
                End If
            Loop
        Catch exPreload As Exception
            TimeStampAdd(exPreload, debugMode) ' NK 2016-06-30 'NK DM
        End Try
        If Not LoadImageGs_InUse Then
            Using cPDF2Image As New PdfToImage.PDFConvert()
                Try

                    pdfRead = New PdfReader(pdfData, pdfOwnerPassword.toBytesPdfOwnerPassword)
GoTo_StartOver:
                    startCount += 1
                    cPDF2Image.OutputToMultipleFile = False
                    pdfRead.SelectPages(page.ToString)
                    'page = 1
                    Try
                        If MakeFieldsVisible Then
                            If Not pdfRead.AcroFields Is Nothing Then
                                If Not pdfRead.AcroFields.Fields Is Nothing Then
                                    If pdfRead.AcroFields.Fields.Keys.Count > 0 Then
                                        pdfRead = A0_MakeFieldsVisible(pdfRead.Clone)
                                    End If
                                End If
                            End If
                        End If

                    Catch exKeys As Exception
                        TimeStampAdd(exKeys, debugMode)
                    End Try
                    Dim settings As New ImageMagick.MagickReadSettings()
                    '// Settings the density to 300 dpi will create an image with a better quality
                    settings.Density = New ImageMagick.Density(400)
                    Dim height As Integer = 0, width As Integer = 0
                    pdfRead.SelectPages(CStr(1))
                    pdfData = getPDFBytes(pdfRead.Clone, False)
                    If height <= 0 And width > 0 Then
                        height = CInt((width / CSng(getPDFWidth(pdfData, 1))) * CSng(getPDFHeight(pdfData, 1)))
                    ElseIf height > 0 And width <= 0 Then
                        width = CInt((height / CSng(getPDFHeight(pdfData, 1))) * CSng(getPDFWidth(pdfData, 1)))
                    ElseIf height <= 0 And width <= 0 Then
                        width = CInt(getPDFWidth(pdfData, 1))
                        height = CInt(getPDFHeight(pdfData, 1)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    Else
                    End If

                    Using images As New ImageMagick.MagickImageCollection
                        'images.Read(fpath, settings)
                        images.Read(pdfData, settings)
                        Dim imgpage As Integer = 1
                        For Each image As ImageMagick.IMagickImage In images.ToArray
                            'image.Write("Snakeware.Page" + page + ".png")
                            image.Format = ImageMagick.MagickFormat.Jpeg
                            'image.Width = width
                            'image.Height = height
                            'Dim fnTemp As String = appPathTemp & Path.GetFileNameWithoutExtension(fpath) & page & ".jpg"
                            'image.Write(fnTemp)
                            'Process.Start(fnTemp)
                            'imgpage = imgpage + 1
                            'ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                            Dim m As New MemoryStream()
                            image.Write(m)
                            ghostImageBytes = m.ToArray
                            Return ghostImageBytes
                        Next
                    End Using
                    'cPDF2Image.FitPage = True
                    'cPDF2Image.GraphicsAlphaBit = 4
                    'cPDF2Image.TextAlphaBit = 4
                    'cPDF2Image.DisableFontMap = False
                    'cPDF2Image.DisablePlatformFonts = False
                    'cPDF2Image.OutputFormat = "jpeg" '"png16m" '"jpeg" '"png16m" '"bmp16m" ' '"png16m" '"pngalpha" '"png256" '"jpeg"
                    'cPDF2Image.ResolutionX = 300 '150 '72 'CSng(GetPDFWidth(pdfData)) + 0 '720
                    'cPDF2Image.ResolutionY = 300 '150 '72 'CSng(GetPDFHeight(pdfData)) + 0 '720
                    'cPDF2Image.RenderingThreads = 4
                    'cPDF2Image.JPEGQuality = 100
                    'cPDF2Image.UseMutex = False
                    'Dim height As Integer = 0, width As Integer = 0
                    'pdfRead.SelectPages(CStr(page.ToString()))
                    'pdfData = getPDFBytes(pdfRead.Clone, False)
                    'If height <= 0 And width > 0 Then
                    '    height = CInt((width / CSng(getPDFWidth(pdfData, 1))) * CSng(getPDFHeight(pdfData, 1)))
                    'ElseIf height > 0 And width <= 0 Then
                    '    width = CInt((height / CSng(getPDFHeight(pdfData, 1))) * CSng(getPDFWidth(pdfData, 1)))
                    'ElseIf height <= 0 And width <= 0 Then
                    '    width = CInt(getPDFWidth(pdfData, 1))
                    '    height = CInt(getPDFHeight(pdfData, 1)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    'Else
                    'End If
                    'cPDF2Image.Width = width
                    'cPDF2Image.Height = height
                    'cPDF2Image.GhostScriptDLLDirectory = appPath
                    'If Not pdfOwnerPassword.isNullOrEmpty() Then
                    'End If
                    'cPDF2Image.FirstPageToConvert = 1 '1 'page
                    'cPDF2Image.LastPageToConvert = 1 '1 'page
                    'Try
                    '    Dim cntr As Integer = 0
                    '    Do While LoadImageGs_InUse
                    '        If DoEvents_Wait(100) Then
                    '            cntr += 1
                    '            If cntr > 30 Then
                    '                LoadImageGs_InUse = False
                    '                Exit Do
                    '            End If
                    '        End If
                    '    Loop
                    'Catch ex As Exception
                    '    TimeStampAdd(ex, debugMode)
                    'End Try
                    'LoadImageGs_InUse = True
                    'ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                    'Return ghostImageBytes
                Catch ex As Exception
                    If startCount <= 4 And ex.Message.ToString.ToLower = "The original document was reused. Read it again from file.".ToLower Then
                        pdfRead = New PdfReader(pdfData.ToArray, pdfOwnerPassword.toBytesPdfOwnerPassword)
                        Err.Clear()
                        GoTo GoTo_StartOver
                    End If
                    TimeStampAdd(ex, debugMode)
                Finally
                    Try
                        If Not pdfRead Is Nothing Then
                            pdfRead.Close()
                            pdfRead.Dispose()
                            pdfRead = Nothing
                        End If
                        'cPDF2Image.Dispose()
                        LoadImageGs_InUse = False
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                        TimeStampAdd(ex2, debugMode)
                        LoadImageGs_InUse = False
                    End Try
                End Try
            End Using
        End If
        ghostImageBytes = Nothing
        Return ghostImageBytes
    End Function

    Public Function A0_LoadImageGhostScript(ByVal pdfData() As Byte, Optional MakeFieldsVisible As Boolean = True) As Byte()
        Dim pdfRead As PdfReader = Nothing
        Dim startCount As Integer = 0
        Try
            If LoadImageGs_InUse Then
                If Not clsPreloadImagesThread Is Nothing Then
                    clsPreloadImagesThread.StopTimer()
                End If
            End If
            Dim cntr As Integer = 0
            Do While LoadImageGs_InUse
                If DoEvents_Wait(100) Then
                    cntr += 1
                    If cntr > 30 Then
                        LoadImageGs_InUse = False
                        Exit Do
                    End If
                End If
            Loop
        Catch exPreload As Exception
            TimeStampAdd(exPreload, debugMode) ' NK 2016-06-30 'NK DM
        End Try
        If Not LoadImageGs_InUse Then
            Using cPDF2Image As New PdfToImage.PDFConvert()
                Try

                    pdfRead = New PdfReader(pdfData, pdfOwnerPassword.toBytesPdfOwnerPassword)
GoTo_StartOver:
                    startCount += 1
                    cPDF2Image.OutputToMultipleFile = False
                    pdfRead.SelectPages(page.ToString)
                    page = 1
                    Try
                        If MakeFieldsVisible Then
                            If Not pdfRead.AcroFields Is Nothing Then
                                If Not pdfRead.AcroFields.Fields Is Nothing Then
                                    If pdfRead.AcroFields.Fields.Keys.Count > 0 Then
                                        pdfRead = A0_MakeFieldsVisible(pdfRead.Clone)
                                    End If
                                End If
                            End If
                        End If

                    Catch exKeys As Exception
                        TimeStampAdd(exKeys, debugMode)
                    End Try

                    cPDF2Image.FitPage = True
                    cPDF2Image.GraphicsAlphaBit = 4
                    cPDF2Image.TextAlphaBit = 4
                    cPDF2Image.DisableFontMap = False
                    cPDF2Image.DisablePlatformFonts = False
                    cPDF2Image.OutputFormat = "jpeg" '"png16m" '"jpeg" '"png16m" '"bmp16m" ' '"png16m" '"pngalpha" '"png256" '"jpeg"
                    cPDF2Image.ResolutionX = 300 '150 '72 'CSng(GetPDFWidth(pdfData)) + 0 '720
                    cPDF2Image.ResolutionY = 300 '150 '72 'CSng(GetPDFHeight(pdfData)) + 0 '720
                    cPDF2Image.RenderingThreads = 4
                    cPDF2Image.JPEGQuality = 100
                    cPDF2Image.UseMutex = False
                    Dim height As Integer = 0, width As Integer = 0
                    pdfRead.SelectPages(CStr(page.ToString()))
                    pdfData = getPDFBytes(pdfRead.Clone, False)
                    If height <= 0 And width > 0 Then
                        height = CInt((width / CSng(getPDFWidth(pdfData, 1))) * CSng(getPDFHeight(pdfData, 1)))
                    ElseIf height > 0 And width <= 0 Then
                        width = CInt((height / CSng(getPDFHeight(pdfData, 1))) * CSng(getPDFWidth(pdfData, 1)))
                    ElseIf height <= 0 And width <= 0 Then
                        width = CInt(getPDFWidth(pdfData, 1))
                        height = CInt(getPDFHeight(pdfData, 1)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    Else
                    End If
                    cPDF2Image.Width = width
                    cPDF2Image.Height = height
                    cPDF2Image.GhostScriptDLLDirectory = appPath
                    If Not pdfOwnerPassword.isNullOrEmpty() Then
                    End If
                    cPDF2Image.FirstPageToConvert = 1 '1 'page
                    cPDF2Image.LastPageToConvert = 1 '1 'page
                    Try
                        Dim cntr As Integer = 0
                        Do While LoadImageGs_InUse
                            If DoEvents_Wait(100) Then
                                cntr += 1
                                If cntr > 30 Then
                                    LoadImageGs_InUse = False
                                    Exit Do
                                End If
                            End If
                        Loop
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    LoadImageGs_InUse = True
                    ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                    Return ghostImageBytes
                Catch ex As Exception
                    If startCount <= 4 And ex.Message.ToString.ToLower = "The original document was reused. Read it again from file.".ToLower Then
                        pdfRead = New PdfReader(pdfData.ToArray, pdfOwnerPassword.toBytesPdfOwnerPassword)
                        Err.Clear()
                        GoTo GoTo_StartOver
                    End If
                    TimeStampAdd(ex, debugMode)
                Finally
                    Try
                        If Not pdfRead Is Nothing Then
                            pdfRead.Close()
                            pdfRead.Dispose()
                            pdfRead = Nothing
                        End If
                        'cPDF2Image.Dispose()
                        LoadImageGs_InUse = False
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                        TimeStampAdd(ex2, debugMode)
                        LoadImageGs_InUse = False
                    End Try
                End Try
            End Using
        End If
        ghostImageBytes = Nothing
        Return ghostImageBytes
    End Function



    Public Function A0_MakeFieldsVisible(ByRef pdfread As PdfReader)
        Dim rClone As PdfReader = pdfread.Clone
        Try
            If pdfread Is Nothing Then
                Return Nothing
            End If
            Dim m As New MemoryStream()
            pdfread = New PdfReader(getPDFBytes(pdfread, False), getBytes(pdfOwnerPassword))
            Dim stamp As PdfStamper = New PdfStamper(pdfread.Clone(), m)
            If Not pdfread.AcroForm Is Nothing Then
                If Not pdfread.AcroForm.Fields Is Nothing Then
                    For Each f As iTextSharp.text.pdf.PRAcroForm.FieldInformation In pdfread.AcroForm.Fields
                        Dim fld As iTextSharp.text.pdf.AcroFields.Item = pdfread.AcroFields.GetFieldItem(f.Name)
                        Dim flags As Integer = 0
                        If Not fld.GetMerged(0) Is Nothing Then
                            If Not fld.GetMerged(0).Get(PdfName.F) Is Nothing Then
                                If fld.GetMerged(0).Get(PdfName.F).IsNumber Then
                                    flags = fld.GetMerged(0).GetAsNumber(PdfName.F).IntValue
                                    If (flags And iTextSharp.text.pdf.PdfAnnotation.FLAGS_HIDDEN) > 0 Then
                                        flags -= iTextSharp.text.pdf.PdfAnnotation.FLAGS_HIDDEN
                                    ElseIf (flags And iTextSharp.text.pdf.PdfAnnotation.FLAGS_NOVIEW) > 0 Then
                                        flags -= iTextSharp.text.pdf.PdfAnnotation.FLAGS_NOVIEW
                                    ElseIf (flags And iTextSharp.text.pdf.PdfAnnotation.FLAGS_INVISIBLE) > 0 Then
                                        flags -= iTextSharp.text.pdf.PdfAnnotation.FLAGS_INVISIBLE
                                    End If
                                End If
                            End If
                            If Not (flags And iTextSharp.text.pdf.PdfAnnotation.FLAGS_PRINT) > 0 Then
                                flags += iTextSharp.text.pdf.PdfAnnotation.FLAGS_PRINT
                            End If
                            stamp.AcroFields.SetFieldProperty(f.Name, "flags", flags, Nothing)
                        End If
                    Next
                    stamp.Writer.CloseStream = False
                    stamp.Close()
                    stamp.Dispose()
                    pdfread = New PdfReader(m.ToArray, getBytes(pdfOwnerPassword))
                End If
            End If
        Catch ex As Exception
            pdfread = rClone
            TimeStampAdd(ex, debugMode)
        End Try
        Return pdfread.Clone
    End Function
    Public Function getMilliseconds(ByRef timeStart As DateTime, Optional ByVal updateTime As Boolean = False) As Integer
        Dim span As TimeSpan = DateTime.Now.ToLocalTime - timeStart.ToLocalTime
        If updateTime Then
            timeStart = DateTime.Now.ToLocalTime
        End If
        Return CInt(Math.Abs(span.TotalMilliseconds + 0) + 0)
    End Function
    Public Sub CopyToStream(ByRef image As Bitmap, ByRef outputStream As Stream, ByVal format As System.Drawing.Imaging.ImageFormat)
        Using stream As New MemoryStream()
            image.Save(stream, format)
            stream.WriteTo(outputStream)
        End Using
    End Sub
    Public Function A0_LoadImageMag(ByVal pdfData() As Byte, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        Return A0_LoadImageMagick(pdfData, page, width, height, MakeFieldsVisible)
    End Function
    Public Function A0_LoadImageMag(ByVal reader As PdfReader, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        Return A0_LoadImageMagick(reader, page, width, height, MakeFieldsVisible)
    End Function
    Public Function A0_LoadImageMag(ByVal pdfData() As Byte, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        Return A0_LoadImageMagick(pdfData, MakeFieldsVisible)
    End Function
    Public Function A0_LoadImageGs(ByVal pdfData() As Byte, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        Return A0_LoadImageGhostScript(pdfData, page, width, height, MakeFieldsVisible)
    End Function
    Public Function A0_LoadImageGs(ByVal reader As PdfReader, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        Return A0_LoadImageGhostScript(reader, page, width, height, MakeFieldsVisible)
    End Function
    Public Function A0_LoadImageGs(ByVal pdfData() As Byte, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        Return A0_LoadImageGhostScript(pdfData, MakeFieldsVisible)
    End Function
    Public Function A0_LoadImage(ByVal pdfData() As Byte, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        If imageProcessor <= 0 Then
            Return A0_LoadImageMagick(pdfData, page, width, height, MakeFieldsVisible)
        Else
            Return A0_LoadImageGhostScript(pdfData, page, width, height, MakeFieldsVisible)
        End If
    End Function
    Public Function A0_LoadImage(ByVal reader As PdfReader, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        If imageProcessor <= 0 Then
            Return A0_LoadImageMagick(reader, page, width, height, MakeFieldsVisible)
        Else
            Return A0_LoadImageGhostScript(reader, page, width, height, MakeFieldsVisible)
        End If
    End Function
    Public Function A0_LoadImage(ByVal pdfData() As Byte, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        If imageProcessor <= 0 Then
            Return A0_LoadImageMagick(pdfData, MakeFieldsVisible)
        Else
            Return A0_LoadImageGhostScript(pdfData, MakeFieldsVisible)
        End If
    End Function
    Public Function A0_LoadImageSub(ByVal pdfData() As Byte, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        ghostImageBytes = Nothing
        Dim worker As New System.Threading.Thread(New System.Threading.ThreadStart(Function() A0_LoadImageGhostScript(pdfData, page, width, height, MakeFieldsVisible)))
        worker.Start()
        Do Until (Not worker.ThreadState = 0)
            If cUserRect.pauseDraw Then Return Nothing
            Threading.Thread.Sleep(100)
        Loop
        If Not ghostImageBytes Is Nothing Then
            Try
                worker = Nothing
                Return ghostImageBytes.ToArray
            Catch ex As Exception
                Err.Clear()
            Finally
                ghostImageBytes = Nothing
            End Try
        End If
        Return Nothing
    End Function
    Public Function A0_LoadImageSub(ByVal reader As PdfReader, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        If cUserRect.pauseDraw Then Return Nothing
        ghostImageBytes = Nothing
        Dim worker As New System.Threading.Thread(New System.Threading.ThreadStart(Function() A0_LoadImageGhostScript(reader, page, width, height, MakeFieldsVisible)))
        worker.Start()
        Do Until (Not worker.ThreadState = 0)
            If cUserRect.pauseDraw Then Return Nothing
            Threading.Thread.Sleep(100)
        Loop
        If Not ghostImageBytes Is Nothing Then
            Try
                worker = Nothing
                Return ghostImageBytes.ToArray
            Catch ex As Exception
                Err.Clear()
            Finally
                ghostImageBytes = Nothing
            End Try
        End If
        Return Nothing
    End Function
    Public Function A0_LoadImageSub(ByVal pdfData() As Byte, Optional MakeFieldsVisible As Boolean = True) As Byte()
        'If cUserRect.pauseDraw Then Return
        'Dim worker As New System.Threading.Thread(New System.Threading.ThreadStart(Function() A0_LoadImageGhostScript(pdfData, MakeFieldsVisible)))
        'worker.Start()
        If cUserRect.pauseDraw Then Return Nothing
        ghostImageBytes = Nothing
        Dim worker As New System.Threading.Thread(New System.Threading.ThreadStart(Function() A0_LoadImageGhostScript(pdfData, page, Width, Height, MakeFieldsVisible)))
        worker.Start()
        Do Until (Not worker.ThreadState = 0)
            If cUserRect.pauseDraw Then Return Nothing
            Threading.Thread.Sleep(100)
        Loop
        If Not ghostImageBytes Is Nothing Then
            Try
                worker = Nothing
                Return ghostImageBytes.ToArray
            Catch ex As Exception
                Err.Clear()
            Finally
                ghostImageBytes = Nothing
            End Try
        End If
        Return Nothing
    End Function
    Public Function RotateImage(ByVal imageBytes() As Byte, ByVal rotation As Integer) As Byte()
        Try
            Dim bm As New Bitmap(New MemoryStream(imageBytes.ToArray()))
            Dim m As New MemoryStream
            Select Case rotation
                Case 0
                    Return imageBytes.ToArray
                Case 90
                    bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                    bm.Save(m, System.Drawing.Imaging.ImageFormat.Png)
                    bm.Dispose()
                    Return m.ToArray
                Case 180
                    bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                    bm.Save(m, System.Drawing.Imaging.ImageFormat.Png)
                    bm.Dispose()
                    Return m.ToArray
                Case 270
                    bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                    bm.Save(m, System.Drawing.Imaging.ImageFormat.Png)
                    bm.Dispose()
                    Return m.ToArray
                Case Else
                    Return imageBytes
            End Select
        Catch ex As Exception
            Return imageBytes
        End Try
    End Function
    Public ghostImageBytes() As Byte = Nothing

    Public Function A0_LoadImageMagick(ByVal pdfData() As Byte, ByVal pageNum As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        Dim pdfRead As PdfReader = Nothing
        Dim startCount As Integer = 0
        Try
            If LoadImageGs_InUse Then
                If Not clsPreloadImagesThread Is Nothing Then
                    clsPreloadImagesThread.StopTimer()
                End If
            End If
            Dim cntr As Integer = 0
            Do While LoadImageGs_InUse
                If DoEvents_Wait(100) Then
                    cntr += 1
                    If cntr > 30 Then
                        LoadImageGs_InUse = False
                        Exit Do
                    End If
                End If
            Loop
        Catch exPreload As Exception
            TimeStampAdd(exPreload, debugMode) ' NK 2016-06-30 'NK DM
        End Try
        If Not LoadImageGs_InUse Then
            Using cPDF2Image As New PdfToImage.PDFConvert()
                Try

                    pdfRead = New PdfReader(pdfData, pdfOwnerPassword.toBytesPdfOwnerPassword)
GoTo_StartOver:
                    startCount += 1
                    cPDF2Image.OutputToMultipleFile = False
                    pdfRead.SelectPages(pageNum.ToString)
                    'pageNum = 1
                    Try
                        If MakeFieldsVisible Then
                            If Not pdfRead.AcroFields Is Nothing Then
                                If Not pdfRead.AcroFields.Fields Is Nothing Then
                                    If pdfRead.AcroFields.Fields.Keys.Count > 0 Then
                                        pdfRead = A0_MakeFieldsVisible(pdfRead.Clone)
                                    End If
                                End If
                            End If
                        End If

                    Catch exKeys As Exception
                        TimeStampAdd(exKeys, debugMode)
                    End Try
                    Dim settings As New ImageMagick.MagickReadSettings()
                    '// Settings the density to 300 dpi will create an image with a better quality
                    settings.Density = New ImageMagick.Density(400)
                    'Dim height As Integer = 0, width As Integer = 0
                    pdfRead.SelectPages(CStr(1))
                    pdfData = getPDFBytes(pdfRead.Clone, False)
                    If height <= 0 And width > 0 Then
                        height = CInt((width / CSng(getPDFWidth(pdfData, 1))) * CSng(getPDFHeight(pdfData, 1)))
                    ElseIf height > 0 And width <= 0 Then
                        width = CInt((height / CSng(getPDFHeight(pdfData, 1))) * CSng(getPDFWidth(pdfData, 1)))
                    ElseIf height <= 0 And width <= 0 Then
                        width = CInt(getPDFWidth(pdfData, 1))
                        height = CInt(getPDFHeight(pdfData, 1)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    Else
                    End If

                    Using images As New ImageMagick.MagickImageCollection
                        'images.Read(fpath, settings)
                        images.Read(pdfData, settings)
                        Dim imgpage As Integer = 1
                        For Each image As ImageMagick.IMagickImage In images.ToArray
                            ''image.Write("Snakeware.Page" + page + ".png")
                            image.Format = ImageMagick.MagickFormat.Jpeg
                            ''image.Width = width
                            ''image.Height = height
                            ''Dim fnTemp As String = appPathTemp & Path.GetFileNameWithoutExtension(fpath) & page & ".jpg"
                            ''image.Write(fnTemp)
                            ''Process.Start(fnTemp)
                            ''imgpage = imgpage + 1
                            ''ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                            'Dim m As New MemoryStream()
                            'image.Write(m)
                            'ghostImageBytes = m.ToArray

                            'Return ghostImageBytes
                            Dim m As New MemoryStream()
                            image.Write(m)
                            ghostImageBytes = m.ToArray
                            Dim m2 As New MemoryStream()
                            clsPDFOptimization.ResizeBitmapMagick(System.Drawing.Bitmap.FromStream(m), System.Drawing.Imaging.ImageFormat.Jpeg, width, height, True).Save(m2, System.Drawing.Imaging.ImageFormat.Jpeg)
                            If m2.CanSeek Then
                                m2.Position = 0
                            End If
                            Return m2.ToArray
                        Next
                    End Using
                    'cPDF2Image.FitPage = True
                    'cPDF2Image.GraphicsAlphaBit = 4
                    'cPDF2Image.TextAlphaBit = 4
                    'cPDF2Image.DisableFontMap = False
                    'cPDF2Image.DisablePlatformFonts = False
                    'cPDF2Image.OutputFormat = "jpeg" '"png16m" '"jpeg" '"png16m" '"bmp16m" ' '"png16m" '"pngalpha" '"png256" '"jpeg"
                    'cPDF2Image.ResolutionX = 300 '150 '72 'CSng(GetPDFWidth(pdfData)) + 0 '720
                    'cPDF2Image.ResolutionY = 300 '150 '72 'CSng(GetPDFHeight(pdfData)) + 0 '720
                    'cPDF2Image.RenderingThreads = 4
                    'cPDF2Image.JPEGQuality = 100
                    'cPDF2Image.UseMutex = False
                    'Dim height As Integer = 0, width As Integer = 0
                    'pdfRead.SelectPages(CStr(page.ToString()))
                    'pdfData = getPDFBytes(pdfRead.Clone, False)
                    'If height <= 0 And width > 0 Then
                    '    height = CInt((width / CSng(getPDFWidth(pdfData, 1))) * CSng(getPDFHeight(pdfData, 1)))
                    'ElseIf height > 0 And width <= 0 Then
                    '    width = CInt((height / CSng(getPDFHeight(pdfData, 1))) * CSng(getPDFWidth(pdfData, 1)))
                    'ElseIf height <= 0 And width <= 0 Then
                    '    width = CInt(getPDFWidth(pdfData, 1))
                    '    height = CInt(getPDFHeight(pdfData, 1)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    'Else
                    'End If
                    'cPDF2Image.Width = width
                    'cPDF2Image.Height = height
                    'cPDF2Image.GhostScriptDLLDirectory = appPath
                    'If Not pdfOwnerPassword.isNullOrEmpty() Then
                    'End If
                    'cPDF2Image.FirstPageToConvert = 1 '1 'page
                    'cPDF2Image.LastPageToConvert = 1 '1 'page
                    'Try
                    '    Dim cntr As Integer = 0
                    '    Do While LoadImageGs_InUse
                    '        If DoEvents_Wait(100) Then
                    '            cntr += 1
                    '            If cntr > 30 Then
                    '                LoadImageGs_InUse = False
                    '                Exit Do
                    '            End If
                    '        End If
                    '    Loop
                    'Catch ex As Exception
                    '    TimeStampAdd(ex, debugMode)
                    'End Try
                    'LoadImageGs_InUse = True
                    'ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                    'Return ghostImageBytes
                Catch ex As Exception
                    If startCount <= 4 And ex.Message.ToString.ToLower = "The original document was reused. Read it again from file.".ToLower Then
                        pdfRead = New PdfReader(pdfData.ToArray, pdfOwnerPassword.toBytesPdfOwnerPassword)
                        Err.Clear()
                        GoTo GoTo_StartOver
                    End If
                    TimeStampAdd(ex, debugMode)
                Finally
                    Try
                        If Not pdfRead Is Nothing Then
                            pdfRead.Close()
                            pdfRead.Dispose()
                            pdfRead = Nothing
                        End If
                        'cPDF2Image.Dispose()
                        LoadImageGs_InUse = False
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                        TimeStampAdd(ex2, debugMode)
                        LoadImageGs_InUse = False
                    End Try
                End Try
            End Using
        End If
        ghostImageBytes = Nothing
        Return ghostImageBytes
    End Function
    Public Function A0_LoadImageGhostScript(ByVal pdfData() As Byte, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        Dim pdfRead As PdfReader = Nothing
        Dim startCount As Integer = 0
        Try
            If LoadImageGs_InUse Then
                If Not clsPreloadImagesThread Is Nothing Then
                    clsPreloadImagesThread.StopTimer()
                End If
            End If
            Do While LoadImageGs_InUse
                DoEvents_Wait(100)
            Loop
        Catch exPreload As Exception
            TimeStampAdd(exPreload, debugMode)
        End Try
        If Not LoadImageGs_InUse Then
            Using cPDF2Image As New PdfToImage.PDFConvert()
                Try
                    pdfRead = New PdfReader(pdfData, getBytes(pdfOwnerPassword))
GoTo_StartOver:
                    startCount += 1
                    cPDF2Image.OutputToMultipleFile = False
                    pdfRead.SelectPages(page.ToString)
                    page = 1
                    Try
                        If MakeFieldsVisible Then
                            If Not pdfRead.AcroFields Is Nothing Then
                                If Not pdfRead.AcroFields.Fields Is Nothing Then
                                    If pdfRead.AcroFields.Fields.Keys.Count > 0 Then
                                        pdfRead = A0_MakeFieldsVisible(pdfRead.Clone)
                                    End If
                                End If
                            End If
                        End If
                    Catch exKeys As Exception
                        TimeStampAdd(exKeys, debugMode)
                    End Try
                    pdfData = getPDFBytes(pdfRead.Clone, False)
                    cPDF2Image.FitPage = True
                    cPDF2Image.GraphicsAlphaBit = 4
                    cPDF2Image.TextAlphaBit = 4
                    cPDF2Image.DisableFontMap = False
                    cPDF2Image.DisablePlatformFonts = False
                    cPDF2Image.OutputFormat = "jpeg" '"png16m" '"jpeg" '"png16m" '"bmp16m" ' '"png16m" '"pngalpha" '"png256" '"jpeg"
                    cPDF2Image.ResolutionX = 300
                    cPDF2Image.ResolutionY = 300
                    cPDF2Image.RenderingThreads = 4
                    cPDF2Image.JPEGQuality = 100
                    cPDF2Image.UseMutex = False
                    If height <= 0 And width > 0 Then
                        height = CInt((width / CSng(getPDFWidth(pdfData, 1))) * CSng(getPDFHeight(pdfData, 1)))
                    ElseIf height > 0 And width <= 0 Then
                        width = CInt((height / CSng(getPDFHeight(pdfData, 1))) * CSng(getPDFWidth(pdfData, 1)))
                    ElseIf height <= 0 And width <= 0 Then
                        width = CInt(getPDFWidth(pdfData, 1))
                        height = CInt(getPDFHeight(pdfData, 1))
                    Else
                    End If
                    cPDF2Image.Width = width
                    cPDF2Image.Height = height
                    cPDF2Image.GhostScriptDLLDirectory = appPath
                    If Not String.IsNullOrEmpty(pdfOwnerPassword & "") Then
                    End If
                    cPDF2Image.FirstPageToConvert = page
                    cPDF2Image.LastPageToConvert = page
                    Try
                        Do While LoadImageGs_InUse
                        Loop
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    LoadImageGs_InUse = True
                    ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                    Return ghostImageBytes
                Catch ex As Exception
                    If startCount <= 4 And ex.Message.ToString.ToLower = "The original document was reused. Read it again from file.".ToLower Then
                        pdfRead = New PdfReader(pdfData.ToArray, getBytes(pdfOwnerPassword & ""))
                        Err.Clear()
                        GoTo GoTo_StartOver
                    End If
                    TimeStampAdd(ex, debugMode)
                Finally
                    Try
                        If Not pdfRead Is Nothing Then
                            pdfRead.Close()
                            pdfRead.Dispose()
                            pdfRead = Nothing
                        End If
                        cPDF2Image.Dispose()
                        LoadImageGs_InUse = False
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                        TimeStampAdd(ex2, debugMode)
                        LoadImageGs_InUse = False
                    End Try
                End Try
            End Using
        End If
        ghostImageBytes = Nothing
        Return ghostImageBytes
    End Function
    Public Function A0_LoadImageGhostScript(ByVal pdfRead As PdfReader, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        Dim pdfReadTemp As PdfReader = Nothing
        Dim startCount As Integer = 0
        Try
            If LoadImageGs_InUse Then
                If Not clsPreloadImagesThread Is Nothing Then
                    clsPreloadImagesThread.StopTimer()
                End If
            End If
            Dim cntr As Integer = 0
            Do While LoadImageGs_InUse
                If DoEvents_Wait(100) Then
                    cntr += 1
                    If cntr > 30 Then
                        LoadImageGs_InUse = False
                        Exit Do
                    End If
                End If
            Loop
        Catch exPreload As Exception
            TimeStampAdd(exPreload, debugMode) ' NK 2016-06-30 'NK DM
        End Try

        If pdfRead Is Nothing Then
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            pdfReadTemp = pdfReaderDoc.Clone
        Else
            pdfReadTemp = pdfRead.Clone()
        End If
        If Not LoadImageGs_InUse Then
            Using cPDF2Image As New PdfToImage.PDFConvert()
                Try
GoTo_StartOver:
                    startCount += 1
                    cPDF2Image.OutputToMultipleFile = False

                    pdfReadTemp.SelectPages(page.ToString)
                    page = 1
                    Try
                        If MakeFieldsVisible Then
                            If Not pdfReadTemp.AcroFields Is Nothing Then
                                If Not pdfReadTemp.AcroFields.Fields Is Nothing Then
                                    If pdfReadTemp.AcroFields.Fields.Keys.Count > 0 Then
                                        pdfReadTemp = A0_MakeFieldsVisible(pdfReadTemp.Clone)
                                    End If
                                End If
                            End If
                        End If
                    Catch exKeys As Exception
                        TimeStampAdd(exKeys, debugMode)
                    End Try
                    cPDF2Image.FitPage = True
                    cPDF2Image.GraphicsAlphaBit = 4
                    cPDF2Image.TextAlphaBit = 4
                    cPDF2Image.DisableFontMap = False
                    cPDF2Image.DisablePlatformFonts = False
                    cPDF2Image.OutputFormat = "png16m" '"png16m" '"jpeg" '"png16m" '"bmp16m" ' '"png16m" '"pngalpha" '"png256" '"jpeg"
                    cPDF2Image.ResolutionX = 150 '300'150 '72 'CSng(GetPDFWidth(pdfData)) + 0 '720
                    cPDF2Image.ResolutionY = 150 '300 '150 '72 'CSng(GetPDFHeight(pdfData)) + 0 '720
                    cPDF2Image.RenderingThreads = 4
                    cPDF2Image.JPEGQuality = 100
                    cPDF2Image.UseMutex = False
                    If height <= 0 And width > 0 Then
                        height = CInt((width / CSng(getPDFWidth(pdfReadTemp, page))) * CSng(getPDFHeight(pdfReadTemp, page)))
                    ElseIf height > 0 And width <= 0 Then
                        width = CInt((height / CSng(getPDFHeight(pdfReadTemp, page))) * CSng(getPDFWidth(pdfReadTemp, page)))
                    ElseIf height <= 0 And width <= 0 Then
                        width = CInt(getPDFWidth(pdfReadTemp, page))
                        height = CInt(getPDFHeight(pdfReadTemp, page)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    Else
                    End If
                    cPDF2Image.Width = width
                    cPDF2Image.Height = height
                    cPDF2Image.GhostScriptDLLDirectory = appPath
                    If Not pdfOwnerPassword.IsNullOrEmpty() Then
                    End If
                    cPDF2Image.FirstPageToConvert = page '1 'page
                    cPDF2Image.LastPageToConvert = page '1 'page
                    Try
                        Dim cntr As Integer = 0
                        Do While LoadImageGs_InUse
                            If DoEvents_Wait(100) Then
                                cntr += 1
                                If cntr > 30 Then
                                    LoadImageGs_InUse = False
                                    Exit Do
                                End If
                            End If
                        Loop
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    LoadImageGs_InUse = True
                    ghostImageBytes = cPDF2Image.ConvertToBytes(getPDFBytes(pdfReadTemp.Clone, False), "pdf", ".jpg", ApplicationDataFolder(False, ""))
                Catch ex As Exception
                    If startCount <= 4 And ex.Message.ToString.ToLower = "The original document was reused. Read it again from file.".ToLower Then
                        pdfReadTemp = New PdfReader(getPDFBytes(pdfReadTemp.Clone), pdfOwnerPassword.toBytesPdfOwnerPassword)
                        Err.Clear()
                        GoTo GoTo_StartOver
                    End If
                    TimeStampAdd(ex, debugMode)
                Finally
                    Try
                        'cPDF2Image.Dispose()
                        LoadImageGs_InUse = False
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                        TimeStampAdd(ex2, debugMode)
                        LoadImageGs_InUse = False
                    End Try
                End Try
            End Using
        End If
        ghostImageBytes = Nothing
        Return ghostImageBytes

    End Function
    Public Function A0_LoadImageMagick(ByVal pdfRead As PdfReader, ByVal pageNum As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        Dim pdfReadTemp As PdfReader = Nothing
        Dim PDFData() As Byte = getPDFBytes(pdfRead.Clone, False)
        Dim startCount As Integer = 0
        Try
            If LoadImageGs_InUse Then
                If Not clsPreloadImagesThread Is Nothing Then
                    clsPreloadImagesThread.StopTimer()
                End If
            End If
            Dim cntr As Integer = 0
            Do While LoadImageGs_InUse
                If DoEvents_Wait(100) Then
                    cntr += 1
                    If cntr > 30 Then
                        LoadImageGs_InUse = False
                        Exit Do
                    End If
                End If
            Loop
        Catch exPreload As Exception
            TimeStampAdd(exPreload, debugMode) ' NK 2016-06-30 'NK DM
        End Try
        If Not LoadImageGs_InUse Then
            Using cPDF2Image As New PdfToImage.PDFConvert()
                Try

                    'PDFData = getPDFBytes(pdfRead, False)
                    pdfReadTemp = New PdfReader(PDFData)
GoTo_StartOver:
                    startCount += 1
                    cPDF2Image.OutputToMultipleFile = False
                    pdfReadTemp.SelectPages(pageNum.ToString)
                    'pageNum = 1
                    Try
                        If MakeFieldsVisible Then
                            If Not pdfReadTemp.AcroFields Is Nothing Then
                                If Not pdfReadTemp.AcroFields.Fields Is Nothing Then
                                    If pdfReadTemp.AcroFields.Fields.Keys.Count > 0 Then
                                        pdfReadTemp = A0_MakeFieldsVisible(pdfReadTemp.Clone)
                                    End If
                                End If
                            End If
                        End If

                    Catch exKeys As Exception
                        TimeStampAdd(exKeys, debugMode)
                    End Try
                    Dim settings As New ImageMagick.MagickReadSettings()
                    '// Settings the density to 300 dpi will create an image with a better quality
                    settings.Density = New ImageMagick.Density(400)
                    'Dim height As Integer = 0, width As Integer = 0
                    pdfReadTemp.SelectPages(CStr(1))
                    PDFData = getPDFBytes(pdfReadTemp.Clone, False)
                    If height <= 0 And width > 0 Then
                        height = CInt((width / CSng(getPDFWidth(PDFData, 1))) * CSng(getPDFHeight(PDFData, 1)))
                    ElseIf height > 0 And width <= 0 Then
                        width = CInt((height / CSng(getPDFHeight(PDFData, 1))) * CSng(getPDFWidth(PDFData, 1)))
                    ElseIf height <= 0 And width <= 0 Then
                        width = CInt(getPDFWidth(PDFData, 1))
                        height = CInt(getPDFHeight(PDFData, 1)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    Else
                    End If

                    Using images As New ImageMagick.MagickImageCollection
                        'images.Read(fpath, settings)
                        images.Read(PDFData, settings)
                        Dim imgpage As Integer = 1
                        For Each image As ImageMagick.IMagickImage In images.ToArray
                            ''image.Write("Snakeware.Page" + page + ".png")
                            image.Format = ImageMagick.MagickFormat.Jpeg
                            ''image.Width = width
                            ''image.Height = height
                            ''Dim fnTemp As String = appPathTemp & Path.GetFileNameWithoutExtension(fpath) & page & ".jpg"
                            ''image.Write(fnTemp)
                            ''Process.Start(fnTemp)
                            ''imgpage = imgpage + 1
                            ''ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                            'Dim m As New MemoryStream()
                            'image.Write(m)
                            'ghostImageBytes = m.ToArray
                            'Return ghostImageBytes
                            Dim m As New MemoryStream()
                            image.Write(m)
                            ghostImageBytes = m.ToArray
                            Dim m2 As New MemoryStream()
                            clsPDFOptimization.ResizeBitmapMagick(System.Drawing.Bitmap.FromStream(m), System.Drawing.Imaging.ImageFormat.Jpeg, width, height, True).Save(m2, System.Drawing.Imaging.ImageFormat.Jpeg)
                            If m2.CanSeek Then
                                m2.Position = 0
                            End If
                            Return m2.ToArray
                        Next
                    End Using
                    'cPDF2Image.FitPage = True
                    'cPDF2Image.GraphicsAlphaBit = 4
                    'cPDF2Image.TextAlphaBit = 4
                    'cPDF2Image.DisableFontMap = False
                    'cPDF2Image.DisablePlatformFonts = False
                    'cPDF2Image.OutputFormat = "jpeg" '"png16m" '"jpeg" '"png16m" '"bmp16m" ' '"png16m" '"pngalpha" '"png256" '"jpeg"
                    'cPDF2Image.ResolutionX = 300 '150 '72 'CSng(GetPDFWidth(pdfData)) + 0 '720
                    'cPDF2Image.ResolutionY = 300 '150 '72 'CSng(GetPDFHeight(pdfData)) + 0 '720
                    'cPDF2Image.RenderingThreads = 4
                    'cPDF2Image.JPEGQuality = 100
                    'cPDF2Image.UseMutex = False
                    'Dim height As Integer = 0, width As Integer = 0
                    'pdfReadTemp.SelectPages(CStr(page.ToString()))
                    'pdfData = getPDFBytes(pdfReadTemp.Clone, False)
                    'If height <= 0 And width > 0 Then
                    '    height = CInt((width / CSng(getPDFWidth(pdfData, 1))) * CSng(getPDFHeight(pdfData, 1)))
                    'ElseIf height > 0 And width <= 0 Then
                    '    width = CInt((height / CSng(getPDFHeight(pdfData, 1))) * CSng(getPDFWidth(pdfData, 1)))
                    'ElseIf height <= 0 And width <= 0 Then
                    '    width = CInt(getPDFWidth(pdfData, 1))
                    '    height = CInt(getPDFHeight(pdfData, 1)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    'Else
                    'End If
                    'cPDF2Image.Width = width
                    'cPDF2Image.Height = height
                    'cPDF2Image.GhostScriptDLLDirectory = appPath
                    'If Not pdfOwnerPassword.isNullOrEmpty() Then
                    'End If
                    'cPDF2Image.FirstPageToConvert = 1 '1 'page
                    'cPDF2Image.LastPageToConvert = 1 '1 'page
                    'Try
                    '    Dim cntr As Integer = 0
                    '    Do While LoadImageGs_InUse
                    '        If DoEvents_Wait(100) Then
                    '            cntr += 1
                    '            If cntr > 30 Then
                    '                LoadImageGs_InUse = False
                    '                Exit Do
                    '            End If
                    '        End If
                    '    Loop
                    'Catch ex As Exception
                    '    TimeStampAdd(ex, debugMode)
                    'End Try
                    'LoadImageGs_InUse = True
                    'ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                    'Return ghostImageBytes
                Catch ex As Exception
                    If startCount <= 4 And ex.Message.ToString.ToLower = "The original document was reused. Read it again from file.".ToLower Then
                        pdfReadTemp = New PdfReader(PDFData.ToArray, pdfOwnerPassword.toBytesPdfOwnerPassword)
                        Err.Clear()
                        GoTo GoTo_StartOver
                    End If
                    TimeStampAdd(ex, debugMode)
                Finally
                    Try
                        If Not pdfReadTemp Is Nothing Then
                            pdfReadTemp.Close()
                            pdfReadTemp.Dispose()
                            pdfReadTemp = Nothing
                        End If
                        'cPDF2Image.Dispose()
                        LoadImageGs_InUse = False
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                        TimeStampAdd(ex2, debugMode)
                        LoadImageGs_InUse = False
                    End Try
                End Try
            End Using
        End If
        ghostImageBytes = Nothing
        Return ghostImageBytes

    End Function
    Public Function A0_LoadImageGhostScript(ByVal pdfData() As Byte, strPdfOwnerPassword As String, ByVal page As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        Dim pdfRead As PdfReader = Nothing
        Dim startCount As Integer = 0
        Try
            If LoadImageGs_InUse Then
                If Not clsPreloadImagesThread Is Nothing Then
                    clsPreloadImagesThread.StopTimer()
                End If
            End If
            Dim cntr As Integer = 0
            Do While LoadImageGs_InUse
                If DoEvents_Wait(100) Then
                    cntr += 1
                    If cntr > 30 Then
                        LoadImageGs_InUse = False
                        Exit Do
                    End If
                End If
            Loop
        Catch exPreload As Exception
            TimeStampAdd(exPreload, debugMode) ' NK 2016-06-30 'NK DM
        End Try
        If Not LoadImageGs_InUse Then
            Using cPDF2Image As New PdfToImage.PDFConvert()
                Try
                    pdfRead = New PdfReader(pdfData, getBytes(strPdfOwnerPassword))
GoTo_StartOver:
                    startCount += 1
                    cPDF2Image.OutputToMultipleFile = False
                    pdfRead.SelectPages(page.ToString)
                    page = 1
                    Try
                        If MakeFieldsVisible Then
                            If Not pdfRead.AcroFields Is Nothing Then
                                If Not pdfRead.AcroFields.Fields Is Nothing Then
                                    If pdfRead.AcroFields.Fields.Keys.Count > 0 Then
                                        pdfRead = A0_MakeFieldsVisible(pdfRead.Clone)
                                    End If
                                End If
                            End If
                        End If

                    Catch exKeys As Exception
                        TimeStampAdd(exKeys, debugMode)
                    End Try
                    Dim perc As Single = getPercent(pdfRead, page)
                    pdfData = getPDFBytes(pdfRead.Clone, False)
                    cPDF2Image.FitPage = True
                    cPDF2Image.GraphicsAlphaBit = 4
                    cPDF2Image.TextAlphaBit = 4
                    cPDF2Image.DisableFontMap = False
                    cPDF2Image.DisablePlatformFonts = False
                    cPDF2Image.OutputFormat = "jpeg" '"png16m" '"jpeg" '"png16m" '"bmp16m" ' '"png16m" '"pngalpha" '"png256" '"jpeg"
                    cPDF2Image.ResolutionX = 300 '150 '72 'CSng(GetPDFWidth(pdfData)) + 0 '720
                    cPDF2Image.ResolutionY = 300 '150 '72 'CSng(GetPDFHeight(pdfData)) + 0 '720
                    cPDF2Image.RenderingThreads = 4
                    cPDF2Image.JPEGQuality = 100
                    cPDF2Image.UseMutex = False
                    If height <= 0 And width > 0 Then
                        height = CInt((width / CSng(getPDFWidth(pdfData, 1))) * CSng(getPDFHeight(pdfData, 1)))
                    ElseIf height > 0 And width <= 0 Then
                        width = CInt((height / CSng(getPDFHeight(pdfData, 1))) * CSng(getPDFWidth(pdfData, 1)))
                    ElseIf height <= 0 And width <= 0 Then
                        width = CInt(getPDFWidth(pdfData, 1))
                        height = CInt(getPDFHeight(pdfData, 1)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    Else
                    End If
                    cPDF2Image.Width = width
                    cPDF2Image.Height = height
                    cPDF2Image.GhostScriptDLLDirectory = appPath
                    If Not pdfOwnerPassword.IsNullOrEmpty() Then
                    End If
                    cPDF2Image.FirstPageToConvert = page ' 1 'page
                    cPDF2Image.LastPageToConvert = page '1 'page
                    Try
                        Dim cntr As Integer = 0
                        Do While LoadImageGs_InUse
                            If DoEvents_Wait(100) Then
                                cntr += 1
                                If cntr > 30 Then
                                    LoadImageGs_InUse = False
                                    Exit Do
                                End If
                            End If
                        Loop
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    LoadImageGs_InUse = True
                    Return cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                Catch ex As Exception
                    If startCount <= 4 And ex.Message.ToString.ToLower = "The original document was reused. Read it again from file.".ToLower Then
                        pdfRead = New PdfReader(pdfData.ToArray, pdfOwnerPassword.toBytesPdfOwnerPassword)
                        Err.Clear()
                        GoTo GoTo_StartOver
                    End If
                    TimeStampAdd(ex, debugMode)
                Finally
                    Try
                        If Not pdfRead Is Nothing Then
                            pdfRead.Close()
                            pdfRead.Dispose()
                            pdfRead = Nothing
                        End If
                        cPDF2Image.Dispose()
                        LoadImageGs_InUse = False
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                        TimeStampAdd(ex2, debugMode)
                        LoadImageGs_InUse = False
                    End Try
                End Try
            End Using
        End If
        Return Nothing
    End Function
    Public Function A0_LoadImageMagick(ByVal pdfData() As Byte, strPdfOwnerPassword As String, ByVal pageNum As Integer, ByVal width As Integer, ByVal height As Integer, Optional MakeFieldsVisible As Boolean = True) As Byte()
        Dim pdfRead As PdfReader = Nothing
        Dim startCount As Integer = 0
        Try
            If LoadImageGs_InUse Then
                If Not clsPreloadImagesThread Is Nothing Then
                    clsPreloadImagesThread.StopTimer()
                End If
            End If
            Dim cntr As Integer = 0
            Do While LoadImageGs_InUse
                If DoEvents_Wait(100) Then
                    cntr += 1
                    If cntr > 30 Then
                        LoadImageGs_InUse = False
                        Exit Do
                    End If
                End If
            Loop
        Catch exPreload As Exception
            TimeStampAdd(exPreload, debugMode) ' NK 2016-06-30 'NK DM
        End Try
        If Not LoadImageGs_InUse Then
            Using cPDF2Image As New PdfToImage.PDFConvert()
                Try

                    pdfRead = New PdfReader(pdfData, strPdfOwnerPassword.toBytesPdfOwnerPassword)
GoTo_StartOver:
                    startCount += 1
                    cPDF2Image.OutputToMultipleFile = False
                    pdfRead.SelectPages(pageNum.ToString)
                    'pageNum = 1
                    Try
                        If MakeFieldsVisible Then
                            If Not pdfRead.AcroFields Is Nothing Then
                                If Not pdfRead.AcroFields.Fields Is Nothing Then
                                    If pdfRead.AcroFields.Fields.Keys.Count > 0 Then
                                        pdfRead = A0_MakeFieldsVisible(pdfRead.Clone)
                                    End If
                                End If
                            End If
                        End If

                    Catch exKeys As Exception
                        TimeStampAdd(exKeys, debugMode)
                    End Try
                    Dim settings As New ImageMagick.MagickReadSettings()
                    '// Settings the density to 300 dpi will create an image with a better quality
                    settings.Density = New ImageMagick.Density(400)
                    'Dim height As Integer = 0, width As Integer = 0
                    pdfRead.SelectPages(CStr(1))
                    pdfData = getPDFBytes(pdfRead.Clone, False)
                    If height <= 0 And width > 0 Then
                        height = CInt((width / CSng(getPDFWidth(pdfData, 1))) * CSng(getPDFHeight(pdfData, 1)))
                    ElseIf height > 0 And width <= 0 Then
                        width = CInt((height / CSng(getPDFHeight(pdfData, 1))) * CSng(getPDFWidth(pdfData, 1)))
                    ElseIf height <= 0 And width <= 0 Then
                        width = CInt(getPDFWidth(pdfData, 1))
                        height = CInt(getPDFHeight(pdfData, 1)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    Else
                    End If

                    Using images As New ImageMagick.MagickImageCollection
                        'images.Read(fpath, settings)
                        images.Read(pdfData, settings)
                        Dim imgpage As Integer = 1
                        For Each image As ImageMagick.IMagickImage In images.ToArray
                            'image.Write("Snakeware.Page" + page + ".png")
                            image.Format = ImageMagick.MagickFormat.Jpeg
                            ''image.Width = width
                            ''image.Height = height
                            ''Dim fnTemp As String = appPathTemp & Path.GetFileNameWithoutExtension(fpath) & page & ".jpg"
                            ''image.Write(fnTemp)
                            ''Process.Start(fnTemp)
                            ''imgpage = imgpage + 1
                            ''ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                            'Dim m As New MemoryStream()
                            'image.Write(m)
                            'ghostImageBytes = m.ToArray
                            'Return ghostImageBytes
                            Dim m As New MemoryStream()
                            image.Write(m)
                            ghostImageBytes = m.ToArray
                            Dim m2 As New MemoryStream()
                            clsPDFOptimization.ResizeBitmapMagick(System.Drawing.Bitmap.FromStream(m), System.Drawing.Imaging.ImageFormat.Jpeg, width, height, True).Save(m2, System.Drawing.Imaging.ImageFormat.Jpeg)
                            If m2.CanSeek Then
                                m2.Position = 0
                            End If
                            Return m2.ToArray
                        Next
                    End Using
                    'cPDF2Image.FitPage = True
                    'cPDF2Image.GraphicsAlphaBit = 4
                    'cPDF2Image.TextAlphaBit = 4
                    'cPDF2Image.DisableFontMap = False
                    'cPDF2Image.DisablePlatformFonts = False
                    'cPDF2Image.OutputFormat = "jpeg" '"png16m" '"jpeg" '"png16m" '"bmp16m" ' '"png16m" '"pngalpha" '"png256" '"jpeg"
                    'cPDF2Image.ResolutionX = 300 '150 '72 'CSng(GetPDFWidth(pdfData)) + 0 '720
                    'cPDF2Image.ResolutionY = 300 '150 '72 'CSng(GetPDFHeight(pdfData)) + 0 '720
                    'cPDF2Image.RenderingThreads = 4
                    'cPDF2Image.JPEGQuality = 100
                    'cPDF2Image.UseMutex = False
                    'Dim height As Integer = 0, width As Integer = 0
                    'pdfRead.SelectPages(CStr(page.ToString()))
                    'pdfData = getPDFBytes(pdfRead.Clone, False)
                    'If height <= 0 And width > 0 Then
                    '    height = CInt((width / CSng(getPDFWidth(pdfData, 1))) * CSng(getPDFHeight(pdfData, 1)))
                    'ElseIf height > 0 And width <= 0 Then
                    '    width = CInt((height / CSng(getPDFHeight(pdfData, 1))) * CSng(getPDFWidth(pdfData, 1)))
                    'ElseIf height <= 0 And width <= 0 Then
                    '    width = CInt(getPDFWidth(pdfData, 1))
                    '    height = CInt(getPDFHeight(pdfData, 1)) '(width / CSng(GetPDFWidth(pdfData, page))) * CSng(GetPDFHeight(pdfData, page)))
                    'Else
                    'End If
                    'cPDF2Image.Width = width
                    'cPDF2Image.Height = height
                    'cPDF2Image.GhostScriptDLLDirectory = appPath
                    'If Not pdfOwnerPassword.isNullOrEmpty() Then
                    'End If
                    'cPDF2Image.FirstPageToConvert = 1 '1 'page
                    'cPDF2Image.LastPageToConvert = 1 '1 'page
                    'Try
                    '    Dim cntr As Integer = 0
                    '    Do While LoadImageGs_InUse
                    '        If DoEvents_Wait(100) Then
                    '            cntr += 1
                    '            If cntr > 30 Then
                    '                LoadImageGs_InUse = False
                    '                Exit Do
                    '            End If
                    '        End If
                    '    Loop
                    'Catch ex As Exception
                    '    TimeStampAdd(ex, debugMode)
                    'End Try
                    'LoadImageGs_InUse = True
                    'ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, "pdf", ".jpg", ApplicationDataFolder(False, "temp"))
                    'Return ghostImageBytes
                Catch ex As Exception
                    If startCount <= 4 And ex.Message.ToString.ToLower = "The original document was reused. Read it again from file.".ToLower Then
                        pdfRead = New PdfReader(pdfData.ToArray, pdfOwnerPassword.toBytesPdfOwnerPassword)
                        Err.Clear()
                        GoTo GoTo_StartOver
                    End If
                    TimeStampAdd(ex, debugMode)
                Finally
                    Try
                        If Not pdfRead Is Nothing Then
                            pdfRead.Close()
                            pdfRead.Dispose()
                            pdfRead = Nothing
                        End If
                        'cPDF2Image.Dispose()
                        LoadImageGs_InUse = False
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                        TimeStampAdd(ex2, debugMode)
                        LoadImageGs_InUse = False
                    End Try
                End Try
            End Using
        End If
        ghostImageBytes = Nothing
        Return ghostImageBytes
    End Function
    Public Function LoadFileGhostScript(ByVal pdfData() As Byte, ByVal inputFormatExtension As String) As Byte()
        Try
            Dim x As String = ApplicationDataFolder(False, "temp") & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 8) & "\" 'Server.MapPath("/SubmitPDF/editPDF/")
            If Not Directory.Exists(x) Then
                Directory.CreateDirectory(x)
            End If
            Dim tmpname As String = Path.GetRandomFileName & ".pdf"
            Dim tmpImg As String = Path.GetRandomFileName & ".bmp"
            Dim cPDF2Image As New PdfToImage.PDFConvert()
            cPDF2Image.OutputToMultipleFile = False
            cPDF2Image.FirstPageToConvert = 1 'CInt(page)
            cPDF2Image.LastPageToConvert = 1 'CInt(page)
            cPDF2Image.FitPage = True
            cPDF2Image.JPEGQuality = 100
            cPDF2Image.GraphicsAlphaBit = 4
            cPDF2Image.TextAlphaBit = 4
            cPDF2Image.OutputFormat = "png16m" '"bmp16m" ' '"png16m" '"pngalpha" '"png256" '"jpeg"
            cPDF2Image.ResolutionX = 720
            cPDF2Image.ResolutionY = 720
            cPDF2Image.GhostScriptDLLDirectory = appPath
            ghostImageBytes = cPDF2Image.ConvertToBytes(pdfData, inputFormatExtension, ".png", x)
            pdfData = ghostImageBytes
            Try
            Catch ex As Exception
            End Try
            Try
                Return pdfData 'File.ReadAllBytes(x & tmpImg)
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)  ' Throw ex
            Finally
                Try
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            End Try
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function getPercentPageNumber(ByVal pageNumber As Integer) As Single
        If isSessionNull() Then Return 1.0F
        Dim tmpPercent As Single = Nothing
        If Not tmpPercent = Nothing Then
            Return tmpPercent
        Else
            If Not Session Is Nothing Then
                If isSessionNull() Then Return 1.0F
            Else
                Return 1.0F
            End If
            Dim h As Single = CSng(pdfReaderDoc.GetPageSizeWithRotation(CInt(pageNumber)).Height) + 0
            Dim w As Single = CSng(pdfReaderDoc.GetPageSizeWithRotation(CInt(pageNumber)).Width) + 0
            Dim rH As Single = h / w
            Dim rW As Single = w / h
            Dim picWidth As Single = PictureBox1_Panel.Width - 17
            Dim picHeight As Single = PictureBox1_Panel.Height + 0
            Try
                If Me.cmbPercent.SelectedIndex >= 0 Then
                    Select Case Me.cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "").ToLower
                        Case "Fit Width".ToLower()
                            tmpPercent = CSng(picWidth / w)
                        Case "Fit Height".ToLower()
                            tmpPercent = CSng(picHeight / h)
                        Case "Actual Size".ToLower()
                            tmpPercent = 1.0F
                        Case "fit page".ToLower()
                            If h > w Then
                                tmpPercent = CSng(picWidth / w)
                                If tmpPercent > CSng(picHeight / h) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            Else
                                tmpPercent = CSng(picHeight / h)
                                If tmpPercent > CSng(picWidth / w) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            End If
                        Case "fit visible".ToLower()
                            If h > w Then
                                tmpPercent = CSng(picWidth / w)
                                If tmpPercent > CSng(picHeight / h) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            Else
                                tmpPercent = CSng(picHeight / h)
                                If tmpPercent > CSng(picWidth / w) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            End If
                        Case Else
                            If IsNumeric(cmbPercent.Text.ToString.Replace("%", "")) Then
                                tmpPercent = CSng(CSng(cmbPercent.Text.ToString.Replace("%", "")) / 100)
                            ElseIf IsNumeric(cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "")) Then
                                tmpPercent = CSng(CSng(cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "")) / 100)
                            Else
                                cmbPercent.Text = "100%"
                                tmpPercent = 1.0F
                            End If
                    End Select
                Else
                    If IsNumeric(cmbPercent.Text.ToString.Replace("%", "")) Then
                        tmpPercent = CSng(CSng(cmbPercent.Text.ToString.Replace("%", "")) / 100)
                    Else
                        cmbPercent.Text = "100%"
                        tmpPercent = 1.0F
                    End If
                End If
            Catch ex As Exception
                cmbPercent.Text = "100%"
                tmpPercent = 1.0F
                TimeStampAdd(ex, debugMode)
            End Try
            Return tmpPercent
        End If
    End Function
    Public Function getPercentPageNumber(ByVal pageNumber As Integer, ByVal cmbPercent1SelectedIndex As Integer, ByVal cmbPercent1SelectedText As String, ByVal cmbPercent1Text As String) As Single
        If isSessionNull() Then Return 1.0F
        Dim tmpPercent As Single = Nothing
        If Not tmpPercent = Nothing Then
            Return tmpPercent
        Else
            If Not Session Is Nothing Then
                If isSessionNull() Then Return 1.0F
            Else
                Return 1.0F
            End If
            Dim h As Single = CSng(pdfReaderDoc.GetPageSizeWithRotation(CInt(pageNumber)).Height) + 0
            Dim w As Single = CSng(pdfReaderDoc.GetPageSizeWithRotation(CInt(pageNumber)).Width) + 0
            Dim rH As Single = h / w
            Dim rW As Single = w / h
            Dim picWidth As Single = PictureBox1_Panel.Width - 17
            Dim picHeight As Single = PictureBox1_Panel.Height + 0
            Try
                If cmbPercent1SelectedIndex >= 0 Then
                    Select Case cmbPercent1SelectedText.ToString.Replace("%", "").ToLower
                        Case "Fit Width".ToLower()
                            tmpPercent = CSng(picWidth / w)
                        Case "Fit Height".ToLower()
                            tmpPercent = CSng(picHeight / h)
                        Case "Actual Size".ToLower()
                            tmpPercent = 1.0F
                        Case "fit page".ToLower()
                            If h > w Then
                                tmpPercent = CSng(picWidth / w)
                                If tmpPercent > CSng(picHeight / h) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            Else
                                tmpPercent = CSng(picHeight / h)
                                If tmpPercent > CSng(picWidth / w) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            End If
                        Case "fit visible".ToLower()
                            If h > w Then
                                tmpPercent = CSng(picWidth / w)
                                If tmpPercent > CSng(picHeight / h) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            Else
                                tmpPercent = CSng(picHeight / h)
                                If tmpPercent > CSng(picWidth / w) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            End If
                        Case Else
                            If IsNumeric(cmbPercent1SelectedText.ToString.Replace("%", "")) Then
                                tmpPercent = CSng(CSng(cmbPercent1SelectedText.ToString.Replace("%", "")) / 100)
                            Else
                                cmbPercent.Text = "100%"
                                tmpPercent = 1.0F
                            End If
                    End Select
                Else
                    If IsNumeric(cmbPercent1Text.ToString.Replace("%", "")) Then
                        tmpPercent = CSng(CSng(cmbPercent1Text.ToString.Replace("%", "")) / 100)
                    Else
                        cmbPercent.Text = "100%"
                        tmpPercent = 1.0F
                    End If
                End If
            Catch ex As Exception
                cmbPercent.Text = "100%"
                tmpPercent = 1.0F
                TimeStampAdd(ex, debugMode)
            End Try
            Return tmpPercent
        End If
    End Function
    Public Property Session(Optional ByVal name As String = "output", Optional ByVal cmbPercent1SelectedIndex As Integer = 0, Optional ByVal cmbPercent1SelectedText As String = "", Optional ByVal cmbPercent1Text As String = "") As Byte()
        Get
            Try
                If Not mem Is Nothing Then
                    If mem.Count <= 0 And Not name = "saved" Then
                        Return Nothing
                    End If
                Else
                    mem = New Dictionary(Of String, Byte())
                    mem.Add(name, Nothing)
                    Return Nothing
                End If
                If String.IsNullOrEmpty(name & "") Then
                    name = "output"
                End If
                memName = name
                Try
                    If name.ToLower = "output" Then
                        Try
                            'Dim x As Process = System.Diagnostics.Process.GetCurrentProcess()
                            'ToolStripStatusLabel3.Text = "MEMORY: " & getMegaBytesText(CSng(x.WorkingSet64)) & ""
                            If Not mem(name) Is Nothing Then
                                ToolStripStatusLabel4.Text = "FILE SIZE: " & getMegaBytesText(CSng(mem(name).Length)) & ""
                            Else
                                ToolStripStatusLabel4.Text = "FILE SIZE: " & "?"
                            End If
                        Catch exMem As Exception
                            TimeStampAdd(exMem, debugMode)
                            Err.Clear()
                        End Try
                        If mem.ContainsKey(memName) Then
                            If mem(memName) Is Nothing Then
                                Return Nothing
                            ElseIf mem(memName).Length <= 0 Then
                                Return Nothing
                            Else
                                If A0_PictureBox1.Image Is Nothing Then
                                Else
                                    If Not A0_PictureBox1.Visible Then A0_PictureBox1.Visible = True
                                End If
                                If mem.ContainsKey(memName) Then
                                    If Not mem(memName) Is Nothing Then Return (mem(memName))
                                End If
                            End If
                        Else
                            If A0_PictureBox1.Image Is Nothing Then
                            Else
                                If Not A0_PictureBox1.Visible Then A0_PictureBox1.Visible = True
                            End If
                        End If
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
                If memName.StartsWith("image_cache_history_") Then
                    Try
                        If String.IsNullOrEmpty(fpath & "") Then Return Nothing
                        memName &= "-" & cmbPercent1SelectedIndex & "-" & cmbPercent1SelectedText & "-" & Me.Width.ToString() & "-" & Me.Height().ToString() & ""
                    Catch exImgCache As Exception
                        TimeStampAdd(exImgCache, debugMode)
                    End Try
                ElseIf memName.StartsWith("image_undo_history_") Then
                ElseIf memName.ToLower = ("saved") Then
                End If
                If mem.ContainsKey(memName) Then
                    If Not mem(memName) Is Nothing Then Return (mem(memName))
                End If
                Return Nothing
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Return Nothing
            End Try
        End Get
        Set(ByVal value As Byte())
            If String.IsNullOrEmpty(name & "") Then
                name = "output"
            End If
            If name.StartsWith("image_cache_history_") Then
                If String.IsNullOrEmpty(fpath & "") Then Return
                Dim pgNum As Integer = CInt(CStr(name.ToString.Replace("image_cache_history_", "")))
                Dim fn1 As String = Path.GetFileNameWithoutExtension(fpath & "") & "-" & CStr(FormatNumber(CDbl(getPercentPageNumber(pgNum, cmbPercent1SelectedIndex, cmbPercent1SelectedText, cmbPercent1Text)), 2)).ToString.Replace(".", "_")
                name &= "-" & cmbPercent1SelectedIndex & "-" & cmbPercent1SelectedText & "-" & Me.Width.ToString() & "-" & Me.Height().ToString() & ""
            ElseIf name.StartsWith("image_undo_history_") Then
            ElseIf name.ToLower = ("saved") Then
            End If
            If Not mem Is Nothing Then
                If Not mem.ContainsKey(name) Then
                    If Not value Is Nothing Then
                        mem.Add(name, (value))
                        If name.ToLower = "output".ToLower And Not cUserRect.pauseDraw Then
                        End If
                    End If
                    Return
                ElseIf mem.ContainsKey(name) Then
                    If value Is Nothing Then
                        mem.Remove(name)
                    ElseIf value.Length = 0 Then
                        mem.Remove(name)
                    ElseIf name.ToString.ToLower = "output" Then
                        If Not bytesMatch(mem(name), value) Then
                            mem(name) = (value)
                            If name.ToLower = "output".ToLower And Not cUserRect.pauseDraw Then
                            End If
                            Return
                        End If
                    Else
                        mem(name) = (value)
                    End If
                End If
            End If
            Try
                If name.ToLower = "output" Then
                    If mem.ContainsKey(name) Then
                        If mem(name) Is Nothing Then
                        ElseIf mem(name).Length <= 0 Then
                        Else
                            If A0_PictureBox1.Image Is Nothing Then
                            Else
                                If Not A0_PictureBox1.Visible Then A0_PictureBox1.Visible = True
                                A0_PictureBox2.Visible = True
                            End If
                        End If
                    Else
                        If A0_PictureBox1.Image Is Nothing Then
                        Else
                            If Not A0_PictureBox1.Visible Then A0_PictureBox1.Visible = True
                            A0_PictureBox2.Visible = True
                        End If
                    End If
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End Set
    End Property
    Private Sub loadColors()
        dicColors.Clear()
        dicColors.Add("Black", BLACK)
        dicColors.Add("White", WHITE)
        dicColors.Add("Light Gray", LIGHT_GRAY)
        dicColors.Add("Gray", GRAY)
        dicColors.Add("Dark Gray", DARK_GRAY)
        dicColors.Add("Red", RED)
        dicColors.Add("Pink", PINK)
        dicColors.Add("Orange", ORANGE)
        dicColors.Add("Yellow", YELLOW)
        dicColors.Add("Green", GREEN)
        dicColors.Add("Magenta", MAGENTA)
        dicColors.Add("Cyan", CYAN)
        dicColors.Add("Blue", BLUE)
        dicColors.Add("Transparent", Transparent)
        Dim colorBlue As Integer
        Dim colorGreen As Integer
        Dim colorRed As Integer
        Dim iMyCustomColor As Integer
        ReDim iMyCustomColors(dicColors.Count - 2)
        For index As Integer = 0 To dicColors.Count - 2
            colorBlue = dicColors(dicColors.Keys(index)).B
            colorGreen = dicColors(dicColors.Keys(index)).G
            colorRed = dicColors(dicColors.Keys(index)).R
            iMyCustomColor = colorBlue << 16 Or colorGreen << 8 Or colorRed
            iMyCustomColors(index) = iMyCustomColor
        Next
    End Sub
    Private Sub LoadColorList(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
        For Each dicColor As String In dicColors.Keys
            ddl.Items.Add(dicColor)
        Next
    End Sub
    Private Sub loadFieldTypes()
        dicFieldTypes.Clear()
        dicFieldTypes.Add("TEXT".ToString, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT)
        dicFieldTypes.Add("PUSHBUTTON".ToString, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON)
        dicFieldTypes.Add("RADIOBUTTON".ToString, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON)
        dicFieldTypes.Add("CHECKBOX".ToString, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX)
        dicFieldTypes.Add("COMBO".ToString, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO)
        dicFieldTypes.Add("LIST".ToString, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST)
        dicFieldTypes.Add("SIGNATURE".ToString, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE)
        dicFieldTypes.Add("NONE".ToString, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE)
    End Sub
    Private Sub LoadFieldTypeList(ByRef ddl As System.Windows.Forms.ComboBox)
        loadFieldTypes()
        ddl.Items.Clear()
        For Each dicFieldType As String In dicFieldTypes.Keys
            ddl.Items.Add(dicFieldType)
        Next
    End Sub
    Public Sub LoadOrientationList(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
        ddl.Items.Add("0")
        ddl.Items.Add("90")
        ddl.Items.Add("180")
        ddl.Items.Add("270")
        ddl.Items.Add("360")
    End Sub
    Public Sub LoadCheckTypesList(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
        ddl.Items.Add("CHECK")
        ddl.Items.Add("CIRCLE")
        ddl.Items.Add("CROSS")
        ddl.Items.Add("DIAMOND")
        ddl.Items.Add("SQUARE")
        ddl.Items.Add("STAR")
    End Sub
    Public Sub LoadFormatCurrencyDropDowns(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
        ddl.Items.Add("None")
        ddl.Items.Add("Dollar ($)")
        ddl.Items.Add("Deutshmark ( DM)")
        ddl.Items.Add("Euro (€)")
        ddl.Items.Add("Guilder (fl)")
        ddl.Items.Add("Franc ( F)")
        ddl.Items.Add("Krona ( kr)")
        ddl.Items.Add("Lira (L. )")
        ddl.Items.Add("Peseta ( Pts.)")
        ddl.Items.Add("Pound (£)")
        ddl.Items.Add("Yen (¥)")
        ddl.Items.Add("Custom")
    End Sub
    Public Sub LoadPageSize_Units(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
        ddl.Items.Add("Pixels")
        ddl.Items.Add("Points")
        ddl.Items.Add("Millimeters")
        ddl.Items.Add("Inches")
        ddl.Items.Add("Custom")
    End Sub
    Public Sub LoadPageSize_PredefinedSizes(ByRef ddl As System.Windows.Forms.ComboBox, Optional ByVal CustomPageSize As iTextSharp.text.Rectangle = Nothing)
        pageSizes = New Dictionary(Of String, iTextSharp.text.Rectangle)
        pageSizes.Add("CUSTOM", DirectCast(IIf(CustomPageSize Is Nothing, iTextSharp.text.PageSize.LETTER, CustomPageSize), iTextSharp.text.Rectangle))
        pageSizes.Add("LETTER", iTextSharp.text.PageSize.LETTER)
        pageSizes.Add("LEGAL", iTextSharp.text.PageSize.LEGAL)
        pageSizes.Add("_11x17", iTextSharp.text.PageSize._11X17)
        pageSizes.Add("POSTCARD", iTextSharp.text.PageSize.POSTCARD)
        pageSizes.Add("NOTE", iTextSharp.text.PageSize.NOTE)
        pageSizes.Add("TABLOID", iTextSharp.text.PageSize.TABLOID)
        pageSizes.Add("PENGUIN_LARGE_PAPERBACK", iTextSharp.text.PageSize.PENGUIN_LARGE_PAPERBACK)
        pageSizes.Add("PENGUIN_SMALL_PAPERBACK", iTextSharp.text.PageSize.PENGUIN_SMALL_PAPERBACK)
        pageSizes.Add("ROYAL_OCTAVO", iTextSharp.text.PageSize.ROYAL_OCTAVO)
        pageSizes.Add("ROYAL_QUARTO", iTextSharp.text.PageSize.ROYAL_QUARTO)
        pageSizes.Add("A0", iTextSharp.text.PageSize.A0)
        pageSizes.Add("A1", iTextSharp.text.PageSize.A1)
        pageSizes.Add("A2", iTextSharp.text.PageSize.A2)
        pageSizes.Add("A3", iTextSharp.text.PageSize.A3)
        pageSizes.Add("A4", iTextSharp.text.PageSize.A4)
        pageSizes.Add("A5", iTextSharp.text.PageSize.A5)
        pageSizes.Add("A6", iTextSharp.text.PageSize.A6)
        pageSizes.Add("A7", iTextSharp.text.PageSize.A7)
        pageSizes.Add("A8", iTextSharp.text.PageSize.A8)
        pageSizes.Add("A9", iTextSharp.text.PageSize.A9)
        pageSizes.Add("A10", iTextSharp.text.PageSize.A10)
        pageSizes.Add("B0", iTextSharp.text.PageSize.B0)
        pageSizes.Add("B1", iTextSharp.text.PageSize.B1)
        pageSizes.Add("B2", iTextSharp.text.PageSize.B2)
        pageSizes.Add("B3", iTextSharp.text.PageSize.B3)
        pageSizes.Add("B4", iTextSharp.text.PageSize.B4)
        pageSizes.Add("B5", iTextSharp.text.PageSize.B5)
        pageSizes.Add("B6", iTextSharp.text.PageSize.B6)
        pageSizes.Add("B7", iTextSharp.text.PageSize.B7)
        pageSizes.Add("B8", iTextSharp.text.PageSize.B8)
        pageSizes.Add("B9", iTextSharp.text.PageSize.B9)
        pageSizes.Add("B10", iTextSharp.text.PageSize.B10)
        ddl.Items.Clear()
        For Each k As String In pageSizes.Keys.ToArray()
            ddl.Items.Add(k.ToString().Replace("_", " ").Trim())
        Next
        ddl.SelectedIndex = 0
    End Sub
    Public Sub Load_PageSizePanel(Optional ByVal CustomSizeRectangle As iTextSharp.text.Rectangle = Nothing, Optional ByVal margin_l As Integer = 0, Optional ByVal margin_r As Integer = 0, Optional ByVal margin_t As Integer = 0, Optional ByVal margin_b As Integer = 0)
        Try
            _pnlPageSizeAspectRatioPause = True
            pnlPageSize_MaintainAspectRatio.Checked = False
            pnlPageSize_Width.Text = "0"
            pnlPageSize_Height.Text = "0"
            pnlPageSize_MarginBottom.Text = margin_b.ToString & ""
            pnlPageSize_MarginTop.Text = margin_t.ToString & ""
            pnlPageSize_MarginLeft.Text = margin_l.ToString & ""
            pnlPageSize_MarginRight.Text = margin_r.ToString & ""
            LoadPageSize_PredefinedSizes(pnlPageSize_CmbPageSize, CustomSizeRectangle)
            pnlPageSize_CmbPageSize.SelectedIndex = 0
            LoadPageSize_Units(pnlPageSize_WidthUnit)
            pnlPageSize_WidthUnit.SelectedIndex = 0
            LoadPageSize_Units(pnlPageSize_HeightUnit)
            pnlPageSize_HeightUnit.SelectedIndex = 0
            LoadPageSize_Units(pnlPageSize_MarginBottomUnit)
            pnlPageSize_MarginBottomUnit.SelectedIndex = 0
            LoadPageSize_Units(pnlPageSize_MarginLeftUnit)
            pnlPageSize_MarginLeftUnit.SelectedIndex = 0
            LoadPageSize_Units(pnlPageSize_MarginRightUnit)
            pnlPageSize_MarginRightUnit.SelectedIndex = 0
            LoadPageSize_Units(pnlPageSize_MarginTopUnit)
            pnlPageSize_MarginTopUnit.SelectedIndex = 0
            pnlPageSize_CmbOrientation.SelectedIndex = 0
            pnlPageSize_MirrorMarginHorizontal.Checked = False
            pnlPageSize_MirrorMarginVertical.Checked = False
            pnlPageSize.Hide()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            _pnlPageSizeAspectRatioPause = False
        End Try
    End Sub
    Public Sub Load_DropDowns()
        loadColors()
        CopyBytesToolStripMenuItem.Visible = False
        CopyFileToolStripMenuItem.Visible = False
        pnlPageSize_MaintainAspectRatio.Checked = False
        Load_PageSizePanel()
        LoadTextAlign(PDFField_TextAlign)
        LoadBorderStyle(PDFField_BorderStyle)
        LoadPageList(Me.btnPage)
        LoadFieldTypeList(Me.btnDataFieldTypeSelection)
        LoadBorderWidth(PDFField_BorderWidth)
        LoadVisibility(PDFField_Visibility)
        LoadCheckTypesList(RadioButton_FieldCheckType)
        LoadOrientationList(PDFField_Orientation)
        PDFField_TextAlign.SelectedIndex = 0
        PDFField_BorderStyle.SelectedIndex = 0
        PDFField_Visibility.SelectedIndex = 0
        PDFField_BorderWidth.SelectedIndex = 0
        PDFField_Action_Panel_SubmitForm_Format.SelectedIndex = 0
        LoadFormatCurrencyDropDowns(PDFField_Format_Number_CurrencySymbol)
        LoadFontsList(Me.PDFField_FontFamily, True)
        LoadFontSizeList(Me.PDFField_FontSize)
        LoadPercentCombo(Me.cmbPercent)
        Me.cmbPercent.SelectedItem = "Actual Size"
        InitializeFieldNames()
        If String.IsNullOrEmpty(GetSetting("PDFormsNet", "settings", "maxshow", "")) Then
            SaveSetting("PDFormsNet", "settings", "maxshow", "-1")
        End If
        CmbHistoryMaxShow_ToolStripComboBox1.SelectedIndex = CInt(GetSetting("PDFormsNet", "settings", "maxshow", "-1")) + 0
        loadToolStripMenu_OpenHistoryList()
        Try
            UseIntellegentCaching_Thumnails_ToolStripMenuItem.Checked = CBool(GetSetting("PDFormsNet", "settings", "IntellegentCache-Thumbnails", "False"))
        Catch ex As Exception
            UseIntellegentCaching_Thumnails_ToolStripMenuItem.Checked = True
            TimeStampAdd(ex, debugMode)
        End Try
        Try
        Catch ex As Exception
            ThumbnailsToolStripMenuItem.Checked = False
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub LoadPercentCombo(ByRef cmb As System.Windows.Forms.ComboBox)
        Try
            cmb.Items.Clear()
            cmb.Items.Add("Actual Size")
            cmb.Items.Add("Fit Page")
            cmb.Items.Add("Fit Width")
            cmb.Items.Add("Fit Height")
            cmb.Items.Add("10%")
            cmb.Items.Add("25%")
            For i As Integer = 50 To 200 Step 25
                cmb.Items.Add(String.Format("{0}%", i))
            Next
            cmb.Items.Add("400%")
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub LoadVisibilityListItems(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
        ddl.Items.Add("visible")
        ddl.Items.Add("hidden")
        ddl.Items.Add("VISIBLE_BUT_DOES_NOT_PRINT")
        ddl.Items.Add("HIDDEN_BUT_PRINTABLE")
    End Sub
    Private Sub LoadVisibility(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
        ddl.Items.Add("visible")
        ddl.Items.Add("hidden")
        ddl.Items.Add("visible (no print)")
        ddl.Items.Add("hidden (printable)")
    End Sub
    Private Sub LoadBorderWidth(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
        ddl.Items.Add("thin")
        ddl.Items.Add("medium")
        ddl.Items.Add("thick")
    End Sub
    Private Sub LoadBorderStyle(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
        ddl.Items.Add("solid")
        ddl.Items.Add("dashed")
        ddl.Items.Add("beveled")
        ddl.Items.Add("inset")
        ddl.Items.Add("underline")
    End Sub
    Private Sub LoadTextAlign(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
        ddl.Items.Add("left")
        ddl.Items.Add("center")
        ddl.Items.Add("right")
    End Sub
    Private Sub LoadLinksList(ByRef ddl As System.Windows.Forms.ComboBox)
        ddl.Items.Clear()
    End Sub
    Public Sub LoadPageList(ByRef ddl As System.Windows.Forms.ComboBox, ByVal cfdf As FDFApp.FDFDoc_Class)
        Try
            Dim pdfFn As String = ""
            If pdfReaderDoc Is Nothing Then
                LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            ElseIf pdfReaderDoc.FileLength <= 0 Then
                LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            End If
            If pdfReaderDoc Is Nothing Then Return
            Dim numPages As Integer = pdfReaderDoc.NumberOfPages + 0
            _pdfH = pdfReaderDoc.GetPageSizeWithRotation(1).Height
            _pdfW = pdfReaderDoc.GetPageSizeWithRotation(1).Width
            Me.lblDim.Text = _pdfW & " x " & _pdfH
            ddl.Items.Clear()
            For idx As Integer = 1 To numPages Step 1
                ddl.Items.Add("page #" & idx)
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub LoadPageList(ByRef ddl As System.Windows.Forms.ComboBox, ByVal pdfReader1 As PdfReader)
        Try
            Dim pdfFn As String = ""
            Dim numPages As Integer = pdfReader1.NumberOfPages + 0
            ddl.Items.Clear()
            For idx As Integer = 1 To numPages Step 1
                ddl.Items.Add("page #" & idx)
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function isSessionNull() As Boolean
        Try
            If Not Session Is Nothing Then
                If Session.Length <= 0 Then
                    Return True
                End If
            Else
                Return True
            End If
        Catch ex As Exception
            Return True
            Err.Clear()
        End Try
        Return False
    End Function
    Public Sub LoadPageList(ByRef ddl As System.Windows.Forms.ComboBox)
        Try
            If isSessionNull() Then Return
            Dim pdfFn As String = ""
            If pdfReaderDoc Is Nothing Then
                LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            End If
            If pdfReaderDoc Is Nothing Then
                Return
            End If
            Dim numPages As Integer = pdfReaderDoc.NumberOfPages + 0
            _pdfH = pdfReaderDoc.GetPageSizeWithRotation(1).Height
            _pdfW = pdfReaderDoc.GetPageSizeWithRotation(1).Width
            Me.lblDim.Text = _pdfW & " x " & _pdfH
            ddl.Items.Clear()
            For idx As Integer = 1 To numPages Step 1
                ddl.Items.Add("page #" & idx)
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function bytesMatch(ByVal b1() As Byte, ByVal b2() As Byte) As Boolean
        Try
            If b1 Is Nothing And Not b2 Is Nothing Then
                Return False
            ElseIf Not b1 Is Nothing And b2 Is Nothing Then
                Return False
            ElseIf b1 Is Nothing And b2 Is Nothing Then
                Return True
            ElseIf b1.Length = 0 And b2.Length = 0 Then
                Return True
            ElseIf b1.Length <= 0 Or b2.Length <= 0 Then
                Return False
            ElseIf b1.ToArray Is b2.ToArray Then
                Return False
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not b1.Length = b2.Length Then
                Return False
            Else
                For i As Integer = 0 To b1.Length - 1
                    If b1(i) <> b2(i) Then
                        Return False
                    End If
                Next
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return True
    End Function
    Public Function A0_LoadPDF(Optional ByVal updateImage As Boolean = True, Optional ByVal forceNew As Boolean = True, Optional ByVal updatePictureBox As Boolean = True, Optional ByVal pgNo As Integer = -1, Optional ByVal drawFieldPositions As Boolean = True) As Boolean
        Dim ignoreClickTemp As Boolean = ignoreClick
        Try
            If isSessionNull() Then Return False
            'If pdfReaderDoc Is Nothing Then
            'LoadPDFReaderDoc(pdfOwnerPassword, True)
            'End If
            If Not pdfReaderDoc Is Nothing Then
                If forceNew Then
                    If Not Session Is Nothing Then
                        If Session.Length > 0 Then
                            LoadPDFReaderDoc(pdfOwnerPassword & "", forceNew)
                        Else
                            Throw New Exception("A0_LoadPDF - Session is null")
                        End If
                    Else
                        Throw New Exception("A0_LoadPDF - Session is null")
                    End If
                End If
            Else
                If Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        LoadPDFReaderDoc(pdfOwnerPassword & "", forceNew)
                        fldRectangles = getFieldRectangles(False)
                        LoadPageList(Me.btnPage)
                    Else
                        Throw New Exception("A0_LoadPDF - Session is null")
                    End If
                Else
                    Throw New Exception("A0_LoadPDF - Session is null")
                End If
            End If
            'TimeStampAdd("A0_LoadPDF-session.lengthA:" & Session.Length.ToString())
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            LoadPDFReaderDoc(pdfOwnerPassword & "", forceNew)
        End Try
        Try
            If Not pgNo = Nothing Then
                If pgNo < 1 Or pgNo > btnPage.Items.Count Then
                    pgNo = CInt(page)
                End If
            End If
            If pgNo < 1 Then
                pgNo = 1
            End If
            Dim m As New MemoryStream
            Dim pdfBytes() As Byte = Nothing
            Dim blnSaveCache As Boolean = True
            If updateImage Then 'Or cUserRect.pauseDraw = False 
                If Not Session("output") Is Nothing Then
                    If Session.Length <= 0 Then Return False
                    pdfBytes = Session.ToArray
                    'TimeStampAdd("A0_LoadPDF-session.length:B:" & Session.Length.ToString())
                    Dim imgCache() As Byte = Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text)
                    Try
                        If Not forceNew Or imgCache Is Nothing Then
                            ''TimeStampAdd("A0_LoadPDF-imgCache.length:B:1:" & imgCache.Length.ToString())
                            'Try
                            '    If imgCache Is Nothing And Not Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text) Is Nothing Then 'Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text)
                            '        'TimeStampAdd("A0_LoadPDF-imgCache.length:B:1:A:" & imgCache.Length.ToString())
                            '        imgCache = Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text)
                            '        'TimeStampAdd("A0_LoadPDF-imgCache.length:B:1:B:" & imgCache.Length.ToString())
                            '        blnSaveCache = False
                            '    End If
                            'Catch ex As Exception
                            '    TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                            'End Try
                            'TimeStampAdd("A0_LoadPDF-session.length:B:2:" & Session.Length.ToString())
                            Try
                                If forceNew Or imgCache Is Nothing Then
                                    ''TimeStampAdd("A0_LoadPDF-imgCache.length:B:2:A:" & imgCache.Length.ToString())
                                    imgCache = A0_LoadImageSub(Session, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * CSng(getPercent(pgNo, True))), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * CSng(getPercent(pgNo, True))))
                                    'TimeStampAdd("A0_LoadPDF-imgCache.length:B:2:B:" & imgCache.Length.ToString())
                                    Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text) = imgCache
                                    'TimeStampAdd("A0_LoadPDF-imgCache.length:B:2:C:" & imgCache.Length.ToString())
                                Else
                                    If imgCache.Length <= 0 Then
                                        imgCache = A0_LoadImageSub(pdfReaderDoc, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * CSng(getPercent(pgNo, True))), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * CSng(getPercent(pgNo, True))))
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                            End Try
                            'TimeStampAdd("A0_LoadPDF-session.length:B:3:" & Session.Length.ToString())
                            Try
                                'TimeStampAdd("A0_LoadPDF-imgCache.length:B:3:A:" & imgCache.Length.ToString())
                                m = New MemoryStream(imgCache)
                                'TimeStampAdd("A0_LoadPDF-imgCache.length:B:3:B:" & imgCache.Length.ToString())
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                            End Try
                        Else
                            'TimeStampAdd("A0_LoadPDF-imgCache.length:B:4:" & imgCache.Length.ToString())
                            Try
                                m = New MemoryStream(A0_LoadImageSub(pdfReaderDoc, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * CSng(getPercent(pgNo, True))), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * CSng(getPercent(pgNo, True)))))
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                            End Try
                            'TimeStampAdd("A0_LoadPDF-m.length:B:4:A:" & m.Length.ToString())
                        End If
                    Catch exImageCache As Exception
                        'TimeStampAdd("A0_LoadPDF-session.length:B:4:" & Session.Length.ToString())
                        m = New MemoryStream(A0_LoadImageSub(pdfReaderDoc, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * CSng(getPercent(pgNo, True))), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * CSng(getPercent(pgNo, True)))))
                        TimeStampAdd(exImageCache, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                        'TimeStampAdd("A0_LoadPDF-session.length:B:5:" & Session.Length.ToString())
                    Finally

                    End Try
                    'TimeStampAdd("A0_LoadPDF-session.length:C:" & Session.Length.ToString())
                    Try
                        If m.CanSeek Then
                            m.Seek(0, SeekOrigin.Begin)
                        End If
                        If updatePictureBox Then
                            Dim img As System.Drawing.Image = System.Drawing.Image.FromStream(m) 'IIf(getPercent ( pgNo , true ) >= 1, System.Drawing.Image.FromStream(m), clsPdfSizeReduction.imageQuality(m, InterpolationMode.HighQualityBicubic, CompositingQuality.HighQuality, SmoothingMode.AntiAlias)) 'IIf(getPercent ( pgNo , true ) > 0, clsPdfSizeReduction.imageQuality(m, InterpolationMode.High, CompositingQuality.HighQuality, SmoothingMode.AntiAlias), clsPdfSizeReduction.imageQuality(m, InterpolationMode.HighQualityBicubic, CompositingQuality.HighQuality, SmoothingMode.AntiAlias))
                            If Not cUserRect.pauseDraw Then A0_PictureBox1.Image = DirectCast(img.Clone(), System.Drawing.Image) 'clsPdfSizeReduction.imageQuality(m, InterpolationMode.High, CompositingQuality.AssumeLinear, SmoothingMode.AntiAlias)
                            If Not A0_PictureBox1.Visible Then A0_PictureBox1.Visible = True
                            A0_PictureBox2.Visible = True
                        End If
                        A0_PictureBox1.Width = CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * getPercent(pgNo, True)) 'img.Width
                        A0_PictureBox1.Height = CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * getPercent(pgNo, True)) 'img.Height
                    Catch exImageCache As Exception
                        TimeStampAdd(exImageCache, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                    End Try
                    'TimeStampAdd("A0_LoadPDF-session.length:D:" & Session.Length.ToString())
                    If cLinks Is Nothing Then
                        cLinks = New clsLinks(pdfReaderDoc, Me)
                    ElseIf cLinks.Links.Count <= 0 Then
                        cLinks = New clsLinks(pdfReaderDoc, Me)
                        cLinks.LoadLinksOnPage(CInt(pageIndex))
                    End If
                ElseIf Not Session(_sid) Is Nothing Then
                    'TimeStampAdd("A0_LoadPDF-session.length:F:" & Session.Length.ToString())
                    pdfBytes = cFDFDoc.PDFMergeFDF2Buf(cFDFDoc.FDFGetFile, False, "")
                    Dim imgCache() As Byte = Nothing
                    Try
                        If Not forceNew Then
                            If Not Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text) Is Nothing Then
                                imgCache = Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text)
                                blnSaveCache = False
                            End If
                            If forceNew Or imgCache Is Nothing Then
                                imgCache = A0_LoadImageSub(pdfBytes, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * getPercent(pgNo, True)), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * getPercent(pgNo, True)))
                            Else
                                If imgCache.Length <= 0 Then
                                    imgCache = A0_LoadImageSub(pdfBytes, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * getPercent(pgNo, True)), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * getPercent(pgNo, True)))
                                End If
                            End If
                            m = New MemoryStream(imgCache)
                        Else
                            m = New MemoryStream(A0_LoadImageSub(pdfBytes, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * getPercent(pgNo, True)), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * getPercent(pgNo, True))))
                        End If
                    Catch exImageCache As Exception
                        m = New MemoryStream(A0_LoadImageSub(pdfBytes, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * getPercent(pgNo, True)), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * getPercent(pgNo, True))))
                        TimeStampAdd(exImageCache, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                    Finally
                    End Try
                    If m.CanSeek Then
                        m.Seek(0, SeekOrigin.Begin)
                    End If
                    If updatePictureBox Then
                        Dim img As System.Drawing.Image = System.Drawing.Image.FromStream(m) 'IIf(getPercent ( pgNo , true ) >= 1, System.Drawing.Image.FromStream(m), clsPdfSizeReduction.imageQuality(m, InterpolationMode.HighQualityBicubic, CompositingQuality.HighQuality, SmoothingMode.AntiAlias)) 'IIf(getPercent ( pgNo , true ) > 0, clsPdfSizeReduction.imageQuality(m, InterpolationMode.High, CompositingQuality.HighQuality, SmoothingMode.AntiAlias), clsPdfSizeReduction.imageQuality(m, InterpolationMode.HighQualityBicubic, CompositingQuality.HighQuality, SmoothingMode.AntiAlias))
                        If Not cUserRect.pauseDraw Then A0_PictureBox1.Image = DirectCast(img.Clone(), System.Drawing.Image) 'clsPdfSizeReduction.imageQuality(m, InterpolationMode.High, CompositingQuality.AssumeLinear, SmoothingMode.AntiAlias)
                        A0_PictureBox1.Width = img.Width
                        A0_PictureBox1.Height = img.Height
                        If Not A0_PictureBox1.Visible Then A0_PictureBox1.Visible = True
                        A0_PictureBox2.Visible = True
                    End If

                ElseIf Not Session("input") Is Nothing Then
                    'TimeStampAdd("A0_LoadPDF-session.length:G:" & Session.Length.ToString())
                    Try
                        cFDFDoc = cFDFApp.FDFOpenFromBuf(Session("input"), True, True)
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    pdfBytes = cFDFDoc.PDFMergeFDF2Buf(cFDFDoc.FDFGetFile, False, "")
                    Dim imgCache() As Byte = Nothing
                    Try
                        If Not forceNew Then
                            If Not Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text) Is Nothing Then
                                imgCache = Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text)
                                blnSaveCache = False
                            End If
                            If forceNew Or imgCache Is Nothing Then
                                imgCache = A0_LoadImageSub(pdfBytes, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * getPercent(pgNo, True)), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * getPercent(pgNo, True)))
                            Else
                                If imgCache.Length <= 0 Then
                                    imgCache = A0_LoadImageSub(pdfBytes, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * getPercent(pgNo, True)), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * getPercent(pgNo, True)))
                                End If
                            End If
                            m = New MemoryStream(imgCache)
                        Else
                            m = New MemoryStream(A0_LoadImageSub(pdfBytes, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * getPercent(pgNo, True)), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * getPercent(pgNo, True))))
                        End If
                    Catch exImageCache As Exception
                        m = New MemoryStream(A0_LoadImageSub(pdfBytes, pgNo, CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Width * getPercent(pgNo, True)), CInt(pdfReaderDoc.GetPageSizeWithRotation(pgNo).Height * getPercent(pgNo, True))))
                        TimeStampAdd(exImageCache, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                    Finally
                    End Try
                    If m.CanSeek Then
                        m.Seek(0, SeekOrigin.Begin)
                    End If
                    If updatePictureBox Then
                        Dim img As System.Drawing.Image = System.Drawing.Image.FromStream(m) 'IIf(getPercent ( pgNo , true ) >= 1, System.Drawing.Image.FromStream(m), clsPdfSizeReduction.imageQuality(m, InterpolationMode.HighQualityBicubic, CompositingQuality.HighQuality, SmoothingMode.AntiAlias)) 'IIf(getPercent ( pgNo , true ) > 0, clsPdfSizeReduction.imageQuality(m, InterpolationMode.High, CompositingQuality.HighQuality, SmoothingMode.AntiAlias), clsPdfSizeReduction.imageQuality(m, InterpolationMode.HighQualityBicubic, CompositingQuality.HighQuality, SmoothingMode.AntiAlias))
                        If Not cUserRect.pauseDraw Then A0_PictureBox1.Image = DirectCast(img.Clone(), System.Drawing.Image) 'clsPdfSizeReduction.imageQuality(m, InterpolationMode.High, CompositingQuality.AssumeLinear, SmoothingMode.AntiAlias)
                        A0_PictureBox1.Width = img.Width
                        A0_PictureBox1.Height = img.Height
                    End If
                Else
                    Return True
                End If
                'TimeStampAdd("A0_LoadPDF-session.length:H:" & Session.Length.ToString())
                Try
                    _pictureBoxImage = DirectCast(A0_PictureBox1.Image.Clone, System.Drawing.Image)
                    cUserRect.imgPic = DirectCast(_pictureBoxImage.Clone, System.Drawing.Image)
                    Try
                        If blnSaveCache Then
                            If Not m Is Nothing Then
                                If m.Length > 0 Then
                                    If Not Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text) Is Nothing Then
                                        If Not Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text).ToArray Is m.ToArray Then
                                            Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text) = m.ToArray
                                            blnSaveCache = False
                                        End If
                                    Else
                                        Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text) = m.ToArray
                                        blnSaveCache = False
                                    End If
                                End If
                            End If
                        End If
                    Catch exCache As Exception
                        TimeStampAdd(exCache, debugMode) ' NK 2016-06-30 'NK DM
                    End Try

                Catch exImageCache As Exception
                    TimeStampAdd(exImageCache, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                End Try
                'TimeStampAdd("A0_LoadPDF-session.length:I:" & Session.Length.ToString())
                Try
                    If updatePictureBox Then
                        If _outputIndex >= 0 Then
                            If Not Session("image_undo_history_" & CInt(_outputIndex)) Is Nothing Then
                                If Not bytesMatch(pdfBytes.ToArray, Session("image_undo_history_" & CInt(_outputIndex)).ToArray) Then
                                    _outputIndex += 1
                                    Session("image_undo_history_" & _outputIndex) = pdfBytes
                                End If
                            Else
                                _outputIndex += 1
                                Session("image_undo_history_" & _outputIndex) = pdfBytes
                            End If
                        End If
                        If drawFieldPositions Then
                            mMove = False
                            DrawImageFieldPositions()
                        End If
                    End If

                Catch exImageCache As Exception
                    TimeStampAdd(exImageCache, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                End Try
            ElseIf updatePictureBox Then
                'TimeStampAdd("A0_LoadPDF-session.length:J:" & Session.Length.ToString())
                If Not Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text) Is Nothing Then
                    _pictureBoxImage = DirectCast(System.Drawing.Bitmap.FromStream(New MemoryStream(Session("image_cache_history_" & pgNo, cmbPercent.SelectedIndex, cmbPercent.SelectedItem.ToString, cmbPercent.Text))).Clone(), System.Drawing.Image)
                Else
                    _pictureBoxImage = DirectCast(cUserRect.imgPic.Clone, System.Drawing.Image) '(PictureBox1.Image.Clone)
                End If
                _pictureBoxImage = DirectCast(A0_PictureBox1.Image.Clone, System.Drawing.Image)
                cUserRect.imgPic = DirectCast(_pictureBoxImage.Clone, System.Drawing.Image)
                If (fldNameHighlighted <> "" And (_dragging Or cUserRect.pauseDraw = False)) Then
                    If Not cUserRect.rect = Nothing Then
                        If cUserRect.rect.Width > 0 And cUserRect.rect.Height > 0 Then
                        End If
                    End If
                End If
                cUserRect.refreshDimensionsForm1()
                fldRectangles = getFieldRectangles(False)
                If (fldNameHighlighted <> "" And (_dragging Or cUserRect.pauseDraw = False)) Then
                    If Not cUserRect.rect = Nothing Then
                        If cUserRect.rect.Width > 0 And cUserRect.rect.Height > 0 Then
                            If Not mMove = True Then
                            End If
                        End If
                    End If
                End If
                If _outputIndex >= 0 Then
                    If Not bytesMatch(pdfBytes.ToArray, Session("image_undo_history_" & CInt(_outputIndex)).ToArray) Then
                        _outputIndex += 1
                        Session("image_undo_history_" & _outputIndex) = pdfBytes
                    Else
                    End If
                End If
            End If
            Return True
        Catch exMain As Exception
            'TimeStampAdd("A0_LoadPDF-session.length:Error:" & Session.Length.ToString())
            TimeStampAdd(exMain, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
            Throw exMain
        Finally
            ignoreClick = False
            'TimeStampAdd("A0_LoadPDF-session.length:FinallyA:" & Session.Length.ToString())
            If Not A0_PictureBox1.Image Is Nothing Then
                If Not A0_PictureBox1.Visible Then A0_PictureBox1.Visible = True
                A0_PictureBox2.Visible = True
                If drawFieldPositions Then
                    DrawImageFieldPositions()
                End If
            Else
                If A0_PictureBox1.Visible = True Then A0_PictureBox1.Visible = False
            End If
        End Try
        Return False
    End Function
    Public Function getFieldRectangles(ByVal reloadFields As Boolean, Optional ByVal sessionVariableName As String = "output") As Dictionary(Of String, System.Drawing.RectangleF)
        Try
            If fldRectangles Is Nothing Or reloadFields Then
                fldRectangles = New Dictionary(Of String, System.Drawing.RectangleF)
            ElseIf fldRectangles.Count <= 0 Then
                fldRectangles = New Dictionary(Of String, System.Drawing.RectangleF)
            Else
                Return fldRectangles
            End If
            If String.IsNullOrEmpty(sessionVariableName & "") Then
                sessionVariableName = "output".ToLower
            End If
            If Session(sessionVariableName) Is Nothing Then
                Return Nothing
            ElseIf Session(sessionVariableName).Length <= 0 Then
                Return Nothing
            End If
            If reloadFields Then
            End If
            If pageIndex < 0 And Me.btnPage.Items.Count > 0 Then
                pageIndex = 0
            End If
            Dim flds As List(Of String) = GetAllFieldsOnPage(Session(sessionVariableName), pdfOwnerPassword, Me.page)
            If flds.Count <= 0 Then
                Return Nothing
            End If
            For Each fld As String In flds.ToArray
                Dim kids As PdfArray = Nothing
                If Not String.IsNullOrEmpty(fld.ToString.Trim() & "") Then
                    Dim fldItem As PdfDictionary = iTextFieldItemPdfDictionary(fld.ToString & "")
                    If fldItem Is Nothing Then
                        Dim cx As Integer = -1
                        fldItem = iTextFieldItemPdfDictionary(fld.ToString & "", pdfReaderDoc)
                        cx += 1
                    End If
                    If Not fldItem Is Nothing Then
                        If Not fldItem.Get(PdfName.KIDS) Is Nothing Then
                            kids = fldItem.GetAsArray(PdfName.KIDS)
                        End If
                        If Not kids Is Nothing Then
                            If kids.Size > 0 Then
                                Dim f As AcroFields.Item = pdfReaderDoc.AcroFields.GetFieldItem(fld)
                                For i As Integer = 0 To kids.Size - 1
                                    Dim pg As Integer = pdfReaderDoc.AcroFields.GetFieldPositions(fld.ToString)(i).page + 0
                                    Dim fps As IList(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = pdfReaderDoc.AcroFields.GetFieldPositions(fld.ToString)
                                    If pg = Me.page Then
                                        Dim box As System.Drawing.RectangleF = GetFieldPositionsReverse2(Session(sessionVariableName), fps(i).position)
                                        If GetFormFieldType(Session(sessionVariableName), fld) = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON Then
                                            If Not fldRectangles.Keys.Contains(fld & "." & i) Then
                                                fldRectangles.Add(fld & "." & i, box)
                                            Else
                                                fldRectangles(fld & "." & i) = box
                                            End If
                                        Else
                                            If Not fldRectangles.Keys.Contains(fld & "#" & i) Then
                                                fldRectangles.Add(fld & "#" & i, box)
                                            Else
                                                fldRectangles(fld & "#" & i) = box
                                            End If
                                        End If
                                    End If
                                Next
                            Else
                                GoTo TRYELSE
                            End If
                        Else
TRYELSE:
                            Dim f As AcroFields.Item = pdfReaderDoc.AcroFields.GetFieldItem(fld)
                            Dim i As Integer = 0
                            Dim pg As Integer = pdfReaderDoc.AcroFields.GetFieldPositions(fld.ToString)(i).page + 0
                            Dim fps As IList(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = pdfReaderDoc.AcroFields.GetFieldPositions(fld.ToString)
                            If pg = Me.page Then
                                Dim box As System.Drawing.RectangleF = GetFieldPositionsReverse2(Session(sessionVariableName), fps(i).position)
                                If GetFormFieldType(Session(sessionVariableName), fld) = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON Then
                                    If Not fldRectangles.Keys.Contains(fld & "." & i) Then
                                        fldRectangles.Add(fld & "." & i, box)
                                    Else
                                        fldRectangles(fld & "." & i) = box
                                    End If
                                Else
                                    If Not fldRectangles.Keys.Contains(fld & "#" & i) Then
                                        fldRectangles.Add(fld & "#" & i, box)
                                    Else
                                        fldRectangles(fld & "#" & i) = box
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            Next
            Return fldRectangles
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return New Dictionary(Of String, System.Drawing.RectangleF)
    End Function
    Public Function getKidFieldIndexByRectanglePDF(ByVal rectPDF As System.Drawing.RectangleF, Optional FieldNameX As String = "") As Integer
        Try
            If Session("output") Is Nothing Then
                Return -1
            End If
            For Each fld As String In GetAllFieldsOnPage(Session("output"), pdfOwnerPassword, Me.page).ToArray
                If String.IsNullOrEmpty(FieldNameX & "") Or FieldNameX.ToLower() = fld.ToLower() Then
                    Dim kids As PdfArray = iTextFieldItemPdfDictionary(fld.ToString).GetAsArray(PdfName.KIDS)
                    If Not kids Is Nothing Then
                        If kids.Size > 0 Then
                            Dim f As AcroFields.Item = pdfReaderDoc.AcroFields.GetFieldItem(fld)
                            For i As Integer = 0 To kids.Size - 1
                                Dim pg As Integer = pdfReaderDoc.AcroFields.GetFieldPositions(fld.ToString)(i).page + 0
                                Dim fps As IList(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = pdfReaderDoc.AcroFields.GetFieldPositions(fld.ToString)
                                If pg = Me.page Then
                                    Dim box As System.Drawing.RectangleF = GetFieldPositionsReverse2(Session(), fps(i).position)
                                    If Math.Abs(box.Left - rectPDF.Left) < 1 And Math.Abs(box.Bottom - rectPDF.Bottom) < 1 And Math.Abs(box.Right - rectPDF.Right) < 1 And Math.Abs(box.Top - rectPDF.Top) < 1 Then
                                        Return i
                                        ''ElseIf New iTextSharp.text.Rectangle(rectPDF.Left, rectPDF.Bottom, rectPDF.Right, rectPDF.Top) Is fps(i).position Then
                                        'Return i
                                    End If
                                End If
                            Next
                        Else
                            GoTo TRYELSE
                        End If
                    Else
TRYELSE:
                        Dim s As IList(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = pdfReaderDoc.AcroFields.GetFieldPositions(fld)
                        Dim ir As iTextSharp.text.Rectangle = pdfReaderDoc.GetPageSizeWithRotation(page)
                        Dim i As Integer = 0
                        For Each f As iTextSharp.text.pdf.AcroFields.FieldPosition In s.ToArray
                            Dim box As System.Drawing.RectangleF = GetFieldPositionsReverse2(Session(), s(i).position)
                            If Math.Abs(box.Left - rectPDF.Left) < 1 And Math.Abs(box.Bottom - rectPDF.Bottom) < 1 And Math.Abs(box.Right - rectPDF.Right) < 1 And Math.Abs(box.Top - rectPDF.Top) < 1 Then
                                Return i
                            End If
                        Next
                    End If
                End If
            Next
            Return -1
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return -1
    End Function
    Public Function getRadioButtonOnValue(ByVal fld As String, Optional ByVal i As Integer = 0) As String
        If GetFormFieldType(Session(), fld) = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON Then
            Dim a As PdfArray = iTextFieldItemPdfDictionary(fld.ToString).GetAsArray(PdfName.KIDS)
            If i < a.Size Then
                Dim d As PdfDictionary = a.GetAsDict(i)
                Dim fldOnValue As String = ""
                For iKey As Integer = 0 To a.GetAsDict(i).GetAsDict(PdfName.AP).GetAsDict(PdfName.N).Keys.Count - 1
                    Dim strKey As String = a.GetAsDict(i).GetAsDict(PdfName.AP).GetAsDict(PdfName.N).Keys(iKey).ToString
                    If Not strKey = "/Off" Or Not strKey.ToString.Trim("/"c) = "" Then
                        Return strKey.ToString.TrimStart(("/"c))
                    End If
                Next
            End If
        End If
        Return "Off"
    End Function
    Public Sub DrawImageFieldPositions()
        Try
            If isSessionNull() Then Return
            Dim bmp As New Bitmap(cUserRect.imgPic.Width, cUserRect.imgPic.Height, PixelFormat.Format32bppArgb)
            Dim g As Graphics = Graphics.FromImage(bmp)
            g.FillRectangle(New SolidBrush(Color.Black), 0, 0, bmp.Width, bmp.Height)
            g.Dispose()
            Dim img As System.Drawing.Image = New System.Drawing.Bitmap(cUserRect.imgPic.Width, cUserRect.imgPic.Height, System.Drawing.Imaging.PixelFormat.Format32bppArgb)
            g = Graphics.FromImage(img)
            Dim attr As New ImageAttributes
            attr.SetColorKey(Color.Black, Color.Black)
            Dim dstRect As New System.Drawing.Rectangle(0, 0, bmp.Width, bmp.Height)
            g.DrawImage(bmp, dstRect, 0, 0, bmp.Width, bmp.Height, GraphicsUnit.Pixel, attr)
            g.Dispose()
            If Not cUserRect.pauseDraw Then A0_PictureBox2.Image = DirectCast(img.Clone, System.Drawing.Image)
            A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.Width = A0_PictureBox1.Width
            A0_PictureBox2.Height = A0_PictureBox1.Height
            A0_PictureBox2.Enabled = A0_PictureBox1.Enabled
            A0_PictureBox2.Visible = A0_PictureBox1.Visible
            A0_PictureBox2.Parent = A0_PictureBox1
            If isDragingImage() Or cUserRect.pauseDraw = False Then
                If Not cUserRect.pauseDraw Then A0_PictureBox2.Image = DirectCast(img.Clone, System.Drawing.Image)
                A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage
                A0_PictureBox2.SizeMode = PictureBoxSizeMode.CenterImage
                A0_PictureBox2.Width = A0_PictureBox1.Width
                A0_PictureBox2.Height = A0_PictureBox1.Height
                A0_PictureBox2.Enabled = A0_PictureBox1.Enabled
                A0_PictureBox2.Visible = A0_PictureBox1.Visible
                A0_PictureBox2.Parent = A0_PictureBox1
                If isDragingImage Then
                    Return
                End If
            End If
            If Not btnHighLite.BackColor = Color.Pink Then
                Return
            End If
            g = System.Drawing.Graphics.FromImage(img)
            Dim pt As System.Drawing.PointF = Nothing
            If Not isDragingImage() Then
                pt = New System.Drawing.Point(CInt(ToolStripStatusLabel_XY.Text.Split(","c)(0)), CInt(ToolStripStatusLabel_XY.Text.Split(","c)(1)))
            End If
            Dim c As System.Drawing.Color = Nothing
            Dim rects As Dictionary(Of String, RectangleF) = getFieldRectangles(False)
            If Not rects Is Nothing Then
                If rects.Count > 0 Then
                    For Each r As KeyValuePair(Of String, RectangleF) In rects.ToArray
                        Dim rect As System.Drawing.RectangleF = r.Value
                        Try
                            Try
                                c = System.Drawing.Color.FromArgb(33, 255, 0, 0)
                            Catch exColor As Exception
                                c = System.Drawing.Color.FromArgb(33, 255, 0, 0)
                                TimeStampAdd(exColor, debugMode)
                            End Try
                            If Not String.IsNullOrEmpty(fldNameHighlighted & "") And fldKidIndex >= 0 Then
                                If fldNameHighlighted = (r.Key.ToString().Trim()) Or ((fldNameHighlighted & "#" & fldKidIndex = (r.Key.ToString.Trim()) Or fldNameHighlighted & "." & fldKidIndex = (r.Key.ToString.Trim())) And fldKidIndex >= 0) Then
                                    c = System.Drawing.Color.FromArgb(100, 255, 0, 0)
                                    If cUserRect.mPictureBox Is Nothing Then
                                        cUserRect.SetPictureBox(A0_PictureBox2, False)
                                    End If
                                    If cUserRect.mBmp Is Nothing Then
                                        cUserRect.SetImagePic(_pictureBoxImage)
                                    End If
                                    cUserRect.DrawPictureBoxImageBoxImage(g, rect)
                                ElseIf btnHighLite.BackColor = Drawing.Color.Pink Then
                                    g.FillRectangle(New SolidBrush(c), getRectangleScreen(rect))
                                End If
                            ElseIf btnHighLite.BackColor = Drawing.Color.Pink Then
                                g.FillRectangle(New SolidBrush(c), getRectangleScreen(rect))
                            End If
                        Catch exLoop As Exception
                            TimeStampAdd(exLoop, debugMode)
                        End Try
                    Next
                End If
            End If
            If Not cUserRect.pauseDraw Then A0_PictureBox2.Image = DirectCast(img.Clone, System.Drawing.Image)
            A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.Width = A0_PictureBox1.Width
            A0_PictureBox2.Height = A0_PictureBox1.Height
            A0_PictureBox2.Enabled = A0_PictureBox1.Enabled
            A0_PictureBox2.Visible = A0_PictureBox1.Visible
            A0_PictureBox2.Parent = A0_PictureBox1
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
        End Try
    End Sub
    Public Sub Undo(Optional ByVal i As Integer = Nothing)
        If _outputIndex <= 1 Then
            _outputIndex = 1
        End If
        If Not Session("image_undo_history_" & CInt(_outputIndex - 1)) Is Nothing Then
            _outputIndex -= 1
            Session("output") = Session("image_undo_history_" & _outputIndex)
            Dim pageSelIndex As Integer = pageIndex
            cUserRect.pauseDraw = True
            LoadPageList(Me.btnPage)
            If btnPage.Items.Count > pageSelIndex And pageSelIndex >= 0 Then
                pageIndex = pageSelIndex
            Else
                pageIndex = 0
            End If
            fldRectangles = getFieldRectangles(True)
            If btnPage.Items.Count > pageSelIndex Then
                If Not String.IsNullOrEmpty(fldNameHighlighted & "") Then
                    cUserRect.rect = GetFieldPositionsReverse(Session(), fldNameHighlighted)
                End If
            Else
                cUserRect.rect = Nothing
            End If
            cUserRect.pauseDraw = False
            A0_LoadPDF(True)
            cLinks = New clsLinks(pdfReaderDoc, Me)
            DrawImageFieldPositions()
            Return
        End If
    End Sub
    Public Sub Redo(Optional ByVal i As Integer = Nothing)
        If _outputIndex <= 0 Then
            _outputIndex = 0
        End If
        If Not Session("image_undo_history_" & CInt(_outputIndex + 1)) Is Nothing Then
            _outputIndex += 1
            Session("output") = Session("image_undo_history_" & _outputIndex)
            cUserRect.pauseDraw = True
            Dim pageSelIndex As Integer = pageIndex
            LoadPageList(Me.btnPage)
            If btnPage.Items.Count > pageSelIndex And pageSelIndex >= 0 Then
                pageIndex = pageSelIndex
            Else
                pageIndex = 0
            End If
            fldRectangles = getFieldRectangles(True)
            If btnPage.Items.Count > pageSelIndex Then
                If Not String.IsNullOrEmpty(fldNameHighlighted & "") Then
                    cUserRect.rect = GetFieldPositionsReverse(Session(), fldNameHighlighted)
                End If
            Else
                cUserRect.rect = Nothing
            End If
            cUserRect.pauseDraw = False
            A0_LoadPDF(True)
            cLinks = New clsLinks(pdfReaderDoc, Me)
            DrawImageFieldPositions()
            Return
        End If
    End Sub
    Public Property PDFWidth(ByVal PDFForm() As Byte) As Single
        Get
            Return _pdfW
        End Get
        Set(ByVal value As Single)
            _pdfW = value
        End Set
    End Property
    Public Property PDFHeight(ByVal PDFForm() As Byte) As Single
        Get
            Return _pdfH
        End Get
        Set(ByVal value As Single)
            _pdfH = value
        End Set
    End Property
    Public Property PDFWidth(ByVal PDFForm As String) As Single
        Get
            Return _pdfW
        End Get
        Set(ByVal value As Single)
            _pdfW = value
        End Set
    End Property
    Public Property PDFHeight(ByVal PDFForm As String) As Single
        Get
            Return _pdfH
        End Get
        Set(ByVal value As Single)
            _pdfH = value
        End Set
    End Property
    Public Property PDFWidth() As Single
        Get
            Return _pdfW
        End Get
        Set(ByVal value As Single)
            _pdfW = value
        End Set
    End Property
    Public Property PDFHeight() As Single
        Get
            Return _pdfH
        End Get
        Set(ByVal value As Single)
            _pdfH = value
        End Set
    End Property
    Public Function GetPDFWidth(ByVal PDFForm As String) As Single
        If isSessionNull() Then Return 0
        Dim intDim As Single = pdfReaderDoc.GetPageSizeWithRotation(page).Width
        Return intDim
    End Function
    Public Function GetPDFHeight(ByVal PDFForm As String) As Single
        If isSessionNull() Then Return 0
        Dim intDim As Single = pdfReaderDoc.GetPageSizeWithRotation(page).Height
        Return intDim
    End Function
    Private Function ReplaceXMLReservedCharacters(ByVal strInput As String) As String
        strInput = strInput.Replace("&", "_")
        strInput = strInput.Replace("<", "_")
        strInput = strInput.Replace(">", "_")
        strInput = strInput.Replace("""", "_")
        strInput = strInput.Replace("'", "_")
        strInput = strInput.Replace(" ", "_")
        Return strInput & ""
    End Function
    Private Function CheckXMLReservedWords(ByVal strInput As String) As String
        strInput = strInput.Replace("&amp;", "&")
        strInput = strInput.Replace("&", "&amp;")
        strInput = strInput.Replace("<", "&lt;")
        strInput = strInput.Replace(">", "&gt;")
        strInput = strInput.Replace("""", "&quot;")
        strInput = strInput.Replace("'", "&apos;")
        Return strInput & ""
    End Function
    ''' <summary>
    ''' Downloads Restricted File into a Stream
    ''' </summary>
    ''' <param name="PDF_URL">Name of PDF or File to download</param>
    ''' <returns>Stream containing restricted file</returns>
    ''' <remarks></remarks>
    Public Function Download_RestrictedFile(ByVal PDF_URL As String) As Stream
        Dim myCache As New System.Net.CredentialCache
        Dim myWebClient As System.Net.WebClient
        Dim fs As New MemoryStream
        Try
            myWebClient = New System.Net.WebClient
            Dim bytes() As Byte
            bytes = myWebClient.DownloadData(PDF_URL)
            fs.Write(bytes, 0, bytes.Length)
            fs.Position = 0
            Return fs
        Catch ex As Exception
            Throw New Exception(ex.Message, ex)
        End Try
    End Function
    ''' <summary>
    ''' Downloads Restricted File into a Stream
    ''' </summary>
    ''' <param name="PDF_URL">Name of PDF or File to download</param>
    ''' <param name="Username">Credential Username</param>
    ''' <param name="Password">Credential Password</param>
    ''' <returns>Stream containing restricted file</returns>
    ''' <remarks></remarks>
    Public Function Download_RestrictedFile(ByVal PDF_URL As String, ByVal Username As String, ByVal Password As String) As Stream
        Dim myCache As New System.Net.CredentialCache
        Dim myWebClient As System.Net.WebClient
        Dim fs As New MemoryStream
        Try
            myWebClient = New System.Net.WebClient
            Dim bytes() As Byte
            Dim creds As New System.Net.NetworkCredential(Username, Password)
            myWebClient.Credentials = creds
            bytes = myWebClient.DownloadData(PDF_URL)
            fs.Write(bytes, 0, bytes.Length)
            fs.Position = 0
            Return fs
        Catch ex As Exception
            Throw New Exception(ex.Message, ex)
        End Try
    End Function
    ''' <summary>
    ''' Downloads Restricted File into a Stream
    ''' </summary>
    ''' <param name="PDF_URL">Name of PDF or File to download</param>
    ''' <param name="Username">Credential Username</param>
    ''' <param name="Password">Credential Password</param>
    ''' <param name="Domain">Credential Domain</param>
    ''' <returns>Stream containing restricted file</returns>
    ''' <remarks></remarks>
    Public Function Download_RestrictedFile(ByVal PDF_URL As String, ByVal Username As String, ByVal Password As String, ByVal Domain As String) As Stream
        Dim myCache As New System.Net.CredentialCache
        Dim myWebClient As System.Net.WebClient
        Dim fs As New MemoryStream
        Try
            myWebClient = New System.Net.WebClient
            Dim bytes() As Byte
            Dim creds As New System.Net.NetworkCredential(Username, Password, Domain)
            myWebClient.Credentials = creds
            bytes = myWebClient.DownloadData(PDF_URL)
            fs.Write(bytes, 0, bytes.Length)
            fs.Position = 0
            Return fs
        Catch ex As Exception
            Throw New Exception(ex.Message, ex)
        End Try
    End Function
    Private Function XDPCheckChar(ByVal strINPUT As String) As String
        If strINPUT.Length <= 0 Then
            Return ""
            Exit Function
        End If
        strINPUT = strINPUT.Replace("&", "&&38;")
        strINPUT = strINPUT.Replace("#", "&#35;")
        strINPUT = strINPUT.Replace("&&38;", "&#38;")
        strINPUT = strINPUT.Replace("<", "&#60;")
        strINPUT = strINPUT.Replace(">", "&#62;")
        strINPUT = strINPUT.Replace("(", "&#40;")
        strINPUT = strINPUT.Replace(")", "&#41;")
        strINPUT = strINPUT.Replace("'", "&#39;")
        strINPUT = strINPUT.Replace("`", "&#39;")
        strINPUT = strINPUT.Replace("""", "&#34;")
        strINPUT = strINPUT.Replace("‚", "&#44;")
        strINPUT = strINPUT.Replace("’", "&#8217;")
        strINPUT = strINPUT.Replace("$", "&#36;")
        Return strINPUT & ""
    End Function
    Private Function XDPCheckCharReverse(ByVal strINPUT As String) As String
        If strINPUT.Length <= 0 Then
            Return ""
            Exit Function
        End If
        Return strINPUT & ""
        Exit Function
        strINPUT = strINPUT.Replace("&&38;", "&#38;")
        strINPUT = strINPUT.Replace("&#60;", "<")
        strINPUT = strINPUT.Replace("&#62;", ">")
        strINPUT = strINPUT.Replace("&#40;", "(")
        strINPUT = strINPUT.Replace("&#41;", ")")
        strINPUT = strINPUT.Replace("&#39;", "'")
        strINPUT = strINPUT.Replace("&#39;", "`")
        strINPUT = strINPUT.Replace("&#34;", """")
        strINPUT = strINPUT.Replace("&#44;", "‚")
        strINPUT = strINPUT.Replace("&#39;", "'")
        strINPUT = strINPUT.Replace("&#8217;", "’")
        strINPUT = strINPUT.Replace("&#36;", "$")
        strINPUT = strINPUT.Replace("&#35;", "#")
        strINPUT = strINPUT.Replace("&#38;", "&")
        Return strINPUT & ""
    End Function
    Public Function DownloadFile(ByVal bstrFileName As String, Optional ByVal FDFInitialize As Boolean = False, Optional ByVal ownerPassword As String = "") As Byte()
        Try
            Dim fBytes() As Byte
            If IsValidUrl(bstrFileName) Then
                Dim wclient As New System.Net.WebClient()
                fBytes = wclient.DownloadData(bstrFileName)
                Return fBytes
            ElseIf FileExists(bstrFileName) Then
                Dim fs As New System.IO.FileStream(bstrFileName, FileMode.Open, FileAccess.Read, FileShare.None)
                ReDim fBytes(CInt(fs.Length))
                fs.Read(fBytes, 0, CInt(fs.Length))
                fs.Close()
                fs.Dispose()
                Return fBytes
            ElseIf FileExists(ApplicationDataFolder(False, "") & (bstrFileName)) Then
                Dim fs As New System.IO.FileStream(ApplicationDataFolder(False, "") & (bstrFileName), FileMode.Open, FileAccess.Read, FileShare.None)
                ReDim fBytes(CInt(fs.Length))
                fs.Read(fBytes, 0, CInt(fs.Length))
                fs.Close()
                fs.Dispose()
                Return fBytes
            Else
                Return Nothing
            End If
            Return Nothing
        Catch ex As Exception
            Return Nothing
            Exit Function
        End Try
    End Function
    Public Sub preLoadImages(Optional ByVal forceNew As Boolean = False)
        Try
            If pageIndex < 0 Or cUserRect.pauseDraw Then Return
            If Session Is Nothing Then Return
            If Session.Length <= 0 Then Return
            If pdfReaderDoc Is Nothing Then Return
            Try
                If LoadImageGs_InUse Then
                    If Not clsPreloadImagesThread Is Nothing Then
                        clsPreloadImagesThread.StopTimer()
                    End If
                End If
                Do While LoadImageGs_InUse
                    DoEvents_Wait(100)
                Loop
            Catch exPreload As Exception
                TimeStampAdd(exPreload, debugMode)
            End Try
            If pdfReaderDoc.NumberOfPages > 1 Then
                Dim prevPage As Integer = 1
                Dim nextPage As Integer = 1
                cUserRect.pauseDraw = True
                If pageIndex < 0 Then
                    pageIndex = 0
                End If
                cUserRect.pauseDraw = False
                prevPage = CInt(page) - preloadCount
                If prevPage < 1 Then
                    prevPage = 1
                End If
                nextPage = CInt(page) + preloadCount
                If nextPage > pdfReaderDoc.NumberOfPages Then
                    nextPage = pdfReaderDoc.NumberOfPages
                End If
                If Not clsPreloadImagesThread Is Nothing Then
                    If Not clsPreloadImagesThread.blnEventDone Then
                        If forceNew Then
                            clsPreloadImagesThread.StopTimer()
                            clsPreloadImagesThread.Dispose()
                            clsPreloadImagesThread = Nothing
                            clsPreloadImagesThread = New clsImageThreads(Me, prevPage, nextPage, cmbPercent)
                        Else
                            clsPreloadImagesThread.New_WaitForDone(Me, prevPage, nextPage, cmbPercent)
                        End If
                    Else
                        clsPreloadImagesThread.StopTimer()
                        clsPreloadImagesThread.Dispose()
                        clsPreloadImagesThread = Nothing
                        clsPreloadImagesThread = New clsImageThreads(Me, prevPage, nextPage, cmbPercent)
                    End If
                Else
                    clsPreloadImagesThread = Nothing
                    clsPreloadImagesThread = New clsImageThreads(Me, prevPage, nextPage, cmbPercent)
                End If
            End If
        Catch exPrevNext As Exception
            TimeStampAdd(exPrevNext, debugMode)
        End Try
    End Sub
    Public Sub btnPage_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnPage.SelectedIndexChanged
        If Not cUserRect.pauseDraw Then
            A0_FireRefresh(Me, New EventArgs())
        End If
    End Sub
    Public Sub A0_FireRefresh(ByVal sender As Object, ByVal e As EventArgs) Handles tmrFireRefresh.Tick
        Try
            tmrFireRefresh.Enabled = False
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    If pageIndex < 0 Then
                        pageIndex = 0
                    End If
                End If
            End If
            fldRectangles = getFieldRectangles(True)
            Try
                cUserRect.mIsClick = False
                tmpPercent = Nothing
                tmpPercent = getPercent()
            Catch ex As Exception
                tmpPercent = 1
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                If Not Session("output") Is Nothing Then
                    If Session("output").Length > 0 Then
                        A0_PictureBox1.Width = CInt(getPDFWidth() * getPercent())
                        A0_PictureBox1.Height = CInt(getPDFHeight() * getPercent())
                        If ThumbnailsToolStripMenuItem.Checked Then
                            Thumbnails1_Panel.Visible = True
                            Thumbnails1_Panel.Dock = DockStyle.None
                            Thumbnails1_Panel.Width = 210
                            Thumbnails1_Panel.Left = 0
                            Thumbnails1_Panel.Top = 33
                            Thumbnails1_Panel.Height = Height - FlowLayoutPanel1.Height - StatusStrip1.Height - 38 - 15
                            Thumbnails1_Panel.AutoScroll = True
                            PictureBox1_Panel.Left = Thumbnails1_Panel.Right
                            PictureBox1_Panel.Width = Width - 15 - Thumbnails1_Panel.Width
                            PictureBox1_Panel.Visible = True
                        Else
                            If Not PictureBox1_Panel.Top = 33 Then PictureBox1_Panel.Top = 33
                            If Not PictureBox1_Panel.Height = Height - FlowLayoutPanel1.Height - StatusStrip1.Height - 38 Then PictureBox1_Panel.Height = Height - FlowLayoutPanel1.Height - StatusStrip1.Height - 38
                            If Not PictureBox1_Panel.Left = 0 Then PictureBox1_Panel.Left = 0
                            If Not PictureBox1_Panel.Width = Width - 15 Then PictureBox1_Panel.Width = Width - 15
                            If Not A0_PictureBox1.Top = 0 Then A0_PictureBox1.Top = 0
                            If Not A0_PictureBox1.Left = 0 Then A0_PictureBox1.Left = 0
                        End If
                        If Not A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage Then A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage
                    Else
                        Return
                    End If
                Else
                    Return
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            fldNameHighlighted = ""
            cUserRect.rect = Nothing
            mMove = False
            If pageIndex >= 0 And Not cUserRect.pauseDraw Then
                If A0_LoadPDF(True, False, True) Then
                    tmrFireRefresh.Enabled = False
                End If
            End If
            If Thumbnails1_Panel.Controls.Count > 0 Then
                Thumbnails1_Panel.ScrollControlIntoView(Thumbnails1_Panel.Controls(pageIndex))
            End If
        Catch exMain As Exception
            TimeStampAdd(exMain, debugMode)
        Finally
            ignoreClick = False
            Try
                If pageIndex >= 0 Then
                    cLinks = New clsLinks(pdfReaderDoc, Me)
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                If Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        If pageIndex >= 0 And Not cUserRect.pauseDraw Then
                            preLoadImages(False)
                        End If
                    End If
                End If
            Catch exPreload As Exception
                TimeStampAdd(exPreload, debugMode)
            End Try
        End Try
    End Sub
    Private Sub btnLinkList_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Public Function getPDFWidth(ByVal pdfData() As Byte) As Single
        If pdfData Is Nothing Then Return 0
        Dim pdfReaderDoc2 As New PdfReader(pdfData, getBytes(pdfOwnerPassword))
        Dim dimPDF As Single = pdfReaderDoc2.GetPageSizeWithRotation(CInt(IIf(pageIndex >= 0, CInt(page), 1))).Width
        Return dimPDF
    End Function
    Public Function getPDFWidth(ByVal pdfData() As Byte, ByVal pg As Integer) As Single
        If pdfData Is Nothing Then Return 0
        Dim pdfReaderDoc2 As New PdfReader(pdfData, getBytes(pdfOwnerPassword))
        Dim dimPDF As Single = pdfReaderDoc2.GetPageSizeWithRotation(pg).Width
        Return dimPDF
    End Function
    Public Function getPDFWidth(ByVal reader As PdfReader, ByVal pg As Integer) As Single
        If reader Is Nothing Then Return 0
        Dim dimPDF As Single = reader.GetPageSizeWithRotation(pg).Width
        Return dimPDF
    End Function
    Public Function getPDFHeight(ByVal reader As PdfReader, ByVal pg As Integer) As Single
        If reader Is Nothing Then Return 0
        Dim dimPDF As Single = reader.GetPageSizeWithRotation(pg).Height
        Return dimPDF
    End Function
    Public Function getPDFHeight(ByVal pdfData() As Byte) As Single
        If pdfData Is Nothing Then Return 0
        Dim pdfReaderDoc2 As New PdfReader(pdfData, getBytes(pdfOwnerPassword))
        Dim dimPDF As Single = CSng(pdfReaderDoc2.GetPageSizeWithRotation(CInt(IIf(pageIndex >= 0, CInt(page), 1))).Height)
        Return dimPDF
    End Function
    Public Function getPDFHeight(ByVal pdfData() As Byte, ByVal pg As Integer) As Single
        If pdfData Is Nothing Then Return 0
        Dim pdfReaderDoc2 As New PdfReader(pdfData, getBytes(pdfOwnerPassword))
        Dim dimPDF As Single = pdfReaderDoc2.GetPageSizeWithRotation(pg).Height
        Return dimPDF
    End Function
    Public Function getPDFHeight() As Single
        Try
            If isSessionNull() Then Return 0
            If Not pdfReaderDoc Is Nothing Then
                Return pdfReaderDoc.GetPageSizeWithRotation(CInt(page)).Height
            Else
                Return 0
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return 0
    End Function
    Public Function getPDFWidth() As Single
        Try
            If isSessionNull() Then Return 0
            If Not pdfReaderDoc Is Nothing Then
                Return pdfReaderDoc.GetPageSizeWithRotation(CInt(page)).Width
            Else
                Return 0
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return 0
    End Function
    Private Sub Load_Buttons_List(ByVal PDFForm As Stream, ByRef ddl As System.Windows.Forms.ComboBox)
        If isSessionNull() Then Return
        ddl.Items.Clear()
        For Each btn As iTextSharp.text.pdf.PRAcroForm.FieldInformation In pdfReaderDoc.AcroForm.Fields
            If btn.Info.Type = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON Then
                ddl.Items.Add(btn.Name)
            End If
        Next
        Return
    End Sub
    Private Sub Load_Button_Dimensions(ByVal PDFForm As Stream, ByVal fieldName As String, ByVal txtX1 As System.Windows.Forms.TextBox, ByVal txtY1 As System.Windows.Forms.TextBox, ByVal txtX2 As System.Windows.Forms.TextBox, ByVal txtY2 As System.Windows.Forms.TextBox, ByVal txtW As System.Windows.Forms.TextBox, ByVal txtH As System.Windows.Forms.TextBox)
        Dim memStream As New MemoryStream
        For Each btn As iTextSharp.text.pdf.PRAcroForm.FieldInformation In pdfReaderDoc.AcroForm.Fields
            If btn.Info.Type = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON Then
                If fieldName.ToString & "" = btn.Name.ToString & "" Then
                    Dim rect As iTextSharp.text.pdf.AcroFields.FieldPosition = pdfReaderDoc.AcroFields.GetFieldPositions(btn.Name.ToString)(0)
                    txtX1.Text = rect.position.Left.ToString
                    txtX2.Text = rect.position.Right.ToString
                    txtY1.Text = rect.position.Top.ToString
                    txtY2.Text = rect.position.Bottom.ToString
                    txtW.Text = CStr(CSng(txtX2.Text) - CSng(txtX1.Text))
                    txtH.Text = CStr(CSng(txtY2.Text) - CSng(txtY1.Text))
                End If
            End If
        Next
        Return
    End Sub
    Public Sub btnField_AddButton_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnField_AddButton.Click
        Dim rectTempScreen As System.Drawing.RectangleF = cUserRect.rectScreen
        Dim rectTempPDF As System.Drawing.RectangleF = cUserRect.rect
        If PDFField_Dimensions_Paste_0_Left_llx.Checked Or PDFField_Dimensions_Paste_2_Right_urx.Checked Then
            btnWidth.Text = CSng(btnRight.Text) - CSng(btnLeft.Text)
        ElseIf PDFField_Dimensions_Paste_4_Width.Checked Then 'And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked Or Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
            btnWidth.Text = _dimensionsList(4) + 0
            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            ElseIf PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                btnLeft.Text = CSng(btnRight.Text) - CSng(btnWidth.Text)
            Else
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            End If
        End If
        If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
            Else
                btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
            End If
        ElseIf PDFField_Dimensions_Paste_5_Height.Checked Then 'And (Not PDFField_Dimensions_Paste_3_Top_ury.Checked Or Not PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
            btnHeight.Text = _dimensionsList(5) + 0
            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                Else
                    btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                End If
            Else
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            End If
        End If
        If Not fldNameHighlighted.IsNullOrEmpty() And CheckfieldNameExits(fldNameHighlighted & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), fldNameHighlighted, PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        ElseIf CheckfieldNameExits(PDFField_Name.Text & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), PDFField_Name.Text & "", PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        Else
            lblFieldType.Text = "PROPERTIES"
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), "", PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        End If
        calculateFields()

        Return
ReturnSub:
        '        Dim rectTempScreen As System.Drawing.RectangleF = cUserRect.rectScreen
        '        Dim rectTempPDF As System.Drawing.RectangleF = cUserRect.rect
        '        If PDFField_Dimensions_Paste_0_Left_llx.Checked Or PDFField_Dimensions_Paste_2_Right_urx.Checked Then
        '            btnWidth.Text = CSng(btnRight.Text) - CSng(btnLeft.Text)
        '        ElseIf PDFField_Dimensions_Paste_4_Width.Checked Then 'And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked Or Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
        '            btnWidth.Text = _dimensionsList(4) + 0
        '            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
        '                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
        '            ElseIf PDFField_Dimensions_Paste_2_Right_urx.Checked Then
        '                btnLeft.Text = CSng(btnRight.Text) - CSng(btnWidth.Text)
        '            Else
        '                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
        '            End If
        '        End If
        '        If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
        '            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
        '                btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
        '            Else
        '                btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
        '            End If
        '        ElseIf PDFField_Dimensions_Paste_5_Height.Checked Then 'And (Not PDFField_Dimensions_Paste_3_Top_ury.Checked Or Not PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
        '            btnHeight.Text = _dimensionsList(5) + 0
        '            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
        '                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
        '                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
        '                Else
        '                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
        '                End If
        '            ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
        '                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
        '                    btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
        '                Else
        '                    btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
        '                End If
        '            Else
        '                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
        '                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
        '                Else
        '                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
        '                End If
        '            End If
        '        End If
        '        If Not fldNameHighlighted.IsNullOrEmpty() And CheckfieldNameExits(fldNameHighlighted & "") Then
        '            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
        '            r = GetFieldPositionsReverse(Session(), r)
        '            Session("output") = A0_PDFFormField_Modify(Session("output"), fldNameHighlighted, PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        '        ElseIf CheckfieldNameExits(PDFField_Name.Text & "") Then
        '            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
        '            r = GetFieldPositionsReverse(Session(), r)
        '            Session("output") = A0_PDFFormField_Modify(Session("output"), PDFField_Name.Text & "", PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        '        Else
        '            lblFieldType.Text = "PROPERTIES"
        '            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
        '            r = GetFieldPositionsReverse(Session(), r)
        '            Session("output") = A0_PDFFormField_Modify(Session("output"), "", PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        '        End If
        '        calculateFields()

        '        Return
        'ReturnSub:
    End Sub
    Private Sub btnComboBox_Add_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        If CheckfieldNameExits(PDFField_Name.Text & "") Then
            lblFieldType.Text = "Fieldname exists"
            Return
        Else
            lblFieldType.Text = "PROPERTIES"
        End If
        Dim pdfBytes() As Byte = Nothing
        If Not Session("output") Is Nothing Then
            Try
                pdfBytes = DirectCast(Session("output"), Byte())
            Catch ex As Exception
                If IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                    Err.Clear()
                    Return
                Else
                    pdfBytes = DirectCast(cFDFDoc.PDFMergeFDF2Buf(cFDFDoc.FDFGetFile, False, ""), Byte())
                End If
            End Try
        End If
        If pdfBytes Is Nothing Then
            Try
                pdfBytes = DirectCast(cFDFDoc.PDFMergeFDF2Buf(cFDFDoc.FDFGetFile, False, ""), Byte())
            Catch ex As Exception
                Throw New Exception("ERROR: FDF Get File is empty")
                Return
            End Try
        End If
        Dim pdfBytes2() As Byte = Add_Combo_Field(pdfBytes)
        If Not pdfBytes2 Is Nothing Then
            Session("output") = pdfBytes2
            A0_LoadPDF(True)
        End If
        fldRectangles = getFieldRectangles(True)
    End Sub
    Private Function Add_Combo_Field(ByVal PDFForm() As Byte) As Byte()
        loadColors()
        Dim memStream As New MemoryStream
        With getStamper(pdfReaderDoc, memStream)
            Dim comboItemsDisplay As New List(Of String), comboItemsValues As New List(Of String)
            Dim comboFld As iTextSharp.text.pdf.TextField = New iTextSharp.text.pdf.TextField(.Writer, New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)), PDFField_Name.Text)
            comboFld.FieldName = PDFField_Name.Text
            Dim app As iTextSharp.text.pdf.PdfAppearance = iTextSharp.text.pdf.PdfAppearance.CreateAppearance(.Writer, CSng(btnWidth.Text), CSng(btnHeight.Text))
            app.Rectangle(1, 1, CSng(btnWidth.Text) - 2, CSng(btnHeight.Text) - 2)
            app.Stroke()
            comboFld.TextColor = New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A)
            comboFld.BackgroundColor = New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A)
            comboFld.BorderStyle = CInt(PDFField_BorderStyle.SelectedIndex + 0) + 0
            comboFld.BorderColor = New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A)
            comboFld.Alignment = CInt(PDFField_TextAlign.SelectedIndex + 0) + 0
            comboFld.Visibility = CInt(PDFField_Visibility.SelectedIndex) + 0
            comboFld.Choices = comboItemsDisplay.ToArray
            comboFld.ChoiceExports = comboItemsValues.ToArray
            .AddAnnotation(comboFld.GetComboField, page)
            Dim bytes() As Byte
            Try
                .Writer.CloseStream = False
                .Close()
                If memStream.CanSeek Then
                    memStream.Position = 0
                End If
                bytes = memStream.GetBuffer
                memStream.Close()
                memStream.Dispose()
                Return bytes
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End With
        Return Nothing
    End Function
    Private Sub btnComboBox_ItemAdd_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Private Sub btnComboBox_ItemClear_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnComboBox_ItemClear.Click
        ComboBox_ItemDisplay.Items.Clear()
    End Sub
    Private Sub btnComboBox_ItemDelete_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Private Sub btnComboBox_Preview_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Public Sub updatefield()
        Select Case Me.ComboBox1.SelectedIndex
            Case 0
                Me.btnField_AddButton_Click(Me, New EventArgs())
            Case 1
                Me.btnField_AddTextField_Click(Me, New EventArgs())
            Case 2
                Me.btnField_AddCombobox_Click(Me, New EventArgs())
            Case 3
                Me.btnField_AddListBox_Click(Me, New EventArgs())
            Case 4
                Me.btnField_AddRadioButton_Click(Me, New EventArgs())
            Case 5
                Me.btnField_AddCheckBox_Click(Me, New EventArgs())
            Case 6
                Me.btnField_AddSignatureField_Click(Me, New EventArgs())
            Case Else
        End Select
    End Sub
    Public Sub btnField_AddListBox_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnField_AddListBox.Click
        Dim rectTempScreen As System.Drawing.RectangleF = cUserRect.rectScreen
        Dim rectTempPDF As System.Drawing.RectangleF = cUserRect.rect
        If PDFField_Dimensions_Paste_0_Left_llx.Checked Or PDFField_Dimensions_Paste_2_Right_urx.Checked Then
            btnWidth.Text = CSng(btnRight.Text) - CSng(btnLeft.Text)
        ElseIf PDFField_Dimensions_Paste_4_Width.Checked Then 'And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked Or Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
            btnWidth.Text = _dimensionsList(4) + 0
            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            ElseIf PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                btnLeft.Text = CSng(btnRight.Text) - CSng(btnWidth.Text)
            Else
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            End If
        End If
        If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
            Else
                btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
            End If
        ElseIf PDFField_Dimensions_Paste_5_Height.Checked Then 'And (Not PDFField_Dimensions_Paste_3_Top_ury.Checked Or Not PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
            btnHeight.Text = _dimensionsList(5) + 0
            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                Else
                    btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                End If
            Else
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            End If
        End If
        If Not fldNameHighlighted.IsNullOrEmpty() And CheckfieldNameExits(fldNameHighlighted & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), fldNameHighlighted, Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        ElseIf CheckfieldNameExits(Me.PDFField_Name.Text & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), Me.PDFField_Name.Text & "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        Else
            Me.lblFieldType.Text = "PROPERTIES"
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        End If
        calculateFields()

        Return
    End Sub
    Private Sub btnListBox_ItemAdd_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Private Sub btnListBox_ItemClear_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Private Sub btnListBox_ItemRemove_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Private Sub btnListBox_Preview_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Private Sub btnRadioButton_ItemAdd_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Private Sub btnRadioButton_ItemDelete_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Private Sub btnRadioButton_Preview_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    End Sub
    Private Function Add_Submit_Button(ByVal PDFForm() As Byte) As Byte()
        loadColors()
        Dim memStream As New MemoryStream
        With getStamper(pdfReaderDoc, memStream)
            Dim submitBtn As New iTextSharp.text.pdf.PushbuttonField(.Writer, New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnRight.Text), CSng(btnBottom.Text)), PDFField_Name.Text)
            submitBtn.TextColor = New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A)
            submitBtn.BackgroundColor = New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A)
            submitBtn.BorderStyle = CInt(Me.PDFField_BorderStyle.SelectedIndex + 0) + 0
            submitBtn.BorderColor = New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A)
            submitBtn.Alignment = CInt(Me.PDFField_TextAlign.SelectedIndex + 0) + 0
            submitBtn.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex) + 0
            submitBtn.Text = Me.PDFField_Tooltip.Text & ""
            Dim submitField As iTextSharp.text.pdf.PdfFormField = submitBtn.Field
            submitField.MKTextPosition = CInt(Me.PDFField_TextAlign.SelectedIndex + 0) + 0
            submitField.MKBorderColor = New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A)
            submitField.MKBackgroundColor = New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A)
            Dim format As Integer = 0
            Select Case PDFField_Action_Panel_SubmitForm_Format.SelectedIndex
                Case 0
                    format = PdfAction.SUBMIT_INCLUDE_NO_VALUE_FIELDS
                Case 1
                    format = PdfAction.SUBMIT_XFDF
                Case 2
                    format = PdfAction.SUBMIT_HTML_FORMAT
                Case 3
                    format = PdfAction.SUBMIT_PDF
                Case Else
                    format = PdfAction.SUBMIT_INCLUDE_NO_VALUE_FIELDS
            End Select
            submitField.Page = CInt(Me.page) + 0
            submitField.Action = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(PDFField_Action_Panel_SubmitForm_URL.Text, Nothing, PdfAction.SUBMIT_INCLUDE_NO_VALUE_FIELDS)
            .AddAnnotation(submitField, Me.page)
            Dim bytes() As Byte
            Try
                .Writer.CloseStream = False
                .Close()
                If memStream.CanSeek Then
                    memStream.Position = 0
                End If
                bytes = memStream.GetBuffer
                memStream.Close()
                memStream.Dispose()
                Return bytes
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End With
        Return Nothing
    End Function
    Public Function iTextKillIndirectChildObjects(ByRef p As PdfObject) As PdfObject
        Dim n As PdfName = Nothing
        Try
            If p.IsDictionary Then
                Dim o As PdfDictionary = DirectCast(p, PdfDictionary)
                Return iTextKillIndirectChildObjects(o)
            ElseIf p.IsStream Then
                Dim o As PdfDictionary = DirectCast(p, PdfDictionary)
                Return iTextKillIndirectChildObjects(o)
            ElseIf p.IsIndirect Then
                Dim o As PdfIndirectReference = DirectCast(p, PdfIndirectReference)
                Return iTextKillIndirectChildObjects(o)
            Else
                Return p
            End If
        Catch ex As Exception
            Dim strn As String = n.ToString
            TimeStampAdd(ex, debugMode)
        End Try
        Return p
    End Function
    Public Function iTextKillIndirectChildObjects(ByRef p As PdfDictionary) As PdfObject
        Dim n As PdfName = Nothing
        Try
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            For Each n In p.Keys.ToArray
                If Not n.ToString = PdfName.PARENT.ToString Then
                End If
                If p.Get(n) Is Nothing Then Return p
                If Not p.Get(n).IsIndirect Then
                    If p.Get(n).IsArray Then
                        Dim a As PdfArray = DirectCast(p.Get(n), PdfArray)
                        For i As Integer = 0 To a.Size - 1
                            RemoveObjectInArray(a, i)
                        Next
                    ElseIf p.Get(n).IsBoolean Then
                    ElseIf p.Get(n).IsDictionary Then
                        For Each n2 As PdfName In p.GetAsDict(n).Keys.ToArray
                            If Not n2.ToString = PdfName.PARENT.ToString Then
                                If p.GetAsDict(n).Get(n2).IsIndirect Then
                                    Dim pind As PdfIndirectReference = DirectCast(p.GetAsDict(n).GetAsIndirectObject(n2), PdfIndirectReference)
                                    Dim o As PdfObject = pdfReaderDoc.GetPdfObject(pind.Number)
                                    If o.IsArray Then
                                        Dim a As PdfArray = DirectCast(o, PdfArray)
                                        For i As Integer = 0 To a.Size - 1
                                            RemoveObjectInArray(a, i)
                                        Next
                                    ElseIf o.IsBoolean Then
                                    ElseIf o.IsDictionary Then
                                        iTextKillIndirectChildObjects(DirectCast(o, PdfDictionary))
                                    ElseIf o.IsName Then
                                    ElseIf o.IsNull Then
                                    ElseIf o.IsNumber Then
                                    ElseIf o.IsStream Then
                                        iTextKillIndirectChildObjects(DirectCast(o, PdfStream))
                                    ElseIf o.IsString Then
                                    End If
                                    PdfReader.KillIndirect(o)
                                Else
                                    Dim o As PdfObject = p.GetAsStream(n).Get(n2)
                                    If o.IsArray Then
                                        Dim a As PdfArray = DirectCast(o, PdfArray)
                                        For i As Integer = 0 To a.Size - 1
                                            RemoveObjectInArray(a, i)
                                        Next
                                    ElseIf o.IsBoolean Then
                                    ElseIf o.IsDictionary Then
                                        iTextKillIndirectChildObjects(p.GetAsStream(n).GetAsDict(n2))
                                    ElseIf o.IsName Then
                                    ElseIf o.IsNull Then
                                    ElseIf o.IsNumber Then
                                    ElseIf o.IsStream Then
                                        iTextKillIndirectChildObjects(p.GetAsStream(n).GetAsStream(n2))
                                    ElseIf o.IsString Then
                                    End If
                                End If
                            End If
                        Next
                        p.Remove(n)
                    ElseIf p.Get(n).IsName Then
                    ElseIf p.Get(n).IsNull Then
                    ElseIf p.Get(n).IsNumber Then
                    ElseIf p.Get(n).IsStream Then
                        For Each n2 As PdfName In p.GetAsStream(n).Keys.ToArray
                            If Not n2.ToString = PdfName.PARENT.ToString Then
                                If p.GetAsStream(n).Get(n2).IsIndirect Then
                                    Dim pind As PdfIndirectReference = DirectCast(p.GetAsStream(n).GetAsIndirectObject(n2), PdfIndirectReference)
                                    Dim o As PdfObject = pdfReaderDoc.GetPdfObject(pind.Number)
                                    If o.IsArray Then
                                        Dim a As PdfArray = DirectCast(o, PdfArray)
                                        For i As Integer = 0 To a.Size - 1
                                            RemoveObjectInArray(a, i)
                                        Next
                                    ElseIf o.IsBoolean Then
                                    ElseIf o.IsDictionary Then
                                        iTextKillIndirectChildObjects(pind)
                                    ElseIf o.IsName Then
                                    ElseIf o.IsNull Then
                                    ElseIf o.IsNumber Then
                                    ElseIf o.IsStream Then
                                        iTextKillIndirectChildObjects(pind)
                                    ElseIf o.IsString Then
                                    End If
                                    PdfReader.KillIndirect(o)
                                Else
                                    Dim o As PdfObject = p.GetAsStream(n).Get(n2)
                                    If o.IsArray Then
                                        Dim a As PdfArray = DirectCast(o, PdfArray)
                                        For i As Integer = 0 To a.Size - 1
                                            RemoveObjectInArray(a, i)
                                        Next
                                    ElseIf o.IsBoolean Then
                                    ElseIf o.IsDictionary Then
                                        iTextKillIndirectChildObjects(p.GetAsStream(n).GetAsDict(n2))
                                    ElseIf o.IsName Then
                                    ElseIf o.IsNull Then
                                    ElseIf o.IsNumber Then
                                    ElseIf o.IsStream Then
                                        iTextKillIndirectChildObjects(p.GetAsStream(n).GetAsStream(n2))
                                    ElseIf o.IsString Then
                                    End If
                                End If
                            End If
                        Next
                        p.Remove(n)
                    ElseIf p.Get(n).IsString Then
                    End If
                Else
                    Try
                        Dim pind As PdfIndirectReference = DirectCast(p.GetAsIndirectObject(n), PdfIndirectReference)
                        Dim o As PdfObject = pdfReaderDoc.GetPdfObject(pind.Number)
                        If o.IsArray Then
                            Dim a As PdfArray = p.GetAsArray(n)
                            For i As Integer = 0 To a.Size - 1
                                RemoveObjectInArray(a, i)
                            Next
                        ElseIf o.IsBoolean Then
                        ElseIf o.IsDictionary Then
                            iTextKillIndirectChildObjects(pind)
                        ElseIf o.IsName Then
                        ElseIf o.IsNull Then
                        ElseIf o.IsNumber Then
                        ElseIf o.IsStream Then
                            iTextKillIndirectChildObjects(pind)
                        ElseIf o.IsString Then
                        End If
                        PdfReader.KillIndirect(o)
                        p.Remove(n)
                    Catch exIndirect As Exception
                        TimeStampAdd(exIndirect, debugMode)
                    End Try
                End If
            Next
        Catch ex As Exception
            Dim strn As String = n.ToString
            TimeStampAdd(ex, debugMode)
        End Try
        Return p
    End Function
    Public Function iTextKillIndirectChildObjects(ByRef p As PdfStream) As PdfObject
        Dim n As PdfName = Nothing
        Try
            For Each n In p.Keys.ToArray
                If Not n.ToString = PdfName.PARENT.ToString Then
                End If
                If p.Get(n) Is Nothing Then Return p
                If Not p.Get(n).IsIndirect Then
                    If p.Get(n).IsArray Then
                        Dim a As PdfArray = DirectCast(p.Get(n), PdfArray)
                        For i As Integer = 0 To a.Size - 1
                            RemoveObjectInArray(a, i)
                        Next
                    ElseIf p.Get(n).IsBoolean Then
                    ElseIf p.Get(n).IsDictionary Then
                        For Each n2 As PdfName In p.GetAsDict(n).Keys.ToArray
                            If Not n2.ToString = PdfName.PARENT.ToString Then
                                If p.GetAsDict(n).Get(n2).IsIndirect Then
                                    Dim pind As PdfIndirectReference = DirectCast(p.GetAsDict(n).GetAsIndirectObject(n2), PdfIndirectReference)
                                    Dim o As PdfObject = pdfReaderDoc.GetPdfObject(pind.Number)
                                    If o.IsArray Then
                                        Dim a As PdfArray = DirectCast(o, PdfArray)
                                        For i As Integer = 0 To a.Size - 1
                                            RemoveObjectInArray(a, i)
                                        Next
                                    ElseIf o.IsBoolean Then
                                    ElseIf o.IsDictionary Then
                                        iTextKillIndirectChildObjects(DirectCast(o, PdfDictionary))
                                    ElseIf o.IsName Then
                                    ElseIf o.IsNull Then
                                    ElseIf o.IsNumber Then
                                    ElseIf o.IsStream Then
                                        iTextKillIndirectChildObjects(DirectCast(o, PdfStream))
                                    ElseIf o.IsString Then
                                    End If
                                    PdfReader.KillIndirect(o)
                                Else
                                    Dim o As PdfObject = p.GetAsStream(n).Get(n2)
                                    If o.IsArray Then
                                        Dim a As PdfArray = DirectCast(o, PdfArray)
                                        For i As Integer = 0 To a.Size - 1
                                            RemoveObjectInArray(a, i)
                                        Next
                                    ElseIf o.IsBoolean Then
                                    ElseIf o.IsDictionary Then
                                        iTextKillIndirectChildObjects(p.GetAsStream(n).GetAsDict(n2))
                                    ElseIf o.IsName Then
                                    ElseIf o.IsNull Then
                                    ElseIf o.IsNumber Then
                                    ElseIf o.IsStream Then
                                        iTextKillIndirectChildObjects(p.GetAsStream(n).GetAsStream(n2))
                                    ElseIf o.IsString Then
                                    End If
                                End If
                            End If
                        Next
                        p.Remove(n)
                    ElseIf p.Get(n).IsName Then
                    ElseIf p.Get(n).IsNull Then
                    ElseIf p.Get(n).IsNumber Then
                    ElseIf p.Get(n).IsStream Then
                        For Each n2 As PdfName In p.GetAsStream(n).Keys.ToArray
                            If Not n2.ToString = PdfName.PARENT.ToString Then
                                If p.GetAsStream(n).Get(n2).IsIndirect Then
                                    Dim pind As PdfIndirectReference = DirectCast(p.GetAsStream(n).GetAsIndirectObject(n2), PdfIndirectReference)
                                    Dim o As PdfObject = pdfReaderDoc.GetPdfObject(pind.Number)
                                    If o.IsArray Then
                                        Dim a As PdfArray = DirectCast(o, PdfArray)
                                        For i As Integer = 0 To a.Size - 1
                                            RemoveObjectInArray(a, i)
                                        Next
                                    ElseIf o.IsBoolean Then
                                    ElseIf o.IsDictionary Then
                                        iTextKillIndirectChildObjects(pind)
                                    ElseIf o.IsName Then
                                    ElseIf o.IsNull Then
                                    ElseIf o.IsNumber Then
                                    ElseIf o.IsStream Then
                                        iTextKillIndirectChildObjects(pind)
                                    ElseIf o.IsString Then
                                    End If
                                    PdfReader.KillIndirect(o)
                                Else
                                    Dim o As PdfObject = p.GetAsStream(n).Get(n2)
                                    If o.IsArray Then
                                        Dim a As PdfArray = DirectCast(o, PdfArray)
                                        For i As Integer = 0 To a.Size - 1
                                            RemoveObjectInArray(a, i)
                                        Next
                                    ElseIf o.IsBoolean Then
                                    ElseIf o.IsDictionary Then
                                        iTextKillIndirectChildObjects(p.GetAsStream(n).GetAsDict(n2))
                                    ElseIf o.IsName Then
                                    ElseIf o.IsNull Then
                                    ElseIf o.IsNumber Then
                                    ElseIf o.IsStream Then
                                        iTextKillIndirectChildObjects(p.GetAsStream(n).GetAsStream(n2))
                                    ElseIf o.IsString Then
                                    End If
                                End If
                            End If
                        Next
                        p.Remove(n)
                    ElseIf p.Get(n).IsString Then
                    End If
                Else
                    Try
                        Dim pind As PdfIndirectReference = DirectCast(p.GetAsIndirectObject(n), PdfIndirectReference)
                        Dim o As PdfObject = pdfReaderDoc.GetPdfObject(pind.Number)
                        If o.IsArray Then
                            Dim a As PdfArray = p.GetAsArray(n)
                            For i As Integer = 0 To a.Size - 1
                                RemoveObjectInArray(a, i)
                            Next
                        ElseIf o.IsBoolean Then
                        ElseIf o.IsDictionary Then
                            iTextKillIndirectChildObjects(pind)
                        ElseIf o.IsName Then
                        ElseIf o.IsNull Then
                        ElseIf o.IsNumber Then
                        ElseIf o.IsStream Then
                            iTextKillIndirectChildObjects(pind)
                        ElseIf o.IsString Then
                        End If
                        PdfReader.KillIndirect(o)
                        p.Remove(n)
                    Catch exIndirect As Exception
                        TimeStampAdd(exIndirect, debugMode)
                    End Try
                End If
            Next
        Catch ex As Exception
            Dim strn As String = n.ToString
            TimeStampAdd(ex, debugMode)
        End Try
        Return p
    End Function
    Public Function iTextKillIndirectChildObjects(ByRef p As PdfIndirectReference) As PdfObject
        LoadPDFReaderDoc(pdfOwnerPassword, True)
        Dim o As PdfObject = pdfReaderDoc.GetPdfObject(p.Number)
        Try
            If o.IsDictionary Then
                Dim dobj As PdfDictionary = DirectCast(o, PdfDictionary)
                iTextKillIndirectChildObjects(dobj)
            ElseIf o.IsStream Then
                Dim dobj As PdfStream = DirectCast(o, PdfStream)
                iTextKillIndirectChildObjects(dobj)
            End If
        Catch exIndirect As Exception
            TimeStampAdd(exIndirect, debugMode)
        End Try
        Return o
    End Function
    Public Function iTextKillChildIndirectObject(ByRef p As PdfDictionary, ByVal n As PdfName, ByVal excludeN As PdfName, Optional ByVal removeIndirectObjects As Boolean = True) As PdfObject
        Try
            If Not excludeN Is Nothing Then
                If n.ToString = excludeN.ToString Then
                    Return p
                End If
            End If
            If n.ToString = PdfName.PARENT.ToString Then
                Return p
            End If
            If p.Get(n) Is Nothing Then Return p
            If Not p.Get(n).IsIndirect Then
                If p.Get(n).IsArray Then
                    Dim a As PdfArray = DirectCast(p.Get(n), PdfArray)
                    For i As Integer = 0 To a.Size - 1
                        RemoveObjectInArray(a, i)
                    Next
                    p.Remove(n)
                ElseIf p.Get(n).IsBoolean Then
                    p.Remove(n)
                ElseIf p.Get(n).IsDictionary Then
                    For Each n2 As PdfName In p.GetAsDict(n).Keys.ToArray
                        If Not n2.ToString = PdfName.PARENT.ToString Then
                            If Not excludeN Is Nothing Then
                                If Not excludeN.ToString = n2.ToString Then
                                    iTextKillChildIndirectObject(p.GetAsDict(n), n2, excludeN, removeIndirectObjects)
                                End If
                            Else
                                iTextKillChildIndirectObject(p.GetAsDict(n), n2, excludeN, removeIndirectObjects)
                            End If
                        End If
                    Next
                    p.Remove(n)
                ElseIf p.Get(n).IsName Then
                    p.Remove(n)
                ElseIf p.Get(n).IsNull Then
                    p.Remove(n)
                ElseIf p.Get(n).IsNumber Then
                    p.Remove(n)
                ElseIf p.Get(n).IsStream Then
                    For Each n2 As PdfName In p.GetAsStream(n).Keys.ToArray
                        If Not n2.ToString = PdfName.PARENT.ToString Then
                            If Not excludeN Is Nothing Then
                                If Not excludeN.ToString = n2.ToString Then
                                    iTextKillChildIndirectObject(p.GetAsStream(n), n2, excludeN, removeIndirectObjects)
                                End If
                            Else
                                iTextKillChildIndirectObject(p.GetAsStream(n), n2, excludeN, removeIndirectObjects)
                            End If
                        End If
                    Next
                    p.Remove(n)
                ElseIf p.Get(n).IsString Then
                    p.Remove(n)
                End If
            ElseIf removeIndirectObjects Then
                Try
                    Dim pind As PdfIndirectReference = DirectCast(p.GetAsIndirectObject(n), PdfIndirectReference)
                    Dim o As PdfObject = pdfReaderDoc.GetPdfObject(pind.Number)
                    If o.IsArray Then
                        Dim a As PdfArray = p.GetAsArray(n)
                        For i As Integer = 0 To a.Size - 1
                            RemoveObjectInArray(a, i)
                        Next
                    ElseIf o.IsBoolean Then
                    ElseIf o.IsDictionary Then
                        Dim obj As PdfDictionary = DirectCast(p, PdfDictionary)
                        For Each n2 As PdfName In obj.Keys.ToArray
                            If Not n2.ToString = PdfName.PARENT.ToString Then
                                If Not excludeN Is Nothing Then
                                    If Not excludeN.ToString = n2.ToString Then
                                        iTextKillChildIndirectObject(obj, n2, excludeN, removeIndirectObjects)
                                    End If
                                Else
                                    iTextKillChildIndirectObject(obj, n2, excludeN, removeIndirectObjects)
                                End If
                            End If
                        Next
                    ElseIf o.IsName Then
                    ElseIf o.IsNull Then
                    ElseIf o.IsNumber Then
                    ElseIf o.IsStream Then
                        Dim obj As PdfStream = DirectCast(pdfReaderDoc.GetPdfObject(pind.Number), PdfStream)
                        For Each n2 As PdfName In obj.Keys.ToArray
                            If Not n2.ToString = PdfName.PARENT.ToString Then
                                If Not excludeN Is Nothing Then
                                    If Not excludeN.ToString = n2.ToString Then
                                        iTextKillChildIndirectObject(obj, n2, excludeN, removeIndirectObjects)
                                    End If
                                Else
                                    iTextKillChildIndirectObject(obj, n2, excludeN, removeIndirectObjects)
                                End If
                            End If
                        Next
                    ElseIf o.IsString Then
                    End If
                    If removeIndirectObjects Then
                        PdfReader.KillIndirect(pdfReaderDoc.GetPdfObject(pind.Number))
                        PdfReader.KillIndirect(pind)
                        PdfReader.KillIndirect(o)
                    End If
                    p.Remove(n)
                Catch exIndirect As Exception
                    TimeStampAdd(exIndirect, debugMode)
                End Try
            Else
                p.Remove(n)
            End If
        Catch ex As Exception
            Dim strn As String = n.ToString
            TimeStampAdd(ex, debugMode)
        End Try
        Return p
    End Function
    Public Function iTextKillChildIndirectObject(ByRef p As PdfStream, ByVal n As PdfName, ByVal excludeN As PdfName, Optional ByVal removeIndirectObjects As Boolean = True) As PdfObject
        Try
            If Not excludeN Is Nothing Then
                If n.ToString = excludeN.ToString Then
                    Return p
                End If
            End If
            If n.ToString = PdfName.PARENT.ToString Then
                Return p
            End If
            If p.Get(n) Is Nothing Then Return p
            If Not p.Get(n).IsIndirect Then
                If p.Get(n).IsArray Then
                    Dim a As PdfArray = DirectCast(p.Get(n), PdfArray)
                    For i As Integer = 0 To a.Size - 1
                        RemoveObjectInArray(a, i)
                    Next
                    p.Remove(n)
                ElseIf p.Get(n).IsBoolean Then
                    p.Remove(n)
                ElseIf p.Get(n).IsDictionary Then
                    For Each n2 As PdfName In p.GetAsDict(n).Keys.ToArray
                        If Not n2.ToString = PdfName.PARENT.ToString Then
                            If Not excludeN Is Nothing Then
                                If Not excludeN.ToString = n2.ToString Then
                                    iTextKillChildIndirectObject(p.GetAsDict(n), n2, excludeN, removeIndirectObjects)
                                End If
                            Else
                                iTextKillChildIndirectObject(p.GetAsDict(n), n2, excludeN, removeIndirectObjects)
                            End If
                        End If
                    Next
                    p.Remove(n)
                ElseIf p.Get(n).IsName Then
                    p.Remove(n)
                ElseIf p.Get(n).IsNull Then
                    p.Remove(n)
                ElseIf p.Get(n).IsNumber Then
                    p.Remove(n)
                ElseIf p.Get(n).IsStream Then
                    For Each n2 As PdfName In p.GetAsStream(n).Keys.ToArray
                        If Not n2.ToString = PdfName.PARENT.ToString Then
                            If Not excludeN Is Nothing Then
                                If Not excludeN.ToString = n2.ToString Then
                                    iTextKillChildIndirectObject(p.GetAsStream(n), n2, excludeN, removeIndirectObjects)
                                End If
                            Else
                                iTextKillChildIndirectObject(p.GetAsStream(n), n2, excludeN, removeIndirectObjects)
                            End If
                        End If
                    Next
                    p.Remove(n)
                ElseIf p.Get(n).IsString Then
                    p.Remove(n)
                End If
            ElseIf removeIndirectObjects Then
                Try
                    Dim pind As PdfIndirectReference = DirectCast(p.GetAsIndirectObject(n), PdfIndirectReference)
                    Dim o As PdfObject = pdfReaderDoc.GetPdfObject(pind.Number)
                    If o.IsArray Then
                        Dim a As PdfArray = p.GetAsArray(n)
                        For i As Integer = 0 To a.Size - 1
                            RemoveObjectInArray(a, i)
                        Next
                    ElseIf o.IsBoolean Then
                    ElseIf o.IsDictionary Then
                        Dim obj As PdfDictionary = DirectCast(p, PdfDictionary)
                        For Each n2 As PdfName In obj.Keys.ToArray
                            If Not n2.ToString = PdfName.PARENT.ToString Then
                                If Not excludeN Is Nothing Then
                                    If Not excludeN.ToString = n2.ToString Then
                                        iTextKillChildIndirectObject(obj, n2, excludeN, removeIndirectObjects)
                                    End If
                                Else
                                    iTextKillChildIndirectObject(obj, n2, excludeN, removeIndirectObjects)
                                End If
                            End If
                        Next
                    ElseIf o.IsName Then
                    ElseIf o.IsNull Then
                    ElseIf o.IsNumber Then
                    ElseIf o.IsStream Then
                        Dim obj As PdfStream = DirectCast(pdfReaderDoc.GetPdfObject(pind.Number), PdfStream)
                        For Each n2 As PdfName In obj.Keys.ToArray
                            If Not n2.ToString = PdfName.PARENT.ToString Then
                                If Not excludeN Is Nothing Then
                                    If Not excludeN.ToString = n2.ToString Then
                                        iTextKillChildIndirectObject(obj, n2, excludeN, removeIndirectObjects)
                                    End If
                                Else
                                    iTextKillChildIndirectObject(obj, n2, excludeN, removeIndirectObjects)
                                End If
                            End If
                        Next
                    ElseIf o.IsString Then
                    End If
                    If removeIndirectObjects Then
                        PdfReader.KillIndirect(pdfReaderDoc.GetPdfObject(pind.Number))
                        PdfReader.KillIndirect(pind)
                        PdfReader.KillIndirect(o)
                    End If
                    p.Remove(n)
                Catch exIndirect As Exception
                    TimeStampAdd(exIndirect, debugMode)
                End Try
            Else
                p.Remove(n)
            End If
        Catch ex As Exception
            Dim strn As String = n.ToString
            TimeStampAdd(ex, debugMode)
        End Try
        Return p
    End Function
    Public Function iTextKillChildIndirectObject(ByRef p1 As PdfIndirectReference, ByVal n As PdfName, ByVal excludeN As PdfName, Optional ByVal removeIndirectObjects As Boolean = True) As PdfObject
        Dim o As PdfObject = pdfReaderDoc.GetPdfObject(p1.Number)
        Try
            If Not excludeN Is Nothing Then
                If n.ToString = excludeN.ToString Then
                    Return p1
                End If
            End If
            If n.ToString = PdfName.PARENT.ToString Then
                Return p1
            End If
            If o.IsDictionary Then
                Dim dobj As PdfDictionary = DirectCast(o, PdfDictionary)
                iTextKillChildIndirectObject(dobj, n, excludeN, removeIndirectObjects)
                dobj.Remove(n)
            End If
        Catch exIndirect As Exception
            TimeStampAdd(exIndirect, debugMode)
        End Try
        Return o
    End Function
    Public Function iTextConvertIndirectObjects(ByVal pTemp As PdfDictionary) As PdfObject
        Dim n2 As PdfName = Nothing
        Dim p As New PdfDictionary
        Try
            For Each n As PdfName In pTemp.Keys.ToArray
                n2 = n
                If Not n2.ToString = PdfName.PARENT.ToString Then
                    If pTemp.Get(n) Is Nothing Then Return p
                    If pTemp.Get(n).IsIndirect Then
                        Try
                            Dim pind As PdfIndirectReference = DirectCast(pTemp.GetAsIndirectObject(n), PdfIndirectReference)
                            Dim o As PdfObject = DirectCast(pdfReaderDoc.GetPdfObject(pind.Number), PdfObject)
                            If o.IsIndirect Then
                                Dim b123123 As Boolean = False
                                b123123 = True
                            End If
                            If o.IsArray Then
                                Dim p1 As PdfArray = pTemp.GetAsArray(n)
                                p.Put(n, p1)
                            ElseIf o.IsBoolean Then
                                Dim p1 As PdfBoolean = pTemp.GetAsBoolean(n)
                                p.Put(n, p1)
                            ElseIf o.IsDictionary Then
                                Dim p1 As PdfDictionary = DirectCast(p, PdfDictionary)
                                For Each nTemp As PdfName In pTemp.GetAsDict(n).Keys.ToArray
                                    Dim strn2 As String = nTemp.ToString
                                    strn2 = strn2
                                    If Not nTemp.ToString = PdfName.PARENT.ToString Then
                                        If pTemp.GetAsDict(n).Get(nTemp).IsIndirect Then
                                            p1.Put(nTemp, iTextConvertIndirectObjects(p1))
                                        End If
                                    End If
                                Next
                                p.Put(n, p1)
                            ElseIf o.IsName Then
                                Dim p1 As PdfName = pTemp.GetAsName(n)
                                p.Put(n, p1)
                            ElseIf o.IsNull Then
                                Dim p1 As PdfNull = DirectCast(pTemp.Get(n), PdfNull)
                                p.Put(n, p1)
                            ElseIf o.IsNumber Then
                                Dim p1 As PdfNumber = pTemp.GetAsNumber(n)
                                p.Put(n, p1)
                            ElseIf o.IsStream Then
                                Dim p1 As PdfStream = pTemp.GetAsStream(n)
                                For Each nTemp As PdfName In DirectCast(o, PdfDictionary).Keys.ToArray
                                    Dim strn2 As String = nTemp.ToString
                                    strn2 = strn2
                                    If Not nTemp.ToString = PdfName.PARENT.ToString Then
                                        If p1.Get(nTemp).IsIndirect Then
                                            p1.Put(nTemp, iTextConvertIndirectObjects(p1))
                                        End If
                                    End If
                                Next
                                p.Put(n, p1)
                            ElseIf o.IsString Then
                                Dim p1 As PdfString = pTemp.GetAsString(n)
                                p.Put(n, p1)
                            End If
                        Catch exIndirect As Exception
                            TimeStampAdd(exIndirect, debugMode)
                        End Try
                    Else
                        p.Put(n, pTemp.Get(n))
                    End If
                End If
            Next
        Catch ex As Exception
            Dim strn As String = n2.ToString
            TimeStampAdd(ex, debugMode)
        End Try
        Return p
    End Function
    Public Function iTextConvertIndirectObjects(ByVal pTemp As PdfStream) As PdfObject
        Dim n2 As PdfName = Nothing
        Dim p As New PdfStream(pTemp.GetBytes())
        Try
            For Each n As PdfName In pTemp.Keys.ToArray
                n2 = n
                If Not n2.ToString = PdfName.PARENT.ToString Then
                    If pTemp.Get(n) Is Nothing Then Return p
                    If pTemp.Get(n).IsIndirect Then
                        Try
                            Dim pind As PdfIndirectReference = DirectCast(pTemp.GetAsIndirectObject(n), PdfIndirectReference)
                            Dim o As PdfObject = DirectCast(pdfReaderDoc.GetPdfObject(pind.Number), PdfObject)
                            If o.IsIndirect Then
                                Dim b123123 As Boolean = False
                                b123123 = True
                            End If
                            If o.IsArray Then
                                Dim p1 As PdfArray = pTemp.GetAsArray(n)
                                p.Put(n, p1)
                            ElseIf o.IsBoolean Then
                                Dim p1 As PdfBoolean = pTemp.GetAsBoolean(n)
                                p.Put(n, p1)
                            ElseIf o.IsDictionary Then
                                Dim p1 As PdfDictionary = DirectCast(p, PdfDictionary)
                                For Each nTemp As PdfName In pTemp.GetAsDict(n).Keys.ToArray
                                    Dim strn2 As String = nTemp.ToString
                                    strn2 = strn2
                                    If Not nTemp.ToString = PdfName.PARENT.ToString Then
                                        If pTemp.GetAsDict(n).Get(nTemp).IsIndirect Then
                                            p1.Put(nTemp, iTextConvertIndirectObjects(p1))
                                        End If
                                    End If
                                Next
                                p.Put(n, p1)
                            ElseIf o.IsName Then
                                Dim p1 As PdfName = pTemp.GetAsName(n)
                                p.Put(n, p1)
                            ElseIf o.IsNull Then
                                Dim p1 As PdfNull = DirectCast(pTemp.Get(n), PdfNull)
                                p.Put(n, p1)
                            ElseIf o.IsNumber Then
                                Dim p1 As PdfNumber = pTemp.GetAsNumber(n)
                                p.Put(n, p1)
                            ElseIf o.IsStream Then
                                Dim p1 As PdfStream = p.GetAsStream(n)
                                For Each nTemp As PdfName In DirectCast(o, PdfDictionary).Keys.ToArray
                                    Dim strn2 As String = nTemp.ToString
                                    strn2 = strn2
                                    If Not nTemp.ToString = PdfName.PARENT.ToString Then
                                        If p1.Get(nTemp).IsIndirect Then
                                            p1.Put(nTemp, iTextConvertIndirectObjects(p1))
                                        End If
                                    End If
                                Next
                                p.Put(n, p1)
                            ElseIf o.IsString Then
                                Dim p1 As PdfString = pTemp.GetAsString(n)
                                p.Put(n, p1)
                            End If
                        Catch exIndirect As Exception
                            TimeStampAdd(exIndirect, debugMode)
                        End Try
                    Else
                        p.Put(n, pTemp.Get(n))
                    End If
                End If
            Next
        Catch ex As Exception
            Dim strn As String = n2.ToString
            TimeStampAdd(ex, debugMode)
        End Try
        Return p
    End Function
    Public Function iTextConvertIndirectObjects(ByRef p1 As PdfIndirectReference) As PdfObject
        Dim o As PdfObject = pdfReaderDoc.GetPdfObject(p1.Number)
        Try
            If o.IsDictionary Then
                Dim dobj As PdfDictionary = DirectCast(o, PdfDictionary)
                iTextConvertIndirectObjects(dobj)
            End If
        Catch exIndirect As Exception
            TimeStampAdd(exIndirect, debugMode)
        End Try
        Return o
    End Function
    Public Function RemoveFormField(ByVal b() As Byte, ByVal fldname As String, Optional ByVal pageNumber As Integer = -1) As Byte()
        Try
            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            Dim memStream As New MemoryStream
            Dim fields As PdfArray = Nothing
            Dim field As Integer = 0
            Dim fldCnt As Integer = 0
            With getStamper(pdfReaderDoc, memStream)
                Dim f As iTextSharp.text.pdf.AcroFields.Item = .Reader.AcroFields.GetFieldItem(fldname)
                Dim AA As PdfDictionary = Nothing
                If Not .AcroFields.GetFieldItem(fldname).GetMerged(0).Get(PdfName.KIDS) Is Nothing Then
                    If .AcroFields.GetFieldItem(fldname).GetMerged(0).Get(PdfName.KIDS).IsArray Then
                        Dim kids As PdfArray = .AcroFields.GetFieldItem(fldname).GetMerged(0).GetAsArray(PdfName.KIDS)
                        Dim firstKidRect As PdfArray = Nothing
                        fldCnt = kids.Size
                        If kids.Size >= 1 And fldKidIndex >= 0 Then
                            If kids(fldKidIndex).IsIndirect Then
                                Dim pind As PdfIndirectReference = kids.GetAsIndirectObject(fldKidIndex)
                                If pdfReaderDoc.GetPdfObject(pind.Number).IsDictionary Then
                                End If
                                PdfReader.KillIndirect(pind)
                                PdfReader.KillIndirect(pdfReaderDoc.GetPdfObject(pind.Number))
                                PdfReader.KillIndirect(kids(fldKidIndex))
                                Dim tmpSize123 As Integer = kids.Size
                                kids.Remove(fldKidIndex)
                                Try
                                    If kids.Size >= 1 Then
                                        firstKidRect = kids.GetAsDict(0).GetAsArray(PdfName.RECT)
                                    End If
                                Catch ex As Exception
                                    firstKidRect = Nothing
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Else
                                If kids(fldKidIndex).IsDictionary Then
                                End If
                                kids.Remove(fldKidIndex)
                                Try
                                    If kids.Size >= 1 Then
                                        firstKidRect = kids.GetAsDict(0).GetAsArray(PdfName.RECT)
                                    End If
                                Catch ex As Exception
                                    firstKidRect = Nothing
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            End If
                            GoTo CloseUp
                        End If
                        GoTo TryOther
                    End If
                End If
TryOther:
                fldCnt = 0
                Try
                    If fldKidIndex >= 0 Then
                        If pageNumber > 0 Then
                            .AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                        Else
                            For i As Integer = 0 To f.Size - 1
                                If CInt(f.GetPage(i)) = pageNumber Then
                                    .AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                End If
                            Next
                        End If
                    End If
                Catch exRemoveField As Exception
                    TimeStampAdd(exRemoveField, debugMode)
                    Err.Clear()
                End Try
CloseUp:
                fldKidIndex = -1
                .Reader.RemoveUnusedObjects()
                .Writer.CloseStream = False
                .Close()
                If memStream.CanSeek Then
                    memStream.Position = 0
                End If
                b = memStream.ToArray
                memStream.Close()
                memStream.Dispose()
                Return b
            End With
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return b
    End Function
    Public Function MoveFormField(ByVal b() As Byte, ByVal fldname As String, ByVal newRect As System.Drawing.RectangleF, Optional ByVal pageNumber As Integer = -1) As Byte()
        Try
            If isSessionNull() Then Return Nothing
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Dim memStream As New MemoryStream
            pdfReaderDoc.Appendable = True
            With getStamper(pdfReaderDoc, memStream)
                Dim form As iTextSharp.text.pdf.AcroFields = .AcroFields
                If pageNumber >= 0 Then
                    Dim pdfFormfield As iTextSharp.text.pdf.AcroFields.Item = .AcroFields.Fields(fldname)
                    form.SetFieldProperty(fldname, "", "", Nothing)
                    Dim rect As iTextSharp.text.pdf.PdfArray = pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetWidget(0).GetAsArray(PdfName.RECT)
                    Dim its() As Single = New Single() {CSng(rect.GetAsNumber(0).FloatValue()), CSng(rect.GetAsNumber(1).FloatValue()), CSng(rect.GetAsNumber(2).FloatValue() - 10.0F), CSng(rect.GetAsNumber(3).FloatValue())}
                    rect = New iTextSharp.text.pdf.PdfArray(its)
                    pdfReaderDoc.AcroFields.RegenerateField(fldname)
                Else
                End If
                .Writer.CloseStream = False
                .Close()
                If memStream.CanSeek Then
                    memStream.Position = 0
                End If
                b = memStream.ToArray
                memStream.Close()
                memStream.Dispose()
                Return b
            End With
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return b
    End Function
    Public Function GetKidTextField(ByVal writer As PdfWriter, ByVal box As iTextSharp.text.Rectangle, ByVal frmFld As iTextSharp.text.pdf.TextField) As PdfFormField
        Dim kid As PdfFormField = PdfFormField.CreateEmpty(writer)
        kid.SetWidget(box, Nothing)
        Dim background As iTextSharp.text.BaseColor = New BaseColor(PDFField_BackgroundColorPicker.BackColor)
        Dim cb3 As PdfContentByte = New PdfContentByte(writer)
        Dim ap3 As PdfAppearance = cb3.CreateAppearance(box.Width, box.Height)
        ap3.SetRGBColorFill(CInt(PDFField_BackgroundColorPicker.BackColor.R), CInt(PDFField_BackgroundColorPicker.BackColor.G), CInt(PDFField_BackgroundColorPicker.BackColor.B))
        ap3.SetRGBColorStroke(CInt(PDFField_BorderColorPicker.BackColor.R), CInt(PDFField_BorderColorPicker.BackColor.G), CInt(PDFField_BorderColorPicker.BackColor.B))
        ap3.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
        Select Case frmFld.BorderStyle
            Case 0
                ap3.SetLineDash(0)
            Case 1
                ap3.SetLineDash(3)
            Case 2
                ap3.SetLineDash(0)
            Case 3
                ap3.SetLineDash(0)
            Case Else
                ap3.SetLineDash(0)
        End Select
        ap3.Rectangle(0, 0, box.Width, box.Height)
        ap3.Fill()
        ap3.DrawTextField(box.Left, box.Bottom, box.Right, box.Top)
        kid.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, ap3)
        kid.MKBackgroundColor = New BaseColor(PDFField_BackgroundColorPicker.BackColor)
        Dim bordercolor As iTextSharp.text.BaseColor = New BaseColor(PDFField_BorderColorPicker.BackColor)
        kid.MKBorderColor = bordercolor
        kid.MKRotation = frmFld.Rotation + 0
        kid.Flags = 4
        Return kid
    End Function
    Public Function GetKidRadioCheckField(ByVal writer As PdfWriter, ByVal box As iTextSharp.text.Rectangle, ByVal frmFld As iTextSharp.text.pdf.RadioCheckField) As PdfFormField
        Dim kid As PdfFormField = PdfFormField.CreateEmpty(writer)
        kid.SetWidget(box, Nothing)
        Dim background As iTextSharp.text.BaseColor = New BaseColor(PDFField_BackgroundColorPicker.BackColor)
        Dim cb3 As PdfContentByte = New PdfContentByte(writer)
        Dim ap3 As PdfAppearance = cb3.CreateAppearance(box.Width, box.Height)
        ap3.SetRGBColorFill(CInt(PDFField_BackgroundColorPicker.BackColor.R), CInt(PDFField_BackgroundColorPicker.BackColor.G), CInt(PDFField_BackgroundColorPicker.BackColor.B))
        ap3.SetRGBColorStroke(CInt(PDFField_BorderColorPicker.BackColor.R), CInt(PDFField_BorderColorPicker.BackColor.G), CInt(PDFField_BorderColorPicker.BackColor.B))
        ap3.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
        Select Case frmFld.BorderStyle
            Case 0
                ap3.SetLineDash(0)
            Case 1
                ap3.SetLineDash(3)
            Case 2
                ap3.SetLineDash(0)
            Case 3
                ap3.SetLineDash(0)
            Case Else
                ap3.SetLineDash(0)
        End Select
        ap3.Rectangle(0, 0, box.Width, box.Height)
        ap3.Fill()
        ap3.DrawTextField(box.Left, box.Bottom, box.Right, box.Top)
        kid.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, ap3)
        kid.MKBackgroundColor = New BaseColor(PDFField_BackgroundColorPicker.BackColor)
        Dim bordercolor As iTextSharp.text.BaseColor = New BaseColor(PDFField_BorderColorPicker.BackColor)
        kid.MKBorderColor = bordercolor
        kid.MKRotation = frmFld.Rotation + 0
        kid.Flags = 4
        Return kid
    End Function
    Public Function GetKidTextField(ByVal writer As PdfWriter, ByVal box As iTextSharp.text.Rectangle, ByVal frmFld As iTextSharp.text.pdf.PdfFormField, ByVal background As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal borderwidth As Single) As PdfFormField
        Dim kid As PdfFormField = PdfFormField.CreateEmpty(writer)
        kid.SetWidget(box, Nothing)
        Dim cb3 As PdfContentByte = New PdfContentByte(writer)
        Dim ap3 As PdfAppearance = cb3.CreateAppearance(box.Width, box.Height)
        ap3.SetRGBColorFill(background.R, background.G, background.B)
        ap3.SetColorStroke(bordercolor)
        ap3.SetLineWidth(borderwidth)
        ap3.Rectangle(0, 0, box.Width, box.Height)
        ap3.Fill()
        kid.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, ap3)
        kid.MKBackgroundColor = background
        kid.MKBorderColor = bordercolor
        kid.Flags = 4
        Return kid
    End Function
    Public Function GetKidTextField(ByVal writer As PdfWriter, ByVal box As iTextSharp.text.pdf.PdfRectangle, ByVal frmFld As iTextSharp.text.pdf.TextField) As PdfFormField
        Dim kid As PdfFormField = PdfFormField.CreateEmpty(writer)
        kid.SetWidget(New iTextSharp.text.Rectangle(box.Left, box.Bottom, box.Right, box.Top), Nothing)
        Dim background As iTextSharp.text.BaseColor = New BaseColor(PDFField_BackgroundColorPicker.BackColor)
        Dim cb3 As PdfContentByte = New PdfContentByte(writer)
        Dim ap3 As PdfAppearance = cb3.CreateAppearance(box.Width, box.Height)
        ap3.SetRGBColorFill(CInt(PDFField_BackgroundColorPicker.BackColor.R), CInt(PDFField_BackgroundColorPicker.BackColor.G), CInt(PDFField_BackgroundColorPicker.BackColor.B))
        ap3.SetRGBColorStroke(CInt(PDFField_BorderColorPicker.BackColor.R), CInt(PDFField_BorderColorPicker.BackColor.G), CInt(PDFField_BorderColorPicker.BackColor.B))
        ap3.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
        Select Case frmFld.BorderStyle
            Case 0
                ap3.SetLineDash(0)
            Case 1
                ap3.SetLineDash(3)
            Case 2
                ap3.SetLineDash(0)
            Case 3
                ap3.SetLineDash(0)
            Case Else
                ap3.SetLineDash(0)
        End Select
        ap3.Rectangle(0, 0, box.Width, box.Height)
        ap3.Fill()
        ap3.DrawTextField(box.Left, box.Bottom, box.Right, box.Top)
        kid.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, ap3)
        kid.MKBackgroundColor = New BaseColor(PDFField_BackgroundColorPicker.BackColor)
        Dim bordercolor As iTextSharp.text.BaseColor = New BaseColor(PDFField_BorderColorPicker.BackColor)
        kid.MKBorderColor = bordercolor
        kid.MKRotation = frmFld.Rotation + 0
        kid.Flags = 4
        Return kid
    End Function
    Public Sub RemoveObject(ByRef obj As PdfDictionary, ByVal name As PdfName)
        Try
            If Not obj.Get(name) Is Nothing Then
                If obj.Get(name).IsIndirect Then
                    PdfReader.KillIndirect(obj.Get(name))
                End If
                obj.Remove(name)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub RemoveObjectInArray(ByRef obj As PdfArray, ByVal idx As Integer)
        Try
            If obj.Size > idx And idx >= 0 Then
                If Not obj.GetAsArray(idx) Is Nothing Then
                    If obj.GetAsArray(idx).IsIndirect Then
                        PdfReader.KillIndirect(obj.GetAsArray(idx))
                    End If
                ElseIf Not obj.GetAsBoolean(idx) Is Nothing Then
                    If obj.GetAsBoolean(idx).IsIndirect Then
                        PdfReader.KillIndirect(obj.GetAsBoolean(idx))
                    End If
                ElseIf Not obj.GetAsDict(idx) Is Nothing Then
                    If obj.GetAsDict(idx).IsIndirect Then
                        PdfReader.KillIndirect(obj.GetAsDict(idx))
                    End If
                ElseIf Not obj.GetAsName(idx) Is Nothing Then
                    If obj.GetAsName(idx).IsIndirect Then
                        PdfReader.KillIndirect(obj.GetAsName(idx))
                    End If
                ElseIf Not obj.GetAsNumber(idx) Is Nothing Then
                    If obj.GetAsName(idx).IsIndirect Then
                        PdfReader.KillIndirect(obj.GetAsNumber(idx))
                    End If
                ElseIf Not obj.GetAsStream(idx) Is Nothing Then
                    If obj.GetAsName(idx).IsIndirect Then
                        PdfReader.KillIndirect(obj.GetAsStream(idx))
                    End If
                ElseIf Not obj.GetAsString(idx) Is Nothing Then
                    If obj.GetAsName(idx).IsIndirect Then
                        PdfReader.KillIndirect(obj.GetAsString(idx))
                    End If
                ElseIf Not obj.GetAsIndirectObject(idx) Is Nothing Then
                    If obj.GetAsName(idx).IsIndirect Then
                        PdfReader.KillIndirect(obj.GetAsIndirectObject(idx))
                    End If
                End If
                obj.Remove(idx)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function getRectangleScreen(ByVal rect As System.Drawing.RectangleF) As System.Drawing.RectangleF
        Dim p As Single = getPercent()
        rect = New System.Drawing.RectangleF(rect.Left * p, rect.Top * p, rect.Width * p, rect.Height * p)
        Return rect
    End Function
    Public Function getRectangleScreen(ByVal rect As System.Drawing.RectangleF, pageNumber As Integer) As System.Drawing.RectangleF
        Dim p As Single = getPercent(pdfReaderDoc, pageNumber)
        rect = New System.Drawing.RectangleF(rect.Left * p, rect.Top * p, rect.Width * p, rect.Height * p)
        Return rect
    End Function
    Public Function getRectangleScreen(ByVal rect As System.Drawing.Rectangle) As System.Drawing.Rectangle
        Dim p As Single = getPercent()
        rect = New System.Drawing.Rectangle(CInt(rect.Left * p), CInt(rect.Top * p), CInt(rect.Width * p), CInt(rect.Height * p))
        Return rect
    End Function
    Public Function getRectangleScreen2(ByVal rect As System.Drawing.RectangleF, pageNumber As Integer) As iTextSharp.text.Rectangle
        Dim p As Single = getPercent(pdfReaderDoc, pageNumber)
        Dim rectItext = New iTextSharp.text.Rectangle(rect.Left * p, rect.Bottom * p, rect.Right * p, rect.Top * p)
        Return rectItext
    End Function
    Public Function getRectangleScreen2(ByVal rect As iTextSharp.text.Rectangle) As iTextSharp.text.Rectangle
        Dim p As Single = getPercent()
        rect = New iTextSharp.text.Rectangle(rect.Left * p, rect.Bottom * p, rect.Right * p, rect.Top * p)
        Return rect
    End Function
    Public Function getRectangleScreen2(ByVal rect As iTextSharp.text.Rectangle, pageNumber As Integer) As iTextSharp.text.Rectangle
        Dim p As Single = getPercent(pdfReaderDoc, pageNumber)
        rect = New iTextSharp.text.Rectangle(rect.Left * p, rect.Bottom * p, rect.Right * p, rect.Top * p)
        Return rect
    End Function
    Public Function getRectangleScreen(ByVal rect As iTextSharp.text.Rectangle) As System.Drawing.RectangleF
        Dim p As Single = getPercent()
        Dim rectF = New System.Drawing.RectangleF(rect.Left * p, rect.Bottom * p, rect.Width, rect.Height)
        Return rectF
    End Function
    Public Function getRectangleScreen(ByVal rect As iTextSharp.text.pdf.PdfRectangle) As iTextSharp.text.pdf.PdfRectangle
        Dim p As Single = getPercent()
        rect = New iTextSharp.text.pdf.PdfRectangle(rect.Left * p, rect.Bottom * p, rect.Right * p, rect.Top * p)
        Return rect
    End Function
    Public Function getRectangleScreen(ByVal rect As iTextSharp.text.pdf.PdfArray) As System.Drawing.RectangleF
        Dim p As Single = getPercent()
        Dim rA As New List(Of Single)
        rA.Add(CSng(rect.GetAsNumber(0).DoubleValue))
        rA.Add(CSng(rect.GetAsNumber(1).DoubleValue))
        rA.Add(CSng(rect.GetAsNumber(2).DoubleValue))
        rA.Add(CSng(rect.GetAsNumber(3).DoubleValue))
        Dim sngPdfHeight As Single = getPDFHeight()
        Dim rectF As New System.Drawing.RectangleF(rA(0) * p, (sngPdfHeight - rA(3)) * p, (rA(2) - rA(0)) * p, ((sngPdfHeight - rA(1)) * p) - ((sngPdfHeight - rA(3)) * p))
        Return rectF
    End Function
    Public Function getRectangleScreen(ByVal rect As iTextSharp.text.pdf.PdfArray, pageNum As Integer) As System.Drawing.RectangleF
        Dim p As Single = getPercent(pdfReaderDoc, pageNum)
        Dim rA As New List(Of Single)
        rA.Add(CSng(rect.GetAsNumber(0).DoubleValue))
        rA.Add(CSng(rect.GetAsNumber(1).DoubleValue))
        rA.Add(CSng(rect.GetAsNumber(2).DoubleValue))
        rA.Add(CSng(rect.GetAsNumber(3).DoubleValue))
        Dim sngPdfHeight As Single = getPDFHeight()
        Dim rectF As New System.Drawing.RectangleF(rA(0) * p, (sngPdfHeight - rA(3)) * p, (rA(2) - rA(0)) * p, ((sngPdfHeight - rA(1)) * p) - ((sngPdfHeight - rA(3)) * p))
        Return rectF
    End Function
    Public Function getPointScreen(ByVal pt As System.Drawing.PointF) As System.Drawing.PointF
        Dim p As Single = getPercent()
        pt = New System.Drawing.PointF(pt.X * p, pt.Y * p)
        Return pt
    End Function
    Public Function getPointScreen(ByVal pt As System.Drawing.Point) As System.Drawing.Point
        Dim p As Single = getPercent()
        pt = New System.Drawing.Point(CInt(pt.X * p), CInt(pt.Y * p))
        Return pt
    End Function
    Public Function getRectanglePDF(ByVal rect As System.Drawing.RectangleF) As System.Drawing.RectangleF
        Dim p As Single = getPercent()
        rect = New System.Drawing.RectangleF(CSng(rect.Left / p), CSng(rect.Top / p), CSng(rect.Width / p), CSng(rect.Height / p))
        Return rect
    End Function
    Public Function getRectanglePDF(ByVal rect As System.Drawing.Rectangle) As System.Drawing.Rectangle
        Dim p As Single = getPercent()
        rect = New System.Drawing.Rectangle(CInt(rect.Left / p), CInt(rect.Top / p), CInt(rect.Width / p), CInt(rect.Height / p))
        Return rect
    End Function
    Public Function getRectanglePDF(ByVal rect As iTextSharp.text.Rectangle) As iTextSharp.text.Rectangle
        Dim p As Single = getPercent()
        rect = New iTextSharp.text.Rectangle(rect.Left / p, rect.Bottom / p, rect.Right / p, rect.Top / p)
        Return rect
    End Function
    Public Function getRectanglePDF(ByVal rect As System.Drawing.RectangleF, fromPDFcUserRect As Boolean) As iTextSharp.text.Rectangle
        Dim p As Single = getPercent()
        If fromPDFcUserRect Then
            Dim r As New iTextSharp.text.Rectangle(rect.Left, rect.Bottom, rect.Right, rect.Top)
            Return r
        Else
            Dim r As New iTextSharp.text.Rectangle(rect.Left / p, rect.Bottom / p, rect.Right / p, rect.Top / p)
            Return r
        End If
    End Function
    Public Function getRectangle(ByVal rect As PdfArray) As iTextSharp.text.Rectangle
        If rect.Size > 3 Then
            Return New iTextSharp.text.Rectangle(rect.GetAsNumber(0).FloatValue, rect.GetAsNumber(1).FloatValue, rect.GetAsNumber(2).FloatValue, rect.GetAsNumber(3).FloatValue)
        End If
        Return Nothing
    End Function
    Public Function getRectanglePDF(ByVal rect As iTextSharp.text.pdf.PdfRectangle) As iTextSharp.text.pdf.PdfRectangle
        Dim p As Single = getPercent()
        rect = New iTextSharp.text.pdf.PdfRectangle(rect.Left / p, rect.Bottom / p, rect.Right / p, rect.Top / p)
        Return rect
    End Function
    Public Function getRectangleF(ByVal rect As iTextSharp.text.pdf.PdfRectangle, Optional ByVal Reverse As Boolean = False) As System.Drawing.RectangleF
        If Reverse Then
            Return New System.Drawing.RectangleF(rect.Left, rect.Bottom, rect.Width, rect.Height)
        Else
            Return New System.Drawing.RectangleF(rect.Left, rect.Top, rect.Width, rect.Height)
        End If
    End Function
    Public Function getRectangleF(ByVal rect As iTextSharp.text.Rectangle, Optional ByVal Reverse As Boolean = False) As System.Drawing.RectangleF
        If Reverse Then
            Return New System.Drawing.RectangleF(rect.Left, rect.Bottom, rect.Width, rect.Height)
        Else
            Return New System.Drawing.RectangleF(rect.Left, rect.Top, rect.Width, rect.Height)
        End If
    End Function
    Public Function getRectangleF(ByVal rect As System.Drawing.RectangleF, Optional ByVal Reverse As Boolean = False) As System.Drawing.RectangleF
        If Reverse Then
            Return New System.Drawing.RectangleF(rect.Left, getPDFHeight() - rect.Top, rect.Width, rect.Height * -1)
        Else
            Return New System.Drawing.RectangleF(rect.Left, rect.Top, rect.Width, rect.Height)
        End If
    End Function
    Public Function getPercent() As Single
        If isSessionNull() Then Return 1.0F
        If Not tmpPercent = Nothing Then
            Return tmpPercent
        Else
            If Not Session Is Nothing Then
                If isSessionNull() Then Return 1.0F
            Else
                Return 1.0F
            End If
            Dim h As Single = CSng(pdfReaderDoc.GetPageSizeWithRotation(CInt(pageIndex) + 1).Height) + 0
            Dim w As Single = CSng(pdfReaderDoc.GetPageSizeWithRotation(CInt(pageIndex) + 1).Width) + 0
            Dim rH As Single = h / w
            Dim rW As Single = w / h
            Dim picWidth As Single = PictureBox1_Panel.Width - 17
            Dim picHeight As Single = PictureBox1_Panel.Height + 0
            Try
                If cmbPercent.SelectedIndex >= 0 Then
                    Select Case cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "").ToLower
                        Case "Fit Width".ToLower()
                            tmpPercent = CSng(picWidth / w)
                        Case "Fit Height".ToLower()
                            tmpPercent = CSng(picHeight / h)
                        Case "Actual Size".ToLower()
                            tmpPercent = 1.0F
                        Case "fit page".ToLower()
                            If h > w Then
                                tmpPercent = CSng(picWidth / w)
                                If tmpPercent > CSng(picHeight / h) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            Else
                                tmpPercent = CSng(picHeight / h)
                                If tmpPercent > CSng(picWidth / w) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            End If
                        Case "fit visible".ToLower()
                            If h > w Then
                                tmpPercent = CSng(picWidth / w)
                                If tmpPercent > CSng(picHeight / h) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            Else
                                tmpPercent = CSng(picHeight / h)
                                If tmpPercent > CSng(picWidth / w) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            End If
                        Case Else
                            If IsNumeric(cmbPercent.Text.ToString.Replace("%", "")) Then
                                tmpPercent = CSng(CSng(cmbPercent.Text.ToString.Replace("%", "")) / 100)
                            ElseIf IsNumeric(cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "")) Then
                                tmpPercent = CSng(CSng(cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "")) / 100)
                            Else
                                cmbPercent.Text = "100%"
                                tmpPercent = 1.0F
                            End If
                    End Select
                Else
                    If IsNumeric(cmbPercent.Text.ToString.Replace("%", "")) Then
                        tmpPercent = CSng(CSng(cmbPercent.Text.ToString.Replace("%", "")) / 100)
                    Else
                        cmbPercent.Text = "100%"
                        tmpPercent = 1.0F
                    End If
                End If
            Catch ex As Exception
                cmbPercent.Text = "100%"
                tmpPercent = 1.0F
                TimeStampAdd(ex, debugMode)
            End Try
            Return tmpPercent
        End If
    End Function
    Public Function getPercent(ByVal pdfread As PdfReader, ByVal pageNumber As Integer) As Single
        If isSessionNull() Then Return 1.0F
        Dim tmpPercent1 As Single = 1.0F
        If pdfread Is Nothing Then
            Return 1.0F
        End If
        Dim h As Single = CSng(pdfread.GetPageSizeWithRotation(pageNumber).Height) + 0
        Dim w As Single = CSng(pdfread.GetPageSizeWithRotation(pageNumber).Width) + 0
        Dim rH As Single = h / w
        Dim rW As Single = w / h
        Dim picWidth As Single = PictureBox1_Panel.Width - 17
        Dim picHeight As Single = PictureBox1_Panel.Height + 0
        Try
            If cmbPercent.SelectedIndex >= 0 Then
                Select Case cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "").ToLower
                    Case "Fit Width".ToLower()
                        tmpPercent1 = CSng(picWidth / w)
                    Case "Fit Height".ToLower()
                        tmpPercent1 = CSng(picHeight / h)
                    Case "Actual Size".ToLower()
                        tmpPercent1 = 1.0F
                    Case "fit page".ToLower()
                        If h > w Then
                            tmpPercent1 = CSng(picWidth / w)
                            If tmpPercent1 > CSng(picHeight / h) Then
                                tmpPercent1 = CSng(picHeight / h)
                            End If
                        Else
                            tmpPercent1 = CSng(picHeight / h)
                            If tmpPercent1 > CSng(picWidth / w) Then
                                tmpPercent1 = CSng(picHeight / h)
                            End If
                        End If
                    Case "fit visible".ToLower()
                        If h > w Then
                            tmpPercent1 = CSng(picWidth / w)
                            If tmpPercent1 > CSng(picHeight / h) Then
                                tmpPercent1 = CSng(picHeight / h)
                            End If
                        Else
                            tmpPercent1 = CSng(picHeight / h)
                            If tmpPercent1 > CSng(picWidth / w) Then
                                tmpPercent1 = CSng(picHeight / h)
                            End If
                        End If
                    Case Else
                        If IsNumeric(cmbPercent.Text.ToString.Replace("%", "")) Then
                            tmpPercent1 = CSng(CSng(cmbPercent.Text.ToString.Replace("%", "")) / 100)
                        ElseIf IsNumeric(cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "")) Then
                            tmpPercent1 = CSng(CSng(cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "")) / 100)
                        Else
                            cmbPercent.Text = "100%"
                            tmpPercent1 = 1.0F
                        End If
                End Select
            Else
                If IsNumeric(cmbPercent.Text.ToString.Replace("%", "")) Then
                    tmpPercent1 = CSng(CSng(cmbPercent.Text.ToString.Replace("%", "")) / 100)
                Else
                    cmbPercent.Text = "100%"
                    tmpPercent = 1.0F
                End If
            End If
        Catch ex As Exception
            cmbPercent.Text = "100%"
            tmpPercent1 = 1.0F
            TimeStampAdd(ex, debugMode)
        End Try
        Return tmpPercent1
    End Function
    Public Function getPercent(ByVal pageNumber As Integer, ByVal setPageNumber As Boolean) As Single
        If isSessionNull() Then Return 1.0F
        If Not tmpPercent = Nothing Then
            Return tmpPercent
        Else
            If Not Session Is Nothing Then
                If isSessionNull() Then Return 1.0F
            Else
                Return 1.0F
            End If
            Dim h As Single = CSng(pdfReaderDoc.GetPageSizeWithRotation(pageNumber).Height) + 0
            Dim w As Single = CSng(pdfReaderDoc.GetPageSizeWithRotation(pageNumber).Width) + 0
            Dim rH As Single = h / w
            Dim rW As Single = w / h
            Dim picWidth As Single = PictureBox1_Panel.Width - 17
            Dim picHeight As Single = PictureBox1_Panel.Height + 0
            Try
                If cmbPercent.SelectedIndex >= 0 Then
                    Select Case cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "").ToLower
                        Case "Fit Width".ToLower()
                            tmpPercent = CSng(picWidth / w)
                        Case "Fit Height".ToLower()
                            tmpPercent = CSng(picHeight / h)
                        Case "Actual Size".ToLower()
                            tmpPercent = 1.0F
                        Case "fit page".ToLower()
                            If h > w Then
                                tmpPercent = CSng(picWidth / w)
                                If tmpPercent > CSng(picHeight / h) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            Else
                                tmpPercent = CSng(picHeight / h)
                                If tmpPercent > CSng(picWidth / w) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            End If
                        Case "fit visible".ToLower()
                            If h > w Then
                                tmpPercent = CSng(picWidth / w)
                                If tmpPercent > CSng(picHeight / h) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            Else
                                tmpPercent = CSng(picHeight / h)
                                If tmpPercent > CSng(picWidth / w) Then
                                    tmpPercent = CSng(picHeight / h)
                                End If
                            End If
                        Case Else
                            If IsNumeric(cmbPercent.Text.ToString.Replace("%", "")) Then
                                tmpPercent = CSng(CSng(cmbPercent.Text.ToString.Replace("%", "")) / 100)
                            ElseIf IsNumeric(cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "")) Then
                                tmpPercent = CSng(CSng(cmbPercent.Items(cmbPercent.SelectedIndex).ToString.Replace("%", "")) / 100)
                            Else
                                cmbPercent.Text = "100%"
                                tmpPercent = 1.0F
                            End If
                    End Select
                Else
                    If IsNumeric(cmbPercent.Text.ToString.Replace("%", "")) Then
                        tmpPercent = CSng(CSng(cmbPercent.Text.ToString.Replace("%", "")) / 100)
                    Else
                        cmbPercent.Text = "100%"
                        tmpPercent = 1.0F
                    End If
                End If
            Catch ex As Exception
                cmbPercent.Text = "100%"
                tmpPercent = 1.0F
                TimeStampAdd(ex, debugMode)
            End Try
            Return tmpPercent
        End If
    End Function
    Public Function getPercent(ByVal number As Single) As Single
        If isSessionNull() Then Return 1.0F
        If tmpPercent = Nothing Then
            tmpPercent = getPercent()
            tmpCombPercent = cmbPercent.Items(cmbPercent.SelectedIndex).ToString
        End If
        Return CSng(tmpPercent * number) + 0
    End Function
    Public Function getPercent(ByVal number As Integer) As Single
        If isSessionNull() Then Return 1.0F
        If tmpPercent = Nothing Then
            tmpPercent = getPercent()
            tmpCombPercent = cmbPercent.Items(cmbPercent.SelectedIndex).ToString
        End If
        Return CInt(tmpPercent * number) + 0
    End Function
    Public Function getPercent(ByVal number As Double) As Single
        If isSessionNull() Then Return 1.0F
        If tmpPercent = Nothing Then
            tmpPercent = getPercent()
            tmpCombPercent = cmbPercent.Items(cmbPercent.SelectedIndex).ToString
        End If
        Return CSng(tmpPercent * number) + 0
    End Function
    Public Function calculateFieldsInOrder(Optional pageNumber As Integer = -1) As Boolean
        Try
            calculationOrderList = CalculationOrder
            Dim fldNames() As String = CalculationOrderNames()
            Dim r As RectangleF = cUserRect.rect
            Dim fldName As String = fldNameHighlighted
            Dim fldidx As String = fldKidIndex
            Dim m As New MemoryStream
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Dim s As PdfStamper = getStamper(pdfReaderDoc.Clone, m)
            cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
            Dim hasErrorInCalc As Boolean = False
            For Each fld As String In fldNames.ToArray()
                If Not String.IsNullOrEmpty(fld.ToString() & "") Then
                    Dim pg As Integer = getFieldPage(fld.ToString, 0, pdfReaderDoc.Clone)
                    If A0_PDFFormField_LoadProperties(Session, False, fld.ToString(), pg, 0) Then
                        If PDFField_Calculations_Fields.Checked Then
                            Dim cTotal As Single = 0
                            Select Case PDFField_Calculations_Fields_Type.SelectedIndex
                                Case 0
                                    For Each strFieldNameCalc As String In PDFField_Calculations_Fields_FieldsListBox.SelectedItems()
                                        If fldNames.Contains(strFieldNameCalc) Then
                                        End If
                                        If IsNumeric(cFDFDoc.FDFGetValue(strFieldNameCalc)) Then
                                            cTotal = cTotal + CSng(cFDFDoc.FDFGetValue(strFieldNameCalc)) + 0
                                        Else
                                            TimeStampAdd(New Exception("Error: calculationFieldsInOrder(" & fldName & ") - " & strFieldNameCalc & " field value is not numerical."), False)
                                            hasErrorInCalc = True
                                        End If
                                    Next
                                Case 1
                                    For Each strFieldNameCalc As String In PDFField_Calculations_Fields_FieldsListBox.SelectedItems()
                                        If fldNames.Contains(strFieldNameCalc) Then
                                        End If
                                        If IsNumeric(cFDFDoc.FDFGetValue(strFieldNameCalc)) Then
                                            cTotal = cTotal * CSng(cFDFDoc.FDFGetValue(strFieldNameCalc)) + 0
                                        Else
                                            TimeStampAdd(New Exception("Error: calculationFieldsInOrder(" & fldName & ") - " & strFieldNameCalc & " field value is not numerical."), False)
                                            hasErrorInCalc = True
                                        End If
                                    Next
                                Case 2
                                    For Each strFieldNameCalc As String In PDFField_Calculations_Fields_FieldsListBox.SelectedItems()
                                        If fldNames.Contains(strFieldNameCalc) Then
                                        End If
                                        If IsNumeric(cFDFDoc.FDFGetValue(strFieldNameCalc)) Then
                                            cTotal = cTotal + CSng(cFDFDoc.FDFGetValue(strFieldNameCalc)) + 0
                                        Else
                                            TimeStampAdd(New Exception("Error: calculationFieldsInOrder(" & fldName & ") - " & strFieldNameCalc & " field value is not numerical."), False)
                                            hasErrorInCalc = True
                                        End If
                                    Next
                                    cTotal = cTotal / PDFField_Calculations_Fields_FieldsListBox.SelectedItems().Count
                                Case 3
                                    For Each strFieldNameCalc As String In PDFField_Calculations_Fields_FieldsListBox.SelectedItems()
                                        If fldNames.Contains(strFieldNameCalc) Then
                                        End If
                                        If IsNumeric(cFDFDoc.FDFGetValue(strFieldNameCalc)) Then
                                            If cTotal >= CSng(cFDFDoc.FDFGetValue(strFieldNameCalc)) + 0 Then
                                                cTotal = CSng(cFDFDoc.FDFGetValue(strFieldNameCalc)) + 0
                                            End If
                                        Else
                                            TimeStampAdd(New Exception("Error: calculationFieldsInOrder(" & fldName & ") - " & strFieldNameCalc & " field value is not numerical."), False)
                                            hasErrorInCalc = True
                                        End If
                                    Next
                                Case 4
                                    For Each strFieldNameCalc As String In PDFField_Calculations_Fields_FieldsListBox.SelectedItems()
                                        If fldNames.Contains(strFieldNameCalc) Then
                                        End If
                                        If IsNumeric(cFDFDoc.FDFGetValue(strFieldNameCalc)) Then
                                            If cTotal <= CSng(cFDFDoc.FDFGetValue(strFieldNameCalc)) + 0 Then
                                                cTotal = CSng(cFDFDoc.FDFGetValue(strFieldNameCalc)) + 0
                                            End If
                                        Else
                                            TimeStampAdd(New Exception("Error: calculationFieldsInOrder(" & fldName & ") - " & strFieldNameCalc & " field value is not numerical."), False)
                                            hasErrorInCalc = True
                                        End If
                                    Next
                            End Select
                            If Not hasErrorInCalc Then
                                s.AcroFields.SetField(fldName, cTotal)
                            Else
                                Return False
                            End If
                        End If
                    End If
                End If
            Next
            s.Writer.CloseStream = False
            s.Close()
            fldNameHighlighted = fldName
            fldKidIndex = fldidx
            cUserRect.rect = r
            If Not hasErrorInCalc Then
                Session = m.ToArray
                LoadPDFReaderDoc(pdfOwnerPassword, True)
                A0_PDFFormField_LoadProperties(Session, True, fldName, CInt(page), fldidx)
                updatefield()
            Else
                LoadPDFReaderDoc(pdfOwnerPassword, True)
            End If
            cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
            A0_LoadPDF()
            Return True
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return False
    End Function
    Public Function isFieldInCalculationOrder(fldName As String, Optional loadField As Boolean = True) As Boolean
        Try
            calculationOrderList = CalculationOrder
            Dim fldNames() As String = CalculationOrderNames()
            For Each fld As String In fldNames.ToArray()
                If Not String.IsNullOrEmpty(fld.ToString() & "") Then
                    Dim pg As Integer = getFieldPage(fld.ToString, 0, pdfReaderDoc.Clone)
                    If loadField = False Then
                        If PDFField_Calculations_Fields.Checked Then
                            cFDFDoc = cFDFApp.PDFOpenFromBuf(Session)
                            Dim cTotal As Single = 0
                            For Each strFieldNameCalc As String In PDFField_Calculations_Fields_FieldsListBox.SelectedItems()
                                If strFieldNameCalc = fldName Then
                                    Return True
                                End If
                            Next
                        End If
                        Return False
                    ElseIf A0_PDFFormField_LoadProperties(Session, False, fld.ToString(), pg, 0) Then
                        If PDFField_Calculations_Fields.Checked Then
                            cFDFDoc = cFDFApp.PDFOpenFromBuf(Session)
                            Dim cTotal As Single = 0
                            For Each strFieldNameCalc As String In PDFField_Calculations_Fields_FieldsListBox.SelectedItems()
                                If strFieldNameCalc = fldName Then
                                    Return True
                                End If
                            Next
                        End If
                    End If
                End If
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return False
    End Function
    Public Sub calculateFields()
        Try
            calculationOrderList = CalculationOrder
            Dim fldNames() As String = CalculationOrderNames()
            Dim fldNameCalcs As New List(Of String)
            _cFDFDoc = cFDFDoc(True)
            For Each fld As String In fldNames.ToArray()
                If Not String.IsNullOrEmpty(fld.ToString() & "") Then
                    _cFDFDoc.FDFSetValue(fld, getFieldCalculationValue(fld.ToString(), False))
                End If
            Next
            Dim sessionTemp() As Byte = Session.Clone
            Select Case cFDFDoc.Determine_Type(sessionTemp)
                Case FDFApp.FDFDoc_Class.FDFType.PDF
                    Session = _cFDFDoc.PDFMergeFDF2Buf(sessionTemp, False, pdfOwnerPassword)
                Case FDFApp.FDFDoc_Class.FDFType.XPDF
                    Session = _cFDFDoc.PDFMergeXDP2Buf(sessionTemp, False, pdfOwnerPassword)
                Case FDFApp.FDFDoc_Class.FDFType.XFA
                    Session = _cFDFDoc.PDFMergeXDP2Buf(sessionTemp, False, pdfOwnerPassword)
            End Select
            If Session Is Nothing Then Return
            If Session.Length <= 0 Then Return
            cUserRect.pauseDraw = False
            A0_LoadPDF()
            'If cUserRect.pauseDraw Then Return
            Try
                clearImageCacheHistory()
                'PictureBox1_Panel.Focus()
                'tmpPercent = Nothing
                'tmpPercent = getPercent(True)
                'A0_FireRefresh(Me, New EventArgs())
                refreshPDFImage()
            Catch ex As Exception
                'cmbPercent.Text = "100%"
                'tmpPercent = 1.0F
                TimeStampAdd(ex, debugMode)
            End Try
            'refreshPDFImage()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function calculateContainsField(strFieldName As String) As Boolean
        Try
            calculationOrderList = CalculationOrder
            Dim fldNames() As String = CalculationOrderNames()
            Dim fldNameCalcs As New List(Of String)
            _cFDFDoc = cFDFDoc(True)
            For Each fld As String In fldNames.ToArray()
                If Not String.IsNullOrEmpty(fld.ToString() & "") Then
                    If Not strFieldName.isNullOrEmpty Then
                        If strFieldName.Trim() = fld.ToString().Trim() Then
                            Return True
                        End If
                    End If
                    '_cFDFDoc.FDFSetValue(fld, getFieldCalculationValue(fld.ToString(), False))
                End If
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Function
    Public Function getFieldCalculationValue(fldName As String, Optional reloadReaderDoc As Boolean = False) As Single 'As List(Of String)
        Dim returnValueSingle As Single = 0.0F
        Dim memStream As New MemoryStream
        If reloadReaderDoc Then
            LoadPDFReaderDoc(pdfOwnerPassword, True)
        ElseIf reloadReaderDoc Then
            'LoadPDFReaderDoc(pdfOwnerPassword, False)
        End If
        Dim readerDoc As PdfReader = pdfReaderDoc.Clone
        Dim stamp As PdfStamper = getStamper(readerDoc, memStream) 'Dim stamp As New iTextSharp.text.pdf.PdfStamper(pdfReaderDoc, memStream, Nothing, True)
        Try
            Dim form As AcroFields = stamp.AcroFields
            Dim str As String = ""
            Dim item As AcroFields.Item = form.GetFieldItem(fldName) 'form.Fields(fldname) 'form.GetFieldItem(fldname)
            Dim itemIndex As Integer = 0 'fieldIndex + 0 'item.Size - 1
            Dim fieldIndex As Integer = 0
            'Try
            '    If Not iTextGetPDFObject(item.GetMerged(0), PdfName.AA) Is Nothing Then
            '        Dim aa As PdfDictionary = iTextGetPDFObject(item.GetMerged(item.Size - 1), PdfName.AA)
            '        If Not iTextGetPDFObject(aa, PdfName.C) Is Nothing Then
            '            Dim d As Boolean = True
            '        End If
            '    End If
            'Catch exTest As Exception
            '    TimeStampAdd(exTest, debugMode) ' NK 2016-06-30 'NK DM
            'End Try
            Dim dict As PdfDictionary = item.GetWidget(itemIndex)
            Dim mk As PdfDictionary = iTextGetPDFObject(dict, PdfName.MK)
            Dim c As iTextSharp.text.BaseColor = Nothing
            Dim merged As PdfDictionary = item.GetMerged(itemIndex)
            'dict = item.GetWidget(0)
            'mk = iTextGetPDFObject(dict, PdfName.MK)
            'merged = item.GetMerged(0)
            Dim f As iTextSharp.text.pdf.TextField = form.GetNewTextFieldFromField(fldName, fieldIndex, stamp.Writer)
            Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldName)
            Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
            'PDFField_TabOrder.Text = form.GetFieldItem(fldName).GetTabOrder(fieldIndex).ToString() & ""
            Dim fDict As iTextSharp.text.pdf.PdfFormField
            Dim fldDic As PdfDictionary = iTextFieldItemPdfDictionary(fldName)
            If fldDic.Get(PdfName.KIDS) Is Nothing Then
                form.DecodeGenericDictionary(fldDic, f)
            ElseIf fieldIndex >= 0 Then
                form.DecodeGenericDictionary(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), f)
            Else
                If fieldIndex = 0 Then fDict = iTextFieldItemPdfDictionary(fldName) Else fDict = iTextFieldItemPdfDictionary(fldName).GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex) 'form.GetNewTextFieldFromField(fldname, fieldIndex)
            End If

            'Me.PDFField_MaxLenChk.Checked = False
            'RadioButton_OnValue.Enabled = True
            Dim AA As PdfDictionary = Nothing
            If Not iTextFieldItemPdfDictionary(fldName, stamp.Reader) Is Nothing Then
                If Not iTextFieldItemPdfDictionary(fldName, stamp.Reader).Get(PdfName.AA) Is Nothing Then
                    AA = iTextFieldItemPdfDictionary(fldName, stamp.Reader).GetAsDict(PdfName.AA)
                End If
            End If
            Dim formatField As PdfDictionary = AA 'iTextGetPDFObject(merged, PdfName.AA)
            If formatField Is Nothing Then
                Exit Try
            End If
            Dim SelFldList As New List(Of String)
            'PDFField_Calculations_Fields_FieldsListBox.Items.Clear()
            'For Each fdfFld As String In pdfReaderDoc.AcroFields.Fields.Keys.ToArray
            '    If Not fdfFld = "" Then
            '        'If Not fdfFld.Trim() & "" = fldNameHighlighted.Trim & "" Then
            '        If Not PDFField_Calculations_Fields_FieldsListBox.Items.Contains(fdfFld.Trim() & "") Then
            '            PDFField_Calculations_Fields_FieldsListBox.Items.Add(fdfFld.Trim() & "")
            '        End If
            '    End If
            '    'End If
            'Next
            If Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                Dim fld As New iTextSharp.text.pdf.TextField(stamp.Writer, New iTextSharp.text.Rectangle(0, 0, 0, 0), fldName)
                form.DecodeGenericDictionary(fldDic, fld)
                Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C) 'pdfReaderDoc.GetPdfObject(calcScript.Number)
                Dim strJS As String = ""
                Try
                    If Not iTextGetPDFObject(calcScriptC, PdfName.JS) Is Nothing Then
                        If calcScriptC.Get(PdfName.JS).IsString Then
                            strJS = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfString).ToUnicodeString()
                        ElseIf calcScriptC.Get(PdfName.JS).IsIndirect Then
                            If TypeOf (iTextGetPDFObject(calcScriptC, PdfName.JS)) Is PdfStream Then
                                Dim streamJS As PdfStream = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfStream)
                                strJS = GetStringFromPdfStream(streamJS) & "" 'System.Text.Encoding.UTF8.GetString(PdfReader.GetStreamBytes(DirectCast(streamJS, PRStream)))
                            ElseIf TypeOf (iTextGetPDFObject(calcScriptC, PdfName.JS)) Is PdfString Then
                                Dim streamJS As PdfString = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfString)
                                strJS = streamJS.ToUnicodeString() & ""
                            End If
                        End If
                    End If
                Catch ex As Exception
                    strJS = ""
                End Try
                Dim strJSKeyStrokeTmp2 As String = strJS & ""
                If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                    Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                    'PDFField_Calculations_CustomCalcScript_Text.Text = strJSTemp
                    strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                    strJS = strJS.TrimStart(CStr("("))
                    strJS = strJS.TrimStart("""")
                    strJS = strJS.TrimEnd(CStr(";"))
                    strJS = strJS.TrimEnd(CStr(")"))
                    strJS = strJS.Replace(", new Array (", ";")
                    strJS = strJS.TrimEnd("""")
                    'PDFField_Calculations_Fields.Checked = True
                    'PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2

                    If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                        If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                            SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                        End If
                        Dim CalcType As String = strJS.ToString.Replace("""", "").Split(";")(0)
                        Select Case CalcType.ToString.ToLower
                            Case "sum"
                                'PDFField_Calculations_Fields_Type.SelectedIndex = 0
                                returnValueSingle = 0
                                If SelFldList.Count > 0 Then
                                    For Each str In SelFldList.ToArray()
                                        'returnValueSingle = CSng(cFDFDoc.FDFGetValue(str)) + returnValueSingle
                                        If IsNumeric(cFDFDoc.FDFGetValue(str.Trim())) Then
                                            returnValueSingle = CSng(cFDFDoc.FDFGetValue(str.Trim())) + returnValueSingle
                                        End If

                                    Next
                                End If
                            Case "prd"
                                'PDFField_Calculations_Fields_Type.SelectedIndex = 1
                                returnValueSingle = 1
                                If SelFldList.Count > 0 Then
                                    For Each str In SelFldList.ToArray()
                                        If IsNumeric(cFDFDoc.FDFGetValue(str.Trim())) Then
                                            returnValueSingle = CSng(cFDFDoc.FDFGetValue(str.Trim())) * returnValueSingle
                                        End If
                                    Next
                                End If
                            Case "avg"
                                'PDFField_Calculations_Fields_Type.SelectedIndex = 2
                                returnValueSingle = 1
                                If SelFldList.Count > 0 Then
                                    For Each str In SelFldList.ToArray
                                        If IsNumeric(cFDFDoc.FDFGetValue(str.Trim())) Then
                                            returnValueSingle = CSng(cFDFDoc.FDFGetValue(str.Trim())) + returnValueSingle
                                        End If
                                    Next
                                    returnValueSingle = returnValueSingle / SelFldList.Count
                                End If
                            Case "min"
                                'PDFField_Calculations_Fields_Type.SelectedIndex = 3
                                If SelFldList.Count > 0 Then
                                    returnValueSingle = Nothing
                                    For Each str In SelFldList.ToArray
                                        If IsNumeric(cFDFDoc.FDFGetValue(str.Trim())) Then
                                            If CSng(cFDFDoc.FDFGetValue(str.Trim())) < (returnValueSingle) Or returnValueSingle = Nothing Then
                                                returnValueSingle = CSng(cFDFDoc.FDFGetValue(str.Trim()))
                                            End If
                                        End If
                                    Next
                                End If
                            Case "max"
                                'PDFField_Calculations_Fields_Type.SelectedIndex = 4
                                returnValueSingle = Nothing
                                For Each str In SelFldList.ToArray
                                    If IsNumeric(cFDFDoc.FDFGetValue(str.Trim())) Then
                                        If CSng(cFDFDoc.FDFGetValue(str.Trim())) > (returnValueSingle) Or returnValueSingle = Nothing Then
                                            returnValueSingle = CSng(cFDFDoc.FDFGetValue(str.Trim()))
                                        End If
                                    End If
                                Next
                            Case Else
                                'PDFField_Calculations_Fields_Type.SelectedIndex = -1
                        End Select
                        Return CSng(returnValueSingle + 0)
                        'If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                        '    SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                        'End If
                        'PDFField_Calculations_Fields_FieldsListBox.SelectionMode = SelectionMode.MultiSimple
                        'Dim fldSelList As New System.Windows.Forms.ListBox.SelectedObjectCollection(PDFField_Calculations_Fields_FieldsListBox)
                        'If SelFldList.Count > 0 Then
                        '    For Each str In SelFldList.ToArray
                        '        If Not String.IsNullOrEmpty(str & "") Then
                        '            If Not fldSelList.Contains(str.ToString.Trim()) Then fldSelList.Add(str.ToString.Trim() & "")
                        '        End If
                        '    Next
                        'End If
                        'If Not PDFField_Calculations_Fields_List.Text.isNullOrEmpty() Then
                        ' PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimStart(","c).TrimStart(" ")
                        'End If
                    End If
                ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then
                    'Dim simpleNotation As String = ""
                    'Dim i1 As Integer = strJS.IndexOf("/** BVCALC ") + "/** BVCALC ".Length
                    'Dim i2 As Integer = strJS.IndexOf(" EVCALC **/") - i1
                    'simpleNotation = strJS.Substring(i1, i2)
                    'PDFField_Calculations_SimpleFieldNotationText.Text = simpleNotation & ""
                    'PDFField_Calculations_SimpleFieldNotation.Checked = True
                Else
                    'If Not String.IsNullOrEmpty(strJSKeyStrokeTmp2 & "") Then
                    '    PDFField_Calculations_CustomCalcScript.Checked = True
                    '    PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                    'Else
                    '    PDFField_Calculations_CustomCalcScript_Text.Text = ""
                    'End If
                End If
                'ElseIf Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                '    Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C) 'pdfReaderDoc.GetPdfObject(calcScript.Number)
                '    Dim strJS As String = iTextGetPDFString(calcScriptC, PdfName.JS) & ""
                '    Dim strJSKeyStrokeTmp2 As String = strJS & ""
                '    Dim strS As String = iTextGetPDFObject(calcScriptC, PdfName.S).ToString
                '    If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                '        Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                '        strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                '        strJS = strJS.TrimStart(CStr("("))
                '        strJS = strJS.TrimStart("""")
                '        strJS = strJS.TrimEnd(CStr(";"))
                '        strJS = strJS.TrimEnd(CStr(")"))
                '        strJS = strJS.Replace(", new Array (", ";")
                '        strJS = strJS.TrimEnd("""")
                '        PDFField_Calculations_Fields.Checked = True
                '        PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                '        If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                '            Dim CalcType As String = strJS.ToString.Replace("""", "").Split(";")(0)
                '            Select Case CalcType.ToString.ToLower
                '                Case "sum"
                '                    PDFField_Calculations_Fields_Type.SelectedIndex = 0
                '                Case "prd"
                '                    PDFField_Calculations_Fields_Type.SelectedIndex = 1
                '                Case "avg"
                '                    PDFField_Calculations_Fields_Type.SelectedIndex = 2
                '                Case "min"
                '                    PDFField_Calculations_Fields_Type.SelectedIndex = 3
                '                Case "max"
                '                    PDFField_Calculations_Fields_Type.SelectedIndex = 4
                '                Case Else
                '                    PDFField_Calculations_Fields_Type.SelectedIndex = -1
                '            End Select
                '            If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                '                SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                '            End If
                '            For Each str In SelFldList.ToArray
                '                If PDFField_Calculations_Fields_List.Text.isNullOrEmpty() Then
                '                    PDFField_Calculations_Fields_List.Text &= str
                '                Else
                '                    PDFField_Calculations_Fields_List.Text &= ", " & str
                '                End If
                '            Next
                '            If Not PDFField_Calculations_Fields_List.Text.isNullOrEmpty() Then
                '                PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimStart(","c).TrimStart(" ")
                '            End If
                '        End If
                '    ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then
                '        Dim simpleNotation As String = ""
                '        Dim i1 As Integer = strJS.IndexOf("/** BVCALC ") + "/** BVCALC ".Length
                '        Dim i2 As Integer = strJS.IndexOf(" EVCALC **/") - i1
                '        simpleNotation = strJS.Substring(i1, i2)
                '        PDFField_Calculations_SimpleFieldNotationText.Text = simpleNotation & ""
                '        PDFField_Calculations_SimpleFieldNotation.Checked = True
                '    End If
                'Else
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        'Try
        '    calculationOrderList = CalculationOrder
        '    Dim fldNames() As String = CalculationOrderNames()
        '    Dim fldNameCalcs As New List(Of String)
        '    For Each fld As String In fldNames.ToArray()
        '        If Not String.IsNullOrEmpty(fld.ToString() & "") Then
        '            Dim pg As Integer = getFieldPage(fld.ToString, 0, pdfReaderDoc.Clone)
        '            If loadField = False Then
        '                If PDFField_Calculations_Fields.Checked Then
        '                    cFDFDoc = cFDFApp.PDFOpenFromBuf(Session)
        '                    Dim cTotal As Single = 0
        '                    For Each strFieldNameCalc As String In PDFField_Calculations_Fields_FieldsListBox.SelectedItems()
        '                        If strFieldNameCalc = fldName Then
        '                            fldNameCalcs.Add(strFieldNameCalc)
        '                        End If
        '                    Next
        '                End If
        '            ElseIf A0_PDFFormField_LoadProperties(Session, False, fld.ToString(), pg, 0) Then
        '                If PDFField_Calculations_Fields.Checked Then
        '                    cFDFDoc = cFDFApp.PDFOpenFromBuf(Session)
        '                    Dim cTotal As Single = 0
        '                    For Each strFieldNameCalc As String In PDFField_Calculations_Fields_FieldsListBox.SelectedItems()
        '                        If strFieldNameCalc = fldName Then
        '                            'Return True
        '                            fldNameCalcs.Add(strFieldNameCalc)
        '                        End If
        '                    Next
        '                End If
        '            End If
        '            Return fldNameCalcs
        '        End If
        '    Next
        'Catch ex As Exception
        '    TimeStampAdd(ex, debugMode)
        'End Try
        Return returnValueSingle 'New List(Of String)
    End Function
    Public Function calculationParentFieldContainsFieldname(fldName As String, ContainsFldName As String, Optional reloadReaderDoc As Boolean = False) As Single 'As List(Of String)
        Try
            Dim returnValueSingle As Single = 0.0F
            Dim memStream As New MemoryStream
            If reloadReaderDoc Then
                LoadPDFReaderDoc(pdfOwnerPassword, True)
            ElseIf pdfReaderDoc Is Nothing Then
                LoadPDFReaderDoc(pdfOwnerPassword, True)
            End If
            Dim readerDoc As PdfReader = pdfReaderDoc.Clone
            Dim stamp As PdfStamper = getStamper(readerDoc, memStream) 'Dim stamp As New iTextSharp.text.pdf.PdfStamper(pdfReaderDoc, memStream, Nothing, True)

            Dim form As AcroFields = stamp.AcroFields
            Dim str As String = ""
            Dim item As AcroFields.Item = form.GetFieldItem(fldName) 'form.Fields(fldname) 'form.GetFieldItem(fldname)
            Dim itemIndex As Integer = 0 'fieldIndex + 0 'item.Size - 1
            Dim fieldIndex As Integer = 0
            'Try
            '    If Not iTextGetPDFObject(item.GetMerged(0), PdfName.AA) Is Nothing Then
            '        Dim aa As PdfDictionary = iTextGetPDFObject(item.GetMerged(item.Size - 1), PdfName.AA)
            '        If Not iTextGetPDFObject(aa, PdfName.C) Is Nothing Then
            '            Dim d As Boolean = True
            '        End If
            '    End If
            'Catch exTest As Exception
            '    TimeStampAdd(exTest, debugMode) ' NK 2016-06-30 'NK DM
            'End Try
            Dim dict As PdfDictionary = item.GetWidget(itemIndex)
            Dim mk As PdfDictionary = iTextGetPDFObject(dict, PdfName.MK)
            Dim c As iTextSharp.text.BaseColor = Nothing
            Dim merged As PdfDictionary = item.GetMerged(itemIndex)
            'dict = item.GetWidget(0)
            'mk = iTextGetPDFObject(dict, PdfName.MK)
            'merged = item.GetMerged(0)
            Dim f As iTextSharp.text.pdf.TextField = form.GetNewTextFieldFromField(fldName, fieldIndex, stamp.Writer)
            Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldName)
            Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
            'PDFField_TabOrder.Text = form.GetFieldItem(fldName).GetTabOrder(fieldIndex).ToString() & ""
            Dim fDict As iTextSharp.text.pdf.PdfFormField
            Dim fldDic As PdfDictionary = iTextFieldItemPdfDictionary(fldName)
            If fldDic.Get(PdfName.KIDS) Is Nothing Then
                form.DecodeGenericDictionary(fldDic, f)
            ElseIf fieldIndex >= 0 Then
                form.DecodeGenericDictionary(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), f)
            Else
                If fieldIndex = 0 Then fDict = iTextFieldItemPdfDictionary(fldName) Else fDict = iTextFieldItemPdfDictionary(fldName).GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex) 'form.GetNewTextFieldFromField(fldname, fieldIndex)
            End If

            'Me.PDFField_MaxLenChk.Checked = False
            'RadioButton_OnValue.Enabled = True
            Dim AA As PdfDictionary = Nothing
            If Not iTextFieldItemPdfDictionary(fldName, stamp.Reader) Is Nothing Then
                If Not iTextFieldItemPdfDictionary(fldName, stamp.Reader).Get(PdfName.AA) Is Nothing Then
                    AA = iTextFieldItemPdfDictionary(fldName, stamp.Reader).GetAsDict(PdfName.AA)
                End If
            End If
            Dim formatField As PdfDictionary = AA 'iTextGetPDFObject(merged, PdfName.AA)
            If formatField Is Nothing Then
                Exit Try
            End If
            Dim SelFldList As New List(Of String)
            'PDFField_Calculations_Fields_FieldsListBox.Items.Clear()
            'For Each fdfFld As String In pdfReaderDoc.AcroFields.Fields.Keys.ToArray
            '    If Not fdfFld = "" Then
            '        'If Not fdfFld.Trim() & "" = fldNameHighlighted.Trim & "" Then
            '        If Not PDFField_Calculations_Fields_FieldsListBox.Items.Contains(fdfFld.Trim() & "") Then
            '            PDFField_Calculations_Fields_FieldsListBox.Items.Add(fdfFld.Trim() & "")
            '        End If
            '    End If
            '    'End If
            'Next
            If Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                Dim fld As New iTextSharp.text.pdf.TextField(stamp.Writer, New iTextSharp.text.Rectangle(0, 0, 0, 0), fldName)
                form.DecodeGenericDictionary(fldDic, fld)
                Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C) 'pdfReaderDoc.GetPdfObject(calcScript.Number)
                Dim strJS As String = ""
                Try
                    If Not iTextGetPDFObject(calcScriptC, PdfName.JS) Is Nothing Then
                        If calcScriptC.Get(PdfName.JS).IsString Then
                            strJS = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfString).ToUnicodeString()
                        ElseIf calcScriptC.Get(PdfName.JS).IsIndirect Then
                            If TypeOf (iTextGetPDFObject(calcScriptC, PdfName.JS)) Is PdfStream Then
                                Dim streamJS As PdfStream = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfStream)
                                strJS = GetStringFromPdfStream(streamJS) & "" 'System.Text.Encoding.UTF8.GetString(PdfReader.GetStreamBytes(DirectCast(streamJS, PRStream)))
                            ElseIf TypeOf (iTextGetPDFObject(calcScriptC, PdfName.JS)) Is PdfString Then
                                Dim streamJS As PdfString = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfString)
                                strJS = streamJS.ToUnicodeString() & ""
                            End If
                        End If
                    End If
                Catch ex As Exception
                    strJS = ""
                End Try
                Dim strJSKeyStrokeTmp2 As String = strJS & ""
                If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                    Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                    'PDFField_Calculations_CustomCalcScript_Text.Text = strJSTemp
                    strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                    strJS = strJS.TrimStart(CStr("("))
                    strJS = strJS.TrimStart("""")
                    strJS = strJS.TrimEnd(CStr(";"))
                    strJS = strJS.TrimEnd(CStr(")"))
                    strJS = strJS.Replace(", new Array (", ";")
                    strJS = strJS.TrimEnd("""")
                    'PDFField_Calculations_Fields.Checked = True
                    'PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2

                    If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                        If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                            SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                        End If
                        For Each strFieldName As String In SelFldList.ToArray()
                            If strFieldName.Trim() = ContainsFldName.Trim() Then
                                Return True
                            End If
                        Next

                    End If
                ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then

                Else

                End If

            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return False
    End Function
    Public Sub A0_LoadAllFieldsOnPageCombo(selName As String)
        'Dim cmbselTemp = comboBox4Selected
        Dim selIdx As Integer = -1
        Try
            selIdx = ComboBox4.SelectedIndex
            Dim fldsCombo As New List(Of String)
            fldsCombo.Add("Select a field")
            fldsCombo.AddRange(GetAllFieldsOnPage(pdfReaderDoc.Clone, CInt(btnPage.SelectedIndex + 1), False, True).ToArray())
            Dim fldsComboTemp(ComboBox4.Items.Count - 1) As String
            ComboBox4.Items.CopyTo(fldsComboTemp, 0)
            If Not fldsComboTemp.Length = fldsCombo.Count Then
                ComboBox4.Items.Clear()
                ComboBox4.Items.AddRange(fldsCombo.ToArray())
            Else
                For i As Integer = 0 To fldsCombo.Count - 1
                    If Not fldsComboTemp(i) = fldsCombo(i) Then
                        '.Add(ComboBox4.Items(i))
                        ComboBox4.Items.Clear()
                        ComboBox4.Items.AddRange(fldsCombo.ToArray())
                        Exit For
                    End If
                Next
            End If
        Catch ex As Exception
            Err.Clear()
        Finally
            If Not selName = "" Then
                If ComboBox4.Items.Contains(selName) Then
                    Dim pd = cUserRect.pauseDraw
                    If Not ComboBox4.SelectedItem = selName Then
                        cUserRect.pauseDraw = True
                        ComboBox4.SelectedItem = selName
                        cUserRect.pauseDraw = pd
                    End If

                End If
            Else
                Dim pd = cUserRect.pauseDraw
                If Not ComboBox4.SelectedIndex = selIdx Then
                    cUserRect.pauseDraw = True
                    ComboBox4.SelectedIndex = selIdx
                    cUserRect.pauseDraw = pd
                End If
            End If
            'comboBox4Selected = cmbselTemp
        End Try
    End Sub
    'Public Sub A0_LoadAllFieldsOnPageCombo(selName As String)
    '    'Dim cmbselTemp = comboBox4Selected
    '    Dim selIdx As Integer = -1
    '    Try
    '        selIdx = ComboBox4.SelectedIndex
    '        Dim fldsCombo As New List(Of String)
    '        fldsCombo.Add("Select a field")
    '        fldsCombo.AddRange(GetAllFieldsOnPage(pdfReaderDoc.Clone, CInt(btnPage.SelectedIndex + 1), False, True).ToArray())
    '        Dim fldsComboTemp(ComboBox4.Items.Count - 1) As String
    '        ComboBox4.Items.CopyTo(fldsComboTemp, 0)
    '        If Not fldsComboTemp.Length = fldsCombo.Count Then
    '            ComboBox4.Items.Clear()
    '            ComboBox4.Items.AddRange(fldsCombo.ToArray())
    '        Else
    '            For i As Integer = 0 To fldsCombo.Count - 1
    '                If Not fldsComboTemp(i) = fldsCombo(i) Then
    '                    '.Add(ComboBox4.Items(i))
    '                    ComboBox4.Items.Clear()
    '                    ComboBox4.Items.AddRange(fldsCombo.ToArray())
    '                    Exit For
    '                End If
    '            Next
    '        End If
    '    Catch ex As Exception
    '        Err.Clear()
    '    Finally
    '        If Not selName = "" Then
    '            If ComboBox4.Items.Contains(selName) Then
    '                Dim pd = cUserRect.pauseDraw
    '                If Not ComboBox4.SelectedItem = selName Then
    '                    cUserRect.pauseDraw = True
    '                    ComboBox4.SelectedItem = selName
    '                    cUserRect.pauseDraw = pd
    '                End If

    '            End If
    '        Else
    '            Dim pd = cUserRect.pauseDraw
    '            If Not ComboBox4.SelectedIndex = selIdx Then
    '                cUserRect.pauseDraw = True
    '                ComboBox4.SelectedIndex = selIdx
    '                cUserRect.pauseDraw = pd
    '            End If
    '        End If
    '        'comboBox4Selected = cmbselTemp
    '    End Try
    'End Sub

    Public Function A0_PDFFormField_Modify(ByVal b() As Byte, ByVal fldname As String, ByVal newFldName As String, ByVal textcolor As iTextSharp.text.BaseColor, ByVal bgcolor As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal newRectScreen As iTextSharp.text.Rectangle, Optional ByVal pageNumber As Integer = -1, Optional ByVal removeKidFieldIdx As Integer = -1, Optional calculateOrder As Boolean = False) As Byte()
        Dim newRect As iTextSharp.text.Rectangle = cUserRect.rectPDFReversed 'New iTextSharp.text.Rectangle(cUserRect.rect.Left, getPDFHeight() - cUserRect.rect.Bottom, cUserRect.rect.Right, getPDFHeight() - cUserRect.rect.Top) 'getRectanglePDF(newRectScreen)
        Dim rectTmp As System.Drawing.RectangleF = cUserRect.rect
        Dim bytesNew() As Byte = Nothing
        Try
            If True = True Then
                If pageNumber <= 0 Then
                    pageNumber = CInt(pageIndex) + 1
                End If
                Dim fltType As Integer = -1
                'If Not String.IsNullOrEmpty(fldname & "") Then
                '    fltType = GetFormFieldType(Session("output"), fldname)
                'Else
                Select Case ComboBox1.SelectedItem.ToString.ToLower
                    Case "Textbox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                    Case "CheckBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                    Case "ComboBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                    Case "ListBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                    Case "Button".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                    Case "RadioButton".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                    Case "Signature".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                    Case Else
                        Return b
                End Select
                'End If
                LoadPDFReaderDoc(pdfOwnerPassword, True)

                Select Case fltType
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                        bytesNew = A0_PDFFormField_Modify_Button(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                        bytesNew = A0_PDFFormField_Modify_TextField(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                        bytesNew = A0_PDFFormField_Modify_CheckBox(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                        bytesNew = A0_PDFFormField_Modify_ComboBox_Test_Multi(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                        bytesNew = A0_PDFFormField_Modify_ListBox(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                        bytesNew = A0_PDFFormField_Modify_Signature(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                        bytesNew = A0_PDFFormField_Modify_RadioField(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                    Case Else
                        bytesNew = b.ToArray
                End Select
            Else
            End If
            PDFField_Value.Multiline = PDFField_MultiLine.Checked
            Return bytesNew
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            Try
                Dim pd As Boolean = cUserRect.pauseDraw
                If Not bytesNew Is Nothing Then
                    If bytesNew.Length > 0 Then
                        If fldNameHighlighted = "" Then
                            fldNameHighlighted = newFldName
                        End If
                        Session = bytesNew
                        LoadPDFReaderDoc(pdfOwnerPassword, False)
                        cUserRect._highLightFieldName = newFldName
                        fldRectangles = getFieldRectangles(True)
                        fldKidIndex = getKidFieldIndexByRectanglePDF(rectTmp, newFldName)
                        rectTmp = fldRectangles(newFldName & "#" & fldKidIndex)
                        cUserRect.rect = rectTmp
                        btnWidth.Text = rectTmp.Width
                        btnHeight.Text = rectTmp.Height
                        btnLeft.Text = rectTmp.Left
                        btnRight.Text = rectTmp.Right
                        btnTop.Text = rectTmp.Top
                        btnBottom.Text = rectTmp.Bottom
                        'fldKidIndex = getKidFieldIndexByRectanglePDF(rectTmp, newFldName)
                        PDFField_Index.Text = fldKidIndex.ToString()
                        If Not dsBrowser Is Nothing Then
                            If Not dsBrowser.disableLoad = True Then
                                If UpdateDataSource(Me, ddlRecord.SelectedIndex) Then
                                    dsBrowser.RefreshPDF(ddlRecord.SelectedIndex, True, False)
                                End If
                            End If
                        End If
                        A0_LoadPDF(True)
                        If cUserRect.rect = Nothing Then
                            refreshPDFImage()
                        End If
                    End If
                Else
                End If
                cUserRect.pauseDraw = True
                A0_LoadAllFieldsOnPageCombo(fldNameHighlighted & "[" & fldKidIndex & "]")
                cUserRect.pauseDraw = False
                comboBox4Selected = False
                Try
                    If isFieldInCalculationOrder(fldNameHighlighted, False) Then
                        calculateFields()
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode) ' NK 2016-06-30exMain Else Err.Clear() ' Err.Clear()  ' NK3 ' 
                End Try
            Catch exLoadProps As Exception
                TimeStampAdd(exLoadProps, debugMode) ' NK 2016-06-30 'NK DM  
            Finally
                PdfForm_FieldNames_UpdateButton()
            End Try
        End Try
        Return b

    End Function
    Public Sub A0_PDFFormField_LoadFieldWithRectF(ByVal rectFScreen As System.Drawing.RectangleF, ByVal fldName As String, Optional ByVal bytesNew() As Byte = Nothing, Optional ByVal reloadPDFImage As Boolean = False)
        Try
            If Not bytesNew Is Nothing Then
                If bytesNew.Length > 0 Then
                    Session = bytesNew.ToArray
                End If
            End If
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    If reloadPDFImage Then
                        A0_LoadPDF(True, True, True, CInt(page), True)
                    End If
                End If
            End If
            Dim dicRects As Dictionary(Of String, System.Drawing.RectangleF) = getFieldRectangles(False)
            For Each strFieldName As String In dicRects.Keys.ToArray
                Try
                    If rectFScreen = Nothing Then
                        If (fldName.ToString & "#" & fldKidIndex = strFieldName Or fldName.ToString & "." & fldKidIndex = strFieldName) Or (strFieldName.StartsWith(fldName.ToString) And fldKidIndex < 0) Then
                            rectFScreen = dicRects(strFieldName)
                            If Math.Abs(dicRects(strFieldName).X - rectFScreen.X) < 1 And Math.Abs(dicRects(strFieldName).Y - rectFScreen.Y) < 1 And Math.Abs(dicRects(strFieldName).Width - rectFScreen.Width) < 1 And Math.Abs(dicRects(strFieldName).Height - rectFScreen.Height) < 1 Then
                                Dim strFieldNumber As String = ""
                                Dim strFieldNameTemp As String = ""
                                If strFieldName.Contains("."c) Then
                                    strFieldNumber = strFieldName.Substring(strFieldName.LastIndexOf("."c), strFieldName.Length - strFieldName.LastIndexOf("."c)).ToString().Replace(".", "")
                                    strFieldNameTemp = strFieldName.ToString.Replace("." & strFieldNumber, "")
                                ElseIf strFieldName.Contains("#") Then
                                    strFieldNumber = strFieldName.Substring(strFieldName.LastIndexOf("#"), strFieldName.Length - strFieldName.LastIndexOf("#")).ToString().Replace("#", "")
                                    strFieldNameTemp = strFieldName.ToString.Replace("#" & strFieldNumber, "")
                                End If
                                If IsNumeric(strFieldNumber & "") And Not String.IsNullOrEmpty(strFieldNameTemp & "") Then
                                    fldKidIndex = CInt(strFieldNumber)
                                    cUserRect._highLightFieldName = strFieldNameTemp
                                    fldNameHighlighted = strFieldNameTemp
                                    fldNameHighlightedCopy = strFieldNameTemp
                                    cUserRect.rect = rectFScreen
                                    cUserRect.rectBackup = rectFScreen
                                    cUserRect.rectOld = rectFScreen
                                    btnTop.Text = cUserRect.rect.Top.ToString
                                    btnBottom.Text = cUserRect.rect.Bottom.ToString
                                    btnLeft.Text = cUserRect.rect.Left.ToString
                                    btnRight.Text = cUserRect.rect.Right.ToString
                                    btnWidth.Text = cUserRect.rect.Width.ToString
                                    btnHeight.Text = cUserRect.rect.Height.ToString
                                    PDFField_Name.Text = fldNameHighlighted
                                    PDFField_Index.Text = fldKidIndex.ToString()
                                    Try
                                        If Not Session Is Nothing Then
                                            If Session.Length > 0 Then
                                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                                _cFDFDoc = cFDFDoc(True)
                                            End If
                                        End If
                                    Catch exLoadFDFDoc As Exception
                                        TimeStampAdd(exLoadFDFDoc, debugMode)
                                    End Try
                                    Select Case GetFormFieldType(Session("output"), fldNameHighlighted)
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                            ComboBox1.SelectedIndex = 0
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                                            ComboBox1.SelectedIndex = 1
                                            PDFField_Name.Text = fldNameHighlighted
                                            PDFField_DefaultText.Text = cFDFDoc.XDPGetValue(fldNameHighlighted)
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                            ComboBox1.SelectedIndex = 2
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                            ComboBox1.SelectedIndex = 3
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                            ComboBox1.SelectedIndex = 4
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                            ComboBox1.SelectedIndex = 5
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                            ComboBox1.SelectedIndex = 6
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case Else
                                            If Not ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1 Then
                                                ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1
                                            End If
                                    End Select
                                    PDFField_Index.Text = fldKidIndex.ToString()
                                    mMove = False
                                    _dragging = False
                                    DrawImageFieldPositions()
                                    cUserRect.DrawPictureBoxImageBox()
                                    Return
                                End If
                            End If
                        End If
                    Else
                        If (fldName.ToString & "#" & fldKidIndex = strFieldName Or fldName.ToString & "." & fldKidIndex = strFieldName) Or (strFieldName.StartsWith(fldName.ToString) And fldKidIndex < 0) Then
                            If Math.Abs(dicRects(strFieldName).X - rectFScreen.X) < 1 And Math.Abs(dicRects(strFieldName).Y - rectFScreen.Y) < 1 And Math.Abs(dicRects(strFieldName).Width - rectFScreen.Width) < 1 And Math.Abs(dicRects(strFieldName).Height - rectFScreen.Height) < 1 Then
                                Dim strFieldNumber As String = ""
                                Dim strFieldNameTemp As String = ""
                                If strFieldName.Contains("."c) Then
                                    strFieldNumber = strFieldName.Substring(strFieldName.LastIndexOf("."c), strFieldName.Length - strFieldName.LastIndexOf("."c)).ToString().Replace(".", "")
                                    strFieldNameTemp = strFieldName.ToString.Replace("." & strFieldNumber, "")
                                ElseIf strFieldName.Contains("#") Then
                                    strFieldNumber = strFieldName.Substring(strFieldName.LastIndexOf("#"), strFieldName.Length - strFieldName.LastIndexOf("#")).ToString().Replace("#", "")
                                    strFieldNameTemp = strFieldName.ToString.Replace("#" & strFieldNumber, "")
                                End If
                                If IsNumeric(strFieldNumber & "") And Not String.IsNullOrEmpty(strFieldNameTemp & "") Then
                                    fldKidIndex = CInt(strFieldNumber)
                                    cUserRect._highLightFieldName = strFieldNameTemp
                                    fldNameHighlighted = strFieldNameTemp
                                    fldNameHighlightedCopy = strFieldNameTemp
                                    cUserRect.rect = rectFScreen
                                    cUserRect.rectBackup = rectFScreen
                                    cUserRect.rectOld = rectFScreen
                                    PDFField_Name.Text = fldNameHighlighted
                                    PDFField_Index.Text = fldKidIndex.ToString()
                                    Try
                                        If Not Session Is Nothing Then
                                            If Session.Length > 0 Then
                                                LoadPDFReaderDoc(pdfOwnerPassword, False)
                                                _cFDFDoc = cFDFDoc(True)
                                            End If
                                        End If
                                    Catch exLoadFDFDoc As Exception
                                        TimeStampAdd(exLoadFDFDoc, debugMode)
                                    End Try
                                    Select Case GetFormFieldType(Session("output"), fldNameHighlighted)
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                            ComboBox1.SelectedIndex = 0
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                                            ComboBox1.SelectedIndex = 1
                                            PDFField_Name.Text = fldNameHighlighted
                                            PDFField_DefaultText.Text = cFDFDoc.XDPGetValue(fldNameHighlighted)
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                            ComboBox1.SelectedIndex = 2
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                            ComboBox1.SelectedIndex = 3
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                            ComboBox1.SelectedIndex = 4
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                            ComboBox1.SelectedIndex = 5
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                            ComboBox1.SelectedIndex = 6
                                            PDFField_Name.Text = fldNameHighlighted
                                            Try
                                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        Case Else
                                            If Not ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1 Then
                                                ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1
                                            End If
                                    End Select
                                    PDFField_Index.Text = fldKidIndex.ToString()
                                    mMove = False
                                    _dragging = False
                                    DrawImageFieldPositions()
                                    cUserRect.DrawPictureBoxImageBox()
                                    Return
                                End If
                            End If
                        End If
                    End If
                Catch exFor As Exception
                    TimeStampAdd(exFor, debugMode)
                End Try
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function A0_PDFFormField_Modify_Button(ByVal b() As Byte, ByVal fldname As String, ByVal newFldName As String, ByVal textcolor As iTextSharp.text.BaseColor, ByVal bgcolor As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal newRect As iTextSharp.text.Rectangle, Optional ByVal pageNumber As Integer = -1, Optional ByVal removeKidFieldIdx As Integer = -1, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing, Optional ByVal promptMerge As Boolean = True) As Byte()
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword & ""))
            Else
                pdfReaderDocTemp = pdfReaderDoc.Clone
            End If
            If pageNumber <= 0 Then
                pageNumber = CInt(page) + 0
            End If
        Catch ex As Exception
            pdfReaderDocTemp = pdfReaderDoc
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            Dim memStream As New MemoryStream
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            Dim stmp As PdfStamper = getStamper(pdfReaderDocTemp, memStream)
            Try
                If Not stmp.AcroFields.GenerateAppearances = True Then
                    If Not stmp.AcroFields.Fields Is Nothing Then stmp.AcroFields.GenerateAppearances = True
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim form As iTextSharp.text.pdf.AcroFields = stmp.AcroFields
            If True = True Then
                Dim fltType As Integer = -1
                Select Case ComboBox1.SelectedItem.ToString.ToLower
                    Case "Textbox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                    Case "CheckBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                    Case "ComboBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                    Case "ListBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                    Case "Button".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                    Case "RadioButton".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                    Case "Signature".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                    Case Else
                        Return b
                End Select
                Dim defaultFontSize As Single = 0
                Try
                    If IsNumeric(PDFField_FontSize.Text & "") Then
                        defaultFontSize = CSng(PDFField_FontSize.Text & "") + 0.0F
                    ElseIf (PDFField_FontSize.SelectedIndex > 0) Then
                        defaultFontSize = CSng(PDFField_FontSize.Items(PDFField_FontSize.SelectedIndex).ToString()) + 0.0F
                    Else
                        defaultFontSize = 0.0F
                    End If
                Catch ex As Exception
                    defaultFontSize = 0.0F
                    TimeStampAdd(ex, debugMode)
                End Try
                Dim bf As BaseFont = Nothing
                Dim defaultFont As iTextSharp.text.Font = Nothing
                Try
                    Select Case PDFField_FontFamily.SelectedIndex
                        Case 0
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER, BaseFont.WINANSI, False)
                        Case 1
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLD, BaseFont.CP1252, True)
                        Case 2
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 3
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_OBLIQUE, BaseFont.WINANSI, False)
                        Case 4
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.WINANSI, False)
                        Case 5
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLD, BaseFont.WINANSI, False)
                        Case 6
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 7
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_OBLIQUE, BaseFont.WINANSI, False)
                        Case 8
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, BaseFont.WINANSI, False)
                        Case 9
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLD, BaseFont.WINANSI, False)
                        Case 10
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ITALIC, BaseFont.WINANSI, False)
                        Case 11
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLDITALIC, BaseFont.WINANSI, False)
                        Case 12
                            defaultFont = FontFactory.GetFont(BaseFont.SYMBOL, BaseFont.WINANSI, False)
                        Case 13
                            defaultFont = FontFactory.GetFont(BaseFont.ZAPFDINGBATS, BaseFont.WINANSI, False)
                        Case Else
                            Try
                                bf = findFontInForm(New PdfName(CStr(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString)))
                                If bf Is Nothing Then
                                    defaultFont = New iTextSharp.text.Font(FontFactory.GetFont(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString(), defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor)))
                                Else
                                    defaultFont = New iTextSharp.text.Font(bf, defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor))
                                End If
                            Catch exCreateFontEmbeded As Exception
                                Err.Clear()
                            End Try
                    End Select
                    defaultFont.Size = defaultFontSize
                Catch ex As Exception
                    Throw ex
                    TimeStampAdd(ex, debugMode)
                End Try
                Select Case fltType
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                        Dim frmField As iTextSharp.text.pdf.PushbuttonField
                        Dim frmFields As New List(Of iTextSharp.text.pdf.PushbuttonField)
                        Dim ap As PdfAppearance = Nothing
                        If Not fldname = newFldName Then
                            Try
                                If form.Fields.ContainsKey(fldname) Then
                                    If form.Fields(fldname).Size > 1 Then
                                        If promptMerge Then
                                            Dim msg As New dialogMultiChoice()
                                            Dim strMsg As String = ""
                                            strMsg &= "Rename fields from: """ & fldname & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x " & form.Fields(fldname).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            strMsg &= Environment.NewLine & "To new name: """ & newFldName & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x " & form.Fields(newFldName).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            msg.lblMessage.Text = strMsg & ""
                                            msg.ButtonsClear()
                                            msg.ButtonAdd("Rename all fields", True, 1)
                                            msg.ButtonAdd("This field only", True, 2)
                                            msg.ButtonAdd("Cancel", True, 3)
                                            Select Case msg.ShowDialog(Me, "Rename Fields", msg.ButtonsArray)
                                                Case 2
                                                    If form.Fields.ContainsKey(newFldName) Then
                                                        If form.Fields(newFldName).Size >= 1 Then
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        Else
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        End If
                                                    Else
                                                        If fldKidIndex >= 0 Then
                                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                        End If
                                                        fldNameHighlightedCopy = ""
                                                        fldname = newFldName
                                                        fldNameHighlightedCopy = ""
                                                        fldKidIndex = -1
                                                        fldname = ""
                                                    End If
                                                Case 1
                                                    For indexField As Integer = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size - 1 To 0 Step -1
                                                        If GetFormFieldType(Session("output"), fldname) = fltType Then
                                                            fldKidIndex = indexField
                                                            b = A0_PDFFormField_Modify_Button(b.ToArray, fldname, newFldName, textcolor, bgcolor, bordercolor, New iTextSharp.text.Rectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Top)), pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexField), -1, pdfReaderDoc, False)
                                                            Session = b
                                                            LoadPDFReaderDoc(pdfOwnerPassword, True)
                                                        End If
                                                    Next
                                                    Return b.ToArray
                                                Case 3
                                                    Return b.ToArray
                                                Case Else
                                                    Return b.ToArray
                                            End Select
                                            GoTo CONTINUE_NORMAL
                                        End If
                                    End If
                                End If
                                If form.Fields.ContainsKey(newFldName) Then
                                    If form.Fields(newFldName).Size >= 1 Then
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    Else
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    End If
                                Else
                                    If fldKidIndex >= 0 Then
                                        pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                    End If
                                    fldNameHighlightedCopy = ""
                                    fldname = newFldName
                                    fldNameHighlightedCopy = ""
                                    fldKidIndex = -1
                                    fldname = ""
                                End If
                            Catch exRename As Exception
                                Err.Clear()
                            End Try
                        End If
CONTINUE_NORMAL:
                        Dim fldDict As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        If Not String.IsNullOrEmpty(fldname) Then
                            If Not fldDict.Get(PdfName.KIDS) Is Nothing Then
                                If (fldKidIndex >= 0 And iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size >= 1) Or (fldKidIndex < 0) Then
                                    Dim indexField As Integer = 0
                                    For indexField = 0 To iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size - 1
                                        If GetFormFieldType(Session("output"), fldname) = fltType Then
                                            frmField = pdfReaderDoc.AcroFields.GetNewPushbuttonFromField(fldname, indexField, stmp.Writer)
                                        Else
                                            frmField = New iTextSharp.text.pdf.PushbuttonField(stmp.Writer, newRect, newFldName)
                                            form.DecodeGenericDictionary(iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(indexField), frmField)
                                        End If
                                        If Not removeKidFieldIdx = indexField Then
                                            frmFields.Add(frmField)
                                        End If
                                    Next
                                    If fldKidIndex < 0 Then
                                        frmField = New iTextSharp.text.pdf.PushbuttonField(stmp.Writer, newRect, newFldName)
                                        frmFields.Add(frmField)
                                        indexField += 1
                                    Else
                                        frmField = frmFields(fldKidIndex)
                                    End If
                                Else
                                    frmField = New iTextSharp.text.pdf.PushbuttonField(stmp.Writer, newRect, newFldName)
                                    form.DecodeGenericDictionary(iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(0), frmField)
                                    frmFields.Add(frmField)
                                End If
                            Else
                                If fldKidIndex < 0 Then
                                    frmField = pdfReaderDoc.AcroFields.GetNewPushbuttonFromField(fldname, 0, stmp.Writer)
                                    frmFields.Add(frmField)
                                    frmField = New iTextSharp.text.pdf.PushbuttonField(stmp.Writer, newRect, newFldName)
                                    frmFields.Add(frmField)
                                Else
                                    frmField = pdfReaderDoc.AcroFields.GetNewPushbuttonFromField(fldname, 0, stmp.Writer)
                                    frmFields.Add(frmField)
                                End If
                            End If
                        Else
                            Dim indexField As Integer = 0
                            If fldKidIndex < 0 Then
                                frmField = New iTextSharp.text.pdf.PushbuttonField(stmp.Writer, newRect, newFldName)
                                frmFields.Add(frmField)
                                indexField += 1
                            Else
                                frmField = New iTextSharp.text.pdf.PushbuttonField(stmp.Writer, newRect, newFldName)
                            End If
                        End If
                        frmField.TextColor = textcolor
                        frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                        frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                        frmField.FieldName = newFldName
                        frmField.Text = Me.PDFField_Value.Text & ""
                        frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                        frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                        frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                        frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                        frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                        If Not defaultFont Is Nothing Then
                            frmField.Font = defaultFont.BaseFont
                        End If
                        If defaultFontSize >= 0 Then
                            frmField.FontSize = defaultFontSize
                        End If
                        If newRect Is Nothing Then
                            newRect = frmField.Box
                        Else
                            If Not String.IsNullOrEmpty(fldname & "") Then
                            End If
                            frmField.Box = newRect
                        End If
                        Dim intFF As Integer = frmField.Options + 0
                        If PDFField_Selection.Checked = True And PDFField_Selection.Enabled Then
                        End If
                        If PDFField_CombChk.Checked = True And PDFField_CombChk.Enabled Then
                        End If
                        If PDFField_Scroll.Checked = False Then
                        End If
                        If PDFField_CheckSpelling.Checked = False Then
                        End If
                        If PDFField_Selection.Checked = True And PDFField_Selection.Enabled Then
                            If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then intFF += iTextSharp.text.pdf.PdfFormField.FF_FILESELECT
                        End If
                        If PDFField_Password.Checked = True And PDFField_Password.Enabled Then
                        End If
                        If PDFField_MultiLine.Checked = True And PDFField_MultiLine.Enabled Then
                        End If
                        If PDFField_Required.Checked = True Then
                            If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then intFF += iTextSharp.text.pdf.PdfFormField.FF_REQUIRED
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then intFF += iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY
                        End If
                        frmField.Options = intFF
                        If Not String.IsNullOrEmpty(fldname) And fldKidIndex < 0 Then
                        End If
                        Dim bImages As Boolean = False
                        Select Case PuchButton_Options_Layout.SelectedIndex + 1
                            Case iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_ONLY
                                frmField.Layout = PuchButton_Options_Layout.SelectedIndex + 1
                                bImages = False
                            Case iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_ONLY
                                frmField.Layout = PuchButton_Options_Layout.SelectedIndex + 1
                                bImages = True
                            Case iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_TOP_LABEL_BOTTOM
                                frmField.Layout = PuchButton_Options_Layout.SelectedIndex + 1
                                bImages = True
                            Case iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_TOP_ICON_BOTTOM
                                frmField.Layout = PuchButton_Options_Layout.SelectedIndex + 1
                                bImages = True
                            Case iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_LEFT_LABEL_RIGHT
                                frmField.Layout = PuchButton_Options_Layout.SelectedIndex + 1
                                bImages = True
                            Case iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_LEFT_ICON_RIGHT
                                frmField.Layout = PuchButton_Options_Layout.SelectedIndex + 1
                                bImages = True
                            Case iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_OVER_ICON
                                frmField.Layout = PuchButton_Options_Layout.SelectedIndex + 1
                                bImages = True
                        End Select
                        If frmFields.Count > 0 And fldKidIndex < 0 Then
                            frmFields(frmFields.Count - 1) = (frmField)
                        ElseIf frmFields.Count > 0 Then
                            frmFields(fldKidIndex) = (frmField)
                        End If
                        Dim fldFlags As Integer = 0
                        If Not frmField.Field.Get(PdfName.F) Is Nothing Then
                            If frmField.Field.Get(PdfName.F).IsNumber Then
                                fldFlags = frmField.Field.GetAsNumber(PdfName.F).IntValue
                            End If
                        End If
                        If PDFField_Locked.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                            End If
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                            End If
                        End If
                        Select Case PDFField_Visibility.SelectedIndex
                            Case 0
                                If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 1
                                If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN + iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 2
                                fldFlags += 0
                            Case 3
                                fldFlags += PdfAnnotation.FLAGS_PRINT + PdfAnnotation.FLAGS_NOVIEW
                        End Select
                        Dim act As New List(Of PdfAction)
                        Dim actCntr As Integer = -1
                        frmField.Options = intFF
                        Dim fld As PdfFormField = frmField.Field
                        Try
                            frmFields(CInt(IIf(fldKidIndex < 0, frmFields.Count - 1, fldKidIndex + 0))) = frmField
                        Catch exFrmField As Exception
                            TimeStampAdd(exFrmField, debugMode)
                        End Try
                        If fldFlags > 0 Then
                            fld.Flags = fldFlags
                        End If
                        For Each ma As String In arrayMouseActions.ToArray
                            actCntr += 1
                            act.Add(Nothing)
                            Try
                                If Not PDFField_Actions_TreeView.Nodes(ma) Is Nothing Then
                                    For Each a As TreeNode In PDFField_Actions_TreeView.Nodes(ma).Nodes
                                        If a.Text.ToLower = "SubmitForm".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim Flags As Integer = 0
                                            If Not a.Nodes("FLAGS") Is Nothing Then
                                                Flags = CInt(a.Nodes("FLAGS").Nodes(0).Text.ToString.Replace("TreeNode: ", ""))
                                            End If
                                            Dim pdfArrayFieldNames As PdfArray = Nothing
                                            If Not a.Nodes("FIELDS") Is Nothing Then
                                                pdfArrayFieldNames = New PdfArray
                                                For Each fldNameTreeNode As TreeNode In a.Nodes("FIELDS").Nodes
                                                    If Not String.IsNullOrEmpty(fldNameTreeNode.Text) Then
                                                        pdfArrayFieldNames.Add(New PdfString(fldNameTreeNode.Text))
                                                    End If
                                                Next
                                            End If
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act(actCntr).Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                            Else
                                                Dim act2 As PdfAction = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act2.Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                                act(actCntr).Next(act2)
                                            End If
                                        ElseIf a.Text.ToLower = "Javascript".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer)
                                            Else
                                                act(actCntr).Next(iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer))
                                            End If
                                        ElseIf a.Text.ToLower = "Named".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim action As New PdfAction()
                                            action.Put(PdfName.S, PdfName.NAMED)
                                            action.Put(PdfName.N, New PdfName(s.Text.ToString))
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = action
                                            Else
                                                act(actCntr).Next(action)
                                            End If
                                        End If
                                    Next
                                    If Not act(actCntr) Is Nothing Then
                                        Dim actItem As PdfAction = act(actCntr)
                                        If actItem.Keys.Count > 0 Then
                                            Select Case ma.ToString.ToLower
                                                Case "mouse up"
                                                    fld.Action = act(actCntr)
                                                Case "mouse down"
                                                    fld.SetAdditionalActions(PdfName.D, act(actCntr))
                                                Case "mouse enter"
                                                    fld.SetAdditionalActions(PdfName.E, act(actCntr))
                                                Case "mouse exit"
                                                    fld.SetAdditionalActions(PdfName.X, act(actCntr))
                                                Case "on blur"
                                                    fld.SetAdditionalActions(PdfName.BL, act(actCntr))
                                                Case "on focus"
                                                    fld.SetAdditionalActions(PdfName.FO, act(actCntr))
                                            End Select
                                        End If
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Next
                        Dim aTemp As PdfDictionary = fld.GetAsDict(PdfName.A)
                        Dim aa As PdfDictionary = Nothing
                        Dim indexKid As Integer = 0
                        Dim fldPages As New List(Of Integer)
                        Dim fldActions As New List(Of PdfDictionary)
                        Dim fldAA As New List(Of PdfDictionary)
                        Dim fldR As New List(Of PdfArray)
                        Dim formTmp As AcroFields = pdfReaderDoc.AcroFields
                        For Each fldKids As iTextSharp.text.pdf.PushbuttonField In frmFields.ToArray()
                            If ((fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Or (indexKid = fldKidIndex)) Then
                                fldPages.Add(Me.page)
                                If aTemp Is Nothing Then
                                    fldActions.Add(Nothing)
                                Else
                                    fldActions.Add(aTemp)
                                End If
                                fldR.Add(frmField.Field.GetAsArray(PdfName.RECT))
                                fldAA.Add(fld.GetAsDict(PdfName.AA))
                                indexKid += 1
                            Else
                                fldPages.Add(pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexKid))
                                If pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetMerged(indexKid).Get(PdfName.A) Is Nothing Then
                                    fldActions.Add(Nothing)
                                Else
                                    fldActions.Add(pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetMerged(indexKid).GetAsDict(PdfName.A))
                                End If
                                If pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetMerged(indexKid).Get(PdfName.AA) Is Nothing Then
                                    fldAA.Add(Nothing)
                                Else
                                    fldAA.Add(pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetMerged(indexKid).GetAsDict(PdfName.AA))
                                End If
                                If pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetMerged(indexKid).Get(PdfName.RECT) Is Nothing Then
                                    fldR.Add(Nothing)
                                Else
                                    fldR.Add(pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetMerged(indexKid).GetAsArray(PdfName.RECT))
                                End If
                                indexKid += 1
                            End If
                        Next
                        indexKid = 0
                        Dim dictKid As New PdfDictionary
                        Dim arrKids As New PdfArray
                        fldPages = New List(Of Integer)
                        fldActions = New List(Of PdfDictionary)
                        fldAA = New List(Of PdfDictionary)
                        formTmp = pdfReaderDoc.AcroFields
                        Dim flditem As AcroFields.Item = formTmp.GetFieldItem(fldname)
                        Dim fldRect As New List(Of PdfRectangle)
                        For Each fldKids As iTextSharp.text.pdf.PushbuttonField In frmFields.ToArray()
                            If (indexKid = fldKidIndex) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                fldPages.Add(Me.page)
                                fldActions.Add(DirectCast(iTextGetPDFObject(fld.GetAsDict(PdfName.A), PdfName.A), PdfDictionary))
                                fldAA.Add(DirectCast(iTextGetPDFObject(fld.GetAsDict(PdfName.AA), PdfName.AA), PdfDictionary))
                                fldRect.Add(New PdfRectangle(newRect))
                                frmFields(indexKid).Box = newRect
                                indexKid += 1
                            Else
                                fldPages.Add(pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexKid))
                                fldActions.Add(DirectCast(iTextGetPDFObject(flditem.GetMerged(indexKid), PdfName.A), PdfDictionary))
                                fldAA.Add(DirectCast(iTextGetPDFObject(flditem.GetMerged(indexKid), PdfName.AA), PdfDictionary))
                                fldRect.Add(New PdfRectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Top)))
                                frmFields(indexKid).Box = New iTextSharp.text.Rectangle(fldRect(fldRect.Count - 1).Left, fldRect(fldRect.Count - 1).Bottom, fldRect(fldRect.Count - 1).Right, fldRect(fldRect.Count - 1).Top)
                                indexKid += 1
                            End If
                        Next
                        indexKid = 0
                        If frmFields.Count > 0 And fldKidIndex < 0 Then
                            frmFields(frmFields.Count - 1) = frmField
                        ElseIf frmFields.Count > 0 Then
                            frmFields(fldKidIndex) = frmField
                        End If
                        Dim imgStream As New MemoryStream
                        Select Case PuchButton_Options_Behavior.SelectedIndex
                            Case 0
                                Try
                                    fld.SetHighlighting(iTextSharp.text.pdf.PdfAnnotation.HIGHLIGHT_NONE)
                                    frmField.Field.SetHighlighting(iTextSharp.text.pdf.PdfAnnotation.HIGHLIGHT_NONE)
                                    If bImages And PuchButton_Options_StateImageList.Count >= 1 Then
                                        If Not PuchButton_Options_StateImageList(0) Is Nothing Then
                                        End If
                                    End If
                                    If PuchButton_Options_StateLabelList.Count >= 1 And Not PuchButton_Options_Layout.SelectedIndex = 1 Then
                                        fld.GetAsDict(PdfName.MK).Put(New PdfName("CA"), New PdfString(PuchButton_Options_StateLabelList(0) & ""))
                                    End If
                                    ap = frmField.GetAppearance().Duplicate()
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Case 1
                                fld.SetHighlighting(iTextSharp.text.pdf.PdfAnnotation.HIGHLIGHT_PUSH)
                                frmField.Field.SetHighlighting(iTextSharp.text.pdf.PdfAnnotation.HIGHLIGHT_PUSH)
                                frmField.IconFitToBounds = False
                                If bImages Then
                                    If PuchButton_Options_StateImageList.Count >= 1 Then
                                        bImages = False
                                        Try
                                            If PuchButton_Options_StateImageList.Count >= 3 Then
                                                If Not PuchButton_Options_StateImageList(2) Is Nothing Then
                                                    frmField.Image = iTextSharp.text.Image.GetInstance(PuchButton_Options_StateImageListByte(2))
                                                    frmField.ScaleIcon = Me.PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex + 1
                                                    If Me.PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex <> 1 Then
                                                        frmField.ProportionalIcon = (CBool(IIf(Me.PuchButton_Options_Icon_CmbScale.SelectedIndex <= 0, True, False)))
                                                        frmField.IconHorizontalAdjustment = CSng(Me.PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value) / 100
                                                        frmField.IconVerticalAdjustment = CSng(Me.PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value) / 100
                                                    End If
                                                    frmField.IconFitToBounds = Me.PuchButton_Options_Icon_ChkFitToBounds.Checked
                                                    Dim scale As PdfName = PdfName.A
                                                    Select Case frmField.ScaleIcon
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_BIG
                                                            scale = PdfName.B
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_SMALL
                                                            scale = PdfName.S
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_NEVER
                                                            scale = PdfName.N
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_ALWAYS
                                                            scale = PdfName.A
                                                        Case Else
                                                            scale = PdfName.A
                                                    End Select
                                                    fld.SetMKIconFit(scale, DirectCast(IIf(frmField.ProportionalIcon, PdfName.P, PdfName.A), PdfName), frmField.IconHorizontalAdjustment, frmField.IconVerticalAdjustment, frmField.IconFitToBounds)
                                                    If PuchButton_Options_Layout.SelectedIndex <> 1 And PuchButton_Options_StateLabelList.Count >= 3 Then
                                                        frmField.Text = PuchButton_Options_StateLabelList(2) & ""
                                                        fld.MKRolloverCaption = PuchButton_Options_StateLabelList(2) & ""
                                                    End If
                                                    Dim apX As PdfAppearance = frmField.GetAppearance().Duplicate()
                                                    apX.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                                    fld.SetAppearance(iTextSharp.text.pdf.PdfAnnotation.APPEARANCE_ROLLOVER, apX)
                                                    bImages = True
                                                End If
                                            End If
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                        Try
                                            If PuchButton_Options_StateImageList.Count >= 2 Then
                                                If Not PuchButton_Options_StateImageList(1) Is Nothing Then
                                                    frmField.Image = iTextSharp.text.Image.GetInstance(PuchButton_Options_StateImageListByte(1))
                                                    frmField.ScaleIcon = Me.PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex + 1
                                                    If Me.PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex <> 1 Then
                                                        frmField.ProportionalIcon = (CBool(IIf(Me.PuchButton_Options_Icon_CmbScale.SelectedIndex <= 0, True, False)))
                                                        frmField.IconHorizontalAdjustment = CSng(Me.PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value) / 100
                                                        frmField.IconVerticalAdjustment = CSng(Me.PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value) / 100
                                                    End If
                                                    frmField.IconFitToBounds = Me.PuchButton_Options_Icon_ChkFitToBounds.Checked
                                                    Dim scale As PdfName = PdfName.A
                                                    Select Case frmField.ScaleIcon
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_BIG
                                                            scale = PdfName.B
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_SMALL
                                                            scale = PdfName.S
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_NEVER
                                                            scale = PdfName.N
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_ALWAYS
                                                            scale = PdfName.A
                                                        Case Else
                                                            scale = PdfName.A
                                                    End Select
                                                    fld.SetMKIconFit(scale, DirectCast(IIf(frmField.ProportionalIcon, PdfName.P, PdfName.A), PdfName), frmField.IconHorizontalAdjustment, frmField.IconVerticalAdjustment, frmField.IconFitToBounds)
                                                    If PuchButton_Options_Layout.SelectedIndex <> 1 And PuchButton_Options_StateLabelList.Count >= 2 Then
                                                        frmField.Text = PuchButton_Options_StateLabelList(1) & ""
                                                        fld.MKAlternateCaption = PuchButton_Options_StateLabelList(1) & ""
                                                    End If
                                                    Dim apX As PdfAppearance = frmField.GetAppearance().Duplicate()
                                                    apX.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                                    fld.SetAppearance(iTextSharp.text.pdf.PdfAnnotation.APPEARANCE_DOWN, apX)
                                                    bImages = True
                                                End If
                                            End If
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                        Try
                                            If PuchButton_Options_StateImageList.Count >= 1 Then
                                                If Not PuchButton_Options_StateImageList(0) Is Nothing Then
                                                    frmField.Image = iTextSharp.text.Image.GetInstance(PuchButton_Options_StateImageListByte(0))
                                                    frmField.ScaleIcon = Me.PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex + 1
                                                    If Me.PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex <> 1 Then
                                                        frmField.ProportionalIcon = (CBool(IIf(Me.PuchButton_Options_Icon_CmbScale.SelectedIndex <= 0, True, False)))
                                                        frmField.IconHorizontalAdjustment = CSng(Me.PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value) / 100
                                                        frmField.IconVerticalAdjustment = CSng(Me.PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value) / 100
                                                    End If
                                                    frmField.IconFitToBounds = Me.PuchButton_Options_Icon_ChkFitToBounds.Checked
                                                    Dim scale As PdfName = PdfName.A
                                                    Select Case frmField.ScaleIcon
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_BIG
                                                            scale = PdfName.B
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_SMALL
                                                            scale = PdfName.S
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_NEVER
                                                            scale = PdfName.N
                                                        Case iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_ALWAYS
                                                            scale = PdfName.A
                                                        Case Else
                                                            scale = PdfName.A
                                                    End Select
                                                    fld.SetMKIconFit(scale, DirectCast(IIf(frmField.ProportionalIcon, PdfName.P, PdfName.A), PdfName), frmField.IconHorizontalAdjustment, frmField.IconVerticalAdjustment, frmField.IconFitToBounds)
                                                    If PuchButton_Options_Layout.SelectedIndex <> 1 And PuchButton_Options_StateLabelList.Count >= 1 Then
                                                        fld.SetHighlighting(iTextSharp.text.pdf.PdfAnnotation.HIGHLIGHT_PUSH)
                                                        frmField.Text = PuchButton_Options_StateLabelList(0) & ""
                                                        fld.MKNormalCaption = PuchButton_Options_StateLabelList(0) & ""
                                                    End If
                                                    Dim apX As PdfAppearance = frmField.GetAppearance().Duplicate()
                                                    apX.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                                    fld.SetAppearance(iTextSharp.text.pdf.PdfAnnotation.APPEARANCE_NORMAL, apX)
                                                    ap = frmField.GetAppearance().Duplicate()
                                                    bImages = True
                                                End If
                                            End If
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                    End If
                                Else
                                    Try
                                        If PuchButton_Options_StateLabelList.Count >= 1 And Not PuchButton_Options_Layout.SelectedIndex = 1 Then
                                            fld.GetAsDict(PdfName.MK).Put(New PdfName("CA"), New PdfString(PuchButton_Options_StateLabelList(0) & ""))
                                            fld.MKNormalCaption = PuchButton_Options_StateLabelList(0) & ""
                                            ap = frmField.GetAppearance().Duplicate()
                                        End If
                                    Catch ex As Exception
                                        TimeStampAdd(ex, debugMode)
                                    End Try
                                    Try
                                        If PuchButton_Options_StateLabelList.Count >= 2 And Not PuchButton_Options_Layout.SelectedIndex = 1 Then
                                            fld.GetAsDict(PdfName.MK).Put(PdfName.AC, New PdfString(PuchButton_Options_StateLabelList(1) & ""))
                                            fld.MKAlternateCaption = PuchButton_Options_StateLabelList(1) & ""
                                        End If
                                    Catch ex As Exception
                                        TimeStampAdd(ex, debugMode)
                                    End Try
                                    Try
                                        If PuchButton_Options_StateLabelList.Count >= 3 And Not PuchButton_Options_Layout.SelectedIndex = 1 Then
                                            fld.GetAsDict(PdfName.MK).Put(PdfName.RC, New PdfString(PuchButton_Options_StateLabelList(2) & ""))
                                            fld.MKRolloverCaption = PuchButton_Options_StateLabelList(2) & ""
                                        End If
                                    Catch ex As Exception
                                        TimeStampAdd(ex, debugMode)
                                    End Try
                                End If
                            Case 2
                                Try
                                    fld.SetHighlighting(iTextSharp.text.pdf.PdfAnnotation.HIGHLIGHT_OUTLINE)
                                    frmField.Field.SetHighlighting(iTextSharp.text.pdf.PdfAnnotation.HIGHLIGHT_OUTLINE)
                                    If bImages And PuchButton_Options_StateImageList.Count >= 1 Then
                                        If Not PuchButton_Options_StateImageList(0) Is Nothing Then
                                        End If
                                    End If
                                    If PuchButton_Options_StateLabelList.Count >= 1 And Not PuchButton_Options_Layout.SelectedIndex = 1 Then
                                        frmField.Text = PuchButton_Options_StateLabelList(0) & ""
                                        fld.SetAppearance(iTextSharp.text.pdf.PdfAnnotation.APPEARANCE_NORMAL, frmField.GetAppearance().Duplicate())
                                        fld.GetAsDict(PdfName.MK).Put(New PdfName("CA"), New PdfString(PuchButton_Options_StateLabelList(0) & ""))
                                        fld.MKNormalCaption = PuchButton_Options_StateLabelList(0) & ""
                                    End If
                                    ap = frmField.GetAppearance().Duplicate()
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Case 3
                                Try
                                    fld.SetHighlighting(iTextSharp.text.pdf.PdfAnnotation.HIGHLIGHT_INVERT)
                                    frmField.Field.SetHighlighting(iTextSharp.text.pdf.PdfAnnotation.HIGHLIGHT_INVERT)
                                    If bImages And PuchButton_Options_StateImageList.Count >= 1 Then
                                        If Not PuchButton_Options_StateImageList(0) Is Nothing Then
                                        End If
                                    End If
                                    If PuchButton_Options_StateLabelList.Count >= 1 And Not PuchButton_Options_Layout.SelectedIndex = 1 Then
                                        frmField.Text = PuchButton_Options_StateLabelList(0) & ""
                                        fld.SetAppearance(iTextSharp.text.pdf.PdfAnnotation.APPEARANCE_NORMAL, frmField.GetAppearance().Duplicate())
                                        fld.GetAsDict(PdfName.MK).Put(New PdfName("CA"), New PdfString(PuchButton_Options_StateLabelList(0) & ""))
                                        fld.MKNormalCaption = PuchButton_Options_StateLabelList(0) & ""
                                    End If
                                    ap = frmField.GetAppearance().Duplicate()
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                        End Select
                        Dim TempPdfFormFields As New List(Of PdfFormField)
                        Dim pbBoxBackup As iTextSharp.text.Rectangle = frmField.Box
                        Dim frmFieldBackup As PushbuttonField = DirectCast(frmField, PushbuttonField)
                        For fldIndexTemp As Integer = 0 To frmFields.Count - 1
                            Dim fldTemp2 As PushbuttonField = DirectCast(frmField, PushbuttonField)
                            If fldKidIndex = -1 And fldIndexTemp = frmFields.Count - 1 Or fldIndexTemp = fldKidIndex Then
                                fldTemp2.Box = pbBoxBackup
                            Else
                                fldTemp2.Box = frmFields(fldIndexTemp).Box
                            End If
                            Dim leftBox As Single = fldTemp2.Box.Left
                            Dim pdfFormFieldTemp As PdfFormField = DirectCast(frmFields(fldIndexTemp).Field, PdfFormField)
                            If Not (fldIndexTemp = fldKidIndex) And Not (fldKidIndex = -1 And fldIndexTemp = frmFields.Count - 1) Then
                                If Not fldActions(fldIndexTemp) Is Nothing Then
                                    pdfFormFieldTemp.Put(PdfName.A, fldActions(fldIndexTemp))
                                End If
                            Else
                                pdfFormFieldTemp = fld
                            End If
                            TempPdfFormFields.Add(pdfFormFieldTemp)
                            fldTemp2 = Nothing
                            pdfFormFieldTemp = Nothing
                        Next
                        If Not String.IsNullOrEmpty(Me.PDFField_Tooltip.Text & "") Then fld.Put(PdfName.TU, New PdfString(Me.PDFField_Tooltip.Text & ""))
                        If frmFields.Count > 1 Then
                            Try
                                If fldKidIndex <= 0 Then
                                End If
                                fld = PdfFormField.CreatePushButton(stmp.Writer)
                                fld.FieldName = newFldName & ""
                                fld.UserName = PDFField_Tooltip.Text & ""
                                Dim cb As New PdfContentByte(stmp.Writer)
                                ap = cb.CreateAppearance(newRect.Width, newRect.Height)
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                ap.SetGrayFill(0)
                                fld.SetFieldFlags(intFF)
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Else
                            If PDFField_Copy.Checked Then
                                frmFields.Add(frmField)
                                fld.FieldName = newFldName & ""
                                fld.UserName = PDFField_Tooltip.Text & ""
                                ap = frmField.GetAppearance().Duplicate()
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                fld.SetFieldFlags(intFF)
                            Else
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                            End If
                        End If
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            If frmFields.Count > 1 Then
                                Try
                                    Dim itmFld As iTextSharp.text.pdf.AcroFields.Item = pdfReaderDoc.AcroFields.GetFieldItem(fldname)
                                    If frmFields.Count > 1 Then
                                        dictKid = New PdfDictionary
                                        arrKids = New PdfArray
                                        flditem = formTmp.GetFieldItem(fldname)
                                        Dim pdfArrRect As PdfRectangle = Nothing
                                        indexKid = 0
                                        Try
                                            If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.KIDS) Is Nothing Then
                                                form.RemoveField(fldname)
                                            Else
                                                If fldKidIndex >= 0 Then
                                                    form.RemoveField(fldname)
                                                Else
                                                    form.RemoveField(fldname)
                                                End If
                                            End If
                                        Catch exRemove As Exception
                                            TimeStampAdd(exRemove, debugMode)
                                        End Try
                                        indexKid = 0
                                        For Each fldKids As iTextSharp.text.pdf.PushbuttonField In frmFields.ToArray()
                                            If ((indexKid = fldKidIndex) Or (fldKidIndex = -1 And indexKid = frmFields.ToArray.Count - 1)) Then
                                                Dim k As PdfFormField = TempPdfFormFields(indexKid)
                                                If indexKid = fldKidIndex Then
                                                Else
                                                End If
                                                If Not k.Get(PdfName.DA) Is Nothing Then k.Remove(PdfName.DA)
                                                If Not k.Get(PdfName.FT) Is Nothing Then k.Remove(PdfName.FT)
                                                If Not k.Get(PdfName.FF) Is Nothing Then k.Remove(PdfName.FF)
                                                If Not k.Get(PdfName.T) Is Nothing Then k.Remove(PdfName.T)
                                                If Not k.Get(PdfName.TU) Is Nothing Then k.Remove(PdfName.TU)
                                                k.PlaceInPage = pageNumber
                                                If Not fldActions(indexKid) Is Nothing Then
                                                    k.Put(PdfName.A, fldActions(indexKid))
                                                End If
                                                If Not fldR(indexKid) Is Nothing Then
                                                End If
                                                fld.AddKid(k)
                                                stmp.AddAnnotation(k, pageNumber)
                                            Else
                                                Dim k As PdfFormField = TempPdfFormFields(indexKid)
                                                If Not fldActions(indexKid) Is Nothing Then
                                                    k.Put(PdfName.A, fldActions(indexKid))
                                                End If
                                                If Not fldR(indexKid) Is Nothing Then
                                                End If
                                                If Not k.Get(PdfName.DA) Is Nothing Then k.Remove(PdfName.DA)
                                                If Not k.Get(PdfName.FT) Is Nothing Then k.Remove(PdfName.FT)
                                                If Not k.Get(PdfName.FF) Is Nothing Then k.Remove(PdfName.FF)
                                                If Not k.Get(PdfName.T) Is Nothing Then k.Remove(PdfName.T)
                                                If Not k.Get(PdfName.TU) Is Nothing Then k.Remove(PdfName.TU)
                                                k.PlaceInPage = fldPages(indexKid)
                                                fld.AddKid(k)
                                                stmp.AddAnnotation(k, fldPages(indexKid))
                                            End If
                                            indexKid += 1
                                        Next
                                        If Not aa Is Nothing Then
                                            fld.Put(PdfName.AA, aa)
                                        Else
                                            If Not fld.Get(PdfName.AA) Is Nothing Then
                                                fld.Remove(PdfName.AA)
                                            End If
                                        End If
                                    Else
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Else
                                Try
                                    If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.KIDS) Is Nothing Then
                                        If fldKidIndex >= 0 Then
                                            If fldKidIndex >= 0 Then
                                            End If
                                        End If
                                    Else
                                        If fldKidIndex >= 0 Then
                                        End If
                                        Try
                                            If Not String.IsNullOrEmpty(fldname & "") Then form.RemoveField(fldname)
                                        Catch exRemoveField As Exception
                                            TimeStampAdd(exRemoveField, debugMode)
                                        End Try
                                    End If
                                Catch exRemove As Exception
                                    TimeStampAdd(exRemove, debugMode)
                                End Try
                            End If
                            If frmFields.Count > 1 Then
                                fld.Remove(PdfName.DV)
                                fld.Remove(PdfName.V)
                                fld.Remove(PdfName.AP)
                                fld.Remove(PdfName.DR)
                            End If
                            stmp.AddAnnotation(fld, pageNumber)
                        Else
                            stmp.AddAnnotation(fld, pageNumber)
                        End If
                End Select
            Else
            End If
            stmp.Writer.CloseStream = False
            stmp.Close()
            If memStream.CanSeek Then
                memStream.Position = 0
            End If
            b = memStream.ToArray
            memStream.Close()
            memStream.Dispose()
            cUserRect.pauseDraw = True
            cUserRect.pauseDraw = False
            Return b
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        cUserRect.pauseDraw = True
        cUserRect.pauseDraw = False
        Return b
    End Function
    Public Function UnicodeToAscii(ByVal unicodeString As String) As String
        Dim ascii As System.Text.Encoding = System.Text.Encoding.ASCII
        Dim unicode As System.Text.Encoding = System.Text.Encoding.Unicode
        Dim unicodeBytes As Byte() = unicode.GetBytes(unicodeString)
        Dim asciiBytes As Byte() = System.Text.Encoding.Convert(unicode, ascii, unicodeBytes)
        Dim asciiChars(ascii.GetCharCount(asciiBytes, 0, asciiBytes.Length) - 1) As Char
        ascii.GetChars(asciiBytes, 0, asciiBytes.Length, asciiChars, 0)
        Dim asciiString As New String(asciiChars)
        Return asciiString
    End Function
    Public Function A0_GetFormattedTextBox(ByVal textbox_value As String) As String
        Try
            Select Case PDFField_Format_Category.SelectedItem.ToString.ToLower
                Case "Number".ToLower
                    Dim valNumber As Double = CDbl(textbox_value & "")
                    Dim strFormatStr As String = "", strCurSymbol As String = ""
                    Select Case PDFField_Format_Number_CurrencySymbol.SelectedIndex
                        Case 0
                            strCurSymbol = ""
                        Case 1
                            strCurSymbol = "$"
                        Case 2
                            strCurSymbol = " DM"
                        Case 3
                            strCurSymbol = "€"
                        Case 4
                            strCurSymbol = "fl"
                        Case 5
                            strCurSymbol = " F"
                        Case 6
                            strCurSymbol = " kr"
                        Case 7
                            strCurSymbol = "L. "
                        Case 8
                            strCurSymbol = " Pts."
                        Case 9
                            strCurSymbol = "£"
                        Case 10
                            strCurSymbol = "¥"
                        Case Else
                            strCurSymbol = PDFField_Format_Number_CurrencySymbol_Custom.Text.ToString & ""
                    End Select
                    If PDFField_Format_Number_CurrencySymbol_Prepend.Checked Then
                        strFormatStr &= strCurSymbol
                    End If
                    For Each chr1 As Char In PDFField_Format_Number_SeparatorStyle.SelectedItem.ToString.ToCharArray
                        If IsNumeric(chr1) Then
                            strFormatStr &= "#"
                        Else
                            If Not chr1 = "." Then
                                strFormatStr &= chr1
                            Else
                                Exit For
                            End If
                        End If
                    Next
                    If PDFField_Format_Number_DecimalPlaces.SelectedIndex > 0 Then
                        strFormatStr &= "."
                        For cntr As Integer = 1 To PDFField_Format_Number_DecimalPlaces.SelectedIndex
                            strFormatStr &= "0"
                        Next
                    End If
                    If Not PDFField_Format_Number_CurrencySymbol_Prepend.Checked Then
                        strFormatStr &= strCurSymbol
                    End If
                    If IsNumeric(textbox_value & "") Then
                        If CSng(textbox_value) < 0 Then
                            If PDFField_Format_Number_Negative_ShowParantheses.Checked Then
                                strFormatStr = "(" & strFormatStr & ")"
                            End If
                        End If
                    End If
                    Dim strOut As String = valNumber.ToString(strFormatStr)
                    Return strOut
                Case Else
                    Return textbox_value & ""
            End Select
        Catch exFormatString As Exception
            TimeStampAdd(exFormatString, debugMode)
        End Try
        Return textbox_value & ""
    End Function
    Public Function A0_PDFFormField_Modify_AllFields_CommonProperties(ByVal b() As Byte, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing) As Byte()
        Try
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword & ""))
            End If
        Catch ex As Exception
            pdfReaderDocTemp = pdfReaderDoc
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            preventDragging = False
            Dim memStream As New MemoryStream
            Dim stmp As PdfStamper = getStamper(pdfReaderDocTemp, memStream)
            Dim form As iTextSharp.text.pdf.AcroFields = stmp.AcroFields
            Dim fltType As Integer = -1
            Dim fldNames() As String = form.Fields.Keys.ToArray
            For Each fldname As String In fldNames.ToArray
                If Not String.IsNullOrEmpty(fldname & "") Then
                    fltType = GetFormFieldType(b, fldname)
                    Dim frmField As AcroFields.Item = form.GetFieldItem(fldname)
                    Dim ap As PdfAppearance = Nothing
                    If Not String.IsNullOrEmpty(fldname) Then
                        Dim intFF As Integer = 0
                        Try
                            intFF = frmField.GetMerged(0).GetAsNumber(PdfName.FF).IntValue
                        Catch exGetVal As Exception
                            intFF = 0
                        End Try
                        If PDFField_Required.Checked = True Then
                            If Not (iTextSharp.text.pdf.PdfFormField.FF_REQUIRED And intFF) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                intFF += iTextSharp.text.pdf.PdfFormField.FF_REQUIRED
                            End If
                        Else
                            If (iTextSharp.text.pdf.PdfFormField.FF_REQUIRED And intFF) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                intFF -= iTextSharp.text.pdf.PdfFormField.FF_REQUIRED
                            End If
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            If Not (iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY And intFF) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                intFF += iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY
                            End If
                        Else
                            If iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY And intFF = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                intFF -= iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY
                            End If
                        End If
                        Dim fldFlags As Integer = 0
                        Try
                            fldFlags = frmField.GetMerged(0).GetAsNumber(PdfName.F).IntValue
                        Catch exGetVal As Exception
                            fldFlags = 0
                        End Try
                        If PDFField_Locked.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                            End If
                        Else
                            If (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                fldFlags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                            End If
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                            End If
                        Else
                            If (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                fldFlags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                            End If
                        End If
                        Try
                            If Not String.IsNullOrEmpty(fldname & "") Then form.RemoveField(fldname)
                        Catch exRemoveField As Exception
                            TimeStampAdd(exRemoveField, debugMode)
                        End Try
                        frmField.GetMerged(0).Put(PdfName.FF, New PdfNumber(intFF))
                        frmField.GetMerged(0).Put(PdfName.F, New PdfNumber(fldFlags))
                    End If
                End If
            Next
            stmp.Writer.CloseStream = False
            stmp.Close()
            If memStream.CanSeek Then
                memStream.Position = 0
            End If
            b = memStream.ToArray
            memStream.Close()
            memStream.Dispose()
            cUserRect.pauseDraw = True
            cUserRect.pauseDraw = False
            Return b
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        cUserRect.pauseDraw = True
        cUserRect.pauseDraw = False
        Return b
    End Function
    Public Function A0_PDFFormField_Modify_TextField(ByVal b() As Byte, ByVal fldname As String, ByVal newFldName As String, ByVal textcolor As iTextSharp.text.BaseColor, ByVal bgcolor As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal newRect As iTextSharp.text.Rectangle, Optional ByVal pageNumber As Integer = -1, Optional ByVal removeKidFieldIdx As Integer = -1, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing, Optional ByVal promptMerge As Boolean = True) As Byte()
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword & ""))
            Else
                pdfReaderDocTemp = pdfReaderDoc.Clone
            End If
            If pageNumber <= 0 Then
                pageNumber = CInt(page) + 0
            End If
        Catch ex As Exception
            pdfReaderDocTemp = pdfReaderDoc
            TimeStampAdd(ex, debugMode)
        End Try
        Dim frmField As iTextSharp.text.pdf.TextField
        Dim frmFields As New List(Of iTextSharp.text.pdf.TextField)
        Dim frmFieldsMerge As New List(Of iTextSharp.text.pdf.TextField)
        Try
            Dim memStream As New MemoryStream
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            Dim stmp As PdfStamper = getStamper(pdfReaderDocTemp, memStream)
            Try
                If Not stmp.AcroFields.GenerateAppearances = True Then
                    If Not stmp.AcroFields.Fields Is Nothing Then stmp.AcroFields.GenerateAppearances = True
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim form As iTextSharp.text.pdf.AcroFields = stmp.AcroFields
            If True = True Then
                Dim fltType As Integer = -1
                Select Case ComboBox1.SelectedItem.ToString.ToLower
                    Case "Textbox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                    Case "CheckBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                    Case "ComboBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                    Case "ListBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                    Case "Button".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                    Case "RadioButton".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                    Case "Signature".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                    Case Else
                        Return b
                End Select
                Dim defaultFontSize As Single = 0
                Try
                    If IsNumeric(PDFField_FontSize.Text & "") Then
                        defaultFontSize = CSng(PDFField_FontSize.Text & "") + 0.0F
                    ElseIf (PDFField_FontSize.SelectedIndex > 0) Then
                        defaultFontSize = CSng(PDFField_FontSize.Items(PDFField_FontSize.SelectedIndex).ToString()) + 0.0F
                    Else
                        defaultFontSize = 0.0F
                    End If
                Catch ex As Exception
                    defaultFontSize = 0.0F
                    TimeStampAdd(ex, debugMode)
                End Try
                Dim bf As BaseFont = Nothing
                Dim defaultFont As iTextSharp.text.Font = Nothing
                Try
                    Select Case PDFField_FontFamily.SelectedIndex
                        Case 0
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER, BaseFont.WINANSI, False)
                        Case 1
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLD, BaseFont.CP1252, True)
                        Case 2
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 3
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_OBLIQUE, BaseFont.WINANSI, False)
                        Case 4
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.WINANSI, False)
                        Case 5
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLD, BaseFont.WINANSI, False)
                        Case 6
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 7
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_OBLIQUE, BaseFont.WINANSI, False)
                        Case 8
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, BaseFont.WINANSI, False)
                        Case 9
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLD, BaseFont.WINANSI, False)
                        Case 10
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ITALIC, BaseFont.WINANSI, False)
                        Case 11
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLDITALIC, BaseFont.WINANSI, False)
                        Case 12
                            defaultFont = FontFactory.GetFont(BaseFont.SYMBOL, BaseFont.WINANSI, False)
                        Case 13
                            defaultFont = FontFactory.GetFont(BaseFont.ZAPFDINGBATS, BaseFont.WINANSI, False)
                        Case Else
                            Try
                                bf = findFontInForm(New PdfName(CStr(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString)))
                                If bf Is Nothing Then
                                    defaultFont = New iTextSharp.text.Font(FontFactory.GetFont(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString(), defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor)))
                                Else
                                    defaultFont = New iTextSharp.text.Font(bf, defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor))
                                End If
                            Catch exCreateFontEmbeded As Exception
                                Err.Clear()
                            End Try
                    End Select
                    defaultFont.Size = defaultFontSize
                Catch ex As Exception
                    Throw ex
                    TimeStampAdd(ex, debugMode)
                End Try
                Select Case fltType
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                        Dim ap As PdfAppearance = Nothing
                        If Not fldname = newFldName Then
                            Try
                                If form.Fields.ContainsKey(fldname) Then
                                    If form.Fields(fldname).Size > 1 Then
                                        If promptMerge Then
                                            Dim msg As New dialogMultiChoice()
                                            Dim strMsg As String = ""
                                            strMsg &= "Rename fields from: """ & fldname & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x " & form.Fields(fldname).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            strMsg &= Environment.NewLine & "To new name: """ & newFldName & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x " & form.Fields(newFldName).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            msg.lblMessage.Text = strMsg & ""
                                            msg.ButtonsClear()
                                            msg.ButtonAdd("Rename all fields", True, 1)
                                            msg.ButtonAdd("This field only", True, 2)
                                            msg.ButtonAdd("Cancel", True, 3)
                                            Select Case msg.ShowDialog(Me, "Rename Fields", msg.ButtonsArray)
                                                Case 2
                                                    If form.Fields.ContainsKey(newFldName) Then
                                                        If form.Fields(newFldName).Size >= 1 Then
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        Else
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        End If
                                                    Else
                                                        If fldKidIndex >= 0 Then
                                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                        End If
                                                        fldNameHighlightedCopy = ""
                                                        fldname = newFldName
                                                        fldNameHighlightedCopy = ""
                                                        fldKidIndex = -1
                                                        fldname = ""
                                                    End If
                                                Case 1
                                                    For indexField As Integer = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size - 1 To 0 Step -1
                                                        If GetFormFieldType(Session("output"), fldname) = fltType Then
                                                            fldKidIndex = indexField
                                                            b = A0_PDFFormField_Modify_TextField(b.ToArray, fldname, newFldName, textcolor, bgcolor, bordercolor, New iTextSharp.text.Rectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Top)), pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexField), -1, pdfReaderDoc, False)
                                                            Session = b
                                                            LoadPDFReaderDoc(pdfOwnerPassword, True)
                                                        End If
                                                    Next
                                                    Return b.ToArray
                                                Case 3
                                                    Return b.ToArray
                                                Case Else
                                                    Return b.ToArray
                                            End Select
                                            GoTo CONTINUE_NORMAL
                                        End If
                                    End If
                                End If
                                If form.Fields.ContainsKey(newFldName) Then
                                    If form.Fields(newFldName).Size >= 1 Then
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    Else
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    End If
                                Else
                                    If fldKidIndex >= 0 Then
                                        pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                    End If
                                    fldNameHighlightedCopy = ""
                                    fldname = newFldName
                                    fldNameHighlightedCopy = ""
                                    fldKidIndex = -1
                                    fldname = ""
                                End If
                            Catch exRename As Exception
                                Err.Clear()
                            End Try
                        End If
CONTINUE_NORMAL:
                        If Not String.IsNullOrEmpty(fldname) Then
                            If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.KIDS) Is Nothing Then
                                If iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size >= 1 Then
                                    Dim indexField As Integer = 0
                                    For indexField = 0 To iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size - 1
                                        If Not removeKidFieldIdx = indexField Then
                                            If GetFormFieldType(Session("output"), fldname) = fltType Then
                                                frmFields.Add(form.GetNewTextFieldFromField(fldname, indexField, stmp.Writer))
                                            Else
                                                frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                                frmFields.Add(frmField)
                                            End If
                                        End If
                                    Next
                                    frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                    If fldKidIndex < 0 Then
                                        frmFields.Add(frmField)
                                    End If
                                Else
                                    frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                    frmFields.Add(frmField)
                                End If
                            Else
                                If fldKidIndex < 0 Then
                                    frmField = form.GetNewTextFieldFromField(fldname, 0, stmp.Writer)
                                    frmFields.Add(frmField)
                                    frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                    frmFields.Add(frmField)
                                Else
                                    frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                    frmFields.Add(frmField)
                                End If
                            End If
                        Else
                            Dim indexField As Integer = 0
                            If fldKidIndex < 0 Then
                                frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                frmFields.Add(frmField)
                                indexField += 1
                            Else
                                frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                            End If
                        End If
                        frmField.TextColor = textcolor
                        frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                        frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                        frmField.FieldName = newFldName
                        frmField.Text = Me.PDFField_Value.Text & ""
                        frmField.DefaultText = PDFField_DefaultText.Text & ""
                        frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                        frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                        frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                        frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                        frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                        If Not defaultFont Is Nothing Then
                            frmField.Font = defaultFont.BaseFont
                        End If
                        If defaultFontSize >= 0 Then
                            frmField.FontSize = defaultFontSize
                        End If
                        If newRect Is Nothing Then
                            newRect = frmField.Box
                        Else
                            If Not String.IsNullOrEmpty(fldname & "") Then
                            End If
                            If frmFields.Count <= 1 Then
                                frmField.Box = newRect
                            End If
                        End If
                        Dim intFF As Integer = 0
                        If PDFField_Selection.Checked = True And PDFField_Selection.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON
                        End If
                        If PDFField_CombChk.Checked = True And PDFField_CombChk.Enabled Then
                            If IsNumeric(PDFField_Comb.Text & "") Then
                                If CInt(PDFField_Comb.Text & "") > 0 Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_COMB
                                    frmField.MaxCharacterLength = CInt(PDFField_Comb.Text & "")
                                Else
                                    frmField.MaxCharacterLength = 0
                                End If
                            Else
                                frmField.MaxCharacterLength = 0
                            End If
                        ElseIf PDFField_MaxLenChk.Checked = True And PDFField_MaxLenChk.Enabled Then
                            frmField.MaxCharacterLength = CInt(PDFField_MaxLen.Text) + 0
                        Else
                            frmField.MaxCharacterLength = 0
                        End If
                        If PDFField_Scroll.Checked = False Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL
                        End If
                        If PDFField_CheckSpelling.Checked = False Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK
                        End If
                        If PDFField_Selection.Checked = True And PDFField_Selection.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_FILESELECT
                        End If
                        If PDFField_Password.Checked = True And PDFField_Password.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_PASSWORD
                        End If
                        If PDFField_RichText.Checked = True And PDFField_RichText.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_RICHTEXT
                        End If
                        If PDFField_MultiLine.Checked = True And PDFField_MultiLine.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_MULTILINE
                        End If
                        If PDFField_Required.Checked = True Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_REQUIRED
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY
                        End If
                        frmField.Options = intFF
                        If Not String.IsNullOrEmpty(fldname) And fldKidIndex < 0 Then
                        End If
                        Dim fld As PdfFormField = Nothing
                        Try
                            frmFields(CInt(IIf(fldKidIndex < 0, frmFields.Count - 1, fldKidIndex + 0))) = frmField
                        Catch exFrmField As Exception
                            TimeStampAdd(exFrmField, debugMode)
                        End Try
                        If frmFields.Count > 1 Then
                            Try
                                Dim maxLen As Integer = 0
                                Try
                                    If (PDFField_MaxLenChk.Checked) Then
                                        If IsNumeric(PDFField_MaxLen.Text & "") Then
                                            maxLen = CInt(PDFField_MaxLen.Text)
                                        End If
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                                fld = PdfFormField.CreateTextField(stmp.Writer, PDFField_MultiLine.Checked, PDFField_Password.Checked, maxLen)
                                If Not frmField.GetTextField().Get(PdfName.DA) Is Nothing Then
                                    fld.Put(PdfName.DA, frmField.GetTextField().GetAsString(PdfName.DA))
                                End If
                                fld.FieldName = newFldName & ""
                                fld.UserName = PDFField_Tooltip.Text & ""
                                Dim cb As New PdfContentByte(stmp.Writer)
                                ap = cb.CreateAppearance(newRect.Width, newRect.Height)
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                ap.SetGrayFill(0)
                                fld.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, ap)
                                fld.DefaultValueAsString = CStr(PDFField_DefaultText.Text & "")
                                fld.ValueAsString = CStr(PDFField_Value.Text & "")
                                fld.SetFieldFlags(intFF)
                                ap = frmField.GetAppearance().Duplicate()
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Else
                            If PDFField_Copy.Checked Then
                                frmFields.Add(frmField)
                                fld = frmField.GetTextField
                                fld.FieldName = newFldName & ""
                                fld.UserName = PDFField_Tooltip.Text & ""
                                ap = frmField.GetAppearance().Duplicate()
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                fld.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, ap)
                                fld.DefaultValueAsString = CStr(PDFField_DefaultText.Text & "")
                                fld.ValueAsString = CStr(PDFField_Value.Text & "")
                                fld.SetFieldFlags(intFF)
                            Else
                                fld = frmField.GetTextField
                                ap = frmField.GetAppearance().Duplicate()
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                fld.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, ap)
                                fld.SetFieldFlags(intFF)
                            End If
                        End If
                        Dim fldFlags As Integer = 0
                        If Not fld.Get(PdfName.F) Is Nothing Then
                            If fld.Get(PdfName.F).IsNumber Then
                            End If
                        End If
                        If PDFField_Locked.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                            End If
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                            End If
                        End If
                        Select Case PDFField_Visibility.SelectedIndex
                            Case 0
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 1
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN + iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 2
                            Case 3
                                fldFlags += PdfAnnotation.FLAGS_PRINT + PdfAnnotation.FLAGS_NOVIEW
                        End Select
                        If fldFlags > 0 Then
                            fld.Flags = fldFlags
                        End If
                        If Not String.IsNullOrEmpty(Me.PDFField_Tooltip.Text & "") Then fld.Put(PdfName.TU, New PdfString(Me.PDFField_Tooltip.Text & ""))
                        Dim act As New List(Of PdfAction)
                        Dim actCntr As Integer = -1
                        For Each ma As String In arrayMouseActions.ToArray
                            actCntr += 1
                            act.Add(Nothing)
                            Try
                                If Not PDFField_Actions_TreeView.Nodes(ma) Is Nothing Then
                                    For Each a As TreeNode In PDFField_Actions_TreeView.Nodes(ma).Nodes
                                        If a.Text.ToLower = "SubmitForm".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim Flags As Integer = 0
                                            If Not a.Nodes("FLAGS") Is Nothing Then
                                                Flags = CInt(a.Nodes("FLAGS").Nodes(0).Text.ToString.Replace("TreeNode: ", ""))
                                            End If
                                            Dim pdfArrayFieldNames As PdfArray = Nothing
                                            If Not a.Nodes("FIELDS") Is Nothing Then
                                                pdfArrayFieldNames = New PdfArray
                                                For Each fldNameTreeNode As TreeNode In a.Nodes("FIELDS").Nodes
                                                    If Not String.IsNullOrEmpty(fldNameTreeNode.Text) Then
                                                        pdfArrayFieldNames.Add(New PdfString(fldNameTreeNode.Text))
                                                    End If
                                                Next
                                            End If
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act(actCntr).Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                            Else
                                                Dim act2 As PdfAction = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act2.Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                                act(actCntr).Next(act2)
                                            End If
                                        ElseIf a.Text.ToLower = "Javascript".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer)
                                            Else
                                                act(actCntr).Next(iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer))
                                            End If
                                        ElseIf a.Text.ToLower = "Named".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim action As New PdfAction()
                                            action.Put(PdfName.S, PdfName.NAMED)
                                            action.Put(PdfName.N, New PdfName(s.Text.ToString))
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = action
                                            Else
                                                act(actCntr).Next(action)
                                            End If
                                        End If
                                    Next
                                    If frmFields.ToArray.Count <= 1 Then
                                        If Not act(actCntr) Is Nothing Then
                                            Dim actItem As PdfAction = act(actCntr)
                                            If actItem.Keys.Count > 0 Then
                                                Select Case ma.ToString.ToLower
                                                    Case "mouse up"
                                                        fld.Action = act(actCntr)
                                                    Case "mouse down"
                                                        fld.SetAdditionalActions(PdfName.D, act(actCntr))
                                                    Case "mouse enter"
                                                        fld.SetAdditionalActions(PdfName.E, act(actCntr))
                                                    Case "mouse exit"
                                                        fld.SetAdditionalActions(PdfName.X, act(actCntr))
                                                    Case "on blur"
                                                        fld.SetAdditionalActions(PdfName.BL, act(actCntr))
                                                    Case "on focus"
                                                        fld.SetAdditionalActions(PdfName.FO, act(actCntr))
                                                End Select
                                            End If
                                        End If
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Next
                        Dim aa As PdfDictionary = Nothing
                        Try
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Format_Script.Text & "") Then
                                aa = New PdfDictionary
                                aa.Put(PdfAnnotation.AA_JS_FORMAT, PdfAction.JavaScript(PDFField_Format_Custom_Format_Script.Text & "", stmp.Writer))
                                fld.SetAdditionalActions(PdfAnnotation.AA_JS_FORMAT, iTextSharp.text.pdf.PdfAction.JavaScript(CStr(Me.PDFField_Format_Custom_Format_Script.Text & "").Trim() & "", stmp.Writer))
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.F) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.F)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Keystroke_Script.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                aa.Put(PdfAnnotation.AA_JS_KEY, PdfAction.JavaScript(PDFField_Format_Custom_Keystroke_Script.Text & "", stmp.Writer))
                                fld.SetAdditionalActions(PdfAnnotation.AA_JS_KEY, iTextSharp.text.pdf.PdfAction.JavaScript(CStr(Me.PDFField_Format_Custom_Keystroke_Script.Text & "").Trim() & "", stmp.Writer))
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.K) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.K)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                aa.Put(PdfAnnotation.AA_JS_CHANGE, PdfAction.JavaScript(PDFField_Validation_Range_Custom.Text & "", stmp.Writer))
                                fld.SetAdditionalActions(PdfAnnotation.AA_JS_CHANGE, PdfAction.JavaScript(PDFField_Validation_Range_Custom.Text & "", stmp.Writer))
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.V) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.V)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                aa.Put(PdfAnnotation.AA_JS_OTHER_CHANGE, PdfAction.JavaScript(PDFField_Calculations_CustomCalcScript_Text.Text & "", stmp.Writer))
                                fld.SetAdditionalActions(PdfAnnotation.AA_JS_OTHER_CHANGE, PdfAction.JavaScript(PDFField_Calculations_CustomCalcScript_Text.Text & "", stmp.Writer))
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(New PdfName("C")) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), New PdfName("C"))
                                    End If
                                End If
                            End If
                            If frmFields.Count > 0 Then
                                If Not aa Is Nothing Then
                                    fld.Put(PdfName.AA, aa)
                                Else
                                    If Not fld.Get(PdfName.AA) Is Nothing Then
                                        fld.Remove(PdfName.AA)
                                    End If
                                End If
                            End If
                        Catch exFormat As Exception
                            TimeStampAdd(exFormat, debugMode)
                        End Try
                        Try
                            If fldKidIndex < 0 Then
                                frmFields(frmFields.Count - 1) = (frmField)
                            Else
                                frmFields(fldKidIndex) = (frmField)
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            If frmFields.Count > 1 Then
                                Try
                                    Dim itmFld As iTextSharp.text.pdf.AcroFields.Item = pdfReaderDoc.AcroFields.GetFieldItem(fldname)
                                    If frmFields.Count > 1 Then
                                        Dim indexKid As Integer = 0
                                        Dim dictKid As New PdfDictionary
                                        Dim arrKids As New PdfArray
                                        Dim formTmp As AcroFields = pdfReaderDoc.AcroFields
                                        Dim flditem As AcroFields.Item = formTmp.GetFieldItem(fldname)
                                        Dim fldPages As New List(Of Integer)
                                        Dim fldActions As New List(Of PdfDictionary)
                                        Dim fldAA As New List(Of PdfDictionary)
                                        Dim fldRect As New List(Of PdfRectangle)
                                        For Each fldKids As iTextSharp.text.pdf.TextField In frmFields.ToArray()
                                            If (indexKid = fldKidIndex) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                                fldPages.Add(Me.page)
                                                fldActions.Add(DirectCast(iTextGetPDFObject(fld.GetAsDict(PdfName.A), PdfName.A), PdfDictionary))
                                                fldAA.Add(DirectCast(iTextGetPDFObject(fld.GetAsDict(PdfName.AA), PdfName.AA), PdfDictionary))
                                                fldRect.Add(New PdfRectangle(newRect))
                                                indexKid += 1
                                            Else
                                                fldPages.Add(pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexKid))
                                                fldActions.Add(DirectCast(iTextGetPDFObject(flditem.GetMerged(indexKid), PdfName.A), PdfDictionary))
                                                fldAA.Add(DirectCast(iTextGetPDFObject(flditem.GetMerged(indexKid), PdfName.AA), PdfDictionary))
                                                fldRect.Add(New PdfRectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Top)))
                                                indexKid += 1
                                            End If
                                        Next
                                        indexKid = 0
                                        For Each fldKids As iTextSharp.text.pdf.TextField In frmFields.ToArray()
                                            If (fldKidIndex = indexKid) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                                Dim frmFieldTemp As iTextSharp.text.pdf.TextField = frmField
                                                frmFieldTemp.Box = New iTextSharp.text.Rectangle(fldRect(indexKid).Left, fldRect(indexKid).Bottom, fldRect(indexKid).Right, fldRect(indexKid).Top)
                                                Dim k As PdfFormField = frmFieldTemp.GetTextField
                                                k.PlaceInPage = pageNumber
                                                k.Color = frmField.TextColor
                                                k.MKBorderColor = frmField.BorderColor
                                                k.BorderStyle = New PdfBorderDictionary(frmField.BorderWidth, frmField.BorderStyle, New PdfDashPattern(CSng(IIf(frmField.BorderStyle = 1, 3, 0))))
                                                k.MKBackgroundColor = frmField.BackgroundColor
                                                k.MKRotation = frmField.Rotation + 0
                                                k.MKTextPosition = frmField.Alignment + 0
                                                k.Remove(PdfName.T)
                                                Try
                                                    For actCntr = 0 To act.Count - 1
                                                        Dim actItem As PdfAction = act(actCntr)
                                                        If Not actItem Is Nothing Then
                                                            If actItem.Keys.Count > 0 Then
                                                                Select Case actCntr
                                                                    Case 0
                                                                        k.Action = act(actCntr)
                                                                    Case 1
                                                                        k.SetAdditionalActions(PdfName.D, actItem)
                                                                    Case 2
                                                                        k.SetAdditionalActions(PdfName.E, actItem)
                                                                    Case 3
                                                                        k.SetAdditionalActions(PdfName.X, actItem)
                                                                    Case 4
                                                                        k.SetAdditionalActions(PdfName.BL, actItem)
                                                                    Case 5
                                                                        k.SetAdditionalActions(PdfName.FO, actItem)
                                                                End Select
                                                            End If
                                                        End If
                                                    Next
                                                Catch ex As Exception
                                                    TimeStampAdd(ex, debugMode)
                                                End Try
                                                Try
                                                    If Not aa Is Nothing Then
                                                        k.Put(PdfName.AA, aa)
                                                    Else
                                                        If Not k.Get(PdfName.AA) Is Nothing Then
                                                            k.Remove(PdfName.AA)
                                                        End If
                                                    End If
                                                Catch ex As Exception
                                                    TimeStampAdd(ex, debugMode)
                                                End Try
                                                fld.AddKid(k)
                                                stmp.AddAnnotation(k, pageNumber)
                                            Else
                                                Dim frmFieldTemp As iTextSharp.text.pdf.TextField = frmField
                                                frmFieldTemp.Box = New iTextSharp.text.Rectangle(fldRect(indexKid).Left, fldRect(indexKid).Bottom, fldRect(indexKid).Right, fldRect(indexKid).Top)
                                                Dim k As PdfFormField = frmFieldTemp.GetTextField
                                                Dim actions1 As New PdfAction
                                                If Not fldActions(indexKid) Is Nothing Then
                                                    k.Put(PdfName.A, fldActions(indexKid))
                                                End If
                                                If Not fldAA(indexKid) Is Nothing Then
                                                    k.Put(PdfName.AA, fldAA(indexKid))
                                                End If
                                                k.PlaceInPage = fldPages(indexKid)
                                                k.Color = frmField.TextColor
                                                k.MKBorderColor = frmField.BorderColor
                                                k.BorderStyle = New PdfBorderDictionary(frmField.BorderWidth, frmField.BorderStyle, New PdfDashPattern(CSng(IIf(frmField.BorderStyle = 1, 3, 0))))
                                                k.MKBackgroundColor = frmField.BackgroundColor
                                                k.MKRotation = frmField.Rotation + 0
                                                k.MKTextPosition = frmField.Alignment + 0
                                                k.Remove(PdfName.T)
                                                fld.AddKid(k)
                                                stmp.AddAnnotation(k, fldPages(indexKid))
                                            End If
                                            indexKid += 1
                                        Next
                                        If Not aa Is Nothing Then
                                            fld.Put(PdfName.AA, aa)
                                        Else
                                            If Not fld.Get(PdfName.AA) Is Nothing Then
                                                fld.Remove(PdfName.AA)
                                            End If
                                        End If
                                        Try
                                            If Not fld.Get(PdfName.AP) Is Nothing Then
                                                fld.Remove(PdfName.AP)
                                            End If
                                            If Not fld.Get(PdfName.RECT) Is Nothing Then
                                                fld.Remove(PdfName.RECT)
                                            End If
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                    Else
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Else
                            End If
                            If frmFields.Count > 1 Then
                            End If
                        Else
                        End If
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            Try
                                If Not String.IsNullOrEmpty(fldname & "") Then
                                    form.RemoveField(fldname)
                                    stmp.AcroFields.RemoveField(fldname)
                                End If
                            Catch exRemoveField As Exception
                                TimeStampAdd(exRemoveField, debugMode)
                            End Try
                            Dim o As Integer = fld.GetAsNumber(PdfName.FF).IntValue
                            fld.SetFieldFlags(intFF)
                            fld.Flags = fldFlags
                            fld.Name = newFldName
                            stmp.AddAnnotation(fld, pageNumber)
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                AddCalculationOrder(fld, stmp)
                            End If
                            form = stmp.AcroFields
                        Else
                            stmp.AddAnnotation(fld, pageNumber)
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                AddCalculationOrder(fld, stmp)
                            End If
                            form = stmp.AcroFields
                        End If
                End Select
            Else
            End If
            stmp.Writer.CloseStream = False
            stmp.Close()
            If memStream.CanSeek Then
                memStream.Position = 0
            End If
            b = memStream.ToArray
            memStream.Close()
            memStream.Dispose()
            cUserRect.pauseDraw = True
            cUserRect.pauseDraw = False
            If PDFField_Format_Category.SelectedIndex > 0 Then
                If b.Length > 0 Then
                    Return A0_Set_PDFField_Value(b.ToArray(), fldname, PDFField_Value.Text, A0_GetFormattedTextBox(PDFField_Value.Text), True)
                End If
            End If
            Return b
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        cUserRect.pauseDraw = True
        cUserRect.pauseDraw = False
        Return b
    End Function
    Public Function A0_Set_PDFField_Value(ByVal b() As Byte, ByVal fldname As String, ByVal fldValue As String, Optional ByVal display As String = "", Optional ByVal saveAppearance As Boolean = Nothing) As Byte()
        Dim m As New MemoryStream
        Try
            Using p As PdfReader = New PdfReader(New MemoryStream(b), getBytes(pdfOwnerPassword & ""))
                Dim stmp As PdfStamper = New PdfStamper(p, m)
                If saveAppearance = Nothing Then
                    If display = "" Then
                        stmp.AcroFields.SetField(fldname, fldValue)
                    Else
                        stmp.AcroFields.SetField(fldname, fldValue, display)
                    End If
                Else
                    If display = "" Then
                        stmp.AcroFields.SetField(fldname, fldValue, saveAppearance)
                    Else
                        stmp.AcroFields.SetField(fldname, fldValue, display, saveAppearance)
                    End If
                End If
                stmp.Writer.CloseStream = False
                stmp.Close()
                Dim enc As Boolean = p.IsEncrypted
                p.Close()
                If pnlPDFEncryption_EncryptionCmbStrength.SelectedIndex > 0 Then
                    Return EncryptPDFDocument(m.ToArray)
                Else
                    Return m.ToArray
                End If
            End Using
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not m Is Nothing Then
                m.Close()
                m.Dispose()
            End If
        End Try
        Return Session
    End Function
    Public Function A0_Set_PDFField_Value(ByRef r As PdfReader, ByVal fldname As String, ByVal fldValue As String, Optional ByVal display As String = "", Optional ByVal saveAppearance As Boolean = Nothing) As Byte()
        Dim m As New MemoryStream
        Try
            Using p As PdfReader = r
                Dim stmp As PdfStamper = New PdfStamper(p, m)
                If saveAppearance = Nothing Then
                    If display = "" Then
                        stmp.AcroFields.SetField(fldname, fldValue)
                    Else
                        stmp.AcroFields.SetField(fldname, fldValue, display)
                    End If
                Else
                    If display = "" Then
                        stmp.AcroFields.SetField(fldname, fldValue, saveAppearance)
                    Else
                        stmp.AcroFields.SetField(fldname, fldValue, display, saveAppearance)
                    End If
                End If
                stmp.Writer.CloseStream = False
                stmp.Close()
                Dim enc As Boolean = p.IsEncrypted
                p.Close()
                If pnlPDFEncryption_EncryptionCmbStrength.SelectedIndex > 0 Then
                    Return EncryptPDFDocument(m.ToArray)
                Else
                    Return m.ToArray
                End If
            End Using
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not m Is Nothing Then
                m.Close()
                m.Dispose()
            End If
        End Try
        Return Session
    End Function
    Public Sub AddCalculationOrder(ByRef fld As PdfFormField)
        Try
            Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
            If Not (acroForm Is Nothing) Then
                Dim fields As PdfArray = acroForm.GetAsArray(PdfName.CO)
                Dim blnFound As Boolean = False
                For field As Integer = fields.Size - 1 To 0 Step -1
                    If fields.ArrayList(field) Is Nothing Or fields.ArrayList(field).GetType Is GetType(PdfNull) Then
                        fields.Remove(field)
                    ElseIf Not fields.GetAsDict(field) Is Nothing Then
                        If Not fields.GetAsDict(field).GetAsString(PdfName.T) Is Nothing Then
                            If fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString = fld.GetAsString(PdfName.T).ToUnicodeString() Then
                                If Not fields(field).IsIndirect Then
                                    If fld.IndRef Is Nothing Then
                                        fld.IndRef = pdfReaderDoc.AddPdfObject(fld)
                                    End If
                                    fields(field) = fld.IndRef()
                                Else
                                    If fld.IndRef Is Nothing Then
                                        fld.IndRef = pdfReaderDoc.AddPdfObject(fld)
                                    End If
                                    fields(field) = fld.IndRef()
                                End If
                                blnFound = True
                            End If
                        End If
                    End If
                Next
                If Not blnFound Then
                    If fld.IndRef Is Nothing Then
                        fld.IndRef = pdfReaderDoc.AddPdfObject(fld)
                    End If
                    fields.Add(fld.IndRef())
                End If
                acroForm.Put(PdfName.CO, fields)
            End If
            Return
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Public Sub AddCalculationOrder(ByRef fld As PdfFormField, ByRef r As PdfReader)
        Try
            Dim acroForm As PdfDictionary = DirectCast(r.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
            If Not (acroForm Is Nothing) Then
                Dim fields As PdfArray = acroForm.GetAsArray(PdfName.CO)
                Dim blnFound As Boolean = False
                For field As Integer = fields.Size - 1 To 0 Step -1
                    If fields.ArrayList(field) Is Nothing Or fields.ArrayList(field).GetType Is GetType(PdfNull) Then
                        fields.Remove(field)
                    ElseIf Not fields.GetAsDict(field) Is Nothing Then
                        If Not fields.GetAsDict(field).GetAsString(PdfName.T) Is Nothing Then
                            If fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString = fld.GetAsString(PdfName.T).ToUnicodeString() Then
                                If Not fields(field).IsIndirect Then
                                    If fld.IndRef Is Nothing Then
                                        fld.IndRef = pdfReaderDoc.AddPdfObject(fld)
                                    End If
                                    fields(field) = fld.IndRef()
                                Else
                                    If fld.IndRef Is Nothing Then
                                        fld.IndRef = pdfReaderDoc.AddPdfObject(fld)
                                    End If
                                    fields(field) = fld.IndRef()
                                End If
                                blnFound = True
                            End If
                        End If
                    End If
                Next
                If Not blnFound Then
                    If fld.IndRef Is Nothing Then
                        fld.IndRef = pdfReaderDoc.AddPdfObject(fld)
                    End If
                    fields.Add(fld.IndRef())
                End If
                acroForm.Put(PdfName.CO, fields)
            End If
            Return
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Public Sub AddCalculationOrder(ByRef fldName As String, ByRef r As PdfReader)
        Try
            Dim acroForm As PdfDictionary = DirectCast(r.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
            If Not (acroForm Is Nothing) Then
                Dim flds As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                Dim fld As PdfDictionary = Nothing
                If flds.Size > 0 Then
                    For Each fldRef As PdfIndirectReference In flds.ArrayList.ToArray()
                        fld = DirectCast(r.GetPdfObject(fldRef.Number), PdfDictionary)
                        If Not fld.GetAsString(PdfName.T) Is Nothing Then
                            If fld.GetAsString(PdfName.T).ToUnicodeString() = fldName Then
                                Exit For
                            Else
                                fld = Nothing
                            End If
                        Else
                            fld = Nothing
                        End If
                    Next
                End If
                If fld Is Nothing Then
                    Return
                End If
                Dim fields As PdfArray = acroForm.GetAsArray(PdfName.CO)
                Dim blnFound As Boolean = False
                If Not fields Is Nothing Then
                    For field As Integer = fields.Size - 1 To 0 Step -1
                        If fields.ArrayList(field) Is Nothing Or fields.ArrayList(field).GetType Is GetType(PdfNull) Then
                            fields.Remove(field)
                        ElseIf Not fields.GetAsDict(field) Is Nothing Then
                            If Not fields.GetAsDict(field).GetAsString(PdfName.T) Is Nothing Then
                                If fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString = fld.GetAsString(PdfName.T).ToUnicodeString() Then
                                    If Not fields(field).IsIndirect Then
                                        If fld.IndRef Is Nothing Then
                                            fld.IndRef = r.AddPdfObject(fld)
                                        End If
                                        fields(field) = fld.IndRef()
                                    Else
                                        If fld.IndRef Is Nothing Then
                                            fld.IndRef = r.AddPdfObject(fld)
                                        End If
                                        fields(field) = fld.IndRef()
                                    End If
                                    blnFound = True
                                End If
                            End If
                        End If
                    Next
                Else
                    fields = New PdfArray
                End If
                If Not blnFound Then
                    If fld.IndRef Is Nothing Then
                        fld.IndRef = r.AddPdfObject(fld)
                    End If
                    fields.Add(fld.IndRef())
                End If
                acroForm.Put(PdfName.CO, fields)
            End If
            Return
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Public Sub AddCalculationOrder(ByRef fld As PdfFormField, ByRef stmp As PdfStamper)
        Try
            Dim blnFound As Boolean = False
            Dim acroForm As PdfDictionary = stmp.Reader.Catalog.GetAsDict(PdfName.ACROFORM)
            If Not (acroForm Is Nothing) Then
                Dim fields As PdfArray = acroForm.GetAsArray(PdfName.CO)
                If fields Is Nothing Then
                    fields = New PdfArray()
                    If fld.IsIndirect Then
                        If fld.IndRef Is Nothing Then
                            fld.IndRef = stmp.Reader.AddPdfObject(fld)
                        End If
                        fields.Add(fld.IndRef())
                    End If
                    acroForm.Put(PdfName.CO, fields)
                Else
                    For field As Integer = fields.Size - 1 To 0 Step -1
                        If fields.ArrayList(field) Is Nothing Or fields.ArrayList(field).GetType Is GetType(PdfNull) Then
                            fields.Remove(field)
                        ElseIf Not fields.GetAsDict(field) Is Nothing Then
                            If Not fields.GetAsDict(field).GetAsString(PdfName.T) Is Nothing Then
                                If fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString = fld.GetAsString(PdfName.T).ToUnicodeString() Then
                                    If Not fields(field).IsIndirect Then
                                        If fld.IndRef Is Nothing Then
                                            fld.IndRef = stmp.Reader.AddPdfObject(fld)
                                        End If
                                        fields(field) = fld.IndRef()
                                    Else
                                        If fld.IndRef Is Nothing Then
                                            fld.IndRef = stmp.Reader.AddPdfObject(fld)
                                        End If
                                        fields(field) = fld.IndRef()
                                    End If
                                    blnFound = True
                                End If
                            End If
                        End If
                    Next
                    If blnFound Then
                        acroForm.Put(PdfName.CO, fields)
                        Return
                    End If
                End If
                If fld.IndRef Is Nothing Then
                    fld.IndRef = stmp.Reader.AddPdfObject(fld)
                End If
                fields.Add(fld.IndRef())
                acroForm.Put(PdfName.CO, fields)
            End If
            Return
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Public Property CalculationOrder() As PdfArray
        Get
            Try
                LoadPDFReaderDoc(pdfOwnerPassword, True)
                Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
                If Not (acroForm Is Nothing) Then
                    If Not acroForm.Get(PdfName.CO) Is Nothing Then
                        Dim fields As PdfArray = acroForm.GetAsArray(PdfName.CO)
                        Return fields
                    End If
                End If
                Return New PdfArray()
            Catch ex As Exception
                Throw ex
            End Try
            Return New PdfArray()
        End Get
        Set(ByVal value As PdfArray)
            Try
                If pdfReaderDoc Is Nothing Then Return
                Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
                If Not (acroForm Is Nothing) Then
                    acroForm.Put(PdfName.CO, value)
                    Session() = getPDFBytes(pdfReaderDoc)
                    A0_LoadPDF(True, False, True, CInt(page), True)
                    Return
                End If
            Catch ex As Exception
                Throw ex
            End Try
        End Set
    End Property
    Public Property CalculationOrder(ByVal r As PdfReader) As PdfArray
        Get
            Try
                Dim acroForm As PdfDictionary = DirectCast(r.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
                If Not (acroForm Is Nothing) Then
                    If Not acroForm.Get(PdfName.CO) Is Nothing Then
                        Dim fields As PdfArray = acroForm.GetAsArray(PdfName.CO)
                        Return fields
                    End If
                End If
                Return New PdfArray()
            Catch ex As Exception
                Throw ex
            End Try
            Return New PdfArray()
        End Get
        Set(ByVal value As PdfArray)
            Try
                If r Is Nothing Then Return
                Dim acroForm As PdfDictionary = DirectCast(r.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
                If Not (acroForm Is Nothing) Then
                    acroForm.Put(PdfName.CO, value)
                    Return
                End If
            Catch ex As Exception
                Throw ex
            End Try
        End Set
    End Property
    Public Property CalculationOrder_FieldName_Rectangle(Optional ByVal sorted As Boolean = False) As List(Of FieldName_Rectangle)
        Get
            Try
                LoadPDFReaderDoc(pdfOwnerPassword, True)
                Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
                If Not (acroForm Is Nothing) Then
                    If Not acroForm.Get(PdfName.CO) Is Nothing Then
                        Dim fields As PdfArray = acroForm.GetAsArray(PdfName.CO)
                        Dim lst As New List(Of FieldName_Rectangle)
                        Dim fldRectsortorder As Integer = -1
                        For fldDicIdx As Integer = 0 To fields.Size - 1
                            Dim fld As PdfDictionary = fields.GetAsDict(fldDicIdx)
                            If Not fld.Get(PdfName.T) Is Nothing Then
                                Dim fldRect As New FieldName_Rectangle
                                fldRect.pdfdictionary_field = fields(fldDicIdx)
                                fldRect.field_name = fld.GetAsString(PdfName.T).ToUnicodeString() & ""
                                If Not fld.Get(PdfName.KIDS) Is Nothing Then
                                    Dim fldDicKids As PdfArray = fld.GetAsArray(PdfName.KIDS)
                                    fldRect.kids_fldDicList = New List(Of FieldName_Rectangle)
                                    fldRect.kids_pdfarray = New PdfArray
                                    Dim fldRectsortorder_Kids As Integer = 0
                                    For fldDicKidIdx As Integer = 0 To fldDicKids.Size - 1
                                        Dim fldRectKid As New FieldName_Rectangle
                                        fldRectKid.field_name = fldRect.field_name & ""
                                        Dim fldDicKid As PdfDictionary = fldDicKids.GetAsDict(fldDicKidIdx)
                                        fldRect.kids_pdfarray.Add(fldDicKids(fldDicKidIdx))
                                        fldRectKid.pdfdictionary_field = fldDicKids(fldDicKidIdx)
                                        If Not fldDicKid.Get(PdfName.RECT) Is Nothing Then
                                            Dim fldRectArr As PdfArray = fldDicKid.GetAsArray(PdfName.RECT)
                                            Dim itextRect As iTextSharp.text.Rectangle = New iTextSharp.text.Rectangle(fldRectArr.GetAsNumber(0).FloatValue, fldRectArr.GetAsNumber(1).FloatValue, fldRectArr.GetAsNumber(2).FloatValue, fldRectArr.GetAsNumber(3).FloatValue)
                                            fldRectKid.rect = New System.Drawing.RectangleF(itextRect.Left, itextRect.Top, itextRect.Width, itextRect.Height)
                                        End If
                                        fldRectsortorder_Kids = fldDicKidIdx
                                        fldRectKid.sort_order = fldRectsortorder_Kids
                                        Try
                                            If Not pdfReaderDoc.AcroFields.GetFieldPositions(fldRect.field_name & "") Is Nothing Then
                                                fldRectKid.page_number = pdfReaderDoc.AcroFields.GetFieldPositions(fldRect.field_name & "")(fldDicKidIdx).page + 0
                                            Else
                                                fldRectKid.page_number = -1
                                            End If
                                        Catch ex As Exception
                                            fldRectKid.page_number = -1
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                        fldRect.kids_fldDicList.Add(fldRectKid)
                                    Next
                                    fldRectsortorder += 1
                                    fldRect.sort_order = fldRectsortorder
                                    fldRect.page_number = -1
                                    lst.Add(fldRect)
                                ElseIf Not fld.Get(PdfName.RECT) Is Nothing Then
                                    Dim fldRectArr As PdfArray = fld.GetAsArray(PdfName.RECT)
                                    Dim itextRect As iTextSharp.text.Rectangle = New iTextSharp.text.Rectangle(fldRectArr.GetAsNumber(0).FloatValue, fldRectArr.GetAsNumber(1).FloatValue, fldRectArr.GetAsNumber(2).FloatValue, fldRectArr.GetAsNumber(3).FloatValue)
                                    fldRect.rect = New System.Drawing.RectangleF(itextRect.Left, itextRect.Top, itextRect.Width, itextRect.Height)
                                    fldRectsortorder += 1
                                    fldRect.sort_order = fldRectsortorder
                                    Try
                                        If Not pdfReaderDoc.AcroFields.GetFieldPositions(fldRect.field_name & "") Is Nothing Then
                                            fldRect.page_number = pdfReaderDoc.AcroFields.GetFieldPositions(fldRect.field_name & "")(0).page + 0
                                        Else
                                            fldRect.page_number = -1
                                        End If
                                    Catch ex As Exception
                                        fldRect.page_number = -1
                                        TimeStampAdd(ex, debugMode)
                                    End Try
                                    lst.Add(fldRect)
                                End If
                            End If
                        Next
                        If sorted Then
                            lst.Sort(AddressOf SortField)
                        End If
                        Return lst
                    End If
                End If
                Return New List(Of FieldName_Rectangle)
            Catch ex As Exception
                Throw ex
            End Try
            Return New List(Of FieldName_Rectangle)
        End Get
        Set(ByVal value As List(Of FieldName_Rectangle))
            Try
                If pdfReaderDoc Is Nothing Then Return
                Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
                If Not (acroForm Is Nothing) Then
                    Dim fldsPdfArray As New PdfArray
                    For Each v As FieldName_Rectangle In value.ToArray()
                        fldsPdfArray.Add(v.pdfdictionary_field)
                    Next
                    acroForm.Put(PdfName.CO, fldsPdfArray)
                    Session() = getPDFBytes(pdfReaderDoc)
                    A0_LoadPDF(True, False, True, CInt(page), True)
                    Return
                End If
            Catch ex As Exception
                Throw ex
            End Try
        End Set
    End Property
    Public Function getPDFBytes(ByRef pdfreader1 As PdfReader, Optional encryptPDF As Boolean = True) As Byte()
        Try
            If Not pdfreader1 Is Nothing Then
                Dim m As New MemoryStream
                Dim stamp As PdfStamper = New PdfStamper(pdfreader1.Clone(), m)
                stamp.Writer.CloseStream = False
                stamp.Close()
                If encryptPDF Then
                    If pdfreader1.IsEncrypted Then
                        Return EncryptPDFDocument(m.ToArray())
                    Else
                        Return m.ToArray()
                    End If
                Else
                    Return m.ToArray()
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Session
    End Function
    Public Function CalculationOrderNames() As String()
        Try
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
            Dim fldNames As New List(Of String)
            If Not (acroForm Is Nothing) Then
                If Not acroForm.Get(PdfName.CO) Is Nothing Then
                    Dim fields As PdfArray = acroForm.GetAsArray(PdfName.CO)
                    For pdfObjectX As Integer = 0 To fields.Size - 1
                        Dim fld As PdfDictionary = fields.GetAsDict(pdfObjectX)
                        If Not fld.GetAsString(PdfName.T) Is Nothing Then
                            fldNames.Add(fld.GetAsString(PdfName.T).ToUnicodeString())
                        End If
                    Next
                End If
            End If
            Return fldNames.ToArray()
        Catch ex As Exception
            Throw ex
        End Try
        Return New String() {}
    End Function
    Public Function A0_PDFFormField_Modify_CheckBox(ByVal b() As Byte, ByVal fldname As String, ByVal newFldName As String, ByVal textcolor As iTextSharp.text.BaseColor, ByVal bgcolor As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal newRect As iTextSharp.text.Rectangle, Optional ByVal pageNumber As Integer = -1, Optional ByVal removeKidFieldIdx As Integer = -1, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing, Optional ByVal promptMerge As Boolean = True) As Byte()
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword & ""))
            Else
                pdfReaderDocTemp = pdfReaderDoc.Clone
            End If
            If pageNumber <= 0 Then
                pageNumber = CInt(page) + 0
            End If
        Catch ex As Exception
            pdfReaderDocTemp = pdfReaderDoc
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            Dim memStream As New MemoryStream
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            Dim stmp As PdfStamper = getStamper(pdfReaderDocTemp, memStream)
            Try
                If Not stmp.AcroFields.GenerateAppearances = True Then
                    If Not stmp.AcroFields.Fields Is Nothing Then stmp.AcroFields.GenerateAppearances = True
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim form As iTextSharp.text.pdf.AcroFields = stmp.AcroFields
            If True = True Then
                Dim fltType As Integer = -1
                Select Case ComboBox1.SelectedItem.ToString.ToLower
                    Case "Textbox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                    Case "CheckBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                    Case "ComboBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                    Case "ListBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                    Case "Button".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                    Case "RadioButton".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                    Case "Signature".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                    Case Else
                        Return b
                End Select
                Dim defaultFontSize As Single = 0
                Try
                    If IsNumeric(PDFField_FontSize.Text & "") Then
                        defaultFontSize = CSng(PDFField_FontSize.Text & "") + 0.0F
                    ElseIf (PDFField_FontSize.SelectedIndex > 0) Then
                        defaultFontSize = CSng(PDFField_FontSize.Items(PDFField_FontSize.SelectedIndex).ToString()) + 0.0F
                    Else
                        defaultFontSize = 0.0F
                    End If
                Catch ex As Exception
                    defaultFontSize = 0.0F
                    TimeStampAdd(ex, debugMode)
                End Try
                Dim bf As BaseFont = Nothing
                Dim defaultFont As iTextSharp.text.Font = Nothing
                Try
                    defaultFont = FontFactory.GetFont(BaseFont.ZAPFDINGBATS, BaseFont.WINANSI, False)
                    defaultFont.Size = defaultFontSize
                Catch ex As Exception
                    Throw ex
                    TimeStampAdd(ex, debugMode)
                End Try
                Select Case fltType
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                        Dim frmField As iTextSharp.text.pdf.RadioCheckField
                        Dim frmFields As New List(Of iTextSharp.text.pdf.RadioCheckField)
                        Dim ap As PdfAppearance = Nothing
                        If Not fldname = newFldName Then
                            Try
                                If form.Fields.ContainsKey(fldname) Then
                                    If form.Fields(fldname).Size > 1 Then
                                        If promptMerge Then
                                            Dim msg As New dialogMultiChoice()
                                            Dim strMsg As String = ""
                                            strMsg &= "Rename fields from: """ & fldname & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x " & form.Fields(fldname).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            strMsg &= Environment.NewLine & "To new name: """ & newFldName & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x " & form.Fields(newFldName).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            msg.lblMessage.Text = strMsg & ""
                                            msg.ButtonsClear()
                                            msg.ButtonAdd("Rename all fields", True, 1)
                                            msg.ButtonAdd("This field only", True, 2)
                                            msg.ButtonAdd("Cancel", True, 3)
                                            Select Case msg.ShowDialog(Me, "Rename Fields", msg.ButtonsArray)
                                                Case 2
                                                    If form.Fields.ContainsKey(newFldName) Then
                                                        If form.Fields(newFldName).Size >= 1 Then
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        Else
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        End If
                                                    Else
                                                        If fldKidIndex >= 0 Then
                                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                        End If
                                                        fldNameHighlightedCopy = ""
                                                        fldname = newFldName
                                                        fldNameHighlightedCopy = ""
                                                        fldKidIndex = -1
                                                        fldname = ""
                                                    End If
                                                Case 1
                                                    For indexField As Integer = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size - 1 To 0 Step -1
                                                        If GetFormFieldType(Session("output"), fldname) = fltType Then
                                                            fldKidIndex = indexField
                                                            b = A0_PDFFormField_Modify_CheckBox(b.ToArray, fldname, newFldName, textcolor, bgcolor, bordercolor, New iTextSharp.text.Rectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Top)), pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexField), -1, pdfReaderDoc, False)
                                                            Session = b
                                                            LoadPDFReaderDoc(pdfOwnerPassword, True)
                                                        End If
                                                    Next
                                                    Return b.ToArray
                                                Case 3
                                                    Return b.ToArray
                                                Case Else
                                                    Return b.ToArray
                                            End Select
                                            GoTo CONTINUE_NORMAL
                                        End If
                                    End If
                                End If
                                If form.Fields.ContainsKey(newFldName) Then
                                    If form.Fields(newFldName).Size >= 1 Then
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    Else
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    End If
                                Else
                                    If fldKidIndex >= 0 Then
                                        pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                    End If
                                    fldNameHighlightedCopy = ""
                                    fldname = newFldName
                                    fldNameHighlightedCopy = ""
                                    fldKidIndex = -1
                                    fldname = ""
                                End If
                            Catch exRename As Exception
                                Err.Clear()
                            End Try
                        End If
CONTINUE_NORMAL:
                        If Not String.IsNullOrEmpty(fldname) Then
                            Dim kidsArr As PdfArray = DirectCast(iTextFieldItemPdfDictionary(fldname).GetDirectObject(PdfName.KIDS), PdfArray)
                            Dim radioGroup As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                            If Not radioGroup.Get(PdfName.KIDS) Is Nothing Then
                                Dim _fields As PdfArray = DirectCast(radioGroup.GetDirectObject(PdfName.KIDS), PdfArray)
                                If _fields.Size >= 1 Then
                                    Dim indexField As Integer = 0
                                    For indexField = 0 To _fields.Size - 1
                                        If Not removeKidFieldIdx = indexField Then
                                            Dim _fieldDic As PdfDictionary = Nothing
                                            If Not _fields.GetAsDict(indexField) Is Nothing Then
                                                _fieldDic = _fields.GetAsDict(indexField)
                                            ElseIf Not _fields.GetDirectObject(indexField) Is Nothing Then
                                                _fieldDic = _fields.GetAsDict(indexField)
                                            ElseIf Not _fields.GetAsIndirectObject(indexField) Is Nothing Then
                                                Dim _fieldDicRef As PRIndirectReference = DirectCast(_fields.GetAsIndirectObject(indexField), PRIndirectReference)
                                                If pdfReaderDoc.GetPdfObject(_fieldDicRef.Number).IsDictionary Then
                                                    _fieldDic = DirectCast(pdfReaderDoc.GetPdfObject(_fieldDicRef.Number), PdfDictionary)
                                                End If
                                            Else
                                                _fieldDic = DirectCast(_fields.GetDirectObject(indexField), PdfDictionary)
                                            End If
                                            If GetFormFieldType(Session("output"), fldname) = fltType Then
                                                frmField = form.GetNewRadioCheckFieldFromField(fldname, indexField, stmp.Writer)
                                            Else
                                                frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, getRadioButtonOnValue(fldname, indexField))
                                                form.DecodeGenericDictionary(iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(indexField), frmField)
                                            End If
                                            pdfReaderDoc.AcroFields.DecodeGenericDictionary(_fieldDic, frmField)
                                            If newRect Is Nothing Then
                                                newRect = frmField.Box
                                            End If
                                            frmField.TextColor = textcolor
                                            frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                                            frmField.CheckType = CInt(Me.RadioButton_FieldCheckType.SelectedIndex) + 1
                                            frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                                            frmField.FieldName = newFldName
                                            frmField.Checked = RadioButton_Checked.Checked
                                            frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                                            frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                                            frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                                            frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                                            frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                                            If Not defaultFont Is Nothing Then
                                                frmField.Font = defaultFont.BaseFont
                                            End If
                                            If defaultFontSize >= 0 Then
                                                frmField.FontSize = defaultFontSize
                                            End If
                                            Dim arrRect As PdfArray = _fieldDic.GetAsArray(PdfName.RECT)
                                            frmField.Box = New iTextSharp.text.Rectangle(arrRect.GetAsNumber(0).FloatValue, arrRect.GetAsNumber(1).FloatValue, arrRect.GetAsNumber(2).FloatValue, arrRect.GetAsNumber(3).FloatValue)
                                            frmField.OnValue = RadioButton_OnValue.Text
                                            frmFields.Add(frmField)
                                        End If
                                    Next
                                    If fldKidIndex < 0 Then
                                        frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                        frmFields.Add(frmField)
                                    Else
                                        frmField = frmFields(fldKidIndex)
                                    End If
                                Else
                                    Dim _fieldDic As PdfDictionary = Nothing
                                    If Not _fields.GetDirectObject(fldKidIndex) Is Nothing Then
                                        _fieldDic = DirectCast(_fields.GetDirectObject(fldKidIndex), PdfDictionary)
                                    ElseIf Not _fields.GetAsIndirectObject(fldKidIndex) Is Nothing Then
                                        Dim _fieldDicRef As PRIndirectReference = DirectCast(_fields.GetAsIndirectObject(fldKidIndex), PRIndirectReference)
                                        If pdfReaderDoc.GetPdfObject(_fieldDicRef.Number).IsDictionary Then
                                            _fieldDic = DirectCast(pdfReaderDoc.GetPdfObject(_fieldDicRef.Number), PdfDictionary)
                                        End If
                                    Else
                                        _fieldDic = DirectCast(_fields.GetDirectObject(fldKidIndex), PdfDictionary)
                                    End If
                                    frmField = form.GetNewRadioCheckFieldFromField(fldname, fldKidIndex, stmp.Writer)
                                    form.DecodeGenericDictionary(_fieldDic, frmField)
                                    For Each frmKey As PdfName In _fieldDic.Keys.ToArray
                                        Try
                                            frmField.CheckField.Put(frmKey, _fieldDic.Get(frmKey))
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                    Next
                                    frmField.OnValue = getRadioButtonOnValue(fldname, fldKidIndex)
                                    frmFields.Add(frmField)
                                End If
                            Else
                                If fldKidIndex < 0 Then
                                    frmField = form.GetNewRadioCheckFieldFromField(fldname, 0, stmp.Writer)
                                    Dim _fieldDic As PdfDictionary = Nothing
                                    If Not radioGroup Is Nothing Then
                                        _fieldDic = radioGroup
                                        form.DecodeGenericDictionary(radioGroup, frmField)
                                    End If
                                    frmFields.Add(frmField)
                                    frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                    frmFields.Add(frmField)
                                Else
                                    frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                    frmFields.Add(frmField)
                                End If
                            End If
                        Else
                            Dim indexField As Integer = 0
                            If fldKidIndex < 0 Then
                                frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                frmFields.Add(frmField)
                                indexField += 1
                            Else
                                frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                            End If
                        End If
                        frmField.Box = newRect
                        frmField.TextColor = textcolor
                        frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                        frmField.CheckType = CInt(Me.RadioButton_FieldCheckType.SelectedIndex) + 1
                        frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                        frmField.FieldName = newFldName
                        frmField.OnValue = CStr(IIf(String.IsNullOrEmpty(RadioButton_OnValue.Text & ""), "Yes", RadioButton_OnValue.Text & ""))
                        frmField.Checked = RadioButton_Checked.Checked
                        frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                        frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                        frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                        frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                        frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                        If Not defaultFont Is Nothing Then
                            frmField.Font = defaultFont.BaseFont
                        End If
                        If defaultFontSize >= 0 Then
                            frmField.FontSize = defaultFontSize
                        End If
                        If newRect Is Nothing Then
                        Else
                            frmField.Box = newRect
                        End If
                        Dim intFF As Integer = 0
                        Dim fldflags As Integer = 0
                        Try
                            If ComboBox_CommitImmediately.Checked = True And ComboBox_CommitImmediately.Enabled Then
                                If Not (intFF And 67108864) = 67108864 Then
                                    intFF += 67108864
                                End If
                            End If
                            If PDFField_Selection.Checked = True And PDFField_Selection.Enabled Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON
                                End If
                            End If
                            If PDFField_CombChk.Checked = True And PDFField_CombChk.Enabled Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_COMB
                                End If
                            End If
                            If PDFField_Scroll.Checked = False Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL
                                End If
                            End If
                            If ComboBox_CheckSpelling.Checked = False And ComboBox_CheckSpelling.Enabled Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK
                                End If
                            End If
                            If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                                intFF += iTextSharp.text.pdf.PdfFormField.FF_COMBO
                            End If
                            If PDFField_Required.Checked = True Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_REQUIRED
                                End If
                            End If
                            If PDFField_ReadOnly.Checked = True Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        frmField.Options = intFF
                        Dim fld As PdfFormField = frmField.CheckField
                        Try
                            frmFields(CInt(IIf(fldKidIndex < 0, frmFields.Count - 1, fldKidIndex + 0))) = frmField
                        Catch exFrmField As Exception
                            TimeStampAdd(exFrmField, debugMode)
                        End Try
                        If Not fld.Get(PdfName.F) Is Nothing Then
                            If fld.Get(PdfName.F).IsNumber Then
                            End If
                        End If
                        If PDFField_Locked.Checked = True Then
                            If Not (fldflags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                fldflags += iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                            End If
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            If Not (fldflags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                fldflags += iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                            End If
                        End If
                        Select Case PDFField_Visibility.SelectedIndex
                            Case 0
                                fldflags += iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 1
                                fldflags += iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN + iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 2
                            Case 3
                                fldflags += PdfAnnotation.FLAGS_PRINT + PdfAnnotation.FLAGS_NOVIEW
                        End Select
                        If frmFields.Count > 1 Then
                            Try
                                frmFields(frmFields.Count - 1) = frmField
                                fld = PdfFormField.CreateCheckBox(stmp.Writer)
                                fld.FieldName = newFldName & ""
                                fld.Name = newFldName & ""
                                fld.UserName = PDFField_Tooltip.Text & ""
                                fld.SetFieldFlags(intFF)
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Else
                            If PDFField_Copy.Checked Then
                                frmFields.Add(frmField)
                                fld = PdfFormField.CreateCheckBox(stmp.Writer)
                                fld.FieldName = newFldName & ""
                                fld.Name = newFldName & ""
                                fld.UserName = PDFField_Tooltip.Text & ""
                                fld.SetFieldFlags(intFF)
                            Else
                                frmFields(frmFields.Count - 1) = frmField
                            End If
                        End If
                        If fldflags > 0 Then
                            fld.Flags = fldflags
                        End If
                        If fldflags > 0 Then
                            fld.Flags = fldflags
                        End If
                        If Not String.IsNullOrEmpty(Me.PDFField_Tooltip.Text & "") Then fld.Put(PdfName.TU, New PdfString(Me.PDFField_Tooltip.Text & ""))
                        Dim act As New List(Of PdfAction)
                        Dim actCntr As Integer = -1
                        For Each ma As String In arrayMouseActions.ToArray
                            actCntr += 1
                            act.Add(Nothing)
                            Try
                                If Not PDFField_Actions_TreeView.Nodes(ma) Is Nothing Then
                                    For Each a As TreeNode In PDFField_Actions_TreeView.Nodes(ma).Nodes
                                        If a.Text.ToLower = "SubmitForm".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim Flags As Integer = 0
                                            If Not a.Nodes("FLAGS") Is Nothing Then
                                                Flags = CInt(a.Nodes("FLAGS").Nodes(0).Text.ToString.Replace("TreeNode: ", ""))
                                            End If
                                            Dim pdfArrayFieldNames As PdfArray = Nothing
                                            If Not a.Nodes("FIELDS") Is Nothing Then
                                                pdfArrayFieldNames = New PdfArray
                                                For Each fldNameTreeNode As TreeNode In a.Nodes("FIELDS").Nodes
                                                    If Not String.IsNullOrEmpty(fldNameTreeNode.Text) Then
                                                        pdfArrayFieldNames.Add(New PdfString(fldNameTreeNode.Text))
                                                    End If
                                                Next
                                            End If
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act(actCntr).Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                            Else
                                                Dim act2 As PdfAction = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act2.Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                                act(actCntr).Next(act2)
                                            End If
                                        ElseIf a.Text.ToLower = "Javascript".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer)
                                            Else
                                                act(actCntr).Next(iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer))
                                            End If
                                        ElseIf a.Text.ToLower = "Named".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim action As New PdfAction()
                                            action.Put(PdfName.S, PdfName.NAMED)
                                            action.Put(PdfName.N, New PdfName(s.Text.ToString))
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = action
                                            Else
                                                act(actCntr).Next(action)
                                            End If
                                        End If
                                    Next
                                    If frmFields.ToArray.Count <= 1 Then
                                        If Not act(actCntr) Is Nothing Then
                                            Dim actItem As PdfAction = act(actCntr)
                                            If actItem.Keys.Count > 0 Then
                                                Select Case ma.ToString.ToLower
                                                    Case "mouse up"
                                                        fld.Action = act(actCntr)
                                                    Case "mouse down"
                                                        fld.SetAdditionalActions(PdfName.D, act(actCntr))
                                                    Case "mouse enter"
                                                        fld.SetAdditionalActions(PdfName.E, act(actCntr))
                                                    Case "mouse exit"
                                                        fld.SetAdditionalActions(PdfName.X, act(actCntr))
                                                    Case "on blur"
                                                        fld.SetAdditionalActions(PdfName.BL, act(actCntr))
                                                    Case "on focus"
                                                        fld.SetAdditionalActions(PdfName.FO, act(actCntr))
                                                End Select
                                            End If
                                        End If
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Next
                        Dim aa As PdfDictionary = Nothing
                        Try
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Format_Script.Text & "") Then
                                aa = New PdfDictionary
                                Dim f As New PdfDictionary
                                f.Put(PdfName.JS, New PdfString(New PdfString(Me.PDFField_Format_Custom_Format_Script.Text & "").ToUnicodeString()))
                                f.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(f)
                                aa.Put(PdfName.F, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.F) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.F)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Keystroke_Script.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim k As New PdfDictionary
                                k.Put(PdfName.JS, New PdfString(New PdfString(Me.PDFField_Format_Custom_Keystroke_Script.Text & "").ToUnicodeString()))
                                k.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(k)
                                aa.Put(PdfName.K, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.K) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.K)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim v As New PdfDictionary
                                v.Put(PdfName.JS, New PdfString(New PdfString(PDFField_Validation_Range_Custom.Text & "").ToUnicodeString()))
                                v.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(v)
                                aa.Put(PdfName.V, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.V) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.V)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim c As New PdfDictionary
                                c.Put(PdfName.JS, New PdfString(New PdfString(PDFField_Calculations_CustomCalcScript_Text.Text & "").ToUnicodeString()))
                                c.Put(PdfName.S, PdfName.JAVASCRIPT)
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(c)
                                aa.Put(New PdfName("C"), ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(New PdfName("C")) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), New PdfName("C"))
                                    End If
                                End If
                            End If
                            If Not aa Is Nothing Then
                                fld.Put(PdfName.AA, aa)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    fld.Remove(PdfName.AA)
                                End If
                            End If
                        Catch exFormat As Exception
                            TimeStampAdd(exFormat, debugMode)
                        End Try
                        Try
                            If fldKidIndex < 0 Then
                                frmFields(frmFields.Count - 1) = (frmField)
                            Else
                                frmFields(fldKidIndex) = (frmField)
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            If frmFields.Count > 1 Then
                                Try
                                    Dim itmFld As iTextSharp.text.pdf.AcroFields.Item = pdfReaderDoc.AcroFields.GetFieldItem(fldname)
                                    Dim indexKid As Integer = 0
                                    Dim dictKid As New PdfDictionary
                                    Dim arrKids As New PdfArray
                                    Dim fldPages As New List(Of Integer)
                                    Dim fldActions As New List(Of PdfDictionary)
                                    Dim fldAA As New List(Of PdfDictionary)
                                    Dim fldRect As New List(Of iTextSharp.text.Rectangle)
                                    Dim formTmp As AcroFields = pdfReaderDoc.AcroFields
                                    Dim flditem As AcroFields.Item = formTmp.GetFieldItem(fldname)
                                    For Each fldKids As iTextSharp.text.pdf.RadioCheckField In frmFields.ToArray()
                                        If (fldKidIndex = indexKid) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                            fldPages.Add(Me.page)
                                            fldActions.Add(iTextGetPDFObject(frmField.CheckField.GetAsDict(PdfName.A), PdfName.A))
                                            fldAA.Add(iTextGetPDFObject(frmField.CheckField.GetAsDict(PdfName.AA), PdfName.AA))
                                            fldRect.Add(New iTextSharp.text.Rectangle(CSng(newRect.Left), CSng(newRect.Bottom), CSng(newRect.Right), CSng(newRect.Top)))
                                            indexKid += 1
                                        Else
                                            fldPages.Add(pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexKid))
                                            fldActions.Add(iTextGetPDFObject(fldKids.CheckField, PdfName.A))
                                            fldAA.Add(iTextGetPDFObject(fldKids.CheckField, PdfName.AA))
                                            fldRect.Add(New iTextSharp.text.Rectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Top)))
                                            indexKid += 1
                                        End If
                                    Next
                                    indexKid = 0
                                    For Each fldKids As iTextSharp.text.pdf.RadioCheckField In frmFields.ToArray()
                                        Dim frmFieldTemp As iTextSharp.text.pdf.RadioCheckField = frmField
                                        If (fldKidIndex = indexKid) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                            frmFieldTemp = DirectCast(frmFields(frmFields.Count - 1), RadioCheckField)
                                            frmFieldTemp.Box = New iTextSharp.text.Rectangle(newRect.Left, newRect.Bottom, newRect.Right, newRect.Top)
                                            frmFieldTemp.OnValue = RadioButton_OnValue.Text & ""
                                            frmFieldTemp.Checked = RadioButton_Checked.Checked
                                            Dim k As PdfFormField = frmFieldTemp.CheckField
                                            k.PlaceInPage = pageNumber
                                            k.Page = pageNumber
                                            k.Remove(PdfName.T)
                                            Try
                                                For actCntr = 0 To act.Count - 1
                                                    Dim actItem As PdfAction = act(actCntr)
                                                    If Not actItem Is Nothing Then
                                                        If actItem.Keys.Count > 0 Then
                                                            Select Case actCntr
                                                                Case 0
                                                                    k.Action = act(actCntr)
                                                                Case 1
                                                                    k.SetAdditionalActions(PdfName.D, actItem)
                                                                Case 2
                                                                    k.SetAdditionalActions(PdfName.E, actItem)
                                                                Case 3
                                                                    k.SetAdditionalActions(PdfName.X, actItem)
                                                                Case 4
                                                                    k.SetAdditionalActions(PdfName.BL, actItem)
                                                                Case 5
                                                                    k.SetAdditionalActions(PdfName.FO, actItem)
                                                            End Select
                                                        End If
                                                    End If
                                                Next
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                            Try
                                                If Not aa Is Nothing Then
                                                    Dim aaTemp As New PdfDictionary
                                                    For Each ktmp As PdfName In aa.Keys.ToArray
                                                        Select Case ktmp.ToString
                                                            Case PdfName.C.ToString
                                                            Case PdfName.V.ToString
                                                            Case Else
                                                                aaTemp.PutEx(ktmp, aa.Get(ktmp))
                                                        End Select
                                                    Next
                                                    For Each ktmp As PdfName In aa.Keys.ToArray
                                                        Dim sTmp1 As String = ktmp.ToString
                                                        sTmp1 = sTmp1
                                                    Next
                                                    k.Put(PdfName.AA, aaTemp)
                                                Else
                                                    If Not k.Get(PdfName.AA) Is Nothing Then
                                                        RemoveObject(k, PdfName.AA)
                                                    End If
                                                End If
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                            fld.AddKid(k)
                                            stmp.AddAnnotation(k, pageNumber)
                                        Else
                                            frmFieldTemp = DirectCast(frmFields(frmFields.Count - 1), RadioCheckField)
                                            frmFieldTemp.Box = New iTextSharp.text.Rectangle(fldRect(indexKid).Left, fldRect(indexKid).Bottom, fldRect(indexKid).Right, fldRect(indexKid).Top)
                                            frmFieldTemp.OnValue = RadioButton_OnValue.Text & ""
                                            frmFieldTemp.Checked = RadioButton_Checked.Checked
                                            Dim k As PdfFormField = frmFieldTemp.CheckField
                                            If Not fldActions(indexKid) Is Nothing Then
                                                k.Put(PdfName.A, fldActions(indexKid))
                                            End If
                                            k.PlaceInPage = fldPages(indexKid)
                                            k.Page = fldPages(indexKid)
                                            k.Remove(PdfName.T)
                                            fld.AddKid(k)
                                            stmp.AddAnnotation(k, fldPages(indexKid))
                                        End If
                                        indexKid += 1
                                    Next
                                    If Not aa Is Nothing Then
                                        fld.Put(PdfName.AA, aa)
                                    Else
                                        If Not fld.Get(PdfName.AA) Is Nothing Then
                                            fld.Remove(PdfName.AA)
                                        End If
                                    End If
                                    If Not fld.Get(PdfName.AP) Is Nothing Then
                                        fld.Remove(PdfName.AP)
                                    End If
                                    If Not fld.Get(PdfName.RECT) Is Nothing Then
                                        fld.Remove(PdfName.RECT)
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Else
                            End If
                            If frmFields.Count > 1 Then
                            End If
                        Else
                        End If
                        If Not String.IsNullOrEmpty(RadioButton_OnValue.Text & "") Then
                            If RadioButton_Checked.Checked Then
                                fld.Put(PdfName.AS, New PdfName(RadioButton_OnValue.Text & ""))
                                fld.Put(PdfName.V, New PdfName(RadioButton_OnValue.Text & ""))
                            Else
                                fld.Put(PdfName.V, New PdfName(RadioButton_OnValue.Text & ""))
                                fld.Put(PdfName.AS, New PdfName("Off"))
                            End If
                        Else
                            If RadioButton_Checked.Checked Then
                                fld.Put(PdfName.AS, New PdfName("Yes"))
                                fld.Put(PdfName.V, New PdfName("Yes"))
                            Else
                                fld.Put(PdfName.V, New PdfName("Yes"))
                                fld.Put(PdfName.AS, New PdfName("Off"))
                            End If
                        End If
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            Try
                                If Not String.IsNullOrEmpty(fldname & "") Then form.RemoveField(fldname)
                            Catch exRemoveField As Exception
                                TimeStampAdd(exRemoveField, debugMode)
                            End Try
                        End If
                        fld.FieldName = newFldName & ""
                        fld.Put(PdfName.F, New PdfNumber(fldflags))
                        fld.Put(PdfName.FF, New PdfNumber(intFF))
                        Try
                            If RadioButton_CheckedByDefault.Checked Then
                                fld.Put(PdfName.DV, New PdfName(RadioButton_OnValue.Text & ""))
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        stmp.AddAnnotation(fld, pageNumber)
                        If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                            AddCalculationOrder(fld, stmp)
                        End If
                        form = stmp.AcroFields
                End Select
            Else
            End If
            stmp.Writer.CloseStream = False
            stmp.Close()
            If memStream.CanSeek Then
                memStream.Position = 0
            End If
            b = memStream.ToArray
            memStream.Close()
            memStream.Dispose()
            cUserRect.pauseDraw = True
            cUserRect.pauseDraw = False
            Return b
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        cUserRect.pauseDraw = True
        cUserRect.pauseDraw = False
        Return b
    End Function
    Public Function findFontInForm(ByVal fontname As PdfName) As BaseFont
        LoadPDFReaderDoc(pdfOwnerPassword, True)
        Dim reader As PdfReader = pdfReaderDoc.Clone
        Dim root As PdfDictionary = reader.Catalog
        Dim acroform As PdfDictionary = root.GetAsDict(PdfName.ACROFORM)
        If (acroform Is Nothing) Then Return Nothing
        Dim dr As PdfDictionary = acroform.GetAsDict(PdfName.DR)
        If (dr Is Nothing) Then Return Nothing
        Dim font As PdfDictionary = dr.GetAsDict(PdfName.FONT)
        If (font Is Nothing) Then Return Nothing
        For Each key As PdfName In font.Keys
            If (key.Equals(fontname)) Then
                Return BaseFont.CreateFont(font.GetAsIndirectObject(key))
            End If
        Next
        Return Nothing
    End Function
    Public Function A0_PDFFormField_Modify_ComboBox_Test_Multi(ByVal b() As Byte, ByVal fldname As String, ByVal newFldName As String, ByVal textcolor As iTextSharp.text.BaseColor, ByVal bgcolor As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal newRect As iTextSharp.text.Rectangle, Optional ByVal pageNumber As Integer = -1, Optional ByVal removeKidFieldIdx As Integer = -1, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing, Optional ByVal promptMerge As Boolean = True) As Byte()
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword & ""))
            Else
                pdfReaderDocTemp = pdfReaderDoc.Clone
            End If
            If pageNumber <= 0 Then
                pageNumber = CInt(page) + 0
            End If
        Catch ex As Exception
            pdfReaderDocTemp = pdfReaderDoc
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            Dim memStream As New MemoryStream
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            Dim stmp As PdfStamper = getStamper(pdfReaderDocTemp, memStream)
            Try
                If Not stmp.AcroFields.GenerateAppearances = True Then
                    If Not stmp.AcroFields.Fields Is Nothing Then stmp.AcroFields.GenerateAppearances = True
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim form As iTextSharp.text.pdf.AcroFields = stmp.AcroFields
            If True = True Then
                Dim fltType As Integer = -1
                Select Case ComboBox1.SelectedItem.ToString.ToLower
                    Case "Textbox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                    Case "CheckBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                    Case "ComboBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                    Case "ListBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                    Case "Button".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                    Case "RadioButton".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                    Case "Signature".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                    Case Else
                        Return b
                End Select
                Dim defaultFontSize As Single = 0
                Try
                    If IsNumeric(PDFField_FontSize.Text & "") Then
                        defaultFontSize = CSng(PDFField_FontSize.Text & "") + 0.0F
                    ElseIf (PDFField_FontSize.SelectedIndex > 0) Then
                        defaultFontSize = CSng(PDFField_FontSize.Items(PDFField_FontSize.SelectedIndex).ToString()) + 0.0F
                    Else
                        defaultFontSize = 0.0F
                    End If
                Catch ex As Exception
                    defaultFontSize = 0.0F
                    TimeStampAdd(ex, debugMode)
                End Try
                Dim bf As BaseFont = Nothing
                Dim defaultFont As iTextSharp.text.Font = Nothing
                Try
                    Select Case PDFField_FontFamily.SelectedIndex
                        Case 0
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER, BaseFont.WINANSI, False)
                        Case 1
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLD, BaseFont.CP1252, True)
                        Case 2
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 3
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_OBLIQUE, BaseFont.WINANSI, False)
                        Case 4
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.WINANSI, False)
                        Case 5
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLD, BaseFont.WINANSI, False)
                        Case 6
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 7
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_OBLIQUE, BaseFont.WINANSI, False)
                        Case 8
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, BaseFont.WINANSI, False)
                        Case 9
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLD, BaseFont.WINANSI, False)
                        Case 10
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ITALIC, BaseFont.WINANSI, False)
                        Case 11
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLDITALIC, BaseFont.WINANSI, False)
                        Case 12
                            defaultFont = FontFactory.GetFont(BaseFont.SYMBOL, BaseFont.WINANSI, False)
                        Case 13
                            defaultFont = FontFactory.GetFont(BaseFont.ZAPFDINGBATS, BaseFont.WINANSI, False)
                        Case Else
                            Try
                                bf = findFontInForm(New PdfName(CStr(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString)))
                                If bf Is Nothing Then
                                    defaultFont = New iTextSharp.text.Font(FontFactory.GetFont(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString(), defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor)))
                                Else
                                    defaultFont = New iTextSharp.text.Font(bf, defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor))
                                End If
                            Catch exCreateFontEmbeded As Exception
                                Err.Clear()
                            End Try
                    End Select
                    defaultFont.Size = defaultFontSize
                Catch ex As Exception
                    Throw ex
                    TimeStampAdd(ex, debugMode)
                End Try
                Select Case fltType
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                        Dim frmField As iTextSharp.text.pdf.TextField
                        Dim frmFields As New List(Of iTextSharp.text.pdf.TextField)
                        Dim ap As PdfAppearance = Nothing
                        If Not fldname = newFldName Then
                            Try
                                If form.Fields.ContainsKey(fldname) Then
                                    If form.Fields(fldname).Size > 1 Then
                                        If promptMerge Then
                                            Dim msg As New dialogMultiChoice()
                                            Dim strMsg As String = ""
                                            strMsg &= "Rename fields from: """ & fldname & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x " & form.Fields(fldname).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            strMsg &= Environment.NewLine & "To new name: """ & newFldName & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x " & form.Fields(newFldName).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            msg.lblMessage.Text = strMsg & ""
                                            msg.ButtonsClear()
                                            msg.ButtonAdd("Rename all fields", True, 1)
                                            msg.ButtonAdd("This field only", True, 2)
                                            msg.ButtonAdd("Cancel", True, 3)
                                            Select Case msg.ShowDialog(Me, "Rename Fields", msg.ButtonsArray)
                                                Case 2
                                                    If form.Fields.ContainsKey(newFldName) Then
                                                        If form.Fields(newFldName).Size >= 1 Then
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        Else
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        End If
                                                    Else
                                                        If fldKidIndex >= 0 Then
                                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                        End If
                                                        fldNameHighlightedCopy = ""
                                                        fldname = newFldName
                                                        fldNameHighlightedCopy = ""
                                                        fldKidIndex = -1
                                                        fldname = ""
                                                    End If
                                                Case 1
                                                    For indexField As Integer = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size - 1 To 0 Step -1
                                                        If GetFormFieldType(Session("output"), fldname) = fltType Then
                                                            fldKidIndex = indexField
                                                            b = A0_PDFFormField_Modify_ComboBox_Test_Multi(b.ToArray, fldname, newFldName, textcolor, bgcolor, bordercolor, New iTextSharp.text.Rectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Top)), pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexField), -1, pdfReaderDoc, False)
                                                            Session = b
                                                            LoadPDFReaderDoc(pdfOwnerPassword, True)
                                                        End If
                                                    Next
                                                    Return b.ToArray
                                                Case 3
                                                    Return b.ToArray
                                                Case Else
                                                    Return b.ToArray
                                            End Select
                                            GoTo CONTINUE_NORMAL
                                        End If
                                    End If
                                End If
                                If form.Fields.ContainsKey(newFldName) Then
                                    If form.Fields(newFldName).Size >= 1 Then
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    Else
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    End If
                                Else
                                    If fldKidIndex >= 0 Then
                                        pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                    End If
                                    fldNameHighlightedCopy = ""
                                    fldname = newFldName
                                    fldNameHighlightedCopy = ""
                                    fldKidIndex = -1
                                    fldname = ""
                                End If
                            Catch exRename As Exception
                                Err.Clear()
                            End Try
                        End If
CONTINUE_NORMAL:
                        If Not String.IsNullOrEmpty(fldname) Then
                            If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.KIDS) Is Nothing Then
                                If iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size >= 1 Then
                                    Dim indexField As Integer = 0
                                    For indexField = 0 To iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size - 1
                                        If Not removeKidFieldIdx = indexField Then
                                            frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                            form.DecodeGenericDictionary(iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(indexField), frmField)
                                            frmFields.Add(frmField)
                                        End If
                                    Next
                                    frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                    If fldKidIndex < 0 Then
                                        frmFields.Add(frmField)
                                    End If
                                Else
                                    frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                    frmFields.Add(frmField)
                                End If
                            Else
                                frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                form.DecodeGenericDictionary(iTextFieldItemPdfDictionary(fldname), frmField)
                                frmFields.Add(frmField)
                            End If
                        Else
                            If fldKidIndex < 0 Then
                                frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                frmField.TextColor = textcolor
                                frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                                frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                                frmField.FieldName = newFldName
                                frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                                frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                                frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                                frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                                frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                                frmFields.Add(frmField)
                            Else
                                frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                frmField.TextColor = textcolor
                                frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                                frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                                frmField.FieldName = newFldName
                                frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                                frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                                frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                                frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                                frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                                frmFields.Add(frmField)
                            End If
                        End If
                        frmField.TextColor = textcolor
                        frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                        frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                        frmField.FieldName = newFldName
                        frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                        frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                        frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                        frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                        frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                        If Not defaultFont Is Nothing Then
                            frmField.Font = defaultFont.BaseFont
                        End If
                        If defaultFontSize >= 0 Then
                            frmField.FontSize = defaultFontSize
                        End If
                        If newRect Is Nothing Then
                            newRect = frmField.Box
                        Else
                            frmField.Box = newRect
                        End If
                        Dim intFF As Integer = 0
                        If ComboBox_CommitImmediately.Checked = True And ComboBox_CommitImmediately.Enabled Then
                            intFF += 67108864
                        End If
                        If PDFField_Selection.Checked = True And PDFField_Selection.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON
                        End If
                        If PDFField_CombChk.Checked = True And PDFField_CombChk.Enabled Then
                            If IsNumeric(PDFField_Comb.Text & "") Then
                                If CInt(PDFField_Comb.Text & "") > 0 Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_COMB
                                    frmField.MaxCharacterLength = CInt(PDFField_Comb.Text & "")
                                End If
                            End If
                        End If
                        If PDFField_MaxLenChk.Checked = True And PDFField_MaxLenChk.Enabled Then
                            If IsNumeric(PDFField_MaxLen.Text & "") Then
                                If CInt(PDFField_MaxLen.Text & "") > 0 Then
                                    frmField.MaxCharacterLength = CInt(PDFField_MaxLen.Text & "")
                                End If
                            End If
                        End If
                        If PDFField_Scroll.Checked = False Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL
                        End If
                        If Not ComboBox_CheckSpelling.Checked And ComboBox_CheckSpelling.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK
                        End If
                        If ComboBox_AllowEnterCustomText.Checked = True And ComboBox_AllowEnterCustomText.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_EDIT
                        End If
                        intFF += iTextSharp.text.pdf.PdfFormField.FF_COMBO
                        If PDFField_Required.Checked = True Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_REQUIRED
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY
                        End If
                        frmField.Options = intFF
                        Dim opt As New PdfArray
                        Dim selIndex As Integer = -1
                        Dim optItemsDisplay As New List(Of String), optItemsValue As New List(Of String)
                        If Not ComboBox_ItemDisplay.Items Is Nothing Then
                            If Not String.IsNullOrEmpty(btnComboBox_ItemDefault.Text & "") Then
                                selIndex = CInt(btnComboBox_ItemDefault.Text) + 0
                            End If
                            For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                                optItemsDisplay.Add(CStr(ComboBox_ItemDisplay.Items(i).ToString & "") & "")
                                If Not String.IsNullOrEmpty(CStr(ComboBox_ItemValue.Items(i).ToString & "").Trim() & "") Then
                                    optItemsValue.Add(CStr(ComboBox_ItemValue.Items(i).ToString & "").Trim() & "")
                                Else
                                    optItemsValue.Add(CStr(ComboBox_ItemDisplay.Items(i).ToString & "").Trim() & "")
                                End If
                                If Not String.IsNullOrEmpty(btnComboBox_ItemDefault.Text) Then
                                    If btnComboBox_ItemDefault.Text = optItemsDisplay(i) Then
                                        selIndex = i
                                    ElseIf btnComboBox_ItemDefault.Text = optItemsValue(i) Then
                                        selIndex = i
                                    ElseIf ComboBox_ItemValueText.Text = optItemsValue(i) Then
                                        selIndex = i
                                    End If
                                End If
                            Next
                            selIndex = Me.ComboBox_ItemDisplay.SelectedIndex
                            frmField.Choices = optItemsDisplay.ToArray
                            frmField.ChoiceExports = optItemsValue.ToArray
                            If selIndex >= 0 Then
                                frmField.ChoiceSelection = selIndex + 0
                            End If
                        End If
                        If Not String.IsNullOrEmpty(fldname) And fldKidIndex < 0 Then
                        End If
                        Dim fld As PdfFormField = frmField.GetComboField
                        Try
                            frmFields(IIf(fldKidIndex < 0, frmFields.Count - 1, fldKidIndex + 0)) = frmField
                        Catch exFrmField As Exception
                            TimeStampAdd(exFrmField, debugMode)
                        End Try
                        If frmFields.Count > 1 Then
                            Try
                                Dim strOptions As New List(Of String())
                                For optIdx As Integer = 0 To optItemsDisplay.Count - 1
                                    strOptions.Add(New String() {optItemsDisplay(optIdx), optItemsValue(optIdx)})
                                Next
                                fld = frmField.GetComboField
                                If Not frmField.GetComboField().Get(PdfName.DA) Is Nothing Then
                                    fld.Put(PdfName.DA, frmField.GetComboField().GetAsString(PdfName.DA))
                                End If
                                fld.FieldName = newFldName & ""
                                fld.UserName = PDFField_Tooltip.Text & ""
                                Dim cb As New PdfContentByte(stmp.Writer)
                                ap = cb.CreateAppearance(newRect.Width, newRect.Height)
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                ap.SetGrayFill(0)
                                fld.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, ap)
                                If selIndex >= 0 Then
                                    If Not String.IsNullOrEmpty(optItemsValue(selIndex).Trim() & "") Then
                                        fld.DefaultValueAsString = (optItemsValue(selIndex).ToString & "")
                                        fld.ValueAsString = (optItemsValue(selIndex).ToString & "")
                                    ElseIf Not String.IsNullOrEmpty(optItemsDisplay(selIndex).Trim() & "") Then
                                        fld.DefaultValueAsString = (optItemsDisplay(selIndex).ToString & "")
                                        fld.ValueAsString = (optItemsDisplay(selIndex).ToString & "")
                                    End If
                                End If
                                fld.SetFieldFlags(intFF)
                                ap = frmField.GetAppearance().Duplicate()
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Else
                            If PDFField_Copy.Checked Then
                                frmField.Box = newRect
                                frmFields.Add(frmField)
                                fld = frmField.GetComboField
                                fld.FieldName = newFldName & ""
                                fld.UserName = PDFField_Tooltip.Text & ""
                                ap = frmField.GetAppearance().Duplicate()
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                fld.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, ap)
                                If selIndex >= 0 Then
                                    If Not String.IsNullOrEmpty(optItemsValue(selIndex).Trim() & "") Then
                                        fld.DefaultValueAsString = (optItemsValue(selIndex).ToString & "")
                                        fld.ValueAsString = (optItemsValue(selIndex).ToString & "")
                                    ElseIf Not String.IsNullOrEmpty(optItemsDisplay(selIndex).Trim() & "") Then
                                        fld.DefaultValueAsString = (optItemsDisplay(selIndex).ToString & "")
                                        fld.ValueAsString = (optItemsDisplay(selIndex).ToString & "")
                                    End If
                                End If
                                fld.SetFieldFlags(intFF)
                            Else
                                fld = frmField.GetComboField
                                If selIndex >= 0 Then
                                    If Not String.IsNullOrEmpty(optItemsValue(selIndex).Trim() & "") Then
                                        fld.DefaultValueAsString = (optItemsValue(selIndex).ToString & "")
                                        fld.ValueAsString = (optItemsValue(selIndex).ToString & "")
                                    ElseIf Not String.IsNullOrEmpty(optItemsDisplay(selIndex).Trim() & "") Then
                                        fld.DefaultValueAsString = (optItemsDisplay(selIndex).ToString & "")
                                        fld.ValueAsString = (optItemsDisplay(selIndex).ToString & "")
                                    End If
                                End If
                                fld.SetFieldFlags(intFF)
                            End If
                        End If
                        Dim fldFlags As Integer = 0
                        If Not fld.Get(PdfName.F) Is Nothing Then
                            If fld.Get(PdfName.F).IsNumber Then
                            End If
                        End If
                        If PDFField_Locked.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                            End If
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                            End If
                        End If
                        Select Case PDFField_Visibility.SelectedIndex
                            Case 0
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 1
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN + iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 2
                            Case 3
                                fldFlags += PdfAnnotation.FLAGS_PRINT + PdfAnnotation.FLAGS_NOVIEW
                        End Select
                        If fldFlags > 0 Then
                            fld.Flags = fldFlags
                        End If
                        If Not String.IsNullOrEmpty(Me.PDFField_Tooltip.Text & "") Then fld.Put(PdfName.TU, New PdfString(Me.PDFField_Tooltip.Text & ""))
                        Dim act As New List(Of PdfAction)
                        Dim actCntr As Integer = -1
                        For Each ma As String In arrayMouseActions.ToArray
                            actCntr += 1
                            act.Add(Nothing)
                            Try
                                If Not PDFField_Actions_TreeView.Nodes(ma) Is Nothing Then
                                    For Each a As TreeNode In PDFField_Actions_TreeView.Nodes(ma).Nodes
                                        If a.Text.ToLower = "SubmitForm".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim Flags As Integer = 0
                                            If Not a.Nodes("FLAGS") Is Nothing Then
                                                Flags = CInt(a.Nodes("FLAGS").Nodes(0).Text.ToString.Replace("TreeNode: ", ""))
                                            End If
                                            Dim pdfArrayFieldNames As PdfArray = Nothing
                                            If Not a.Nodes("FIELDS") Is Nothing Then
                                                pdfArrayFieldNames = New PdfArray
                                                For Each fldNameTreeNode As TreeNode In a.Nodes("FIELDS").Nodes
                                                    If Not String.IsNullOrEmpty(fldNameTreeNode.Text) Then
                                                        pdfArrayFieldNames.Add(New PdfString(fldNameTreeNode.Text))
                                                    End If
                                                Next
                                            End If
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act(actCntr).Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                            Else
                                                Dim act2 As PdfAction = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act2.Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                                act(actCntr).Next(act2)
                                            End If
                                        ElseIf a.Text.ToLower = "Javascript".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer)
                                            Else
                                                act(actCntr).Next(iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer))
                                            End If
                                        ElseIf a.Text.ToLower = "Named".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim action As New PdfAction()
                                            action.Put(PdfName.S, PdfName.NAMED)
                                            action.Put(PdfName.N, New PdfName(s.Text.ToString))
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = action
                                            Else
                                                act(actCntr).Next(action)
                                            End If
                                        End If
                                    Next
                                    If frmFields.ToArray.Count <= 1 Then
                                        If Not act(actCntr) Is Nothing Then
                                            Dim actItem As PdfAction = act(actCntr)
                                            If actItem.Keys.Count > 0 Then
                                                Select Case ma.ToString.ToLower
                                                    Case "mouse up"
                                                        fld.Action = act(actCntr)
                                                    Case "mouse down"
                                                        fld.SetAdditionalActions(PdfName.D, act(actCntr))
                                                    Case "mouse enter"
                                                        fld.SetAdditionalActions(PdfName.E, act(actCntr))
                                                    Case "mouse exit"
                                                        fld.SetAdditionalActions(PdfName.X, act(actCntr))
                                                    Case "on blur"
                                                        fld.SetAdditionalActions(PdfName.BL, act(actCntr))
                                                    Case "on focus"
                                                        fld.SetAdditionalActions(PdfName.FO, act(actCntr))
                                                End Select
                                            End If
                                        End If
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Next
                        Dim aa As PdfDictionary = Nothing
                        Try
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Format_Script.Text & "") Then
                                aa = New PdfDictionary
                                Dim f As New PdfDictionary
                                f.Put(PdfName.JS, New PdfString(New PdfString(Me.PDFField_Format_Custom_Format_Script.Text & "").ToUnicodeString()))
                                f.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(f)
                                aa.Put(PdfName.F, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.F) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.F)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Keystroke_Script.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim k As New PdfDictionary
                                k.Put(PdfName.JS, New PdfString(New PdfString(Me.PDFField_Format_Custom_Keystroke_Script.Text & "").ToUnicodeString()))
                                k.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(k)
                                aa.Put(PdfName.K, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.K) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.K)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim v As New PdfDictionary
                                v.Put(PdfName.JS, New PdfString(New PdfString(PDFField_Validation_Range_Custom.Text & "").ToUnicodeString()))
                                v.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(v)
                                aa.Put(PdfName.V, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.V) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.V)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim c As New PdfDictionary
                                c.Put(PdfName.JS, New PdfString(New PdfString(PDFField_Calculations_CustomCalcScript_Text.Text & "").ToUnicodeString()))
                                c.Put(PdfName.S, PdfName.JAVASCRIPT)
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(c)
                                aa.Put(New PdfName("C"), ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(New PdfName("C")) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), New PdfName("C"))
                                    End If
                                End If
                            End If
                            If Not aa Is Nothing Then
                                fld.Put(PdfName.AA, aa)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    fld.Remove(PdfName.AA)
                                End If
                            End If
                        Catch exFormat As Exception
                            TimeStampAdd(exFormat, debugMode)
                        End Try
                        Try
                            If fldKidIndex < 0 Then
                                frmFields(frmFields.Count - 1) = (frmField)
                            Else
                                frmFields(fldKidIndex) = (frmField)
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            If frmFields.Count > 1 Then
                                Try
                                    Dim itmFld As iTextSharp.text.pdf.AcroFields.Item = pdfReaderDocTemp.AcroFields.GetFieldItem(fldname)
                                    If frmFields.Count > 1 Then
                                        Dim indexKid As Integer = 0
                                        Dim dictKid As New PdfDictionary
                                        Dim arrKids As New PdfArray
                                        Dim fldPages As New List(Of Integer)
                                        Dim fldActions As New List(Of PdfDictionary)
                                        Dim fldAA As New List(Of PdfDictionary)
                                        Dim formTmp As AcroFields = pdfReaderDoc.AcroFields
                                        Dim flditem As AcroFields.Item = formTmp.GetFieldItem(fldname)
                                        Dim fldRect As New List(Of PdfRectangle)
                                        For Each fldKids As iTextSharp.text.pdf.TextField In frmFields.ToArray()
                                            If (indexKid = fldKidIndex) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                                fldPages.Add(Me.page)
                                                fldActions.Add(act(indexKid))
                                                fldAA.Add(DirectCast(iTextGetPDFObject(fld.GetAsDict(PdfName.AA), PdfName.AA), PdfDictionary))
                                                fldRect.Add(New PdfRectangle(newRect))
                                                indexKid += 1
                                            Else
                                                fldPages.Add(pdfReaderDocTemp.AcroFields.GetFieldItem(fldname).GetPage(indexKid))
                                                If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.KIDS) Is Nothing Then
                                                    If Not iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(indexKid) Is Nothing Then
                                                        fldActions.Add(iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(indexKid), PdfName.A))
                                                        fldAA.Add(DirectCast(iTextGetPDFObject(flditem.GetMerged(indexKid), PdfName.AA), PdfDictionary))
                                                    Else
                                                        fldActions.Add(DirectCast(iTextGetPDFObject(flditem.GetMerged(indexKid), PdfName.A), PdfDictionary))
                                                        fldAA.Add(DirectCast(iTextGetPDFObject(flditem.GetMerged(indexKid), PdfName.AA), PdfDictionary))
                                                    End If
                                                Else
                                                    fldActions.Add(DirectCast(iTextGetPDFObject(flditem.GetMerged(indexKid), PdfName.A), PdfDictionary))
                                                    fldAA.Add(DirectCast(iTextGetPDFObject(flditem.GetMerged(indexKid), PdfName.AA), PdfDictionary))
                                                End If
                                                Dim arrRect As PdfArray = Nothing
                                                fldRect.Add(New PdfRectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Top)))
                                                indexKid += 1
                                            End If
                                        Next
                                        indexKid = 0
                                        For Each fldKids As iTextSharp.text.pdf.TextField In frmFields.ToArray()
                                            If (fldKidIndex = indexKid) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                                Dim frmFieldTemp As iTextSharp.text.pdf.TextField = frmField
                                                frmFieldTemp.Box = New iTextSharp.text.Rectangle(fldRect(indexKid).Left, fldRect(indexKid).Bottom, fldRect(indexKid).Right, fldRect(indexKid).Top)
                                                Dim k As PdfFormField = frmFieldTemp.GetComboField
                                                k.PlaceInPage = pageNumber
                                                k.Color = frmField.TextColor
                                                k.MKBorderColor = frmField.BorderColor
                                                k.BorderStyle = New PdfBorderDictionary(frmField.BorderWidth, frmField.BorderStyle, New PdfDashPattern(CSng(IIf(frmField.BorderStyle = 1, 3, 0))))
                                                k.MKBackgroundColor = frmField.BackgroundColor
                                                k.MKRotation = frmField.Rotation + 0
                                                k.MKTextPosition = frmField.Alignment + 0
                                                k.Remove(PdfName.T)
                                                If Not k.Get(PdfName.BS) Is Nothing Then k.Remove(PdfName.BS)
                                                If Not k.Get(PdfName.C) Is Nothing Then k.Remove(PdfName.C)
                                                If Not k.Get(PdfName.DR) Is Nothing Then k.Remove(PdfName.DR)
                                                If Not k.Get(PdfName.DA) Is Nothing Then k.Remove(PdfName.DA)
                                                If Not k.Get(PdfName.FT) Is Nothing Then k.Remove(PdfName.FT)
                                                If Not k.Get(PdfName.FF) Is Nothing Then k.Remove(PdfName.FF)
                                                Try
                                                    For actCntr = 0 To act.Count - 1
                                                        Dim actItem As PdfAction = act(actCntr)
                                                        If Not actItem Is Nothing Then
                                                            If actItem.Keys.Count > 0 Then
                                                                Select Case actCntr
                                                                    Case 0
                                                                        k.Action = act(actCntr)
                                                                    Case 1
                                                                        k.SetAdditionalActions(PdfName.D, actItem)
                                                                    Case 2
                                                                        k.SetAdditionalActions(PdfName.E, actItem)
                                                                    Case 3
                                                                        k.SetAdditionalActions(PdfName.X, actItem)
                                                                    Case 4
                                                                        k.SetAdditionalActions(PdfName.BL, actItem)
                                                                    Case 5
                                                                        k.SetAdditionalActions(PdfName.FO, actItem)
                                                                End Select
                                                            End If
                                                        End If
                                                    Next
                                                Catch ex As Exception
                                                    TimeStampAdd(ex, debugMode)
                                                End Try
                                                Try
                                                    If Not aa Is Nothing Then
                                                        Dim aaTemp As New PdfDictionary
                                                        For Each ktmp As PdfName In aa.Keys.ToArray
                                                            Select Case ktmp.ToString
                                                                Case PdfName.C.ToString
                                                                Case PdfName.V.ToString
                                                                Case Else
                                                                    aaTemp.PutEx(ktmp, aa.Get(ktmp))
                                                            End Select
                                                        Next
                                                        For Each ktmp As PdfName In aa.Keys.ToArray
                                                            Dim sTmp1 As String = ktmp.ToString
                                                            sTmp1 = sTmp1
                                                        Next
                                                        k.Put(PdfName.AA, aaTemp)
                                                    Else
                                                        If Not k.Get(PdfName.AA) Is Nothing Then
                                                            RemoveObject(k, PdfName.AA)
                                                        End If
                                                    End If
                                                Catch ex As Exception
                                                    TimeStampAdd(ex, debugMode)
                                                End Try
                                                fld.AddKid(k)
                                                stmp.AddAnnotation(k, pageNumber)
                                            Else
                                                Dim frmFieldTemp As iTextSharp.text.pdf.TextField = frmField
                                                frmFieldTemp.Box = New iTextSharp.text.Rectangle(fldRect(indexKid).Left, fldRect(indexKid).Bottom, fldRect(indexKid).Right, fldRect(indexKid).Top)
                                                Dim k As PdfFormField = frmFieldTemp.GetComboField
                                                Dim actions1 As New PdfAction
                                                If Not fldActions(indexKid) Is Nothing Then
                                                    k.Put(PdfName.A, fldActions(indexKid))
                                                End If
                                                k.PlaceInPage = fldPages(indexKid)
                                                k.Color = frmField.TextColor
                                                k.MKBorderColor = frmField.BorderColor
                                                k.BorderStyle = New PdfBorderDictionary(frmField.BorderWidth, frmField.BorderStyle, New PdfDashPattern(CSng(IIf(frmField.BorderStyle = 1, 3, 0))))
                                                k.MKBackgroundColor = frmField.BackgroundColor
                                                k.MKRotation = frmField.Rotation + 0
                                                k.MKTextPosition = frmField.Alignment + 0
                                                If Not k.Get(PdfName.BS) Is Nothing Then k.Remove(PdfName.BS)
                                                If Not k.Get(PdfName.C) Is Nothing Then k.Remove(PdfName.C)
                                                If Not k.Get(PdfName.DR) Is Nothing Then k.Remove(PdfName.DR)
                                                If Not k.Get(PdfName.DA) Is Nothing Then k.Remove(PdfName.DA)
                                                If Not k.Get(PdfName.FT) Is Nothing Then k.Remove(PdfName.FT)
                                                If Not k.Get(PdfName.FF) Is Nothing Then k.Remove(PdfName.FF)
                                                k.Remove(PdfName.T)
                                                fld.AddKid(k)
                                                stmp.AddAnnotation(k, fldPages(indexKid))
                                            End If
                                            indexKid += 1
                                        Next
                                        If Not aa Is Nothing Then
                                            fld.Put(PdfName.AA, aa)
                                        Else
                                            If Not fld.Get(PdfName.AA) Is Nothing Then
                                                fld.Remove(PdfName.AA)
                                            End If
                                        End If
                                        Try
                                            fld.Flags = fldFlags
                                            fld.SetFieldFlags(intFF)
                                            If Not fld.Get(PdfName.AP) Is Nothing Then
                                                fld.Remove(PdfName.AP)
                                            End If
                                            If Not fld.Get(PdfName.RECT) Is Nothing Then
                                                fld.Remove(PdfName.RECT)
                                            End If
                                            If Not fld.Get(PdfName.MK) Is Nothing Then
                                                fld.Remove(PdfName.MK)
                                            End If
                                            If Not fld.Get(PdfName.TI) Is Nothing Then
                                                fld.Remove(PdfName.TI)
                                            End If
                                            If Not fld.Get(PdfName.TU) Is Nothing Then
                                                fld.Remove(PdfName.TU)
                                            End If
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                    Else
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Else
                                fld.Flags = fldFlags
                                fld.SetFieldFlags(intFF)
                            End If
                            If frmFields.Count > 1 Then
                            End If
                        Else
                        End If
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            Try
                                If Not String.IsNullOrEmpty(fldname & "") Then form.RemoveField(fldname)
                            Catch exRemoveField As Exception
                                TimeStampAdd(exRemoveField, debugMode)
                            End Try
                            stmp.AddAnnotation(fld, pageNumber)
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                AddCalculationOrder(fld, stmp)
                            End If
                            form = stmp.AcroFields
                        Else
                            stmp.AddAnnotation(fld, pageNumber)
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                AddCalculationOrder(fld, stmp)
                            End If
                            form = stmp.AcroFields
                        End If
                End Select
            Else
            End If
            stmp.Writer.CloseStream = False
            stmp.Close()
            If memStream.CanSeek Then
                memStream.Position = 0
            End If
            b = memStream.ToArray
            memStream.Close()
            memStream.Dispose()
            cUserRect.pauseDraw = True
            cUserRect.pauseDraw = False
            Return b
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        cUserRect.pauseDraw = True
        cUserRect.pauseDraw = False
        Return b
    End Function
    Public Function A0_PDFFormField_Modify_ComboBox(ByVal b() As Byte, ByVal fldname As String, ByVal newFldName As String, ByVal textcolor As iTextSharp.text.BaseColor, ByVal bgcolor As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal newRect As iTextSharp.text.Rectangle, Optional ByVal pageNumber As Integer = -1, Optional ByVal removeKidFieldIdx As Integer = -1, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing, Optional ByVal promptMerge As Boolean = True) As Byte()
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword & ""))
            Else
                pdfReaderDocTemp = pdfReaderDoc.Clone
            End If
            If pageNumber <= 0 Then
                pageNumber = CInt(page) + 0
            End If
        Catch ex As Exception
            pdfReaderDocTemp = pdfReaderDoc
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            Dim memStream As New MemoryStream
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            Dim stmp As PdfStamper = getStamper(pdfReaderDocTemp, memStream)
            Try
                If Not stmp.AcroFields.GenerateAppearances = True Then
                    If Not stmp.AcroFields.Fields Is Nothing Then stmp.AcroFields.GenerateAppearances = True
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim form As iTextSharp.text.pdf.AcroFields = stmp.AcroFields
            If True = True Then
                Dim fltType As Integer = -1
                If Not String.IsNullOrEmpty(fldname & "") Then
                    fltType = GetFormFieldType(b, fldname)
                Else
                    Select Case ComboBox1.SelectedItem.ToString.ToLower
                        Case "Textbox".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                        Case "CheckBox".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                        Case "ComboBox".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                        Case "ListBox".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                        Case "Button".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                        Case "RadioButton".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                        Case "Signature".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                        Case Else
                            Return b
                    End Select
                End If
                Dim defaultFontSize As Single = 0
                Try
                    If IsNumeric(PDFField_FontSize.Text & "") Then
                        defaultFontSize = CSng(PDFField_FontSize.Text & "") + 0.0F
                    ElseIf (PDFField_FontSize.SelectedIndex > 0) Then
                        defaultFontSize = CSng(PDFField_FontSize.Items(PDFField_FontSize.SelectedIndex).ToString()) + 0.0F
                    Else
                        defaultFontSize = 0.0F
                    End If
                Catch ex As Exception
                    defaultFontSize = 0.0F
                    TimeStampAdd(ex, debugMode)
                End Try
                Dim bf As BaseFont = Nothing
                Dim defaultFont As iTextSharp.text.Font = Nothing
                Try
                    Select Case PDFField_FontFamily.SelectedIndex
                        Case 0
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER, BaseFont.WINANSI, False)
                        Case 1
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLD, BaseFont.CP1252, True)
                        Case 2
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 3
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_OBLIQUE, BaseFont.WINANSI, False)
                        Case 4
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.WINANSI, False)
                        Case 5
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLD, BaseFont.WINANSI, False)
                        Case 6
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 7
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_OBLIQUE, BaseFont.WINANSI, False)
                        Case 8
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, BaseFont.WINANSI, False)
                        Case 9
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLD, BaseFont.WINANSI, False)
                        Case 10
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ITALIC, BaseFont.WINANSI, False)
                        Case 11
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLDITALIC, BaseFont.WINANSI, False)
                        Case 12
                            defaultFont = FontFactory.GetFont(BaseFont.SYMBOL, BaseFont.WINANSI, False)
                        Case 13
                            defaultFont = FontFactory.GetFont(BaseFont.ZAPFDINGBATS, BaseFont.WINANSI, False)
                        Case Else
                            Try
                                bf = findFontInForm(New PdfName(CStr(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString)))
                                If bf Is Nothing Then
                                    defaultFont = New iTextSharp.text.Font(FontFactory.GetFont(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString(), defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor)))
                                Else
                                    defaultFont = New iTextSharp.text.Font(bf, defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor))
                                End If
                            Catch exCreateFontEmbeded As Exception
                                Err.Clear()
                            End Try
                    End Select
                    defaultFont.Size = defaultFontSize
                Catch ex As Exception
                    Throw ex
                    TimeStampAdd(ex, debugMode)
                End Try
                Select Case fltType
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                        Dim frmField As iTextSharp.text.pdf.TextField
                        frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                        frmField.TextColor = textcolor
                        frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                        frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                        frmField.FieldName = newFldName
                        frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                        frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                        frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                        frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                        frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                        If Not defaultFont Is Nothing Then
                            frmField.Font = defaultFont.BaseFont
                        End If
                        If defaultFontSize >= 0 Then
                            frmField.FontSize = defaultFontSize
                        End If
                        If newRect Is Nothing Then
                            newRect = frmField.Box
                        Else
                            If Not String.IsNullOrEmpty(fldname & "") Then
                                Dim fldRect As New iTextSharp.text.pdf.PdfRectangle(newRect.Left, newRect.Bottom, newRect.Right, newRect.Top)
                                DirectCast(stmp.AcroFields.GetFieldItem(fldname).GetWidget(0), iTextSharp.text.pdf.PdfDictionary).Put(PdfName.RECT, fldRect)
                            End If
                            frmField.Box = newRect
                        End If
                        Dim intFF As Integer = 0
                        If ComboBox_CommitImmediately.Checked = True And ComboBox_CommitImmediately.Enabled Then
                            intFF += 67108864
                        End If
                        If PDFField_Selection.Checked = True And PDFField_Selection.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON
                        End If
                        If PDFField_CombChk.Checked = True And PDFField_CombChk.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_COMB
                        End If
                        If PDFField_Scroll.Checked = False Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL
                        End If
                        If ComboBox_CheckSpelling.Checked = False And ComboBox_CheckSpelling.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK
                        End If
                        If ComboBox_AllowEnterCustomText.Checked = True And ComboBox_AllowEnterCustomText.Enabled Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_EDIT
                        End If
                        intFF += iTextSharp.text.pdf.PdfFormField.FF_COMBO
                        If PDFField_Required.Checked = True Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_REQUIRED
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY
                        End If
                        frmField.Options = intFF
                        Dim opt As New PdfArray
                        Dim selIndex As Integer = -1
                        Dim optItemsDisplay As New List(Of String), optItemsValue As New List(Of String)
                        If Not ComboBox_ItemDisplay.Items Is Nothing Then
                            If Not String.IsNullOrEmpty(btnComboBox_ItemDefault.Text & "") Then
                                selIndex = CInt(btnComboBox_ItemDefault.Text) + 0
                            End If
                            For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                                optItemsDisplay.Add(CStr(ComboBox_ItemDisplay.Items(i).ToString & "") & "")
                                optItemsValue.Add(CStr(ComboBox_ItemValue.Items(i).ToString & "") & "")
                                If Not String.IsNullOrEmpty(btnComboBox_ItemDefault.Text) Then
                                    If btnComboBox_ItemDefault.Text = optItemsDisplay(i) Then
                                        selIndex = i
                                    ElseIf btnComboBox_ItemDefault.Text = optItemsValue(i) Then
                                        selIndex = i
                                    ElseIf ComboBox_ItemValueText.Text = optItemsValue(i) Then
                                        selIndex = i
                                    End If
                                End If
                            Next
                            frmField.Choices = optItemsDisplay.ToArray
                            frmField.ChoiceExports = optItemsValue.ToArray
                            If selIndex >= 0 Then
                                frmField.ChoiceSelection = selIndex + 0
                            End If
                        End If
                        Dim fld As PdfFormField = frmField.GetComboField
                        Try
                        Catch exFrmField As Exception
                            TimeStampAdd(exFrmField, debugMode)
                        End Try
                        Dim fldFlags As Integer = 0
                        If Not fld.Get(PdfName.F) Is Nothing Then
                            If fld.Get(PdfName.F).IsNumber Then
                            End If
                        End If
                        If PDFField_Locked.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                            End If
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                            End If
                        End If
                        Select Case PDFField_Visibility.SelectedIndex
                            Case 0
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 1
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN + iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 2
                            Case 3
                                fldFlags += PdfAnnotation.FLAGS_PRINT + PdfAnnotation.FLAGS_NOVIEW
                        End Select
                        If Not String.IsNullOrEmpty(Me.PDFField_Tooltip.Text & "") Then fld.Put(PdfName.TU, New PdfString(Me.PDFField_Tooltip.Text & ""))
                        Dim act As PdfAction = Nothing
                        act = Nothing
                        For Each ma As String In arrayMouseActions.ToArray
                            act = Nothing
                            Try
                                If Not PDFField_Actions_TreeView.Nodes(ma) Is Nothing Then
                                    For Each a As TreeNode In PDFField_Actions_TreeView.Nodes(ma).Nodes
                                        If a.Text.ToLower = "SubmitForm".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim Flags As Integer = 0
                                            If Not a.Nodes("FLAGS") Is Nothing Then
                                                Flags = CInt(a.Nodes("FLAGS").Nodes(0).Text.ToString.Replace("TreeNode: ", ""))
                                            End If
                                            Dim pdfArrayFieldNames As PdfArray = Nothing
                                            If Not a.Nodes("FIELDS") Is Nothing Then
                                                pdfArrayFieldNames = New PdfArray
                                                For Each fldNameTreeNode As TreeNode In a.Nodes("FIELDS").Nodes
                                                    If Not String.IsNullOrEmpty(fldNameTreeNode.Text) Then
                                                        pdfArrayFieldNames.Add(New PdfString(fldNameTreeNode.Text))
                                                    End If
                                                Next
                                            End If
                                            If act Is Nothing Then
                                                act = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act.Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                            Else
                                                Dim act2 As PdfAction = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act2.Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                                act.Next(act2)
                                            End If
                                        ElseIf a.Text.ToLower = "Javascript".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            If act Is Nothing Then
                                                act = iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer)
                                            Else
                                                act.Next(iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer))
                                            End If
                                        ElseIf a.Text.ToLower = "Named".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim action As New PdfAction()
                                            action.Put(PdfName.S, PdfName.NAMED)
                                            action.Put(PdfName.N, New PdfName(s.Text.ToString))
                                            If act Is Nothing Then
                                                act = action
                                            Else
                                                act.Next(action)
                                            End If
                                        End If
                                    Next
                                    If Not act Is Nothing Then
                                        Select Case ma.ToString.ToLower
                                            Case "mouse up"
                                                fld.Action = act
                                            Case "mouse down"
                                                fld.SetAdditionalActions(PdfName.D, act)
                                            Case "mouse enter"
                                                fld.SetAdditionalActions(PdfName.E, act)
                                            Case "mouse exit"
                                                fld.SetAdditionalActions(PdfName.X, act)
                                            Case "on blur"
                                                fld.SetAdditionalActions(PdfName.BL, act)
                                            Case "on focus"
                                                fld.SetAdditionalActions(PdfName.FO, act)
                                        End Select
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Next
                        Try
                            act = Nothing
                            If Not PDFField_Actions_TreeView.Nodes("Mouse Down") Is Nothing Then
                                For Each a As TreeNode In PDFField_Actions_TreeView.Nodes("Mouse Down").Nodes
                                    If a.Text.ToLower = "SubmitForm".ToLower Then
                                        Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                        If act Is Nothing Then
                                            act = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, PdfAction.SUBMIT_INCLUDE_NO_VALUE_FIELDS)
                                        Else
                                            act.Next(iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, PdfAction.SUBMIT_INCLUDE_NO_VALUE_FIELDS))
                                        End If
                                    ElseIf a.Text.ToLower = "Javascript".ToLower Then
                                        Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                        If act Is Nothing Then
                                            act = iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer)
                                        Else
                                            act.Next(iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer))
                                        End If
                                    ElseIf a.Text.ToLower = "Named".ToLower Then
                                        Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                        Dim action As New PdfAction()
                                        action.Put(PdfName.S, PdfName.NAMED)
                                        action.Put(PdfName.N, New PdfName(s.Text.ToString))
                                        If act Is Nothing Then
                                            act = action
                                        Else
                                            act.Next(action)
                                        End If
                                    End If
                                Next
                                If Not act Is Nothing Then
                                    fld.SetAdditionalActions(PdfName.D, act)
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If selIndex >= 0 Then
                            fld.Put(PdfName.V, New PdfString(optItemsValue(selIndex).ToString() & ""))
                            fld.Put(PdfName.DV, New PdfString(optItemsValue(selIndex).ToString() & ""))
                            fld.Put(PdfName.I, New PdfArray(New PdfNumber(CInt(selIndex))))
                        End If
                        Try
                            Dim aa As PdfDictionary = Nothing
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Format_Script.Text & "") Then
                                aa = New PdfDictionary
                                Dim f As New PdfDictionary
                                f.Put(PdfName.JS, New PdfString(New PdfString(Me.PDFField_Format_Custom_Format_Script.Text & "").ToUnicodeString()))
                                f.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(f)
                                aa.Put(PdfName.F, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.F) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.F)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Keystroke_Script.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim k As New PdfDictionary
                                k.Put(PdfName.JS, New PdfString(New PdfString(Me.PDFField_Format_Custom_Keystroke_Script.Text & "").ToUnicodeString()))
                                k.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(k)
                                aa.Put(PdfName.K, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.K) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.K)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim v As New PdfDictionary
                                v.Put(PdfName.JS, New PdfString(New PdfString(PDFField_Validation_Range_Custom.Text & "").ToUnicodeString()))
                                v.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(v)
                                aa.Put(PdfName.V, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.V) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.V)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim c As New PdfDictionary
                                c.Put(PdfName.JS, New PdfString(New PdfString(PDFField_Calculations_CustomCalcScript_Text.Text & "").ToUnicodeString()))
                                c.Put(PdfName.S, PdfName.JAVASCRIPT)
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(c)
                                aa.Put(New PdfName("C"), ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(New PdfName("C")) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), New PdfName("C"))
                                    End If
                                End If
                            End If
                            If Not aa Is Nothing Then
                                fld.Put(PdfName.AA, aa)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    fld.Remove(PdfName.AA)
                                End If
                            End If
                        Catch exFormat As Exception
                            TimeStampAdd(exFormat, debugMode)
                        End Try
                        form.RemoveField(fldname)
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            Try
                                If Not String.IsNullOrEmpty(fldname & "") Then form.RemoveField(fldname)
                            Catch exRemoveField As Exception
                                TimeStampAdd(exRemoveField, debugMode)
                            End Try
                            fld.Put(PdfName.FF, New PdfNumber(intFF))
                            stmp.AddAnnotation(fld, pageNumber)
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                AddCalculationOrder(fld, stmp)
                            End If
                            form = stmp.AcroFields
                        Else
                            fld.Put(PdfName.FF, New PdfNumber(intFF))
                            stmp.AddAnnotation(fld, pageNumber)
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                AddCalculationOrder(fld, stmp)
                            End If
                            form = stmp.AcroFields
                        End If
                        If selIndex >= 0 Then
                            Dim blnTest As Boolean = form.SetField(newFldName, CStr(optItemsValue(selIndex).ToString() & ""), CStr(optItemsDisplay(selIndex).ToString() & ""))
                            blnTest = blnTest
                        End If
                End Select
            Else
            End If
            stmp.Writer.CloseStream = False
            stmp.Close()
            If memStream.CanSeek Then
                memStream.Position = 0
            End If
            b = memStream.ToArray
            memStream.Close()
            memStream.Dispose()
            cUserRect.pauseDraw = True
            cUserRect.pauseDraw = False
            Return b
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        cUserRect.pauseDraw = True
        cUserRect.pauseDraw = False
        Return b
    End Function
    Public Function A0_PDFFormField_Modify_ListBox(ByVal b() As Byte, ByVal fldname As String, ByVal newFldName As String, ByVal textcolor As iTextSharp.text.BaseColor, ByVal bgcolor As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal newRect As iTextSharp.text.Rectangle, Optional ByVal pageNumber As Integer = -1, Optional ByVal removeKidFieldIdx As Integer = -1, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing, Optional ByVal promptMerge As Boolean = True) As Byte()
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword & ""))
            Else
                pdfReaderDocTemp = pdfReaderDoc.Clone
            End If
            If pageNumber <= 0 Then
                pageNumber = CInt(page) + 0
            End If
        Catch ex As Exception
            pdfReaderDocTemp = pdfReaderDoc
            TimeStampAdd(ex, debugMode)
        End Try
        Dim selIndex As New List(Of Integer)
        Dim selValues As New List(Of String)
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            Dim memStream As New MemoryStream
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            Dim stmp As PdfStamper = getStamper(pdfReaderDocTemp, memStream)
            Try
                If Not stmp.AcroFields.GenerateAppearances = True Then
                    If Not stmp.AcroFields.Fields Is Nothing Then stmp.AcroFields.GenerateAppearances = True
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim form As iTextSharp.text.pdf.AcroFields = stmp.AcroFields
            If True = True Then
                Dim fltType As Integer = -1
                Select Case ComboBox1.SelectedItem.ToString.ToLower
                    Case "Textbox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                    Case "CheckBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                    Case "ComboBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                    Case "ListBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                    Case "Button".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                    Case "RadioButton".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                    Case "Signature".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                    Case Else
                        Return b
                End Select
                Dim defaultFontSize As Single = 0
                Try
                    If IsNumeric(PDFField_FontSize.Text & "") Then
                        defaultFontSize = CSng(PDFField_FontSize.Text & "") + 0.0F
                    ElseIf (PDFField_FontSize.SelectedIndex > 0) Then
                        defaultFontSize = CSng(PDFField_FontSize.Items(PDFField_FontSize.SelectedIndex).ToString()) + 0.0F
                    Else
                        defaultFontSize = 0.0F
                    End If
                Catch ex As Exception
                    defaultFontSize = 0.0F
                    TimeStampAdd(ex, debugMode)
                End Try
                Dim bf As BaseFont = Nothing
                Dim defaultFont As iTextSharp.text.Font = Nothing
                Try
                    Select Case PDFField_FontFamily.SelectedIndex
                        Case 0
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER, BaseFont.WINANSI, False)
                        Case 1
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLD, BaseFont.CP1252, True)
                        Case 2
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 3
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_OBLIQUE, BaseFont.WINANSI, False)
                        Case 4
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.WINANSI, False)
                        Case 5
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLD, BaseFont.WINANSI, False)
                        Case 6
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 7
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_OBLIQUE, BaseFont.WINANSI, False)
                        Case 8
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, BaseFont.WINANSI, False)
                        Case 9
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLD, BaseFont.WINANSI, False)
                        Case 10
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ITALIC, BaseFont.WINANSI, False)
                        Case 11
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLDITALIC, BaseFont.WINANSI, False)
                        Case 12
                            defaultFont = FontFactory.GetFont(BaseFont.SYMBOL, BaseFont.WINANSI, False)
                        Case 13
                            defaultFont = FontFactory.GetFont(BaseFont.ZAPFDINGBATS, BaseFont.WINANSI, False)
                        Case Else
                            Try
                                bf = findFontInForm(New PdfName(CStr(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString)))
                                If bf Is Nothing Then
                                    defaultFont = New iTextSharp.text.Font(FontFactory.GetFont(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString(), defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor)))
                                Else
                                    defaultFont = New iTextSharp.text.Font(bf, defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor))
                                End If
                            Catch exCreateFontEmbeded As Exception
                                Err.Clear()
                            End Try
                    End Select
                    defaultFont.Size = defaultFontSize
                Catch ex As Exception
                    Throw ex
                    TimeStampAdd(ex, debugMode)
                End Try
                Select Case fltType
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                        Dim frmField As iTextSharp.text.pdf.TextField
                        Dim frmFields As New List(Of iTextSharp.text.pdf.TextField)
                        Dim ap As PdfAppearance = Nothing
                        If Not fldname = newFldName Then
                            Try
                                If form.Fields.ContainsKey(fldname) Then
                                    If form.Fields(fldname).Size > 1 Then
                                        If promptMerge Then
                                            Dim msg As New dialogMultiChoice()
                                            Dim strMsg As String = ""
                                            strMsg &= "Rename fields from: """ & fldname & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x " & form.Fields(fldname).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            strMsg &= Environment.NewLine & "To new name: """ & newFldName & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x " & form.Fields(newFldName).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            msg.lblMessage.Text = strMsg & ""
                                            msg.ButtonsClear()
                                            msg.ButtonAdd("Rename all fields", True, 1)
                                            msg.ButtonAdd("This field only", True, 2)
                                            msg.ButtonAdd("Cancel", True, 3)
                                            Select Case msg.ShowDialog(Me, "Rename Fields", msg.ButtonsArray)
                                                Case 2
                                                    If form.Fields.ContainsKey(newFldName) Then
                                                        If form.Fields(newFldName).Size >= 1 Then
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        Else
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        End If
                                                    Else
                                                        If fldKidIndex >= 0 Then
                                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                        End If
                                                        fldNameHighlightedCopy = ""
                                                        fldname = newFldName
                                                        fldNameHighlightedCopy = ""
                                                        fldKidIndex = -1
                                                        fldname = ""
                                                    End If
                                                Case 1
                                                    For indexField As Integer = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size - 1 To 0 Step -1
                                                        If GetFormFieldType(Session("output"), fldname) = fltType Then
                                                            fldKidIndex = indexField
                                                            b = A0_PDFFormField_Modify_ListBox(b.ToArray, fldname, newFldName, textcolor, bgcolor, bordercolor, New iTextSharp.text.Rectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Top)), pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexField), -1, pdfReaderDoc, False)
                                                            Session = b
                                                            LoadPDFReaderDoc(pdfOwnerPassword, True)
                                                        End If
                                                    Next
                                                    Return b.ToArray
                                                Case 3
                                                    Return b.ToArray
                                                Case Else
                                                    Return b.ToArray
                                            End Select
                                            GoTo CONTINUE_NORMAL
                                        End If
                                    End If
                                End If
                                If form.Fields.ContainsKey(newFldName) Then
                                    If form.Fields(newFldName).Size >= 1 Then
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    Else
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    End If
                                Else
                                    If fldKidIndex >= 0 Then
                                        pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                    End If
                                    fldNameHighlightedCopy = ""
                                    fldname = newFldName
                                    fldNameHighlightedCopy = ""
                                    fldKidIndex = -1
                                    fldname = ""
                                End If
                            Catch exRename As Exception
                                Err.Clear()
                            End Try
                        End If
CONTINUE_NORMAL:
                        If Not String.IsNullOrEmpty(fldname) Then
                            If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.KIDS) Is Nothing Then
                                If iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size >= 1 Then
                                    Dim indexField As Integer = 0
                                    For indexField = 0 To iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size - 1
                                        If Not removeKidFieldIdx = indexField Then
                                            If GetFormFieldType(Session("output"), fldname) = fltType Then
                                                frmFields.Add(form.GetNewListboxFromField(fldname, indexField, stmp.Writer))
                                            Else
                                                frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                                form.DecodeGenericDictionary(iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(indexField), frmField)
                                                frmFields.Add(frmField)
                                            End If
                                        End If
                                    Next
                                    frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                    If fldKidIndex < 0 Then
                                        frmFields.Add(frmField)
                                    End If
                                Else
                                    frmField = form.GetNewListboxFromField(fldname, fldKidIndex, stmp.Writer)
                                    frmFields.Add(frmField)
                                End If
                            Else
                                If fldKidIndex < 0 Then
                                    frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                    frmFields.Add(frmField)
                                    frmFields.Add(frmField)
                                Else
                                    frmField = form.GetNewListboxFromField(fldname, fldKidIndex, stmp.Writer)
                                    frmFields.Add(frmField)
                                End If
                            End If
                        Else
                            Dim indexField As Integer = 0
                            If fldKidIndex < 0 Then
                                frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                                frmFields.Add(frmField)
                                indexField += 1
                            Else
                                frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                            End If
                        End If
                        frmField = New iTextSharp.text.pdf.TextField(stmp.Writer, newRect, newFldName)
                        frmField.TextColor = textcolor
                        frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                        frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                        frmField.FieldName = newFldName
                        frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                        frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                        frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                        frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                        frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                        If Not defaultFont Is Nothing Then
                            frmField.Font = defaultFont.BaseFont
                        End If
                        If defaultFontSize >= 0 Then
                            frmField.FontSize = defaultFontSize
                        End If
                        If newRect Is Nothing Then
                            newRect = frmField.Box
                        Else
                            frmField.Box = newRect
                        End If
                        Dim intFF As Integer = 0
                        If ListBox_Options_Commit.Checked Then
                            intFF += 67108864
                        ElseIf ListBox_Options_MultipleSelection.Checked Then
                            intFF += iTextSharp.text.pdf.TextField.MULTISELECT
                        End If
                        Dim opt As New PdfArray
                        frmField.Options = intFF
                        Dim optItemsDisplay As New List(Of String), optItemsValue As New List(Of String)
                        If Not ComboBox_ItemDisplay.Items Is Nothing Then
                            For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                                optItemsDisplay.Add(CStr(ComboBox_ItemDisplay.Items(i).ToString & "") & "")
                                If Not String.IsNullOrEmpty(ComboBox_ItemValue.Items(i).ToString.Trim() & "") Then
                                    optItemsValue.Add(CStr(ComboBox_ItemValue.Items(i).ToString & "") & "")
                                Else
                                    optItemsValue.Add(CStr(ComboBox_ItemDisplay.Items(i).ToString & "").Trim() & "")
                                End If
                                If ComboBox_ItemDisplay.SelectedItems.Contains(ComboBox_ItemDisplay.Items(i)) Then
                                    selIndex.Add(CInt(i))
                                    selValues.Add(CStr(optItemsValue(optItemsValue.Count - 1) & ""))
                                End If
                            Next
                            frmField.Choices = optItemsDisplay.ToArray
                            frmField.ChoiceExports = optItemsValue.ToArray
                        End If
                        If Not String.IsNullOrEmpty(btnComboBox_ItemDefault.Text & "") Then
                            If ListBox_Options_MultipleSelection.Checked Then
                                For Each lstSelection As String In btnComboBox_ItemDefault.Text.ToString.Split(","c)
                                    If Not selIndex.Contains(CInt(lstSelection)) Then
                                        selIndex.Add(CInt(lstSelection))
                                    End If
                                    If Not selValues.Contains(CStr(optItemsValue(lstSelection) & "")) Then
                                        selValues.Add(CStr(optItemsValue(lstSelection) & ""))
                                    End If
                                Next
                            Else
                                If Not selIndex.Contains(CInt(btnComboBox_ItemDefault.Text.ToString)) Then
                                    selIndex.Add(CInt(btnComboBox_ItemDefault.Text.ToString))
                                End If
                                If Not selValues.Contains(CStr(optItemsValue(CInt(btnComboBox_ItemDefault.Text.ToString)) & "")) Then
                                    selValues.Add(CStr(optItemsValue(CInt(btnComboBox_ItemDefault.Text.ToString)) & ""))
                                End If
                            End If
                        End If
                        Try
                            If Not selIndex Is Nothing Then
                                If selIndex.Count > 0 Then
                                End If
                            End If
                        Catch exSel As Exception
                            TimeStampAdd(exSel, debugMode)
                        End Try
                        Dim fld As PdfFormField = frmField.GetListField
                        Try
                            frmFields(IIf(fldKidIndex < 0, frmFields.Count - 1, fldKidIndex + 0)) = frmField
                        Catch exFrmField As Exception
                            TimeStampAdd(exFrmField, debugMode)
                        End Try
                        Dim fldFlags As Integer = 0
                        If Not fld.Get(PdfName.F) Is Nothing Then
                            If fld.Get(PdfName.F).IsNumber Then
                            End If
                        End If
                        If PDFField_Locked.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                            End If
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            If Not (fldFlags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                            End If
                        End If
                        Select Case PDFField_Visibility.SelectedIndex
                            Case 0
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 1
                                fldFlags += iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN + iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 2
                            Case 3
                                fldFlags += PdfAnnotation.FLAGS_PRINT + PdfAnnotation.FLAGS_NOVIEW
                        End Select
                        If fldFlags > 0 Then
                            fld.Flags = fldFlags
                        End If
                        If PDFField_Required.Checked = True Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_REQUIRED
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            intFF += iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY
                        End If
                        If intFF > 0 Then
                            fld.Put(PdfName.FF, New PdfNumber(intFF))
                        End If
                        If Not String.IsNullOrEmpty(Me.PDFField_Tooltip.Text & "") Then fld.Put(PdfName.TU, New PdfString(Me.PDFField_Tooltip.Text & ""))
                        Dim frmFieldTemp2 As iTextSharp.text.pdf.TextField = frmField
                        If frmFields.Count > 1 Then
                            Try
                                fld = PdfFormField.CreateList(stmp.Writer, New String() {}, 0)
                                If Not frmField.GetListField().Get(PdfName.DA) Is Nothing Then
                                    fld.Put(PdfName.DA, frmField.GetListField().GetAsString(PdfName.DA))
                                End If
                                fld.FieldName = newFldName & ""
                                fld.UserName = PDFField_Tooltip.Text & ""
                                Dim cb As New PdfContentByte(stmp.Writer)
                                ap = cb.CreateAppearance(newRect.Width, newRect.Height)
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                ap.SetGrayFill(0)
                                fld.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, ap)
                                fld.SetFieldFlags(intFF)
                                If Not fld.Get(PdfName.AP) Is Nothing Then
                                    fld.Remove(PdfName.AP)
                                End If
                                If Not fld.Get(PdfName.BS) Is Nothing Then
                                    fld.Remove(PdfName.BS)
                                End If
                                If Not fld.Get(PdfName.DV) Is Nothing Then
                                    fld.Remove(PdfName.DV)
                                End If
                                If Not fld.Get(PdfName.F) Is Nothing Then
                                    fld.Remove(PdfName.F)
                                End If
                                If Not fld.Get(PdfName.MK) Is Nothing Then
                                    fld.Remove(PdfName.MK)
                                End If
                                If Not fld.Get(PdfName.SUBTYPE) Is Nothing Then
                                    fld.Remove(PdfName.SUBTYPE)
                                End If
                                If Not fld.Get(PdfName.TYPE) Is Nothing Then
                                    fld.Remove(PdfName.TYPE)
                                End If
                                If Not fld.Get(PdfName.V) Is Nothing Then
                                    fld.Remove(PdfName.V)
                                End If
                                fld.FieldName = newFldName & ""
                                ap = frmField.GetAppearance().Duplicate()
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Else
                            If PDFField_Copy.Checked Then
                                frmFields.Add(frmField)
                                fld = frmField.GetListField
                                fld.FieldName = newFldName & ""
                                fld.UserName = PDFField_Tooltip.Text & ""
                                ap = frmField.GetAppearance().Duplicate()
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                fld.SetFieldFlags(intFF)
                            Else
                                fld = frmField.GetListField
                                ap = frmField.GetAppearance().Duplicate()
                                ap.SetFontAndSize(defaultFont.BaseFont, defaultFontSize)
                                fld.SetFieldFlags(intFF)
                            End If
                        End If
                        If fldFlags > 0 Then
                            fld.Flags = fldFlags
                        End If
                        If Not String.IsNullOrEmpty(Me.PDFField_Tooltip.Text & "") Then fld.Put(PdfName.TU, New PdfString(Me.PDFField_Tooltip.Text & ""))
                        Dim act As New List(Of PdfAction)
                        Dim actCntr As Integer = -1
                        For Each ma As String In arrayMouseActions.ToArray
                            actCntr += 1
                            act.Add(Nothing)
                            Try
                                If Not PDFField_Actions_TreeView.Nodes(ma) Is Nothing Then
                                    For Each a As TreeNode In PDFField_Actions_TreeView.Nodes(ma).Nodes
                                        If a.Text.ToLower = "SubmitForm".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim Flags As Integer = 0
                                            If Not a.Nodes("FLAGS") Is Nothing Then
                                                Flags = CInt(a.Nodes("FLAGS").Nodes(0).Text.ToString.Replace("TreeNode: ", ""))
                                            End If
                                            Dim pdfArrayFieldNames As PdfArray = Nothing
                                            If Not a.Nodes("FIELDS") Is Nothing Then
                                                pdfArrayFieldNames = New PdfArray
                                                For Each fldNameTreeNode As TreeNode In a.Nodes("FIELDS").Nodes
                                                    If Not String.IsNullOrEmpty(fldNameTreeNode.Text) Then
                                                        pdfArrayFieldNames.Add(New PdfString(fldNameTreeNode.Text))
                                                    End If
                                                Next
                                            End If
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act(actCntr).Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                            Else
                                                Dim act2 As PdfAction = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act2.Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                                act(actCntr).Next(act2)
                                            End If
                                        ElseIf a.Text.ToLower = "Javascript".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer)
                                            Else
                                                act(actCntr).Next(iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer))
                                            End If
                                        ElseIf a.Text.ToLower = "Named".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim action As New PdfAction()
                                            action.Put(PdfName.S, PdfName.NAMED)
                                            action.Put(PdfName.N, New PdfName(s.Text.ToString))
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = action
                                            Else
                                                act(actCntr).Next(action)
                                            End If
                                        End If
                                    Next
                                    If frmFields.ToArray.Count <= 1 Then
                                        If Not act(actCntr) Is Nothing Then
                                            Dim actItem As PdfAction = act(actCntr)
                                            If actItem.Keys.Count > 0 Then
                                                Select Case ma.ToString.ToLower
                                                    Case "mouse up"
                                                        fld.Action = act(actCntr)
                                                    Case "mouse down"
                                                        fld.SetAdditionalActions(PdfName.D, act(actCntr))
                                                    Case "mouse enter"
                                                        fld.SetAdditionalActions(PdfName.E, act(actCntr))
                                                    Case "mouse exit"
                                                        fld.SetAdditionalActions(PdfName.X, act(actCntr))
                                                    Case "on blur"
                                                        fld.SetAdditionalActions(PdfName.BL, act(actCntr))
                                                    Case "on focus"
                                                        fld.SetAdditionalActions(PdfName.FO, act(actCntr))
                                                End Select
                                            End If
                                        End If
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Next
                        Dim aa As PdfDictionary = Nothing
                        Try
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Format_Script.Text & "") Then
                                aa = New PdfDictionary
                                aa.Put(PdfAnnotation.AA_JS_FORMAT, PdfAction.JavaScript(PDFField_Format_Custom_Format_Script.Text & "", stmp.Writer))
                                fld.SetAdditionalActions(PdfAnnotation.AA_JS_FORMAT, iTextSharp.text.pdf.PdfAction.JavaScript(CStr(Me.PDFField_Format_Custom_Format_Script.Text & "").Trim() & "", stmp.Writer))
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.F) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.F)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Keystroke_Script.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                aa.Put(PdfAnnotation.AA_JS_KEY, PdfAction.JavaScript(PDFField_Format_Custom_Keystroke_Script.Text & "", stmp.Writer))
                                fld.SetAdditionalActions(PdfAnnotation.AA_JS_KEY, iTextSharp.text.pdf.PdfAction.JavaScript(CStr(Me.PDFField_Format_Custom_Keystroke_Script.Text & "").Trim() & "", stmp.Writer))
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.K) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.K)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                aa.Put(PdfAnnotation.AA_JS_CHANGE, PdfAction.JavaScript(PDFField_Validation_Range_Custom.Text & "", stmp.Writer))
                                fld.SetAdditionalActions(PdfAnnotation.AA_JS_CHANGE, PdfAction.JavaScript(PDFField_Validation_Range_Custom.Text & "", stmp.Writer))
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.V) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.V)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text & "") And PDFField_SelectionChanged_ExecuteJavaScript.Checked Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                aa.Put(PdfAnnotation.AA_JS_KEY, PdfAction.JavaScript(PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text & "", stmp.Writer))
                                fld.SetAdditionalActions(PdfAnnotation.AA_JS_KEY, PdfAction.JavaScript(PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text & "", stmp.Writer))
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(New PdfName("C")) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), New PdfName("C"))
                                    End If
                                End If
                            End If
                            If frmFields.Count > 1 Then
                                If Not aa Is Nothing Then
                                    fld.Put(PdfName.AA, aa)
                                Else
                                    If Not fld.Get(PdfName.AA) Is Nothing Then
                                        fld.Remove(PdfName.AA)
                                    End If
                                End If
                            End If
                        Catch exFormat As Exception
                            TimeStampAdd(exFormat, debugMode)
                        End Try
                        Try
                            If fldKidIndex < 0 Then
                                frmFields(frmFields.Count - 1) = (frmField)
                            Else
                                frmFields(fldKidIndex) = (frmField)
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            If frmFields.Count > 1 Then
                                Try
                                    Dim itmFld As iTextSharp.text.pdf.AcroFields.Item = pdfReaderDoc.AcroFields.GetFieldItem(fldname)
                                    If frmFields.Count > 1 Then
                                        Dim indexKid As Integer = 0
                                        Dim dictKid As New PdfDictionary
                                        Dim arrKids As New PdfArray
                                        Dim fldPages As New List(Of Integer)
                                        Dim fldActions As New List(Of PdfDictionary)
                                        Dim fldAA As New List(Of PdfDictionary)
                                        Dim formTmp As AcroFields = pdfReaderDoc.AcroFields
                                        Dim flditem As AcroFields.Item = formTmp.GetFieldItem(fldname)
                                        Dim fldRect As New List(Of PdfRectangle)
                                        For Each fldKids As iTextSharp.text.pdf.TextField In frmFields.ToArray()
                                            If (indexKid = fldKidIndex) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                                fldPages.Add(Me.page)
                                                fldActions.Add(Nothing)
                                                fldAA.Add(Nothing)
                                                fldRect.Add(New PdfRectangle(newRect))
                                                indexKid += 1
                                            Else
                                                fldPages.Add(pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexKid))
                                                fldActions.Add(Nothing)
                                                fldAA.Add(Nothing)
                                                fldRect.Add(New PdfRectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Top)))
                                                indexKid += 1
                                            End If
                                        Next
                                        indexKid = 0
                                        For Each fldKids As iTextSharp.text.pdf.TextField In frmFields.ToArray()
                                            If (fldKidIndex = indexKid) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                                Dim frmFieldTemp As iTextSharp.text.pdf.TextField = frmField
                                                frmFieldTemp.Box = New iTextSharp.text.Rectangle(fldRect(indexKid).Left, fldRect(indexKid).Bottom, fldRect(indexKid).Right, fldRect(indexKid).Top)
                                                Dim k As PdfFormField = frmFieldTemp.GetListField
                                                k.PlaceInPage = pageNumber
                                                k.Color = frmField.TextColor
                                                k.MKBorderColor = frmField.BorderColor
                                                k.BorderStyle = New PdfBorderDictionary(frmField.BorderWidth, frmField.BorderStyle, New PdfDashPattern(CSng(IIf(frmField.BorderStyle = 1, 3, 0))))
                                                k.MKBackgroundColor = frmField.BackgroundColor
                                                k.MKRotation = frmField.Rotation + 0
                                                k.MKTextPosition = frmField.Alignment + 0
                                                If Not k.Get(PdfName.I) Is Nothing Then
                                                    k.Remove(PdfName.I)
                                                End If
                                                If Not k.Get(PdfName.V) Is Nothing Then
                                                    k.Remove(PdfName.V)
                                                End If
                                                If Not k.Get(PdfName.OPT) Is Nothing Then
                                                    k.Remove(PdfName.OPT)
                                                End If
                                                k.Remove(PdfName.T)
                                                Try
                                                    If Not k.Get(PdfName.AA) Is Nothing Then
                                                        RemoveObject(k, PdfName.AA)
                                                    End If
                                                Catch ex As Exception
                                                    TimeStampAdd(ex, debugMode)
                                                End Try
                                                fld.AddKid(k)
                                                stmp.AddAnnotation(k, pageNumber)
                                            Else
                                                Dim frmFieldTemp As iTextSharp.text.pdf.TextField = frmField
                                                frmFieldTemp.Box = New iTextSharp.text.Rectangle(fldRect(indexKid).Left, fldRect(indexKid).Bottom, fldRect(indexKid).Right, fldRect(indexKid).Top)
                                                Dim k As PdfFormField = frmFieldTemp.GetListField
                                                Dim actions1 As New PdfAction
                                                If Not fldActions(indexKid) Is Nothing Then
                                                    k.Put(PdfName.A, fldActions(indexKid))
                                                End If
                                                If Not fldAA(indexKid) Is Nothing Then
                                                    k.Put(PdfName.AA, fldAA(indexKid))
                                                End If
                                                k.PlaceInPage = fldPages(indexKid)
                                                k.Color = frmField.TextColor
                                                k.MKBorderColor = frmField.BorderColor
                                                k.BorderStyle = New PdfBorderDictionary(frmField.BorderWidth, frmField.BorderStyle, New PdfDashPattern(CSng(IIf(frmField.BorderStyle = 1, 3, 0))))
                                                k.MKBackgroundColor = frmField.BackgroundColor
                                                k.MKRotation = frmField.Rotation + 0
                                                k.MKTextPosition = frmField.Alignment + 0
                                                If Not k.Get(PdfName.AA) Is Nothing Then
                                                    RemoveObject(k, PdfName.AA)
                                                End If
                                                If Not k.Get(PdfName.I) Is Nothing Then
                                                    k.Remove(PdfName.I)
                                                End If
                                                If Not k.Get(PdfName.V) Is Nothing Then
                                                    k.Remove(PdfName.V)
                                                End If
                                                If Not k.Get(PdfName.OPT) Is Nothing Then
                                                    k.Remove(PdfName.OPT)
                                                End If
                                                k.Remove(PdfName.T)
                                                fld.AddKid(k)
                                                stmp.AddAnnotation(k, fldPages(indexKid))
                                            End If
                                            indexKid += 1
                                        Next
                                        If Not fld.GetAsDict(PdfName.A) Is Nothing Then
                                            RemoveObject(fld, PdfName.A)
                                        End If
                                        Try
                                            If Not fld.Get(PdfName.AP) Is Nothing Then
                                                fld.Remove(PdfName.AP)
                                            End If
                                            If Not fld.Get(PdfName.RECT) Is Nothing Then
                                                fld.Remove(PdfName.RECT)
                                            End If
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                    Else
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Else
                            End If
                            If frmFields.Count > 1 Then
                            End If
                        Else
                        End If
                        fld.Put(PdfName.OPT, frmFieldTemp2.GetListField().GetAsArray(PdfName.OPT))
                        If Not aa Is Nothing Then
                            fld.Put(PdfName.AA, aa)
                        Else
                            If Not fld.Get(PdfName.AA) Is Nothing Then
                                fld.Remove(PdfName.AA)
                            End If
                        End If
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            Try
                                If Not String.IsNullOrEmpty(fldname & "") Then form.RemoveField(fldname)
                            Catch exRemoveField As Exception
                                TimeStampAdd(exRemoveField, debugMode)
                            End Try
                            Dim o As Integer = fld.GetAsNumber(PdfName.FF).IntValue
                            fld.SetFieldFlags(intFF)
                            fld.Flags = fldFlags
                            stmp.AddAnnotation(fld, pageNumber)
                            If Not String.IsNullOrEmpty(PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text & "") Then
                                AddCalculationOrder(fld, stmp)
                            End If
                            form = stmp.AcroFields
                        Else
                            stmp.AddAnnotation(fld, pageNumber)
                            If Not String.IsNullOrEmpty(PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text & "") Then
                                AddCalculationOrder(fld, stmp)
                            End If
                            form = stmp.AcroFields
                        End If
                End Select
            Else
            End If
            stmp.Writer.CloseStream = False
            stmp.Close()
            If memStream.CanSeek Then
                memStream.Position = 0
            End If
            b = memStream.ToArray
            Try
                If Not selIndex Is Nothing Then
                    If selIndex.Count > 0 Then
                        If Not selValues Is Nothing Then
                            If selValues.Count > 0 Then
                                memStream = New MemoryStream
                                stmp = getStamper(New PdfReader(b.ToArray, getBytes(pdfOwnerPassword)), memStream)
                                stmp.AcroFields.SetListSelection(newFldName, selValues.ToArray())
                                stmp.Writer.CloseStream = False
                                stmp.Close()
                                If memStream.CanSeek Then
                                    memStream.Position = 0
                                End If
                                b = memStream.ToArray
                            End If
                        End If
                    End If
                End If
            Catch exSel As Exception
                TimeStampAdd(exSel, debugMode)
            End Try
            memStream.Close()
            memStream.Dispose()
            cUserRect.pauseDraw = True
            cUserRect.pauseDraw = False
            Return b
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        cUserRect.pauseDraw = True
        cUserRect.pauseDraw = False
        Return b
    End Function
    Public Function A0_PDFFormField_Modify_Signature(ByVal b() As Byte, ByVal fldname As String, ByVal newFldName As String, ByVal textcolor As iTextSharp.text.BaseColor, ByVal bgcolor As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal newRect As iTextSharp.text.Rectangle, Optional ByVal pageNumber As Integer = -1, Optional ByVal removeKidFieldIdx As Integer = -1, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing, Optional ByVal promptMerge As Boolean = True) As Byte()
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword & ""))
            Else
                pdfReaderDocTemp = pdfReaderDoc.Clone
            End If
            If pageNumber <= 0 Then
                pageNumber = CInt(page) + 0
            End If
        Catch ex As Exception
            pdfReaderDocTemp = pdfReaderDoc
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            Dim memStream As New MemoryStream
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            Dim stmp As PdfStamper = getStamper(pdfReaderDocTemp, memStream)
            Try
                If Not stmp.AcroFields.GenerateAppearances = True Then
                    If Not stmp.AcroFields.Fields Is Nothing Then stmp.AcroFields.GenerateAppearances = True
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim form As iTextSharp.text.pdf.AcroFields = stmp.AcroFields
            If True = True Then
                Dim fltType As Integer = -1
                Select Case ComboBox1.SelectedItem.ToString.ToLower
                    Case "Textbox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                    Case "CheckBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                    Case "ComboBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                    Case "ListBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                    Case "Button".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                    Case "RadioButton".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                    Case "Signature".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                    Case Else
                        Return b
                End Select
                Dim defaultFontSize As Single = 0
                Try
                    If IsNumeric(PDFField_FontSize.Text & "") Then
                        defaultFontSize = CSng(PDFField_FontSize.Text & "") + 0.0F
                    ElseIf (PDFField_FontSize.SelectedIndex > 0) Then
                        defaultFontSize = CSng(PDFField_FontSize.Items(PDFField_FontSize.SelectedIndex).ToString()) + 0.0F
                    Else
                        defaultFontSize = 0.0F
                    End If
                Catch ex As Exception
                    defaultFontSize = 0.0F
                    TimeStampAdd(ex, debugMode)
                End Try
                Dim bf As BaseFont = Nothing
                Dim defaultFont As iTextSharp.text.Font = Nothing
                Try
                    Select Case PDFField_FontFamily.SelectedIndex
                        Case 0
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER, BaseFont.WINANSI, False)
                        Case 1
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLD, BaseFont.CP1252, True)
                        Case 2
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 3
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_OBLIQUE, BaseFont.WINANSI, False)
                        Case 4
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.WINANSI, False)
                        Case 5
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLD, BaseFont.WINANSI, False)
                        Case 6
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 7
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_OBLIQUE, BaseFont.WINANSI, False)
                        Case 8
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, BaseFont.WINANSI, False)
                        Case 9
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLD, BaseFont.WINANSI, False)
                        Case 10
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ITALIC, BaseFont.WINANSI, False)
                        Case 11
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLDITALIC, BaseFont.WINANSI, False)
                        Case 12
                            defaultFont = FontFactory.GetFont(BaseFont.SYMBOL, BaseFont.WINANSI, False)
                        Case 13
                            defaultFont = FontFactory.GetFont(BaseFont.ZAPFDINGBATS, BaseFont.WINANSI, False)
                        Case Else
                            Try
                                bf = findFontInForm(New PdfName(CStr(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString)))
                                If bf Is Nothing Then
                                    defaultFont = New iTextSharp.text.Font(FontFactory.GetFont(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString(), defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor)))
                                Else
                                    defaultFont = New iTextSharp.text.Font(bf, defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor))
                                End If
                            Catch exCreateFontEmbeded As Exception
                                Err.Clear()
                            End Try
                    End Select
                    defaultFont.Size = defaultFontSize
                Catch ex As Exception
                    Throw ex
                    TimeStampAdd(ex, debugMode)
                End Try
                Select Case fltType
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                        Dim frmField As PdfFormField
                        If Not String.IsNullOrEmpty(fldname) Then
                            If Not stmp.Reader.AcroFields.GetFieldItem(fldname) Is Nothing Then
                                Try
                                    If Not String.IsNullOrEmpty(fldname & "") Then form.RemoveField(fldname)
                                Catch exRemoveField As Exception
                                    TimeStampAdd(exRemoveField, debugMode)
                                End Try
                            End If
                        End If
                        frmField = PdfFormField.CreateSignature(stmp.Writer)
                        frmField.SetWidget(New iTextSharp.text.Rectangle(newRect.Left, newRect.Bottom, newRect.Right, newRect.Top), PdfAnnotation.HIGHLIGHT_OUTLINE)
                        frmField.Page = pageNumber
                        frmField.FieldName = newFldName & ""
                        frmField.Flags = PdfAnnotation.FLAGS_PRINT
                        frmField.SetPage()
                        Try
                            frmField.MKRotation = CInt(PDFField_Orientation.SelectedIndex * 90)
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim tp As PdfAppearance = PdfAppearance.CreateAppearance(stmp.Writer, newRect.Width, newRect.Height)
                            Select Case PDFField_BorderStyle.SelectedIndex + 0
                                Case 0
                                    tp.Rectangle(CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, newRect.Width - CSng(PDFField_BorderWidth.SelectedIndex + 1), newRect.Height - CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                    If Not PDFField_BackgroundColorPicker.BackColor = Color.Transparent And Not PDFField_BackgroundColorPicker.BackColor.A <= 0 Then
                                        tp.SetColorFill(New BaseColor(PDFField_BackgroundColorPicker.BackColor))
                                        If Not PDFField_BorderColorPicker.BackColor = Color.Transparent And Not PDFField_BorderColorPicker.BackColor.A <= 0 Then
                                            tp.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                            tp.SetColorStroke(New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A))
                                            tp.ClosePathFillStroke()
                                        Else
                                            tp.Fill()
                                        End If
                                    ElseIf Not PDFField_BorderColorPicker.BackColor = Color.Transparent And Not PDFField_BorderColorPicker.BackColor.A <= 0 Then
                                        tp.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                        tp.SetColorStroke(New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A))
                                        tp.ClosePathStroke()
                                    End If
                                    frmField.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, tp)
                                Case 1
                                    tp.Rectangle(CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, newRect.Width - CSng(PDFField_BorderWidth.SelectedIndex + 1), newRect.Height - CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                    If Not PDFField_BackgroundColorPicker.BackColor = Color.Transparent And Not PDFField_BackgroundColorPicker.BackColor.A <= 0 Then
                                        tp.SetColorFill(New BaseColor(PDFField_BackgroundColorPicker.BackColor))
                                        If Not PDFField_BorderColorPicker.BackColor = Color.Transparent And Not PDFField_BorderColorPicker.BackColor.A <= 0 Then
                                            tp.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                            tp.SetLineDash(3.0F, 3.0F)
                                            tp.SetColorStroke(New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A))
                                            tp.ClosePathFillStroke()
                                        Else
                                            tp.Fill()
                                        End If
                                    ElseIf Not PDFField_BorderColorPicker.BackColor = Color.Transparent And Not PDFField_BorderColorPicker.BackColor.A <= 0 Then
                                        tp.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                        tp.SetLineDash(3.0F, 3.0F)
                                        tp.SetColorStroke(New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A))
                                        tp.ClosePathStroke()
                                    End If
                                    frmField.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, tp)
                                Case 2
                                    If Not PDFField_BackgroundColorPicker.BackColor = Color.Transparent And Not PDFField_BackgroundColorPicker.BackColor.A <= 0 Then
                                        tp.SetColorFill(New BaseColor(PDFField_BackgroundColorPicker.BackColor))
                                    End If
                                    If Not PDFField_BorderColorPicker.BackColor = Color.Transparent And Not PDFField_BorderColorPicker.BackColor.A <= 0 Then
                                        tp.SetColorStroke(New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A))
                                    End If
                                    tp.Rectangle(0, 0, newRect.Width, newRect.Height)
                                    tp.Fill()
                                    tp.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                    tp.Rectangle(CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, newRect.Width - CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, newRect.Height - CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2)
                                    tp.ClosePathStroke()
                                    tp.SaveState()
                                    tp.Rectangle(CSng(PDFField_BorderWidth.SelectedIndex + 1), CSng(PDFField_BorderWidth.SelectedIndex + 1), newRect.Width - CSng(PDFField_BorderWidth.SelectedIndex + 1) * 2, newRect.Height - CSng(PDFField_BorderWidth.SelectedIndex + 1) * 2)
                                    tp.Clip()
                                    tp.NewPath()
                                    tp.RestoreState()
                                    frmField.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, tp)
                                Case 3
                                    tp.Rectangle(0, 0, newRect.Width, newRect.Height)
                                    If Not PDFField_BackgroundColorPicker.BackColor = Color.Transparent And Not PDFField_BackgroundColorPicker.BackColor.A <= 0 Then
                                        tp.SetColorFill(New BaseColor(PDFField_BackgroundColorPicker.BackColor))
                                        tp.Fill()
                                        If Not PDFField_BorderColorPicker.BackColor = Color.Transparent And Not PDFField_BorderColorPicker.BackColor.A <= 0 Then
                                            tp.SetColorStroke(New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A))
                                            tp.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                            tp.Rectangle(0, 0, newRect.Width - CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, newRect.Height - CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2)
                                            tp.ClosePathStroke()
                                            tp.SaveState()
                                            tp.Rectangle(0, 0, newRect.Width - CSng(PDFField_BorderWidth.SelectedIndex + 1) * 2, newRect.Height - CSng(PDFField_BorderWidth.SelectedIndex + 1) * 2)
                                            tp.Clip()
                                            tp.NewPath()
                                            tp.RestoreState()
                                            frmField.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, tp)
                                        Else
                                            frmField.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, tp)
                                        End If
                                    ElseIf Not PDFField_BorderColorPicker.BackColor = Color.Transparent And Not PDFField_BorderColorPicker.BackColor.A <= 0 Then
                                        tp.SetColorStroke(New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A))
                                        tp.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                        tp.Rectangle(0, 0, newRect.Width - CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, newRect.Height - CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2)
                                        tp.ClosePathStroke()
                                        tp.SaveState()
                                        tp.Rectangle(0, 0, newRect.Width - CSng(PDFField_BorderWidth.SelectedIndex + 1) * 2, newRect.Height - CSng(PDFField_BorderWidth.SelectedIndex + 1) * 2)
                                        tp.Clip()
                                        tp.NewPath()
                                        tp.RestoreState()
                                        frmField.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, tp)
                                    End If
                                Case 4
                                    tp.Rectangle(0, 0, newRect.Width, newRect.Height)
                                    If Not PDFField_BackgroundColorPicker.BackColor = Color.Transparent And Not PDFField_BackgroundColorPicker.BackColor.A <= 0 Then
                                        tp.SetColorFill(New BaseColor(PDFField_BackgroundColorPicker.BackColor))
                                        tp.Fill()
                                        If Not PDFField_BorderColorPicker.BackColor = Color.Transparent And Not PDFField_BorderColorPicker.BackColor.A <= 0 Then
                                            tp.SetColorStroke(New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A))
                                            tp.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                            tp.Rectangle(CSng(PDFField_BorderWidth.SelectedIndex + 1) * -0.5, CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, newRect.Width + CSng(PDFField_BorderWidth.SelectedIndex + 1), newRect.Height + CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2)
                                            tp.ClosePathStroke()
                                            tp.SaveState()
                                            tp.Rectangle(CSng(PDFField_BorderWidth.SelectedIndex + 1) * -0.5, CSng(PDFField_BorderWidth.SelectedIndex + 1) * 2, newRect.Width + CSng(PDFField_BorderWidth.SelectedIndex + 1), newRect.Height + CSng(PDFField_BorderWidth.SelectedIndex + 1) * 2)
                                            tp.Clip()
                                            tp.NewPath()
                                            tp.RestoreState()
                                            frmField.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, tp)
                                        Else
                                            frmField.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, tp)
                                        End If
                                    ElseIf Not PDFField_BorderColorPicker.BackColor = Color.Transparent And Not PDFField_BorderColorPicker.BackColor.A <= 0 Then
                                        tp.SetColorStroke(New BaseColor(PDFField_BorderColorPicker.BackColor))
                                        tp.SetLineWidth(CSng(PDFField_BorderWidth.SelectedIndex + 1))
                                        tp.Rectangle(CSng(PDFField_BorderWidth.SelectedIndex + 1) * -0.5, CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2, newRect.Width + CSng(PDFField_BorderWidth.SelectedIndex + 1), newRect.Height + CSng(PDFField_BorderWidth.SelectedIndex + 1) / 2)
                                        tp.ClosePathStroke()
                                        tp.SaveState()
                                        tp.Rectangle(CSng(PDFField_BorderWidth.SelectedIndex + 1) * -0.5, CSng(PDFField_BorderWidth.SelectedIndex + 1) * 2, newRect.Width + CSng(PDFField_BorderWidth.SelectedIndex + 1), newRect.Height + CSng(PDFField_BorderWidth.SelectedIndex + 1) * 2)
                                        tp.Clip()
                                        tp.NewPath()
                                        tp.RestoreState()
                                        frmField.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, tp)
                                    End If
                                Case Else
                                    tp.SetGrayFill(1.0F)
                                    tp.Rectangle(0, 0, newRect.Width, newRect.Height)
                                    tp.Fill()
                                    tp.SetGrayStroke(0)
                                    tp.SetLineWidth(1)
                                    tp.Rectangle(0.5F, 0.5F, newRect.Width - 0.5F, newRect.Height - 0.5F)
                                    tp.ClosePathStroke()
                                    tp.SaveState()
                                    tp.Rectangle(1, 1, newRect.Width - 2, newRect.Height - 2)
                                    tp.Clip()
                                    tp.NewPath()
                                    tp.RestoreState()
                                    frmField.SetAppearance(PdfAnnotation.APPEARANCE_NORMAL, tp)
                            End Select
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If Not String.IsNullOrEmpty(Me.PDFField_Tooltip.Text & "") Then frmField.Put(PdfName.TU, New PdfString(Me.PDFField_Tooltip.Text & ""))
                        Dim act As PdfAction = Nothing
                        act = Nothing
                        For Each ma As String In arrayMouseActions.ToArray
                            act = Nothing
                            Try
                                If Not PDFField_Actions_TreeView.Nodes(ma) Is Nothing Then
                                    For Each a As TreeNode In PDFField_Actions_TreeView.Nodes(ma).Nodes
                                        If a.Text.ToLower = "SubmitForm".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim Flags As Integer = 0
                                            If Not a.Nodes("FLAGS") Is Nothing Then
                                                Flags = CInt(a.Nodes("FLAGS").Nodes(0).Text.ToString.Replace("TreeNode: ", ""))
                                            End If
                                            Dim pdfArrayFieldNames As PdfArray = Nothing
                                            If Not a.Nodes("FIELDS") Is Nothing Then
                                                pdfArrayFieldNames = New PdfArray
                                                For Each fldNameTreeNode As TreeNode In a.Nodes("FIELDS").Nodes
                                                    If Not String.IsNullOrEmpty(fldNameTreeNode.Text) Then
                                                        pdfArrayFieldNames.Add(New PdfString(fldNameTreeNode.Text))
                                                    End If
                                                Next
                                            End If
                                            If act Is Nothing Then
                                                act = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act.Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                            Else
                                                Dim act2 As PdfAction = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act2.Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                                act.Next(act2)
                                            End If
                                        ElseIf a.Text.ToLower = "Javascript".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            If act Is Nothing Then
                                                act = iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer)
                                            Else
                                                act.Next(iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer))
                                            End If
                                        ElseIf a.Text.ToLower = "Named".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim action As New PdfAction()
                                            action.Put(PdfName.S, PdfName.NAMED)
                                            action.Put(PdfName.N, New PdfName(s.Text.ToString))
                                            If act Is Nothing Then
                                                act = action
                                            Else
                                                act.Next(action)
                                            End If
                                        End If
                                    Next
                                    If Not act Is Nothing Then
                                        Select Case ma.ToString.ToLower
                                            Case "mouse up"
                                                frmField.Action = act
                                            Case "mouse down"
                                                frmField.SetAdditionalActions(PdfName.D, act)
                                            Case "mouse enter"
                                                frmField.SetAdditionalActions(PdfName.E, act)
                                            Case "mouse exit"
                                                frmField.SetAdditionalActions(PdfName.X, act)
                                            Case "on blur"
                                                frmField.SetAdditionalActions(PdfName.BL, act)
                                            Case "on focus"
                                                frmField.SetAdditionalActions(PdfName.FO, act)
                                        End Select
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Next
                        If Not PDFField_BorderColorPicker.BackColor = Nothing And Not PDFField_BorderColorPicker.BackColor = Color.Transparent Then
                            frmField.MKBorderColor = New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A)
                        End If
                        If Not PDFField_BackgroundColorPicker.BackColor = Nothing And Not PDFField_BackgroundColorPicker.BackColor = Color.Transparent Then
                            frmField.MKBackgroundColor = New BaseColor(PDFField_BackgroundColorPicker.BackColor)
                        End If
                        If Not PDFField_TextColorPicker.BackColor = Nothing And Not PDFField_TextColorPicker.BackColor = Color.Transparent Then
                            frmField.Color = New BaseColor(PDFField_TextColorPicker.BackColor)
                        End If
                        Try
                            Dim bs As New PdfDictionary
                            bs.Put(PdfName.W, New PdfNumber(PDFField_BorderWidth.SelectedIndex + 1))
                            Select Case PDFField_BorderStyle.SelectedIndex
                                Case 1
                                    bs.Put(PdfName.S, PdfName.D)
                                Case 2
                                    bs.Put(PdfName.S, PdfName.B)
                                Case 3
                                    bs.Put(PdfName.S, PdfName.I)
                                Case 4
                                    bs.Put(PdfName.S, PdfName.U)
                            End Select
                            frmField.Put(PdfName.BS, bs)
                            frmField.BorderStyle = bs
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim strJSKeyStrokeTmp As String = ""
                            Dim lock As PdfDictionary = Nothing
                            If PDFField_Signed_ReadOnly.Checked = True Then
                                Dim strLockAction As String = ""
                                Dim strLockActionType As String = ""
                                strLockActionType = "SigFieldLock"
                                lock = New PdfDictionary(PdfName.F)
                                Select Case PDFField_Signed_ReadOnlyType_ComboBox.SelectedIndex
                                    Case 0
                                        strLockAction = "All"
                                        lock.Put(PdfName.TYPE, New PdfName(strLockActionType))
                                        lock.Put(PdfName.ACTION, New PdfName(strLockAction))
                                    Case 1
                                        strLockAction = "Exclude"
                                        lock.Put(PdfName.TYPE, New PdfName(strLockActionType))
                                        lock.Put(PdfName.ACTION, New PdfName(strLockAction))
                                        If Not PDFField_Signed_ReadOnly_Textbox.Text = "" Then
                                            Dim arrFields As New PdfArray()
                                            For Each strField As String In PDFField_Signed_ReadOnly_Textbox.Text.ToString.Replace(", ", ",").Split(CStr(","c)).ToArray
                                                arrFields.Add(New PdfString(strField.ToString.Trim()))
                                            Next
                                            lock.Put(PdfName.FIELDS, arrFields)
                                        End If
                                    Case 2
                                        strLockAction = "Include"
                                        lock.Put(PdfName.TYPE, New PdfName(strLockActionType))
                                        lock.Put(PdfName.ACTION, New PdfName(strLockAction))
                                        If Not PDFField_Signed_ReadOnly_Textbox.Text = "" Then
                                            Dim arrFields As New PdfArray()
                                            For Each strField As String In PDFField_Signed_ReadOnly_Textbox.Text.ToString.Replace(", ", ",").Split(CStr(","c)).ToArray
                                                arrFields.Add(New PdfString(strField.ToString.Trim()))
                                            Next
                                            lock.Put(PdfName.FIELDS, arrFields)
                                        End If
                                End Select
                                Dim indirectRef As PdfIndirectReference = stmp.Reader.AddPdfObject(lock)
                                frmField.Put(PdfName.LOCK, indirectRef)
                            ElseIf PDFField_Signed_ExecuteScript.Checked = True Then
                                lock = New PdfDictionary()
                                If Not String.IsNullOrEmpty(PDFField_Signed_ExecuteScript_Textbox.Text & "") Then
                                    Dim f As New PdfString(PDFField_Signed_ExecuteScript_Textbox.Text & "")
                                    lock.Put(PdfName.JS, f)
                                    lock.Put(PdfName.S, New PdfName("JavaScript"))
                                    Dim indirectRef As PdfIndirectReference = stmp.Reader.AddPdfObject(lock)
                                    Dim aa As PdfDictionary
                                    If frmField.Get(PdfName.AA) Is Nothing Then
                                        aa = New PdfDictionary
                                        aa.Put(PdfName.F, indirectRef)
                                        frmField.Put(PdfName.AA, aa)
                                    Else
                                        aa = frmField.GetAsDict(PdfName.AA)
                                        aa.Put(PdfName.F, indirectRef)
                                    End If
                                End If
                            Else
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If Not String.IsNullOrEmpty(fldname & "") Then
                                Try
                                Catch exRemoveField As Exception
                                    TimeStampAdd(exRemoveField, debugMode)
                                End Try
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        Finally
                            stmp.AddAnnotation(frmField, pageNumber)
                        End Try
                End Select
            Else
            End If
            stmp.Writer.CloseStream = False
            stmp.Close()
            If memStream.CanSeek Then
                memStream.Position = 0
            End If
            b = memStream.ToArray
            memStream.Close()
            memStream.Dispose()
            cUserRect.pauseDraw = True
            cUserRect.pauseDraw = False
            Return b
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        cUserRect.pauseDraw = True
        cUserRect.pauseDraw = False
        Return b
    End Function
    Public Sub CleanUpFields()
        Dim pages As PdfDictionary = Nothing
        LoadPDFReaderDoc(pdfOwnerPassword, True)
        Try
            Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
            If Not (acroForm Is Nothing) Then
goto_StartFieldsAgain:
                Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                For field As Integer = 0 To fields.Size - 1
                    Try
                        If fields(field).IsIndirect Then
                            If Not fields.GetAsStream(field) Is Nothing Then
                                Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                PdfReader.KillIndirect(io)
                                fields.Remove(field)
                                GoTo goto_StartFieldsAgain
                            End If
                        End If
                    Catch exStream As Exception
                        Err.Clear()
                    End Try
                    If Not fields.GetAsDict(field) Is Nothing Then
                        If fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                            If fields.GetAsDict(field).Get(PdfName.RECT) Is Nothing Then
                                If Not fields.GetAsDict(field).GetAsArray(PdfName.KIDS) Is Nothing Then
                                    If fields.GetAsDict(field).GetAsArray(PdfName.KIDS).Size <= 0 Then
                                        If fields(field).IsIndirect Then
                                            Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                            PdfReader.KillIndirect(io)
                                        End If
                                        fields.Remove(field)
                                        GoTo goto_StartFieldsAgain
                                    End If
                                Else
                                    If fields(field).IsIndirect Then
                                        Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                        PdfReader.KillIndirect(io)
                                    End If
                                    fields.Remove(field)
                                    GoTo goto_StartFieldsAgain
                                End If
                            End If
                        ElseIf fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.Trim = "" Then
                            If True = True Then
                                If True = True Then
goto_StartAnnotsOver3:
                                End If
                                If fields.GetAsDict(field).Get(PdfName.RECT) Is Nothing Then
                                    If Not fields.GetAsDict(field).GetAsArray(PdfName.KIDS) Is Nothing Then
                                        If fields.GetAsDict(field).GetAsArray(PdfName.KIDS).Size <= 0 Then
                                            If fields(field).IsIndirect Then
                                                Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                                PdfReader.KillIndirect(io)
                                            End If
                                            fields.Remove(field)
                                            GoTo goto_StartFieldsAgain
                                        End If
                                    Else
                                        If fields(field).IsIndirect Then
                                            Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                            PdfReader.KillIndirect(io)
                                        End If
                                        fields.Remove(field)
                                        GoTo goto_StartFieldsAgain
                                    End If
                                End If
                            Else
                                If fields.GetAsDict(field).Get(PdfName.RECT) Is Nothing Then
                                    If Not fields.GetAsDict(field).GetAsArray(PdfName.KIDS) Is Nothing Then
                                        If fields.GetAsDict(field).GetAsArray(PdfName.KIDS).Size <= 0 Then
                                            If fields(field).IsIndirect Then
                                                Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                                PdfReader.KillIndirect(io)
                                            End If
                                            fields.Remove(field)
                                            GoTo goto_StartFieldsAgain
                                        End If
                                    Else
                                        If fields(field).IsIndirect Then
                                            Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                            PdfReader.KillIndirect(io)
                                        End If
                                        fields.Remove(field)
                                        GoTo goto_StartFieldsAgain
                                    End If
                                End If
                            End If
                        End If
                    End If
                Next
            End If
goto_StartFieldsAgainX:
            Dim pagesArray As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.PAGES), PdfDictionary)
            If Not (pagesArray Is Nothing) Then
                Dim kids As PdfArray = pagesArray.GetAsArray(PdfName.KIDS)
                If Not (kids Is Nothing) Then
                    For kidIndex As Integer = 0 To kids.Size - 1
goto_StartAnnotsOver2X:
                        Dim pageDic As PdfDictionary = kids.GetAsDict(kidIndex)
                        Dim fields As PdfArray = pageDic.GetAsArray(PdfName.ANNOTS)
                        For field As Integer = 0 To fields.Size - 1
                            If Not fields.GetAsDict(field) Is Nothing Then
                                If fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                    If fields(field).IsIndirect Then
                                        If fields.GetAsDict(field).Get(PdfName.RECT) Is Nothing Then
                                            If Not fields.GetAsDict(field).GetAsArray(PdfName.KIDS) Is Nothing Then
                                                If fields.GetAsDict(field).GetAsArray(PdfName.KIDS).Size <= 0 Then
                                                    If fields(field).IsIndirect Then
                                                        Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                                        PdfReader.KillIndirect(io)
                                                    End If
                                                    fields.Remove(field)
                                                    GoTo goto_StartFieldsAgainX
                                                End If
                                            Else
                                                If fields(field).IsIndirect Then
                                                    Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                                    PdfReader.KillIndirect(io)
                                                End If
                                                fields.Remove(field)
                                                GoTo goto_StartFieldsAgainX
                                            End If
                                        End If
                                    ElseIf fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.Trim = "" Then
goto_StartAnnotsOver3X:
                                        If fields.GetAsDict(field).Get(PdfName.RECT) Is Nothing Then
                                            If Not fields.GetAsDict(field).GetAsArray(PdfName.KIDS) Is Nothing Then
                                                If fields.GetAsDict(field).GetAsArray(PdfName.KIDS).Size <= 0 Then
                                                    If fields(field).IsIndirect Then
                                                        Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                                        PdfReader.KillIndirect(io)
                                                    End If
                                                    fields.Remove(field)
                                                    GoTo goto_StartFieldsAgainX
                                                End If
                                            Else
                                                If fields(field).IsIndirect Then
                                                    Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                                    PdfReader.KillIndirect(io)
                                                End If
                                                fields.Remove(field)
                                                GoTo goto_StartFieldsAgainX
                                            End If
                                        End If
                                    Else
                                        If fields.GetAsDict(field).Get(PdfName.RECT) Is Nothing Then
                                            If Not fields.GetAsDict(field).GetAsArray(PdfName.KIDS) Is Nothing Then
                                                If fields.GetAsDict(field).GetAsArray(PdfName.KIDS).Size <= 0 Then
                                                    If fields(field).IsIndirect Then
                                                        Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                                        PdfReader.KillIndirect(io)
                                                    End If
                                                    fields.Remove(field)
                                                    GoTo goto_StartFieldsAgainX
                                                End If
                                            Else
                                                If fields(field).IsIndirect Then
                                                    Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                                    PdfReader.KillIndirect(io)
                                                End If
                                                fields.Remove(field)
                                                GoTo goto_StartFieldsAgainX
                                            End If
                                        End If
                                    End If
                                End If
                            Else
                                If fields(field).IsIndirect Then
                                    Dim io As PdfObject = PdfReader.GetPdfObject(fields(field))
                                    PdfReader.KillIndirect(io)
                                End If
                                fields.Remove(field)
                                GoTo goto_StartFieldsAgainX
                            End If
                        Next
                    Next
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If True = True Then
                If True = True Then
                    If True = True Then
                        Dim page As PdfDictionary = DirectCast(pdfReaderDoc.GetPageN(CInt(pageIndex) + 1), PdfDictionary)
                        Dim annots As PdfArray = page.GetAsArray(PdfName.ANNOTS)
goto_StartAnnotsOverAnnots:
                        For annotsIdx As Integer = 0 To annots.Size - 1
                            Dim annot As PdfDictionary = Nothing
                            Try
                                If annots(annotsIdx).IsNull Then
                                    annots.Remove(annotsIdx)
                                    GoTo goto_StartAnnotsOverAnnots
                                ElseIf annots.GetAsDict(annotsIdx).Get(PdfName.RECT) Is Nothing Then
                                    annots.Remove(annotsIdx)
                                    GoTo goto_StartAnnotsOverAnnots
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Next
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not pdfReaderDoc.Catalog.GetAsDict(PdfName.PAGES).Get(PdfName.PAGE) Is Nothing And Not pdfReaderDoc.Catalog.GetAsDict(PdfName.PAGES).Get(PdfName.KIDS) Is Nothing Then
                pdfReaderDoc.Catalog.GetAsDict(PdfName.PAGES).Remove(PdfName.PAGE)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Session = getPDFBytes(pdfReaderDoc)
    End Sub
    Public Function A0_PDFFormField_Modify_RadioField(ByVal b() As Byte, ByVal fldname As String, ByVal newFldName As String, ByVal textcolor As iTextSharp.text.BaseColor, ByVal bgcolor As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal newRect As iTextSharp.text.Rectangle, Optional ByVal pageNumber As Integer = -1, Optional ByVal removeKidFieldIdx As Integer = -1, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing, Optional ByVal promptMerge As Boolean = True) As Byte()
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword & ""))
            Else
                pdfReaderDocTemp = pdfReaderDoc.Clone
            End If
            If pageNumber <= 0 Then
                pageNumber = CInt(page) + 0
            End If
        Catch ex As Exception
            pdfReaderDocTemp = pdfReaderDoc
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            Dim memStream As New MemoryStream
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            Dim stmp As PdfStamper = getStamper(pdfReaderDocTemp, memStream)
            Try
                If Not stmp.AcroFields.GenerateAppearances = True Then
                    If Not stmp.AcroFields.Fields Is Nothing Then stmp.AcroFields.GenerateAppearances = True
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim form As iTextSharp.text.pdf.AcroFields = stmp.AcroFields
            If True = True Then
                Dim fltType As Integer = -1
                Select Case ComboBox1.SelectedItem.ToString.ToLower
                    Case "Textbox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                    Case "CheckBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                    Case "ComboBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                    Case "ListBox".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                    Case "Button".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                    Case "RadioButton".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                    Case "Signature".ToLower
                        fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                    Case Else
                        Return b
                End Select
                Dim defaultFontSize As Single = 0
                Try
                    If IsNumeric(PDFField_FontSize.Text & "") Then
                        defaultFontSize = CSng(PDFField_FontSize.Text & "") + 0.0F
                    ElseIf (PDFField_FontSize.SelectedIndex > 0) Then
                        defaultFontSize = CSng(PDFField_FontSize.Items(PDFField_FontSize.SelectedIndex).ToString()) + 0.0F
                    Else
                        defaultFontSize = 0.0F
                    End If
                Catch ex As Exception
                    defaultFontSize = 0.0F
                    TimeStampAdd(ex, debugMode)
                End Try
                Dim bf As BaseFont = Nothing
                Dim defaultFont As iTextSharp.text.Font = Nothing
                Try
                    defaultFont = FontFactory.GetFont(BaseFont.ZAPFDINGBATS, BaseFont.WINANSI, False)
                    defaultFont.Size = defaultFontSize
                Catch ex As Exception
                    Throw ex
                    TimeStampAdd(ex, debugMode)
                End Try
                Select Case fltType
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                        Dim frmField As iTextSharp.text.pdf.RadioCheckField
                        Dim frmFields As New List(Of iTextSharp.text.pdf.RadioCheckField)
                        Dim ap As PdfAppearance = Nothing
                        If Not fldname = newFldName Then
                            Try
                                If form.Fields.ContainsKey(fldname) Then
                                    If form.Fields(fldname).Size > 1 Then
                                        If promptMerge Then
                                            Dim msg As New dialogMultiChoice()
                                            Dim strMsg As String = ""
                                            strMsg &= "Rename fields from: """ & fldname & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x " & form.Fields(fldname).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(fldname), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            strMsg &= Environment.NewLine & "To new name: """ & newFldName & """" & " "
                                            Try
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x " & form.Fields(newFldName).Size, ""))
                                            Catch ex As Exception
                                                strMsg &= CStr(IIf(form.Fields.ContainsKey(newFldName), " x 1", ""))
                                                Err.Clear()
                                            End Try
                                            msg.lblMessage.Text = strMsg & ""
                                            msg.ButtonsClear()
                                            msg.ButtonAdd("Rename all fields", True, 1)
                                            msg.ButtonAdd("This field only", True, 2)
                                            msg.ButtonAdd("Cancel", True, 3)
                                            Select Case msg.ShowDialog(Me, "Rename Fields", msg.ButtonsArray)
                                                Case 2
                                                    If form.Fields.ContainsKey(newFldName) Then
                                                        If form.Fields(newFldName).Size >= 1 Then
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        Else
                                                            If fldKidIndex >= 0 Then
                                                                pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                            End If
                                                            fldNameHighlightedCopy = ""
                                                            fldname = newFldName
                                                            fldNameHighlightedCopy = ""
                                                            fldKidIndex = -1
                                                        End If
                                                    Else
                                                        If fldKidIndex >= 0 Then
                                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                                        End If
                                                        fldNameHighlightedCopy = ""
                                                        fldname = newFldName
                                                        fldNameHighlightedCopy = ""
                                                        fldKidIndex = -1
                                                        fldname = ""
                                                    End If
                                                Case 1
                                                    For indexField As Integer = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size - 1 To 0 Step -1
                                                        If GetFormFieldType(Session("output"), fldname) = fltType Then
                                                            fldKidIndex = indexField
                                                            b = A0_PDFFormField_Modify_RadioField(b.ToArray, fldname, newFldName, textcolor, bgcolor, bordercolor, New iTextSharp.text.Rectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexField).position.Top)), pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexField), -1, pdfReaderDoc, False)
                                                            Session = b
                                                            LoadPDFReaderDoc(pdfOwnerPassword, True)
                                                        End If
                                                    Next
                                                    Return b.ToArray
                                                Case 3
                                                    Return b.ToArray
                                                Case Else
                                                    Return b.ToArray
                                            End Select
                                            GoTo CONTINUE_NORMAL
                                        End If
                                    End If
                                End If
                                If form.Fields.ContainsKey(newFldName) Then
                                    If form.Fields(newFldName).Size >= 1 Then
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    Else
                                        If fldKidIndex >= 0 Then
                                            pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                        End If
                                        fldNameHighlightedCopy = ""
                                        fldname = newFldName
                                        fldNameHighlightedCopy = ""
                                        fldKidIndex = -1
                                    End If
                                Else
                                    If fldKidIndex >= 0 Then
                                        pdfReaderDocTemp.AcroFields.RemoveField(fldname, pageNumber, fldKidIndex)
                                    End If
                                    fldNameHighlightedCopy = ""
                                    fldname = newFldName
                                    fldNameHighlightedCopy = ""
                                    fldKidIndex = -1
                                    fldname = ""
                                End If
                            Catch exRename As Exception
                                Err.Clear()
                            End Try
                        End If
CONTINUE_NORMAL:
                        If Not String.IsNullOrEmpty(fldname) Then
                            Dim radioGroup As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                            If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.KIDS) Is Nothing Then
                                Dim _fields As PdfArray = radioGroup.GetAsArray(PdfName.KIDS)
                                If _fields.Size >= 1 Then
                                    Dim indexField As Integer = 0
                                    For indexField = 0 To _fields.Size - 1
                                        If Not removeKidFieldIdx = indexField Then
                                            Dim _fieldDic As PdfDictionary = Nothing
                                            If Not _fields.GetDirectObject(indexField) Is Nothing Then
                                                _fieldDic = _fields.GetDirectObject(indexField)
                                            ElseIf Not _fields.GetAsIndirectObject(indexField) Is Nothing Then
                                                Dim _fieldDicRef As PRIndirectReference = _fields.GetAsIndirectObject(indexField)
                                                If pdfReaderDoc.GetPdfObject(_fieldDicRef.Number).IsDictionary Then
                                                    _fieldDic = DirectCast(pdfReaderDoc.GetPdfObject(_fieldDicRef.Number), PdfDictionary)
                                                End If
                                            Else
                                                _fieldDic = _fields.GetDirectObject(indexField)
                                            End If
                                            If GetFormFieldType(Session("output"), fldname) = fltType Then
                                                frmField = form.GetNewRadioCheckFieldFromField(fldname, indexField, stmp.Writer)
                                            Else
                                                frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, getRadioButtonOnValue(fldname, indexField))
                                                form.DecodeGenericDictionary(iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(indexField), frmField)
                                            End If
                                            form.DecodeGenericDictionary(_fieldDic, frmField)
                                            frmField.OnValue = IIf(indexField = fldKidIndex, RadioButton_OnValue.Text, getRadioButtonOnValue(fldname, indexField))
                                            frmField.TextColor = textcolor
                                            frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                                            frmField.CheckType = CInt(Me.RadioButton_FieldCheckType.SelectedIndex) + 1
                                            frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                                            frmField.FieldName = newFldName
                                            frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                                            frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                                            frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                                            frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                                            frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                                            frmField.CheckType = CInt(RadioButton_FieldCheckType.SelectedIndex) + 1
                                            If Not defaultFont Is Nothing Then
                                            End If
                                            If defaultFontSize >= 0 Then
                                                frmField.FontSize = defaultFontSize
                                            End If
                                            frmFields.Add(frmField)
                                        End If
                                    Next
                                    If fldKidIndex < 0 Then
                                        frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                        frmFields.Add(frmField)
                                    Else
                                        frmField = frmFields(fldKidIndex)
                                    End If
                                Else
                                    Dim _fieldDic As PdfDictionary = Nothing
                                    If Not _fields.GetDirectObject(fldKidIndex) Is Nothing Then
                                        _fieldDic = DirectCast(_fields.GetDirectObject(fldKidIndex), PdfDictionary)
                                    ElseIf Not _fields.GetAsIndirectObject(fldKidIndex) Is Nothing Then
                                        Dim _fieldDicRef As PRIndirectReference = DirectCast(_fields.GetAsIndirectObject(fldKidIndex), PRIndirectReference)
                                        If pdfReaderDoc.GetPdfObject(_fieldDicRef.Number).IsDictionary Then
                                            _fieldDic = DirectCast(pdfReaderDoc.GetPdfObject(_fieldDicRef.Number), PdfDictionary)
                                        End If
                                    Else
                                        _fieldDic = DirectCast(_fields.GetDirectObject(fldKidIndex), PdfDictionary)
                                    End If
                                    frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                    frmField.OnValue = RadioButton_OnValue.Text & ""
                                    frmField.TextColor = textcolor
                                    frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                                    frmField.CheckType = CInt(Me.RadioButton_FieldCheckType.SelectedIndex) + 1
                                    frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                                    frmField.FieldName = newFldName
                                    frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                                    frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                                    frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                                    frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                                    frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                                    frmField.CheckType = CInt(RadioButton_FieldCheckType.SelectedIndex) + 1
                                    frmFields.Add(frmField)
                                End If
                            Else
                                If fldKidIndex < 0 Then
                                    frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                    form.DecodeGenericDictionary(iTextFieldItemPdfDictionary(fldname), frmField)
                                    frmField.OnValue = RadioButton_OnValue.Text & ""
                                    frmField.TextColor = textcolor
                                    frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                                    frmField.CheckType = CInt(Me.RadioButton_FieldCheckType.SelectedIndex) + 1
                                    frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                                    frmField.FieldName = newFldName
                                    frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                                    frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                                    frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                                    frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                                    frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                                    frmField.CheckType = CInt(RadioButton_FieldCheckType.SelectedIndex) + 1
                                    frmFields.Add(frmField)
                                    frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                    frmFields.Add(frmField)
                                Else
                                    frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                    frmField.OnValue = RadioButton_OnValue.Text & ""
                                    frmField.TextColor = textcolor
                                    frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                                    frmField.CheckType = CInt(Me.RadioButton_FieldCheckType.SelectedIndex) + 1
                                    frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                                    frmField.FieldName = newFldName
                                    frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                                    frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                                    frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                                    frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                                    frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                                    frmField.CheckType = CInt(RadioButton_FieldCheckType.SelectedIndex) + 1
                                    frmFields.Add(frmField)
                                End If
                            End If
                        Else
                            Dim indexField As Integer = 0
                            If fldKidIndex < 0 Then
                                frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                frmField.OnValue = RadioButton_OnValue.Text & ""
                                frmField.TextColor = textcolor
                                frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                                frmField.CheckType = CInt(Me.RadioButton_FieldCheckType.SelectedIndex) + 1
                                frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                                frmField.FieldName = newFldName
                                frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                                frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                                frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                                frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                                frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                                frmField.CheckType = CInt(RadioButton_FieldCheckType.SelectedIndex) + 1
                                frmFields.Add(frmField)
                                indexField += 1
                            Else
                                frmField = New iTextSharp.text.pdf.RadioCheckField(stmp.Writer, newRect, newFldName, RadioButton_OnValue.Text & "")
                                frmField.OnValue = RadioButton_OnValue.Text & ""
                                frmField.TextColor = textcolor
                                frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                                frmField.CheckType = CInt(Me.RadioButton_FieldCheckType.SelectedIndex) + 1
                                frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                                frmField.FieldName = newFldName
                                frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                                frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                                frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                                frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                                frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                                frmField.CheckType = CInt(RadioButton_FieldCheckType.SelectedIndex) + 1
                            End If
                        End If
                        frmField.TextColor = textcolor
                        frmField.BackgroundColor = DirectCast(IIf(bgcolor.A <= 0, Nothing, bgcolor), BaseColor)
                        frmField.CheckType = CInt(Me.RadioButton_FieldCheckType.SelectedIndex) + 1
                        frmField.BorderColor = DirectCast(IIf(bordercolor.A <= 0, Nothing, bordercolor), BaseColor)
                        frmField.FieldName = newFldName
                        frmField.Alignment = Me.PDFField_TextAlign.SelectedIndex + 0
                        frmField.BorderStyle = Me.PDFField_BorderStyle.SelectedIndex + 0
                        frmField.BorderWidth = Me.PDFField_BorderWidth.SelectedIndex + 1
                        frmField.Visibility = CInt(Me.PDFField_Visibility.SelectedIndex + 0)
                        frmField.Rotation = CInt(Me.PDFField_Orientation.SelectedItem.ToString)
                        frmField.CheckType = CInt(RadioButton_FieldCheckType.SelectedIndex) + 1
                        If Not defaultFont Is Nothing Then
                        End If
                        If defaultFontSize >= 0 Then
                            frmField.FontSize = defaultFontSize
                        End If
                        If newRect Is Nothing Then
                            newRect = frmField.Box
                        Else
                            frmField.Box = newRect
                        End If
                        Dim intFF As Integer = 0
                        Dim fldflags As Integer = 0
                        Try
                            If ComboBox_CommitImmediately.Checked = True And ComboBox_CommitImmediately.Enabled Then
                                If Not (intFF And 67108864) = 67108864 Then
                                    intFF += 67108864
                                End If
                            End If
                            If PDFField_Selection.Checked = True And PDFField_Selection.Enabled Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON
                                End If
                            End If
                            If PDFField_CombChk.Checked = True And PDFField_CombChk.Enabled Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_COMB
                                End If
                            End If
                            If PDFField_Scroll.Checked = False Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL
                                End If
                            End If
                            If ComboBox_CheckSpelling.Checked = False And ComboBox_CheckSpelling.Enabled Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK
                                End If
                            End If
                            If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                                intFF += iTextSharp.text.pdf.PdfFormField.FF_RADIO
                            End If
                            If PDFField_Required.Checked = True Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_REQUIRED
                                End If
                            End If
                            If PDFField_ReadOnly.Checked = True Then
                                If Not (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                    intFF += iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        frmField.Options = intFF
                        Dim fld As PdfFormField = Nothing
                        frmField.OnValue = RadioButton_OnValue.Text & ""
                        frmField.Checked = RadioButton_Checked.Checked
                        Try
                            frmFields(IIf(fldKidIndex < 0, frmFields.Count - 1, fldKidIndex + 0)) = frmField
                        Catch exFrmField As Exception
                            TimeStampAdd(exFrmField, debugMode)
                        End Try
                        If fld Is Nothing Then
                            fld = frmField.GetRadioGroup(True, False)
                            fld.FieldName = newFldName
                        End If
                        If fldflags > 0 Then
                            fld.Flags = fldflags
                        End If
                        If Not fld.Get(PdfName.F) Is Nothing Then
                            If fld.Get(PdfName.F).IsNumber Then
                            End If
                        End If
                        If PDFField_Locked.Checked = True Then
                            If Not (fldflags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                fldflags += iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                            End If
                        End If
                        If PDFField_ReadOnly.Checked = True Then
                            If Not (fldflags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                fldflags += iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                            End If
                        End If
                        Select Case PDFField_Visibility.SelectedIndex
                            Case 0
                                fldflags += iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 1
                                fldflags += iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN + iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            Case 2
                            Case 3
                                fldflags += PdfAnnotation.FLAGS_PRINT + PdfAnnotation.FLAGS_NOVIEW
                        End Select
                        If frmFields.Count > 1 Then
                            Try
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Else
                            If PDFField_Copy.Checked Then
                                frmFields.Add(frmField)
                                fld.SetFieldFlags(intFF)
                            Else
                            End If
                        End If
                        If fldflags > 0 Then
                            fld.Flags = fldflags
                        End If
                        If Not String.IsNullOrEmpty(Me.PDFField_Tooltip.Text & "") Then fld.Put(PdfName.TU, New PdfString(Me.PDFField_Tooltip.Text & ""))
                        Dim act As New List(Of PdfAction)
                        Dim actCntr As Integer = -1
                        For Each ma As String In arrayMouseActions.ToArray
                            actCntr += 1
                            act.Add(Nothing)
                            Try
                                If Not PDFField_Actions_TreeView.Nodes(ma) Is Nothing Then
                                    For Each a As TreeNode In PDFField_Actions_TreeView.Nodes(ma).Nodes
                                        If a.Text.ToLower = "SubmitForm".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim Flags As Integer = 0
                                            If Not a.Nodes("FLAGS") Is Nothing Then
                                                Flags = CInt(a.Nodes("FLAGS").Nodes(0).Text.ToString.Replace("TreeNode: ", ""))
                                            End If
                                            Dim pdfArrayFieldNames As PdfArray = Nothing
                                            If Not a.Nodes("FIELDS") Is Nothing Then
                                                pdfArrayFieldNames = New PdfArray
                                                For Each fldNameTreeNode As TreeNode In a.Nodes("FIELDS").Nodes
                                                    If Not String.IsNullOrEmpty(fldNameTreeNode.Text) Then
                                                        pdfArrayFieldNames.Add(New PdfString(fldNameTreeNode.Text))
                                                    End If
                                                Next
                                            End If
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act(actCntr).Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                            Else
                                                Dim act2 As PdfAction = iTextSharp.text.pdf.PdfAction.CreateSubmitForm(s.Text.ToString, Nothing, Flags)
                                                If Not pdfArrayFieldNames Is Nothing Then
                                                    act2.Put(PdfName.FIELDS, pdfArrayFieldNames)
                                                End If
                                                act(actCntr).Next(act2)
                                            End If
                                        ElseIf a.Text.ToLower = "Javascript".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer)
                                            Else
                                                act(actCntr).Next(iTextSharp.text.pdf.PdfAction.JavaScript(s.Text.ToString, stmp.Writer))
                                            End If
                                        ElseIf a.Text.ToLower = "Named".ToLower Then
                                            Dim s As TreeNode = a.Nodes(0).Nodes(0)
                                            Dim action As New PdfAction()
                                            action.Put(PdfName.S, PdfName.NAMED)
                                            action.Put(PdfName.N, New PdfName(s.Text.ToString))
                                            If act(actCntr) Is Nothing Then
                                                act(actCntr) = action
                                            Else
                                                act(actCntr).Next(action)
                                            End If
                                        End If
                                    Next
                                    If frmFields.ToArray.Count <= 1 Then
                                        If Not act(actCntr) Is Nothing Then
                                            Dim actItem As PdfAction = act(actCntr)
                                            If actItem.Keys.Count > 0 Then
                                                Select Case ma.ToString.ToLower
                                                    Case "mouse up"
                                                        fld.Action = act(actCntr)
                                                    Case "mouse down"
                                                        fld.SetAdditionalActions(PdfName.D, act(actCntr))
                                                    Case "mouse enter"
                                                        fld.SetAdditionalActions(PdfName.E, act(actCntr))
                                                    Case "mouse exit"
                                                        fld.SetAdditionalActions(PdfName.X, act(actCntr))
                                                    Case "on blur"
                                                        fld.SetAdditionalActions(PdfName.BL, act(actCntr))
                                                    Case "on focus"
                                                        fld.SetAdditionalActions(PdfName.FO, act(actCntr))
                                                End Select
                                            End If
                                        End If
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Next
                        Dim aa As PdfDictionary = Nothing
                        Try
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Format_Script.Text & "") Then
                                aa = New PdfDictionary
                                Dim f As New PdfDictionary
                                f.Put(PdfName.JS, New PdfString(New PdfString(Me.PDFField_Format_Custom_Format_Script.Text & "").ToUnicodeString()))
                                f.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(f)
                                aa.Put(PdfName.F, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.F) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.F)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(Me.PDFField_Format_Custom_Keystroke_Script.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim k As New PdfDictionary
                                k.Put(PdfName.JS, New PdfString(New PdfString(Me.PDFField_Format_Custom_Keystroke_Script.Text & "").ToUnicodeString()))
                                k.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(k)
                                aa.Put(PdfName.K, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.K) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.K)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim v As New PdfDictionary
                                v.Put(PdfName.JS, New PdfString(New PdfString(PDFField_Validation_Range_Custom.Text & "").ToUnicodeString()))
                                v.Put(PdfName.S, New PdfName("JavaScript"))
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(v)
                                aa.Put(PdfName.V, ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(PdfName.V) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), PdfName.V)
                                    End If
                                End If
                            End If
                            If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                                If aa Is Nothing Then
                                    aa = New PdfDictionary
                                End If
                                Dim c As New PdfDictionary
                                c.Put(PdfName.JS, New PdfString(New PdfString(PDFField_Calculations_CustomCalcScript_Text.Text & "").ToUnicodeString()))
                                c.Put(PdfName.S, PdfName.JAVASCRIPT)
                                Dim ind As PdfIndirectReference = stmp.Reader.AddPdfObject(c)
                                aa.Put(New PdfName("C"), ind)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    If Not fld.GetAsDict(PdfName.AA).Get(New PdfName("C")) Is Nothing Then
                                        RemoveObject(fld.GetAsDict(PdfName.AA), New PdfName("C"))
                                    End If
                                End If
                            End If
                            If Not aa Is Nothing Then
                                fld.Put(PdfName.AA, aa)
                            Else
                                If Not fld.Get(PdfName.AA) Is Nothing Then
                                    fld.Remove(PdfName.AA)
                                End If
                            End If
                        Catch exFormat As Exception
                            TimeStampAdd(exFormat, debugMode)
                        End Try
                        Try
                            If fldKidIndex < 0 Then
                                frmFields(frmFields.Count - 1) = (frmField)
                            Else
                                frmFields(fldKidIndex) = (frmField)
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim defaultValue As String = "", valueDefault As String = ""
                        Dim onValueStr As String = ""
                        Dim daNameVal As String = ""
                        fld = Nothing
                        If fld Is Nothing Then
                            fld = frmField.GetRadioGroup(True, False)
                            fld.FieldName = newFldName
                            fld.Name = newFldName
                        End If
                        If fldflags > 0 Then
                            fld.Flags = fldflags
                        End If
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            If frmFields.Count > 1 Then
                                Try
                                    Dim itmFld As iTextSharp.text.pdf.AcroFields.Item = pdfReaderDoc.AcroFields.GetFieldItem(fldname)
                                    Dim indexKid As Integer = 0
                                    Dim dictKid As New PdfDictionary
                                    Dim arrKids As New PdfArray
                                    Dim fldPages As New List(Of Integer)
                                    Dim fldActions As New List(Of PdfDictionary)
                                    Dim fldAA As New List(Of PdfDictionary)
                                    Dim fldRect As New List(Of PdfRectangle)
                                    Dim formTmp As AcroFields = pdfReaderDoc.AcroFields
                                    Dim flditem As AcroFields.Item = formTmp.GetFieldItem(fldname)
                                    For Each fldKids As iTextSharp.text.pdf.RadioCheckField In frmFields.ToArray()
                                        If (fldKidIndex = indexKid) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                            fldPages.Add(Me.page)
                                            fldActions.Add(iTextGetPDFObject(fldKids.RadioField.GetAsDict(PdfName.A), PdfName.A))
                                            fldAA.Add(iTextGetPDFObject(fldKids.RadioField.GetAsDict(PdfName.AA), PdfName.AA))
                                            fldRect.Add(New PdfRectangle(newRect))
                                            indexKid += 1
                                        Else
                                            fldPages.Add(pdfReaderDoc.AcroFields.GetFieldItem(fldname).GetPage(indexKid))
                                            Dim kidItem As PdfDictionary = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(indexKid)
                                            fldActions.Add(iTextGetPDFObject(kidItem, PdfName.A))
                                            fldAA.Add(iTextGetPDFObject(kidItem, PdfName.AA))
                                            fldRect.Add(New PdfRectangle(CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Left), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Bottom), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Right), CSng(pdfReaderDoc.AcroFields.GetFieldPositions(fldname)(indexKid).position.Top)))
                                            indexKid += 1
                                        End If
                                    Next
                                    indexKid = 0
                                    For Each fldKids As iTextSharp.text.pdf.RadioCheckField In frmFields.ToArray()
                                        Dim frmFieldTemp As iTextSharp.text.pdf.RadioCheckField = fldKids
                                        If (fldKidIndex = indexKid) Or (fldKidIndex = -1 And indexKid >= frmFields.Count - 1) Then
                                            If fldKidIndex >= 0 Then
                                                frmFieldTemp = frmFields(indexKid)
                                            Else
                                                frmFieldTemp = fldKids
                                            End If
                                            frmFieldTemp.OnValue = RadioButton_OnValue.Text & ""
                                            frmFieldTemp.Checked = RadioButton_Checked.Checked
                                            If RadioButton_Checked.Checked Then
                                                defaultValue = frmFieldTemp.OnValue
                                                valueDefault = frmFieldTemp.OnValue
                                            End If
                                            frmFieldTemp.Box = New iTextSharp.text.Rectangle(newRect)
                                            Dim k As PdfFormField = frmFieldTemp.RadioField
                                            If RadioButton_Checked.Checked Then
                                                k.Put(PdfName.AS, New PdfName(RadioButton_OnValue.Text & ""))
                                            Else
                                                k.Put(PdfName.AS, New PdfName("Off"))
                                            End If
                                            k.PlaceInPage = pageNumber
                                            k.Page = pageNumber
                                            k.Remove(PdfName.T)
                                            Try
                                                For actCntr = 0 To act.Count - 1
                                                    Dim actItem As PdfAction = act(actCntr)
                                                    If Not actItem Is Nothing Then
                                                        If actItem.Keys.Count > 0 Then
                                                            Select Case actCntr
                                                                Case 0
                                                                    k.Action = act(actCntr)
                                                                Case 1
                                                                    k.SetAdditionalActions(PdfName.D, actItem)
                                                                Case 2
                                                                    k.SetAdditionalActions(PdfName.E, actItem)
                                                                Case 3
                                                                    k.SetAdditionalActions(PdfName.X, actItem)
                                                                Case 4
                                                                    k.SetAdditionalActions(PdfName.BL, actItem)
                                                                Case 5
                                                                    k.SetAdditionalActions(PdfName.FO, actItem)
                                                            End Select
                                                        End If
                                                    End If
                                                Next
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                            Try
                                                If Not aa Is Nothing Then
                                                    Dim aaTemp As New PdfDictionary
                                                    For Each ktmp As PdfName In aa.Keys.ToArray
                                                        Select Case ktmp.ToString
                                                            Case PdfName.C.ToString
                                                            Case PdfName.V.ToString
                                                            Case Else
                                                                aaTemp.PutEx(ktmp, aa.Get(ktmp))
                                                        End Select
                                                    Next
                                                    For Each ktmp As PdfName In aa.Keys.ToArray
                                                        Dim sTmp1 As String = ktmp.ToString
                                                        sTmp1 = sTmp1
                                                    Next
                                                    k.Put(PdfName.AA, aaTemp)
                                                Else
                                                    If Not k.Get(PdfName.AA) Is Nothing Then
                                                        RemoveObject(k, PdfName.AA)
                                                    End If
                                                End If
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                            If fld Is Nothing Then
                                                fld = frmField.GetRadioGroup(True, False)
                                                fld.FieldName = newFldName
                                                fld.Name = newFldName
                                            End If
                                            If fldflags > 0 Then
                                                fld.Flags = fldflags
                                            End If
                                            If Not String.IsNullOrEmpty(defaultValue & "") Then
                                                fld.DefaultValueAsName = (defaultValue & "")
                                            End If
                                            If Not String.IsNullOrEmpty(valueDefault & "") Then
                                                fld.ValueAsName = (valueDefault & "")
                                            End If
                                            fld.AddKid(k)
                                            stmp.AddAnnotation(k, pageNumber)
                                        Else
                                            If fldKidIndex >= 0 Then
                                                frmFieldTemp = fldKids
                                            Else
                                                frmFieldTemp = fldKids
                                            End If
                                            Try
                                                onValueStr = getRadioButtonOnValue(fldname, indexKid) & ""
                                                frmFieldTemp.OnValue = onValueStr & ""
                                                frmFieldTemp.Checked = False
                                                Dim fldVal As String = iTextFieldItemPdfDictionary(fldname & "").GetAsName(PdfName.V).ToString().TrimStart("/"c) & ""
                                                If RadioButton_Checked.Checked = False Then
                                                    If frmFieldTemp.OnValue.ToString.ToLower = fldVal.ToString.ToLower() Then
                                                        frmFieldTemp.Checked = True
                                                        defaultValue = onValueStr
                                                        valueDefault = onValueStr
                                                    End If
                                                End If
                                            Catch ex As Exception
                                                frmFieldTemp.Checked = False
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                            frmFieldTemp.Box = New iTextSharp.text.Rectangle(fldRect(indexKid).Left, fldRect(indexKid).Bottom, fldRect(indexKid).Right, fldRect(indexKid).Top)
                                            frmFieldTemp.Options = intFF
                                            Dim k As PdfFormField = frmFieldTemp.RadioField
                                            If RadioButton_Checked.Checked Then
                                                k.Put(PdfName.AS, New PdfName("Off"))
                                            ElseIf onValueStr = RadioButton_OnValue.Text Then
                                                frmFieldTemp.Checked = True
                                                defaultValue = onValueStr
                                                valueDefault = onValueStr
                                                k.Put(PdfName.AS, New PdfName(onValueStr))
                                            End If
                                            If Not fldActions(indexKid) Is Nothing Then
                                                k.Put(PdfName.A, fldActions(indexKid))
                                            ElseIf Not k.Get(PdfName.A) Is Nothing Then
                                                k.Remove(PdfName.A)
                                            End If
                                            If Not fldAA(indexKid) Is Nothing Then
                                                k.Put(PdfName.AA, fldAA(indexKid))
                                            ElseIf Not k.Get(PdfName.AA) Is Nothing Then
                                                k.Remove(PdfName.AA)
                                            End If
                                            k.PlaceInPage = fldPages(indexKid)
                                            k.Page = fldPages(indexKid)
                                            k.Remove(PdfName.T)
                                            If fld Is Nothing Then
                                                fld = frmField.GetRadioGroup(True, False)
                                                fld.FieldName = newFldName
                                                fld.Name = newFldName
                                            End If
                                            If fldflags > 0 Then
                                                fld.Flags = fldflags
                                            End If
                                            If Not String.IsNullOrEmpty(defaultValue & "") Then
                                                fld.DefaultValueAsName = (defaultValue & "")
                                            End If
                                            If Not String.IsNullOrEmpty(valueDefault & "") Then
                                                fld.ValueAsName = (valueDefault & "")
                                            End If
                                            fld.AddKid(k)
                                            stmp.AddAnnotation(k, fldPages(indexKid))
                                        End If
                                        indexKid += 1
                                    Next
                                    If Not fld.Get(PdfName.AP) Is Nothing Then
                                        fld.Remove(PdfName.AP)
                                    End If
                                    If Not fld.Get(PdfName.RECT) Is Nothing Then
                                        fld.Remove(PdfName.RECT)
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Else
                                Dim frmFieldTemp As iTextSharp.text.pdf.RadioCheckField = frmField
                                If True = True Then
                                    onValueStr = RadioButton_OnValue.Text & ""
                                    frmFieldTemp = frmField
                                    frmFieldTemp.OnValue = RadioButton_OnValue.Text & ""
                                    frmFieldTemp.Checked = RadioButton_Checked.Checked
                                    frmFieldTemp.Box = New iTextSharp.text.Rectangle(newRect)
                                    Dim k As PdfFormField = frmFieldTemp.RadioField
                                    k.PlaceInPage = pageNumber
                                    k.Page = pageNumber
                                    k.Remove(PdfName.T)
                                    Try
                                        For actCntr = 0 To act.Count - 1
                                            Dim actItem As PdfAction = act(actCntr)
                                            If Not actItem Is Nothing Then
                                                If actItem.Keys.Count > 0 Then
                                                    Select Case actCntr
                                                        Case 0
                                                            k.Action = act(actCntr)
                                                        Case 1
                                                            k.SetAdditionalActions(PdfName.D, actItem)
                                                        Case 2
                                                            k.SetAdditionalActions(PdfName.E, actItem)
                                                        Case 3
                                                            k.SetAdditionalActions(PdfName.X, actItem)
                                                        Case 4
                                                            k.SetAdditionalActions(PdfName.BL, actItem)
                                                        Case 5
                                                            k.SetAdditionalActions(PdfName.FO, actItem)
                                                    End Select
                                                End If
                                            End If
                                        Next
                                    Catch ex As Exception
                                        TimeStampAdd(ex, debugMode)
                                    End Try
                                    Try
                                        If Not aa Is Nothing Then
                                            Dim aaTemp As New PdfDictionary
                                            For Each ktmp As PdfName In aa.Keys.ToArray
                                                Select Case ktmp.ToString
                                                    Case PdfName.C.ToString
                                                    Case PdfName.V.ToString
                                                    Case Else
                                                        aaTemp.PutEx(ktmp, aa.Get(ktmp))
                                                End Select
                                            Next
                                            For Each ktmp As PdfName In aa.Keys.ToArray
                                                Dim sTmp1 As String = ktmp.ToString
                                                sTmp1 = sTmp1
                                            Next
                                            k.Put(PdfName.AA, aaTemp)
                                        Else
                                            If Not k.Get(PdfName.AA) Is Nothing Then
                                                RemoveObject(k, PdfName.AA)
                                            End If
                                        End If
                                    Catch ex As Exception
                                        TimeStampAdd(ex, debugMode)
                                    End Try
                                    If fld Is Nothing Then
                                        fld = frmField.GetRadioGroup(True, False)
                                        fld.FieldName = newFldName
                                        fld.Name = newFldName
                                    End If
                                    If fldflags > 0 Then
                                        fld.Flags = fldflags
                                    End If
                                    If Not String.IsNullOrEmpty(defaultValue & "") Then
                                        fld.DefaultValueAsName = (defaultValue & "")
                                    End If
                                    If Not String.IsNullOrEmpty(valueDefault & "") Then
                                        fld.ValueAsName = (valueDefault & "")
                                    End If
                                    fld.AddKid(k)
                                    stmp.AddAnnotation(k, pageNumber)
                                End If
                                If frmFields.Count > 1 Then
                                End If
                            End If
                        Else
                            Dim frmFieldTemp As iTextSharp.text.pdf.RadioCheckField = frmField
                            If True = True Then
                                onValueStr = RadioButton_OnValue.Text & ""
                                frmFieldTemp = frmField
                                frmFieldTemp.OnValue = RadioButton_OnValue.Text & ""
                                frmFieldTemp.Checked = RadioButton_Checked.Checked
                                frmFieldTemp.Box = New iTextSharp.text.Rectangle(newRect)
                                Dim k As PdfFormField = frmFieldTemp.RadioField
                                k.PlaceInPage = pageNumber
                                k.Page = pageNumber
                                k.Remove(PdfName.T)
                                Try
                                    For actCntr = 0 To act.Count - 1
                                        Dim actItem As PdfAction = act(actCntr)
                                        If Not actItem Is Nothing Then
                                            If actItem.Keys.Count > 0 Then
                                                Select Case actCntr
                                                    Case 0
                                                        k.Action = act(actCntr)
                                                    Case 1
                                                        k.SetAdditionalActions(PdfName.D, actItem)
                                                    Case 2
                                                        k.SetAdditionalActions(PdfName.E, actItem)
                                                    Case 3
                                                        k.SetAdditionalActions(PdfName.X, actItem)
                                                    Case 4
                                                        k.SetAdditionalActions(PdfName.BL, actItem)
                                                    Case 5
                                                        k.SetAdditionalActions(PdfName.FO, actItem)
                                                End Select
                                            End If
                                        End If
                                    Next
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                                Try
                                    If Not aa Is Nothing Then
                                        Dim aaTemp As New PdfDictionary
                                        For Each ktmp As PdfName In aa.Keys.ToArray
                                            Select Case ktmp.ToString
                                                Case PdfName.C.ToString
                                                Case PdfName.V.ToString
                                                Case Else
                                                    aaTemp.PutEx(ktmp, aa.Get(ktmp))
                                            End Select
                                        Next
                                        For Each ktmp As PdfName In aa.Keys.ToArray
                                            Dim sTmp1 As String = ktmp.ToString
                                            sTmp1 = sTmp1
                                        Next
                                        k.Put(PdfName.AA, aaTemp)
                                    Else
                                        If Not k.Get(PdfName.AA) Is Nothing Then
                                            RemoveObject(k, PdfName.AA)
                                        End If
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                                If fld Is Nothing Then
                                    fld = frmField.GetRadioGroup(True, False)
                                    fld.FieldName = newFldName
                                    fld.Name = newFldName
                                End If
                                If fldflags > 0 Then
                                    fld.Flags = fldflags
                                End If
                                If Not String.IsNullOrEmpty(defaultValue & "") Then
                                    fld.DefaultValueAsName = (defaultValue & "")
                                End If
                                If Not String.IsNullOrEmpty(valueDefault & "") Then
                                    fld.ValueAsName = (valueDefault & "")
                                End If
                                fld.AddKid(k)
                                stmp.AddAnnotation(k, pageNumber)
                            End If
                            If frmFields.Count > 1 Then
                            End If
                        End If
                        If Not String.IsNullOrEmpty(fldname & "") Then
                            Try
                                If Not String.IsNullOrEmpty(fldname & "") Then form.RemoveField(fldname)
                            Catch exRemoveField As Exception
                                TimeStampAdd(exRemoveField, debugMode)
                            End Try
                        End If
                        fld.FieldName = newFldName & ""
                        fld.Put(PdfName.F, New PdfNumber(fldflags))
                        fld.Put(PdfName.FF, New PdfNumber(intFF))
                        stmp.AddAnnotation(fld, pageNumber)
                        If Not String.IsNullOrEmpty(PDFField_Calculations_CustomCalcScript_Text.Text & "") Then
                            AddCalculationOrder(fld, stmp)
                        End If
                        form = stmp.AcroFields
                End Select
            Else
            End If
            stmp.Writer.CloseStream = False
            stmp.Close()
            If memStream.CanSeek Then
                memStream.Position = 0
            End If
            b = memStream.ToArray
            memStream.Close()
            memStream.Dispose()
            cUserRect.pauseDraw = True
            cUserRect.pauseDraw = False
            Return b
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        cUserRect.pauseDraw = True
        cUserRect.pauseDraw = False
        Return b
    End Function
    Public Function A0_PDFFormField_Modify_Generic(ByVal b() As Byte, ByVal fldname As String, ByVal newFldName As String, ByVal textcolor As iTextSharp.text.BaseColor, ByVal bgcolor As iTextSharp.text.BaseColor, ByVal bordercolor As iTextSharp.text.BaseColor, ByVal newRect As iTextSharp.text.Rectangle, Optional ByVal pageNumber As Integer = -1, Optional ByVal removeKidFieldIdx As Integer = -1, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing, Optional ByVal promptMerge As Boolean = True) As Byte()
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword & ""))
            Else
                pdfReaderDocTemp = pdfReaderDoc.Clone
            End If
        Catch ex As Exception
            pdfReaderDocTemp = pdfReaderDoc
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            preventDragging = False
            LoadPDFReaderDoc(pdfOwnerPassword & "", False)
            Dim memStream As New MemoryStream
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            Dim stmp As PdfStamper = getStamper(pdfReaderDocTemp, memStream)
            Try
                If Not stmp.AcroFields.GenerateAppearances = True Then
                    If Not stmp.AcroFields.Fields Is Nothing Then stmp.AcroFields.GenerateAppearances = True
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim form As iTextSharp.text.pdf.AcroFields = stmp.AcroFields
            If True = True Then
                Dim fltType As Integer = -1
                If Not String.IsNullOrEmpty(fldname & "") Then
                    fltType = GetFormFieldType(b, fldname)
                Else
                    Select Case ComboBox1.SelectedItem.ToString.ToLower
                        Case "Textbox".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                        Case "CheckBox".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                        Case "ComboBox".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                        Case "ListBox".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                        Case "Button".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                        Case "RadioButton".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                        Case "Signature".ToLower
                            fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                        Case Else
                            Return b
                    End Select
                End If
                Dim defaultFontSize As Single = 0
                Try
                    If IsNumeric(PDFField_FontSize.Text & "") Then
                        defaultFontSize = CSng(PDFField_FontSize.Text & "") + 0.0F
                    ElseIf (PDFField_FontSize.SelectedIndex > 0) Then
                        defaultFontSize = CSng(PDFField_FontSize.Items(PDFField_FontSize.SelectedIndex).ToString()) + 0.0F
                    Else
                        defaultFontSize = 0.0F
                    End If
                Catch ex As Exception
                    defaultFontSize = 0.0F
                    TimeStampAdd(ex, debugMode)
                End Try
                Dim bf As BaseFont = Nothing
                Dim defaultFont As iTextSharp.text.Font = Nothing
                Try
                    Select Case PDFField_FontFamily.SelectedIndex
                        Case 0
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER, BaseFont.WINANSI, False)
                        Case 1
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLD, BaseFont.CP1252, True)
                        Case 2
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 3
                            defaultFont = FontFactory.GetFont(BaseFont.COURIER_OBLIQUE, BaseFont.WINANSI, False)
                        Case 4
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.WINANSI, False)
                        Case 5
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLD, BaseFont.WINANSI, False)
                        Case 6
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLDOBLIQUE, BaseFont.WINANSI, False)
                        Case 7
                            defaultFont = FontFactory.GetFont(BaseFont.HELVETICA_OBLIQUE, BaseFont.WINANSI, False)
                        Case 8
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, BaseFont.WINANSI, False)
                        Case 9
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLD, BaseFont.WINANSI, False)
                        Case 10
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_ITALIC, BaseFont.WINANSI, False)
                        Case 11
                            defaultFont = FontFactory.GetFont(BaseFont.TIMES_BOLDITALIC, BaseFont.WINANSI, False)
                        Case 12
                            defaultFont = FontFactory.GetFont(BaseFont.SYMBOL, BaseFont.WINANSI, False)
                        Case 13
                            defaultFont = FontFactory.GetFont(BaseFont.ZAPFDINGBATS, BaseFont.WINANSI, False)
                        Case Else
                            Try
                                bf = findFontInForm(New PdfName(CStr(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString)))
                                If bf Is Nothing Then
                                    defaultFont = New iTextSharp.text.Font(FontFactory.GetFont(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString(), defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor)))
                                Else
                                    defaultFont = New iTextSharp.text.Font(bf, defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor))
                                End If
                            Catch exCreateFontEmbeded As Exception
                                Err.Clear()
                            End Try
                    End Select
                    defaultFont.Size = defaultFontSize
                Catch ex As Exception
                    Throw ex
                    TimeStampAdd(ex, debugMode)
                End Try
                Select Case fltType
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                End Select
            Else
            End If
            stmp.Writer.CloseStream = False
            stmp.Close()
            If memStream.CanSeek Then
                memStream.Position = 0
            End If
            b = memStream.ToArray
            memStream.Close()
            memStream.Dispose()
            PDFField_Copy.Checked = False
            Return b
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        PDFField_Copy.Checked = False
        Return b
    End Function
    Public Function isInArray(ByVal arr As List(Of String), ByVal strSearch As String) As Boolean
        Dim arrTemp As New List(Of String)
        For Each s As String In arr.ToArray
            Try
                arrTemp.Add(s.ToString.ToLower)
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        Next
        Return arrTemp.Contains(strSearch.ToString.ToLower & "")
    End Function
    Public Function LoadFontsList(ByRef comb As ComboBox, Optional loadAllFonts As Boolean = True) As String()
        Dim sb As New List(Of String)
        Try
            comb.Items.Clear()
            sb.Add(BaseFont.COURIER)
            sb.Add(BaseFont.COURIER_BOLD)
            sb.Add(BaseFont.COURIER_BOLDOBLIQUE)
            sb.Add(BaseFont.COURIER_OBLIQUE)
            sb.Add(BaseFont.HELVETICA)
            sb.Add(BaseFont.HELVETICA_BOLD)
            sb.Add(BaseFont.HELVETICA_BOLDOBLIQUE)
            sb.Add(BaseFont.HELVETICA_OBLIQUE)
            sb.Add(BaseFont.TIMES_ROMAN)
            sb.Add(BaseFont.TIMES_BOLD)
            sb.Add(BaseFont.TIMES_ITALIC)
            sb.Add(BaseFont.TIMES_BOLDITALIC)
            sb.Add(BaseFont.SYMBOL)
            sb.Add(BaseFont.ZAPFDINGBATS)
            comb.Items.AddRange(sb.ToArray)
            If loadAllFonts Then
                Dim fonts As New System.Drawing.Text.InstalledFontCollection
                For Each one As FontFamily In fonts.Families.ToArray()
                    If Not sb.Contains(one.Name) Then sb.Add(one.Name)
                    If Not comb.Items.Contains(one.Name) Then comb.Items.Add(one.Name)
                Next
            End If
            comb.SelectedIndex = 0
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return sb.ToArray
    End Function
    Public Function LoadFontSizeList(ByRef comb As ComboBox) As String()
        Dim sb As New List(Of String)
        Try
            comb.Items.Clear()
            sb.Add("Auto")
            sb.Add("6")
            sb.Add("8")
            sb.Add("9")
            sb.Add("10")
            sb.Add("12")
            sb.Add("14")
            sb.Add("16")
            sb.Add("18")
            sb.Add("24")
            sb.Add("36")
            sb.Add("48")
            sb.Add("72")
            comb.Items.AddRange(sb.ToArray)
            comb.SelectedIndex = 0
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return sb.ToArray
    End Function
    Public Sub PDFField_Actions_TreeView_Display_Show()
        If Not PDFField_Actions_TreeView Is Nothing Then
            PDFField_Actions_TreeView_Display.Nodes.Clear()
            Dim nodeSel As TreeNode = Nothing
            If Not PDFField_Actions_TreeView_Display.SelectedNode Is Nothing Then
                nodeSel = PDFField_Actions_TreeView_Display.SelectedNode
            ElseIf Not PDFField_Actions_TreeView.SelectedNode Is Nothing Then
                nodeSel = PDFField_Actions_TreeView.SelectedNode
            End If
            If PDFField_Actions_TreeView.Nodes.Count > 0 Then
                For i As Integer = 0 To PDFField_Actions_TreeView.Nodes.Count - 1
                    PDFField_Actions_TreeView_Display.Nodes.Add(PDFField_Actions_TreeView.Nodes(i).Clone)
                Next
            End If
            If PDFField_Actions_TreeView_Display.Nodes.Count > 0 Then
                For i As Integer = 0 To PDFField_Actions_TreeView_Display.Nodes.Count - 1
                    If PDFField_Actions_TreeView_Display.Nodes(i).Nodes.Count > 0 Then
                        For y As Integer = 0 To PDFField_Actions_TreeView_Display.Nodes(i).Nodes.Count - 1
                            If Not nodeSel Is Nothing Then
                                If PDFField_Actions_TreeView_Display.Nodes(i).Nodes(y).FullPath = nodeSel.FullPath Then
                                    PDFField_Actions_TreeView_Display.Select()
                                    PDFField_Actions_TreeView_Display.Nodes(i).Nodes(y).Expand()
                                    PDFField_Actions_TreeView_Display.SelectedNode = PDFField_Actions_TreeView_Display.Nodes(i).Nodes(y)
                                End If
                            End If
                            If PDFField_Actions_TreeView_Display.Nodes(i).Nodes(y).Nodes.Count > 0 Then
                                For z As Integer = 0 To PDFField_Actions_TreeView_Display.Nodes(i).Nodes(y).Nodes.Count - 1
                                    PDFField_Actions_TreeView_Display.Nodes(i).Nodes(y).Nodes(0).Remove()
                                Next
                            End If
                        Next
                    End If
                Next
                If Not PDFField_Actions_TreeView_Display.SelectedNode Is Nothing Then
                End If
            End If
        End If
    End Sub
    Public Function convertBaseColor_2_SystemColor(ByVal bc As BaseColor) As System.Drawing.Color
        Return System.Drawing.Color.FromArgb(bc.A, bc.R, bc.G, bc.B)
    End Function
    Private Function RenderImage(ByVal renderInfo As iTextSharp.text.pdf.parser.ImageRenderInfo) As Byte()
        Dim image As iTextSharp.text.pdf.parser.PdfImageObject = renderInfo.GetImage()
        Using dotnetImg As System.Drawing.Image = image.GetDrawingImage
            If dotnetImg IsNot Nothing Then
                Using ms As New MemoryStream()
                    dotnetImg.Save(ms, ImageFormat.Jpeg)
                    Return ms.ToArray
                End Using
            End If
        End Using
        Return Nothing
    End Function
    Public Function iTextGetPDFObject(ByRef obj As iTextSharp.text.pdf.PdfDictionary, ByVal name As PdfName)
        Try
            If obj Is Nothing Then Return Nothing
            If Not obj.Get(name) Is Nothing Then
                If obj.Get(name).IsIndirect Then
                    Dim i As PdfIndirectReference = obj.GetAsIndirectObject(name)
                    If Not i Is Nothing Then
                        If Not pdfReaderDoc.GetPdfObject(i.Number) Is Nothing Then
                            If pdfReaderDoc.GetPdfObject(i.Number).IsArray Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfArray)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsBoolean Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfBoolean)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsDictionary Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfDictionary)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsName Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfName)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsNumber Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfNumber)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsStream Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfStream)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsString Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfString)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsNull Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfNull)
                            Else
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfObject)
                            End If
                        End If
                    End If
                Else
                    If Not obj.Get(name) Is Nothing Then
                        If obj.Get(name).IsArray Then
                            Return DirectCast(obj.Get(name), PdfArray)
                        ElseIf obj.Get(name).IsBoolean Then
                            Return DirectCast(obj.Get(name), PdfBoolean)
                        ElseIf obj.Get(name).IsDictionary Then
                            Return DirectCast(obj.Get(name), PdfDictionary)
                        ElseIf obj.Get(name).IsName Then
                            Return DirectCast(obj.Get(name), PdfName)
                        ElseIf obj.Get(name).IsNumber Then
                            Return DirectCast(obj.Get(name), PdfNumber)
                        ElseIf obj.Get(name).IsStream Then
                            Return DirectCast(obj.Get(name), PdfStream)
                        ElseIf obj.Get(name).IsString Then
                            Return DirectCast(obj.Get(name), PdfString)
                        Else
                            Return DirectCast(obj.Get(name), PdfObject)
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function iTextGetPDFObject(ByRef obj As iTextSharp.text.pdf.PdfDictionary, ByRef r As PdfReader, ByVal name As PdfName)
        Try
            If obj Is Nothing Then Return Nothing
            If Not obj.Get(name) Is Nothing Then
                If obj.Get(name).IsIndirect Then
                    Dim i As PdfIndirectReference = obj.GetAsIndirectObject(name)
                    If Not i Is Nothing Then
                        If Not r.GetPdfObject(i.Number) Is Nothing Then
                            If r.GetPdfObject(i.Number).IsArray Then
                                Return DirectCast(r.GetPdfObject(i.Number), PdfArray)
                            ElseIf r.GetPdfObject(i.Number).IsBoolean Then
                                Return DirectCast(r.GetPdfObject(i.Number), PdfBoolean)
                            ElseIf r.GetPdfObject(i.Number).IsDictionary Then
                                Return DirectCast(r.GetPdfObject(i.Number), PdfDictionary)
                            ElseIf r.GetPdfObject(i.Number).IsName Then
                                Return DirectCast(r.GetPdfObject(i.Number), PdfName)
                            ElseIf r.GetPdfObject(i.Number).IsNumber Then
                                Return DirectCast(r.GetPdfObject(i.Number), PdfNumber)
                            ElseIf r.GetPdfObject(i.Number).IsStream Then
                                Return DirectCast(r.GetPdfObject(i.Number), PdfStream)
                            ElseIf r.GetPdfObject(i.Number).IsString Then
                                Return DirectCast(r.GetPdfObject(i.Number), PdfString)
                            ElseIf r.GetPdfObject(i.Number).IsNull Then
                                Return DirectCast(r.GetPdfObject(i.Number), PdfNull)
                            Else
                                Return DirectCast(r.GetPdfObject(i.Number), PdfObject)
                            End If
                        End If
                    End If
                Else
                    If Not obj.Get(name) Is Nothing Then
                        If obj.Get(name).IsArray Then
                            Return DirectCast(obj.Get(name), PdfArray)
                        ElseIf obj.Get(name).IsBoolean Then
                            Return DirectCast(obj.Get(name), PdfBoolean)
                        ElseIf obj.Get(name).IsDictionary Then
                            Return DirectCast(obj.Get(name), PdfDictionary)
                        ElseIf obj.Get(name).IsName Then
                            Return DirectCast(obj.Get(name), PdfName)
                        ElseIf obj.Get(name).IsNumber Then
                            Return DirectCast(obj.Get(name), PdfNumber)
                        ElseIf obj.Get(name).IsStream Then
                            Return DirectCast(obj.Get(name), PdfStream)
                        ElseIf obj.Get(name).IsString Then
                            Return DirectCast(obj.Get(name), PdfString)
                        Else
                            Return DirectCast(obj.Get(name), PdfObject)
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function iTextGetPDFString(ByRef obj As iTextSharp.text.pdf.PdfDictionary, ByVal name As PdfName) As String
        Try
            If Not obj.Get(name) Is Nothing Then
                If obj.Get(name).IsIndirect Then
                    Dim i As PdfIndirectReference = obj.GetAsIndirectObject(name)
                    If Not i Is Nothing Then
                        If Not pdfReaderDoc.GetPdfObject(i.Number) Is Nothing Then
                            If pdfReaderDoc.GetPdfObject(i.Number).IsArray Then
                                Return ""
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsBoolean Then
                                Return obj.GetAsBoolean(name).ToString() & ""
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsDictionary Then
                                Return ""
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsName Then
                                Return obj.GetAsName(name).ToString() & ""
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsNumber Then
                                Return obj.GetAsNumber(name).DoubleValue.ToString() & ""
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsStream Then
                                Return GetStringFromPdfStream(obj.GetAsStream(name)) & ""
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsString Then
                                Return obj.GetAsString(name).ToUnicodeString() & ""
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsNull Then
                                Return ""
                            Else
                                Return ""
                            End If
                        End If
                    End If
                Else
                    If Not obj.Get(name) Is Nothing Then
                        If obj.Get(name).IsArray Then
                            Return ""
                        ElseIf obj.Get(name).IsBoolean Then
                            Return DirectCast(obj.Get(name), PdfBoolean).ToString() & ""
                        ElseIf obj.Get(name).IsDictionary Then
                            Return ""
                        ElseIf obj.Get(name).IsName Then
                            Return DirectCast(obj.Get(name), PdfName).ToString() & ""
                        ElseIf obj.Get(name).IsNumber Then
                            Return DirectCast(obj.Get(name), PdfNumber).DoubleValue.ToString() & ""
                        ElseIf obj.Get(name).IsStream Then
                            Return GetStringFromPdfStream(obj.GetAsStream(name)) & ""
                        ElseIf obj.Get(name).IsString Then
                            Return DirectCast(obj.Get(name), PdfString).ToUnicodeString() & ""
                        Else
                            Return ""
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function iTextGetPDFString(ByRef obj As iTextSharp.text.pdf.PdfDictionary, ByRef r As PdfReader, ByVal name As PdfName) As String
        Try
            If Not obj.Get(name) Is Nothing Then
                If obj.Get(name).IsIndirect Then
                    Dim i As PdfIndirectReference = obj.GetAsIndirectObject(name)
                    If Not i Is Nothing Then
                        If Not r.GetPdfObject(i.Number) Is Nothing Then
                            If r.GetPdfObject(i.Number).IsArray Then
                                Return ""
                            ElseIf r.GetPdfObject(i.Number).IsBoolean Then
                                Return obj.GetAsBoolean(name).ToString() & ""
                            ElseIf r.GetPdfObject(i.Number).IsDictionary Then
                                Return ""
                            ElseIf r.GetPdfObject(i.Number).IsName Then
                                Return obj.GetAsName(name).ToString() & ""
                            ElseIf r.GetPdfObject(i.Number).IsNumber Then
                                Return obj.GetAsNumber(name).DoubleValue.ToString() & ""
                            ElseIf r.GetPdfObject(i.Number).IsStream Then
                                Return GetStringFromPdfStream(obj.GetAsStream(name)) & ""
                            ElseIf r.GetPdfObject(i.Number).IsString Then
                                Return obj.GetAsString(name).ToUnicodeString() & ""
                            ElseIf r.GetPdfObject(i.Number).IsNull Then
                                Return ""
                            Else
                                Return ""
                            End If
                        End If
                    End If
                Else
                    If Not obj.Get(name) Is Nothing Then
                        If obj.Get(name).IsArray Then
                            Return ""
                        ElseIf obj.Get(name).IsBoolean Then
                            Return DirectCast(obj.Get(name), PdfBoolean).ToString() & ""
                        ElseIf obj.Get(name).IsDictionary Then
                            Return ""
                        ElseIf obj.Get(name).IsName Then
                            Return DirectCast(obj.Get(name), PdfName).ToString() & ""
                        ElseIf obj.Get(name).IsNumber Then
                            Return DirectCast(obj.Get(name), PdfNumber).DoubleValue.ToString() & ""
                        ElseIf obj.Get(name).IsStream Then
                            Return GetStringFromPdfStream(obj.GetAsStream(name)) & ""
                        ElseIf obj.Get(name).IsString Then
                            Return DirectCast(obj.Get(name), PdfString).ToUnicodeString() & ""
                        Else
                            Return ""
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function iTextGetPDFObjectIndirectLink(ByRef i As iTextSharp.text.pdf.PdfIndirectReference)
        Try
            If Not i.Number <= 0 Then
                If i.IsIndirect Then
                    If Not i Is Nothing Then
                        If Not pdfReaderDoc.GetPdfObject(i.Number) Is Nothing Then
                            If pdfReaderDoc.GetPdfObject(i.Number).IsArray Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfArray)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsBoolean Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfBoolean)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsDictionary Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfDictionary)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsName Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfName)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsNumber Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfNumber)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsStream Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfStream)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsString Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfString)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsNull Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfNull)
                            Else
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfObject)
                            End If
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function iTextGetPDFObject(ByRef obj As iTextSharp.text.pdf.PdfStream, ByVal name As PdfName)
        Try
            If obj Is Nothing Then Return Nothing
            If Not obj.Get(name) Is Nothing Then
                If obj.Get(name).IsIndirect Then
                    Dim i As PdfIndirectReference = obj.GetAsIndirectObject(name)
                    If Not i Is Nothing Then
                        If Not pdfReaderDoc.GetPdfObject(i.Number) Is Nothing Then
                            If pdfReaderDoc.GetPdfObject(i.Number).IsArray Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfArray)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsBoolean Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfBoolean)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsDictionary Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfDictionary)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsName Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfName)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsNumber Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfNumber)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsStream Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfStream)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsString Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfString)
                            ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsNull Then
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfNull)
                            Else
                                Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfObject)
                            End If
                        End If
                    End If
                Else
                    If Not obj.Get(name) Is Nothing Then
                        If obj.Get(name).IsArray Then
                            Return obj.GetAsArray(name)
                        ElseIf obj.Get(name).IsBoolean Then
                            Return obj.GetAsBoolean(name)
                        ElseIf obj.Get(name).IsDictionary Then
                            Return obj.GetAsDict(name)
                        ElseIf obj.Get(name).IsName Then
                            Return obj.GetAsName(name)
                        ElseIf obj.Get(name).IsNumber Then
                            Return DirectCast(obj.Get(name), PdfNumber)
                        ElseIf obj.Get(name).IsStream Then
                            Return obj.GetAsStream(name)
                        ElseIf obj.Get(name).IsString Then
                            Return obj.GetAsString(name)
                        Else
                            Return DirectCast(obj.Get(name), PdfObject)
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function iTextGetPDFObject(ByRef i As iTextSharp.text.pdf.PRIndirectReference, ByVal name As PdfName)
        Try
            If i Is Nothing Then Return Nothing
            If Not i Is Nothing Then
                If Not pdfReaderDoc.GetPdfObject(i.Number) Is Nothing Then
                    If pdfReaderDoc.GetPdfObject(i.Number).IsArray Then
                        Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfArray)
                    ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsBoolean Then
                        Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfBoolean)
                    ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsDictionary Then
                        Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfDictionary)
                    ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsName Then
                        Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfName)
                    ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsNumber Then
                        Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfNumber)
                    ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsStream Then
                        Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfStream)
                    ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsString Then
                        Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfString)
                    ElseIf pdfReaderDoc.GetPdfObject(i.Number).IsNull Then
                        Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfNull)
                    Else
                        Return DirectCast(pdfReaderDoc.GetPdfObject(i.Number), PdfObject)
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function iTextGetPDFObject(ByRef i As iTextSharp.text.pdf.PRIndirectReference, ByRef r As PdfReader, ByVal name As PdfName)
        Try
            If i Is Nothing Then Return Nothing
            If Not i Is Nothing Then
                If Not r.GetPdfObject(i.Number) Is Nothing Then
                    If r.GetPdfObject(i.Number).IsArray Then
                        Return DirectCast(r.GetPdfObject(i.Number), PdfArray)
                    ElseIf r.GetPdfObject(i.Number).IsBoolean Then
                        Return DirectCast(r.GetPdfObject(i.Number), PdfBoolean)
                    ElseIf r.GetPdfObject(i.Number).IsDictionary Then
                        Return DirectCast(r.GetPdfObject(i.Number), PdfDictionary)
                    ElseIf r.GetPdfObject(i.Number).IsName Then
                        Return DirectCast(r.GetPdfObject(i.Number), PdfName)
                    ElseIf r.GetPdfObject(i.Number).IsNumber Then
                        Return DirectCast(r.GetPdfObject(i.Number), PdfNumber)
                    ElseIf r.GetPdfObject(i.Number).IsStream Then
                        Return DirectCast(r.GetPdfObject(i.Number), PdfStream)
                    ElseIf r.GetPdfObject(i.Number).IsString Then
                        Return DirectCast(r.GetPdfObject(i.Number), PdfString)
                    ElseIf r.GetPdfObject(i.Number).IsNull Then
                        Return DirectCast(r.GetPdfObject(i.Number), PdfNull)
                    Else
                        Return DirectCast(r.GetPdfObject(i.Number), PdfObject)
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Sub iTextRemoveFieldItemPdfDictionary(ByVal fldname As String)
        LoadPDFReaderDoc(pdfOwnerPassword, True)
        Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
        If Not (acroForm Is Nothing) Then
            Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
            For field As Integer = 0 To fields.Size - 1
                If Not fields.GetAsDict(field) Is Nothing Then
                    If Not fields.GetAsDict(field).GetAsString(PdfName.T) Is Nothing Then
                        Try
                            Dim strT As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString & ""
                            If strT = fldname Then
                                If fields(field).IsIndirect Then
                                    Dim i As PdfIndirectReference = fields.GetAsIndirectObject(field)
                                    Dim o As PdfObject = pdfReaderDoc.GetPdfObject(i.Number)
                                    PdfReader.KillIndirect(i)
                                    PdfReader.KillIndirect(o)
                                End If
                                fields.Remove(field)
                                Exit For
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    End If
                End If
            Next
        End If
    End Sub
    Public Function RemoveFieldStructure(ByVal name As String)
        Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
        If Not (acroForm Is Nothing) Then
            Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
            For field As Integer = 0 To fields.Size - 1
                If Not fields.GetAsDict(field) Is Nothing Then
                    If Not fields.GetAsDict(field).GetAsString(PdfName.T) Is Nothing Then
                        If fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString = name Then
                            For Each k As PdfName In fields.GetAsDict(field).Keys
                                Dim indir As Boolean = False
                                If acroForm.GetAsArray(PdfName.FIELDS).GetAsDict(field).Get(k).IsIndirect Then
                                    PdfReader.KillIndirect(acroForm.GetAsArray(PdfName.FIELDS).GetAsDict(field).Get(k))
                                End If
                                acroForm.GetAsArray(PdfName.FIELDS).GetAsDict(field).Remove(k)
                            Next
                            If acroForm.GetAsArray(PdfName.FIELDS).GetAsDict(field).IsIndirect Then
                                PdfReader.KillIndirect(acroForm.GetAsArray(PdfName.FIELDS).GetAsDict(field))
                            End If
                            fields.Remove(field)
                        End If
                    End If
                End If
            Next
        End If
        Return Nothing
    End Function
    Public Property iTextFieldItemPdfDictionary(ByVal fldname As String) As PdfDictionary
        Get
            Try
                Dim fields As PdfArray = DirectCast(pdfReaderDoc.GetPageN(CInt(page)).GetAsArray(PdfName.ANNOTS), PdfArray)
                If Not (fields Is Nothing) Then
                    For field As Integer = 0 To fields.Size - 1
                        Try
                            If Not fields(field) Is Nothing Then
                                If fields(field).IsDictionary Then
                                    If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return fields.GetAsDict(field)
                                            End If
                                        End If
                                    ElseIf Not fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsString Or fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsDict(PdfName.PARENT).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return fields.GetAsDict(field)
                                            End If
                                        End If
                                    End If
                                ElseIf fields(field).IsIndirect Then
                                    If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return DirectCast(fields.GetDirectObject(field), PdfDictionary)
                                            End If
                                        End If
                                    ElseIf DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return DirectCast(fields.GetDirectObject(field), PdfDictionary)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Next
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
                If Not (acroForm Is Nothing) Then
                    Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                    For field As Integer = 0 To fields.Size - 1
                        Try
                            If Not fields(field) Is Nothing Then
                                If fields(field).IsDictionary Then
                                    If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return fields.GetAsDict(field)
                                            End If
                                        End If
                                    End If
                                ElseIf fields(field).IsIndirect Then
                                    If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return DirectCast(fields.GetDirectObject(field), PdfDictionary)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Next
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Return Nothing
        End Get
        Set(ByVal value As PdfDictionary)
            Try
                Dim fields As PdfArray = DirectCast(pdfReaderDoc.GetPageN(CInt(page)).GetAsArray(PdfName.ANNOTS), PdfArray)
                Try
                    If Not (fields Is Nothing) Then
                        For field As Integer = 0 To fields.Size - 1
                            If Not fields(field) Is Nothing Then
                                If fields(field).IsDictionary Then
                                    If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                fields(field) = value
                                            End If
                                        End If
                                    End If
                                ElseIf fields(field).IsIndirect Then
                                    If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                fields(field) = value
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
            Try
                If Not (acroForm Is Nothing) Then
                    Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                    For field As Integer = 0 To fields.Size - 1
                        If Not fields(field) Is Nothing Then
                            If fields(field).IsDictionary Then
                                If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                    If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                        If fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString = fldname Then
                                            fields(field) = value
                                            Return
                                        End If
                                    End If
                                End If
                            ElseIf fields(field).IsIndirect Then
                                If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                    If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString = fldname Then
                                            fields(field) = value
                                            Return
                                        End If
                                    End If
                                End If
                            Else
                                fields.Add(value)
                                Return
                            End If
                        End If
                    Next
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End Set
    End Property
    Public Property iTextFieldItemPdfDictionary(ByVal fldname As String, ByVal pdfreader1 As PdfReader) As PdfDictionary
        Get
            Try
                Dim fields As PdfArray = DirectCast(pdfreader1.GetPageN(CInt(page)).GetAsArray(PdfName.ANNOTS), PdfArray)
                Try
                    If Not (fields Is Nothing) Then
                        For field As Integer = 0 To fields.Size - 1
                            If Not fields(field) Is Nothing Then
                                If fields(field).IsDictionary Then
                                    If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return fields.GetAsDict(field)
                                            End If
                                        End If
                                    ElseIf Not fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsString Or fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsDict(PdfName.PARENT).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return fields.GetAsDict(field)
                                            End If
                                        End If
                                    End If
                                ElseIf fields(field).IsIndirect Then
                                    If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return DirectCast(fields.GetDirectObject(field), PdfDictionary)
                                            End If
                                        End If
                                    ElseIf DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return DirectCast(fields.GetDirectObject(field), PdfDictionary)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                    Err.Clear()
                End Try
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Err.Clear()
            End Try
            Try
                Dim acroForm As PdfDictionary = DirectCast(pdfreader1.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
                Try
                    If Not (acroForm Is Nothing) Then
                        Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                        For field As Integer = 0 To fields.Size - 1
                            If Not fields(field) Is Nothing Then
                                If fields(field).IsDictionary Then
                                    If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return fields.GetAsDict(field)
                                            End If
                                        End If
                                    End If
                                ElseIf fields(field).IsIndirect Then
                                    If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return DirectCast(fields.GetDirectObject(field), PdfDictionary)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                    Err.Clear()
                End Try
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Err.Clear()
            End Try
            Return Nothing
        End Get
        Set(ByVal value As PdfDictionary)
            Try
                Dim fields As PdfArray = DirectCast(pdfreader1.GetPageN(CInt(page)).GetAsArray(PdfName.ANNOTS), PdfArray)
                Try
                    If Not (fields Is Nothing) Then
                        For field As Integer = 0 To fields.Size - 1
                            If Not fields(field) Is Nothing Then
                                If fields(field).IsDictionary Then
                                    If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                fields(field) = value
                                            End If
                                        End If
                                    End If
                                ElseIf fields(field).IsIndirect Then
                                    If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                fields(field) = value
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                    Err.Clear()
                End Try
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Err.Clear()
            End Try
            Dim acroForm As PdfDictionary = DirectCast(pdfreader1.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
            Try
                If Not (acroForm Is Nothing) Then
                    Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                    For field As Integer = 0 To fields.Size - 1
                        If Not fields(field) Is Nothing Then
                            If fields(field).IsDictionary Then
                                If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                    If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                        If fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString = fldname Then
                                            fields(field) = value
                                            Return
                                        End If
                                    End If
                                End If
                            ElseIf fields(field).IsIndirect Then
                                If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                    If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString = fldname Then
                                            fields(field) = value
                                            Return
                                        End If
                                    End If
                                End If
                            Else
                                fields.Add(value)
                                Return
                            End If
                        End If
                    Next
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Err.Clear()
            End Try
        End Set
    End Property
    Public Property iTextFieldItemPdfDictionary(ByVal fldname As String, ByVal pdfreader1 As PdfReader, pg As Integer) As PdfDictionary
        Get
            Try
                Dim fields As PdfArray = DirectCast(pdfreader1.GetPageN(CInt(pg)).GetAsArray(PdfName.ANNOTS), PdfArray)
                Try
                    If Not (fields Is Nothing) Then
                        For field As Integer = 0 To fields.Size - 1
                            If Not fields(field) Is Nothing Then
                                If fields(field).IsDictionary Then
                                    If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return fields.GetAsDict(field)
                                            End If
                                        End If
                                    ElseIf Not fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsString Or fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsDict(PdfName.PARENT).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return fields.GetAsDict(field)
                                            End If
                                        End If
                                    End If
                                ElseIf fields(field).IsIndirect Then
                                    If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return DirectCast(fields.GetDirectObject(field), PdfDictionary)
                                            End If
                                        End If
                                    ElseIf DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsDict(PdfName.PARENT).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return DirectCast(fields.GetDirectObject(field), PdfDictionary)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                    Err.Clear()
                End Try
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Err.Clear()
            End Try
            Try
                Dim acroForm As PdfDictionary = DirectCast(pdfreader1.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
                Try
                    If Not (acroForm Is Nothing) Then
                        Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                        For field As Integer = 0 To fields.Size - 1
                            If Not fields(field) Is Nothing Then
                                If fields(field).IsDictionary Then
                                    If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return fields.GetAsDict(field)
                                            End If
                                        End If
                                    End If
                                ElseIf fields(field).IsIndirect Then
                                    If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                Return DirectCast(fields.GetDirectObject(field), PdfDictionary)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                    Err.Clear()
                End Try
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Err.Clear()
            End Try
            Return Nothing
        End Get
        Set(ByVal value As PdfDictionary)
            Try
                Dim fields As PdfArray = DirectCast(pdfreader1.GetPageN(CInt(pg)).GetAsArray(PdfName.ANNOTS), PdfArray)
                Try
                    If Not (fields Is Nothing) Then
                        For field As Integer = 0 To fields.Size - 1
                            If Not fields(field) Is Nothing Then
                                If fields(field).IsDictionary Then
                                    If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                        If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                fields(field) = value
                                            End If
                                        End If
                                    End If
                                ElseIf fields(field).IsIndirect Then
                                    If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                            Dim fldnameTemp As String = DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString
                                            If fldnameTemp = fldname Then
                                                fields(field) = value
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                    Err.Clear()
                End Try
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Err.Clear()
            End Try
            Dim acroForm As PdfDictionary = DirectCast(pdfreader1.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
            Try
                If Not (acroForm Is Nothing) Then
                    Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                    For field As Integer = 0 To fields.Size - 1
                        If Not fields(field) Is Nothing Then
                            If fields(field).IsDictionary Then
                                If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                    If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                        If fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString = fldname Then
                                            fields(field) = value
                                            Return
                                        End If
                                    End If
                                End If
                            ElseIf fields(field).IsIndirect Then
                                If Not DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T) Is Nothing Then
                                    If DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsString Or DirectCast(fields.GetDirectObject(field), PdfDictionary).Get(PdfName.T).IsIndirect Then
                                        If DirectCast(fields.GetDirectObject(field), PdfDictionary).GetAsString(PdfName.T).ToUnicodeString.ToString = fldname Then
                                            fields(field) = value
                                            Return
                                        End If
                                    End If
                                End If
                            Else
                                fields.Add(value)
                                Return
                            End If
                        End If
                    Next
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Err.Clear()
            End Try
        End Set
    End Property
    Public Function iTextRemoveFieldItem(ByVal fldname As String, ByRef pdfreader1 As PdfReader) As Boolean
        Try
            If String.IsNullOrEmpty(fldname & "") Or pdfreader1 Is Nothing Then Return False
            Dim fields As PdfArray = DirectCast(pdfreader1.GetPageN(CInt(page)).GetAsArray(PdfName.ANNOTS), PdfArray)
            Try
                If Not (fields Is Nothing) Then
                    For field As Integer = 0 To fields.Size - 1
                        If Not fields(field) Is Nothing Then
                            If fields(field).IsDictionary Then
                                If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                    If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                        Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                        If fldnameTemp = fldname Then
                                            If fields(field).IsIndirect Then
                                                PdfReader.KillIndirect(fields(field))
                                            End If
                                            fields.Remove(field)
                                        End If
                                    End If
                                ElseIf Not fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T) Is Nothing Then
                                    If fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsString Or fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsIndirect Then
                                        Dim fldnameTemp As String = fields.GetAsDict(field).GetAsDict(PdfName.PARENT).GetAsString(PdfName.T).ToUnicodeString.ToString
                                        If fldnameTemp = fldname Then
                                            If fields(field).IsIndirect Then
                                                PdfReader.KillIndirect(fields(field))
                                            End If
                                            fields.Remove(field)
                                        End If
                                    End If
                                End If
                            ElseIf fields(field).IsIndirect Then
                                If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                    If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                        Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                        If fldnameTemp = fldname Then
                                            If fields(field).IsIndirect Then
                                                PdfReader.KillIndirect(fields(field))
                                            End If
                                            fields.Remove(field)
                                        End If
                                    End If
                                ElseIf fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T) Is Nothing Then
                                    If fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsString Or fields.GetAsDict(field).GetAsDict(PdfName.PARENT).Get(PdfName.T).IsIndirect Then
                                        Dim fldnameTemp As String = fields.GetAsDict(field).GetAsDict(PdfName.PARENT).GetAsString(PdfName.T).ToUnicodeString.ToString
                                        If fldnameTemp = fldname Then
                                            If fields(field).IsIndirect Then
                                                PdfReader.KillIndirect(fields(field))
                                            End If
                                            fields.Remove(field)
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    Next
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Err.Clear()
            End Try
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Err.Clear()
        End Try
        Try
            Dim acroForm As PdfDictionary = DirectCast(pdfreader1.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
            Try
                If Not (acroForm Is Nothing) Then
                    Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                    For field As Integer = 0 To fields.Size - 1
                        If Not fields(field) Is Nothing Then
                            If fields(field).IsDictionary Then
                                If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                    If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                        Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                        If fldnameTemp = fldname Then
                                            If fields(field).IsIndirect Then
                                                PdfReader.KillIndirect(fields(field))
                                            End If
                                            fields.Remove(field)
                                        End If
                                    End If
                                End If
                            ElseIf fields(field).IsIndirect Then
                                If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                    If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                        Dim fldnameTemp As String = fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString
                                        If fldnameTemp = fldname Then
                                            If fields(field).IsIndirect Then
                                                PdfReader.KillIndirect(fields(field))
                                            End If
                                            fields.Remove(field)
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    Next
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                Err.Clear()
            End Try
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Err.Clear()
        End Try
        Return True
    End Function
    Public Sub iTextRemoveFieldItem(ByVal fldname As String)
        Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
        Try
            If Not (acroForm Is Nothing) Then
                Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                For field As Integer = 0 To fields.Size - 1
                    If Not fields(field) Is Nothing Then
                        If fields(field).IsDictionary Or fields(field).IsIndirect Then
                            If Not fields.GetAsDict(field).Get(PdfName.T) Is Nothing Then
                                If fields.GetAsDict(field).Get(PdfName.T).IsString Or fields.GetAsDict(field).Get(PdfName.T).IsIndirect Then
                                    If fields.GetAsDict(field).GetAsString(PdfName.T).ToUnicodeString.ToString = fldname Then
                                        fields.Remove(field)
                                        Return
                                    End If
                                End If
                            End If
                        End If
                    End If
                Next
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub A0_ClearPanelFieldProperties(Optional ByVal fldIndexTemp As Integer = -1, Optional ByVal forceClear As Boolean = True)
        Try
            ShowHidePDFField_Action_Panels(PDFField_Action_Panel_List)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        If PDFField_CopyAppearance.Checked And forceClear = False Then
            Try
                PDFField_Value.Text = ""
                PDFField_Value_Checked.Checked = False
                If PDFField_Visibility.SelectedIndex < 0 Then PDFField_Visibility.SelectedIndex = 0
                If PDFField_Orientation.SelectedIndex < 0 Then PDFField_Orientation.SelectedIndex = 0
            Catch ex As Exception
                Throw ex
            End Try
            Try
                If PDFField_BorderWidth.SelectedIndex < 0 Then
                    PDFField_BorderWidth.SelectedIndex = 0
                    PDFField_BorderColorPicker.BackColor = Color.Black
                End If
                If PDFField_BorderStyle.SelectedIndex < 0 Then PDFField_BorderStyle.SelectedIndex = 0
                If PDFField_FontSize.SelectedIndex < 0 Then PDFField_FontSize.SelectedIndex = 0
                If PDFField_FontFamily.SelectedIndex < 0 Then PDFField_FontFamily.SelectedIndex = 0
                If PDFField_TextAlign.SelectedIndex < 0 Then PDFField_TextAlign.SelectedIndex = 0
            Catch ex As Exception
                Throw ex
            End Try
            Try
            Catch ex As Exception
            End Try
        Else
            Try
                PDFField_Tooltip.Text = ""
                PDFField_Value.Text = ""
                PDFField_Visibility.SelectedIndex = 0
                PDFField_Orientation.SelectedIndex = 0
                PDFField_ReadOnly.Checked = False
                PDFField_Required.Checked = False
                PDFField_Locked.Checked = False
            Catch ex As Exception
                Throw ex
            End Try
            Try
                PDFField_BorderWidth.SelectedIndex = 0
                PDFField_BorderStyle.SelectedIndex = 0
                PDFField_FontSize.SelectedIndex = 0
                PDFField_FontFamily.SelectedIndex = 0
                PDFField_TextAlign.SelectedIndex = 0
                PDFField_TextColorPicker.BackColor = Color.Black
                PDFField_BorderColorPicker.BackColor = Color.Black
                PDFField_BackgroundColorPicker.BackColor = Color.White
            Catch ex As Exception
                Throw ex
            End Try
        End If
        Try
            PDFField_Action_Panel_JavaScript_TextBox.Text = ""
            PDFField_Actions_TreeView_Display.Nodes.Clear()
            PDFField_Actions_TreeView.Nodes.Clear()
            PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Clear()
            PDFField_Action_Panel_SubmitForm_FieldsIncludeSelected.Checked = True
            PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked = True
            PDFField_Action_Trigger_Select.SelectedIndex = 0
            PDFField_Action_Select.SelectedIndex = 0
            PDFField_Action_Panel_SubmitForm_URL.Text = ""
            PDFField_Action_Panel_SubmitForm_AllFields.Checked = True
            PDFField_Action_Panel_SubmitForm_Format.SelectedIndex = 0
            PDFField_Action_Panel_SubmitForm_FieldData.Checked = True
            PDFField_Action_Panel_SubmitForm_Comments.Checked = False
            PDFField_Action_Panel_SubmitForm_IncrementalChangesToPDF.Checked = False
        Catch ex As Exception
            Throw ex
        End Try
        Try
            PDFField_Format_Category.SelectedIndex = 0
            PDFField_Format_Number_DecimalPlaces.SelectedIndex = 0
            PDFField_Format_Number_SeparatorStyle.SelectedIndex = 0
            PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
            PDFField_Format_Number_CurrencySymbol_Custom.Text = ""
            PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
            PDFField_Format_Number_Negative_ShowParantheses.Checked = False
            PDFField_Format_Number_Negative_UseRedText.Checked = False
            PDFField_Format_Custom_Format_Script.Text = ""
            PDFField_Format_Custom_Keystroke_Script.Text = ""
            PDFField_Format_Specials.SelectedIndex = 0
            PDFField_Format_Special_Custom.Text = ""
            PDFField_Format_Times.SelectedIndex = 0
            PDFField_Format_Time_Custom.Text = ""
            PDFField_Format_Dates.SelectedIndex = 0
            PDFField_Format_Date_Custom.Text = ""
            PDFField_Format_Percentage_DecimalPlaces.SelectedIndex = 0
            PDFField_Format_Percentage_SeparatorStyle.SelectedIndex = 0
        Catch ex As Exception
            Throw ex
        End Try
        Try
            If Not PDFField_CopyValidation.Checked Then
                PDFField_Validation_Range_From.Text = ""
                PDFField_Validation_Range_To.Text = ""
                PDFField_Validation_Range_Custom.Text = ""
                PDFField_Validations_None.Checked = True
            End If
        Catch ex As Exception
            Throw ex
        End Try
        Try
            PDFField_Calculations_None.Checked = True
            PDFField_Calculations_Fields_FieldsListBox.SelectedIndex = -1
            PDFField_Calculations_Fields_FieldsListBox.Items.Clear()
            PDFField_Calculations_Fields_List.Text = ""
            PDFField_Calculations_SimpleFieldNotationText.Text = ""
            PDFField_Calculations_CustomCalcScript_Text.Text = ""
            PDFField_Calculations_Fields_Type.SelectedIndex = -1
        Catch ex As Exception
            Throw ex
        End Try
        Try
            PDFField_SelectionChanged_None.Checked = True
            PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = ""
        Catch ex As Exception
            Throw ex
        End Try
        Try
            PDFField_Signed_Nothing.Checked = True
            PDFField_Signed_ReadOnly_Textbox.Text = ""
            PDFField_Signed_ExecuteScript_Textbox.Text = ""
            PDFField_Signed_ReadOnlyType_ComboBox.SelectedIndex = 0
            PDFField_Signed_ReadOnly_SelectionListbox.Items.Clear()
        Catch ex As Exception
            Throw ex
        End Try
        Try
            ComboBox_ItemValue.Items.Clear()
            ComboBox_ItemDisplay.Items.Clear()
            ComboBox_SortItems.Checked = False
            ComboBox_AllowEnterCustomText.Checked = False
            ComboBox_CheckSpelling.Checked = False
            ComboBox_CommitImmediately.Checked = False
            ComboBox_ItemDisplayText.Text = ""
            ComboBox_ItemValueText.Text = ""
        Catch ex As Exception
            Throw ex
        End Try
        Try
        Catch ex As Exception
            Throw ex
        End Try
        Try
            PDFField_DefaultText.Text = ""
            PDFField_MultiLine.Checked = False
            PDFField_Scroll.Checked = False
            PDFField_RichText.Checked = False
            PDFField_CheckSpelling.Checked = False
            PDFField_Password.Checked = False
            PDFField_MaxLenChk.Checked = False
            PDFField_MaxLen.Text = ""
            PDFField_CombChk.Checked = False
            PDFField_Comb.Text = ""
            PDFField_Selection.Checked = False
        Catch ex As Exception
            Throw ex
        End Try
        Try
            RadioButton_OnValue.Text = "Yes"
            RadioButton_FieldCheckType.SelectedIndex = 0
            RadioButton_Checked.Checked = False
        Catch ex As Exception
            Throw ex
        End Try
        Try
            PuchButton_Options_Layout.SelectedIndex = 0
            PuchButton_Options_Behavior.SelectedIndex = 3
            If PuchButton_Options_State.Items.Count > 0 Then
                PuchButton_Options_State.SelectedIndex = -1
            End If
            PuchButton_Options_Label.Text = ""
            PuchButton_Options_PictureBox.Image = Nothing
            PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex = 0
            PuchButton_Options_Icon_CmbScale.SelectedIndex = 0
            PuchButton_Options_Icon_ChkFitToBounds.Checked = False
            PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value = 50
            PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value = 50
        Catch ex As Exception
            Throw ex
        End Try
        Try
            If PuchButton_Options_State.Items.Count > 0 Then
                PuchButton_Options_State.SelectedIndex = 0
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Public Function GetStringFromPdfStream(ByVal streamJS As PdfStream) As String
        Try
            If TypeOf (streamJS) Is PdfStream Then
                Return System.Text.Encoding.UTF8.GetString(PdfReader.GetStreamBytes(DirectCast(streamJS, PRStream)))
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return ""
    End Function
    Public Function isASCII(ByVal value As String) As Boolean
        Return System.Text.Encoding.UTF8.GetByteCount(value) = value.Length
    End Function
    Public Function A0_PDFFormField_LoadProperties(ByVal b() As Byte, ByVal fldname As String, Optional ByVal pageNumber As Integer = -1, Optional ByVal fieldIndex As Integer = -1) As Boolean
        If fldname = "" Then
            Return False
        End If
        If fieldIndex < 0 Then
            fieldIndex = fldKidIndex
        End If
        Try
            Dim lstFldNames As New List(Of String)
            lstFldNames.AddRange(GetAllFieldsOnPage(Session, pdfOwnerPassword, CInt(page), True, False))
            ComboBox2.Items.Clear()
            For Each fldName1 As String In lstFldNames
                If Not fldName1 Is Nothing Then
                    ComboBox2.Items.Add(fldName1)
                End If
            Next
            ComboBox3.Items.Clear()
            If Not fldname = "" And fieldIndex >= 0 Then
                ComboBox3.Enabled = True
                ComboBox2.SelectedItem = fldname
                For Each fldName2 As String In GetAllFieldsOnPage(Session, pdfOwnerPassword, CInt(page), True, True)
                    Dim fldNum As String = getPdfFieldNumber(fldName2) & ""
                    fldName2 = fldName2.Substring(0, fldName2.LastIndexOf("[")) & ""
                    If fldName2 = fldname And fldKidIndex >= 0 And fldKidIndex = CInt(fldNum) Then
                        ComboBox3.Items.Add(fldNum)
                    End If
                Next
                ComboBox3.SelectedItem = fldKidIndex.ToString
            Else
                ComboBox3.Enabled = False
            End If
        Catch exComboBoxes As Exception
            TimeStampAdd(exComboBoxes, debugMode)
            Err.Clear()
        End Try
        Dim blnPauseDraw As Boolean = cUserRect.pauseDraw
        Try
            cUserRect.pauseDraw = True
            RadioButton_CheckedByDefault.Visible = False
            Try
                If Not PDFField_Copy.Checked Then A0_ClearPanelFieldProperties(fieldIndex, False)
            Catch ex As Exception
                Throw ex
            End Try
            Try
                PDFField_TabOrder.Text = "-1"
                puchButtonIcon_Default_IconFitToBounds = False
                puchButtonIcon_Default_ScaleIcon = 0
                puchButtonIcon_Default_ProportionalIcon = 0
                puchButtonIcon_Default_IconHorizontalAdjustment = 0.5
                puchButtonIcon_Default_IconVerticalAdjustment = 0.5
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            If pdfReaderDoc Is Nothing Then
                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            ElseIf pdfReaderDoc.FileLength <= 0 Then
                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            ElseIf pdfReaderDoc.FileLength <> Session.Length Then
                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            Else
                pdfReaderDoc = New PdfReader(b.ToArray(), getBytes(pdfOwnerPassword))
            End If
            ShowHidePDFField_Action_Panels(PDFField_Action_Panel_List)
            PDFField_Format_Category.SelectedIndex = 0
            Try
                grpBoxPuchButton_IconAndLabel.Visible = True
                grpBoxPuchButton_IconPlacement.Visible = False
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                PDFField_Locked.Checked = False
                PDFField_ReadOnly.Checked = False
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                Dim memStream As New MemoryStream
                Dim stamp As PdfStamper = getStamper(pdfReaderDoc, memStream)
                Dim form As AcroFields = stamp.AcroFields
                Dim str As String = ""
                Dim item As AcroFields.Item = form.GetFieldItem(fldname)
                Dim itemIndex As Integer = 0
                Try
                    If Not iTextGetPDFObject(item.GetMerged(0), PdfName.AA) Is Nothing Then
                        Dim aa As PdfDictionary = iTextGetPDFObject(item.GetMerged(item.Size - 1), PdfName.AA)
                        If Not iTextGetPDFObject(aa, PdfName.C) Is Nothing Then
                            Dim d As Boolean = True
                        End If
                    End If
                Catch exTest As Exception
                    TimeStampAdd(exTest, debugMode)
                End Try
                Dim dict As PdfDictionary = item.GetWidget(itemIndex)
                Dim mk As PdfDictionary = iTextGetPDFObject(dict, PdfName.MK)
                Dim c As iTextSharp.text.BaseColor = Nothing
                Dim merged As PdfDictionary = item.GetMerged(itemIndex)
                Me.PDFField_MaxLenChk.Checked = False
                RadioButton_OnValue.Enabled = True
                Select Case form.GetFieldType(fldname)
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                        dict = item.GetWidget(0)
                        mk = iTextGetPDFObject(dict, PdfName.MK)
                        merged = item.GetMerged(0)
                        Dim f As iTextSharp.text.pdf.PushbuttonField = Nothing
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        f = form.GetNewPushbuttonFromField(fldname, fieldIndex, stamp.Writer)
                        Dim fldDic As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        If fldDic.Get(PdfName.KIDS) Is Nothing Then
                            form.DecodeGenericDictionary(fldDic, f)
                            mk = fldDic.GetAsDict(PdfName.MK)
                            dict = fldDic
                        ElseIf fieldIndex >= 0 Then
                            merged = fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex)
                            form.DecodeGenericDictionary(merged, f)
                            mk = merged.GetAsDict(PdfName.MK)
                            dict = merged
                        End If
                        Dim pf As PdfFormField = f.Field
                        form.DecodeGenericDictionary(dict, f)
                        Try
                            Me.PuchButton_Options_Icon_ChkFitToBounds.Checked = f.IconFitToBounds + 0
                            Me.PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex = f.ScaleIcon - 1
                            If Me.PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex <> 1 Then
                                Me.PuchButton_Options_Icon_CmbScale.SelectedIndex = IIf(f.ProportionalIcon, 0, 1)
                                Me.PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value = f.IconHorizontalAdjustment * 100
                                Me.PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value = f.IconVerticalAdjustment * 100
                            Else
                                Me.PuchButton_Options_Icon_CmbScale.SelectedIndex = 1
                                Me.PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value = f.IconHorizontalAdjustment * 100
                                Me.PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value = f.IconVerticalAdjustment * 100
                            End If
                            PuchButton_Options_Icon_Trackbar_Offset_Vertical_Scroll(Me, New EventArgs())
                            PuchButton_Options_Icon_Trackbar_Offset_Horizontal_Scroll(Me, New EventArgs())
                            puchButtonIcon_Default_IconFitToBounds = PuchButton_Options_Icon_ChkFitToBounds.Checked
                            puchButtonIcon_Default_ScaleIcon = PuchButton_Options_Icon_CmbScale.SelectedIndex
                            puchButtonIcon_Default_ProportionalIcon = PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex
                            puchButtonIcon_Default_IconHorizontalAdjustment = PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value
                            puchButtonIcon_Default_IconVerticalAdjustment = PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If Not iTextGetPDFObject(fldDic, PdfName.F) Is Nothing Then
                            Dim flags As Integer = iTextGetPDFObject(fldDic, PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        Try
                            For Each fontName As String In f.Font.FullFontName(0)
                                If Not String.IsNullOrEmpty(fontName & "") Then
                                    If PDFField_FontFamily.Items.Contains(fontName & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    ElseIf PDFField_FontFamily.Items.Contains(fontName.ToString.Replace(" ", "-") & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName.ToString.Replace(" ", "-") & ""
                                        Exit For
                                    Else
                                        If Not PDFField_FontFamily.Items.Contains(fontName & "") Then PDFField_FontFamily.Items.Add(fontName & "")
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    End If
                                End If
                            Next
                            If f.FontSize > 0 Then
                                If PDFField_FontSize.Items.Contains(CStr(CInt(f.FontSize).ToString)) Then
                                    If (CStr(CInt(f.FontSize).ToString)) = "0" Then
                                        PDFField_FontSize.SelectedIndex = PDFField_FontSize.SelectedIndex = 0
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedItem = (CStr(CInt(f.FontSize).ToString))
                                    End If
                                Else
                                    PDFField_FontSize.Items.Add((CStr(CInt(f.FontSize).ToString)))
                                End If
                            ElseIf CInt(f.FontSize) <= 0 Then
                                If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                            End If
                        Catch exFont As Exception
                            TimeStampAdd(exFont, debugMode)
                        End Try
                        If f.Rotation > 0 Then
                            PDFField_Orientation.SelectedIndex = (f.Rotation / 90)
                        ElseIf f.Rotation = 0 Then
                            PDFField_Orientation.SelectedIndex = 0
                        Else
                            Dim rot As PdfNumber = iTextGetPDFObject(mk, PdfName.R)
                            If Not rot Is Nothing Then
                                PDFField_Orientation.SelectedItem = rot.IntValue.ToString & ""
                            End If
                        End If
                        PDFField_Value.Visible = False
                        lblPDFField_Value.Visible = True
                        Dim tu As PdfString = iTextGetPDFObject(merged, PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        PuchButton_Options_Layout.SelectedIndex = f.Layout - 1
                        PuchButton_Options_StateLabelList.Clear()
                        PuchButton_Options_StateImageList.Clear()
                        PuchButton_Options_StateImageListByte.Clear()
                        PuchButton_Options_PictureBox.Image = Nothing
                        Dim behavoir As Integer = 0
                        Try
                            Dim ca As iTextSharp.text.pdf.PdfString = mk.Get(New PdfName("CA"))
                            If Not ca Is Nothing Then
                                If PuchButton_Options_StateLabelList.Count <= 0 Then
                                    PuchButton_Options_StateLabelList.Add(ca.ToUnicodeString() & "")
                                Else
                                    PuchButton_Options_StateLabelList(0) = ca.ToUnicodeString() & ""
                                End If
                            Else
                                If PuchButton_Options_StateLabelList.Count <= 0 Then
                                    PuchButton_Options_StateLabelList.Add("")
                                End If
                            End If
                            Try
                                PuchButton_Options_Label.Text = PuchButton_Options_StateLabelList(0) & ""
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                            Dim ac As iTextSharp.text.pdf.PdfString = iTextGetPDFObject(mk, PdfName.AC)
                            If Not ac Is Nothing Then
                                If PuchButton_Options_StateLabelList.Count <= 1 Then
                                    PuchButton_Options_StateLabelList.Add(ac.ToUnicodeString() & "")
                                Else
                                    PuchButton_Options_StateLabelList(1) = ac.ToUnicodeString() & ""
                                End If
                            Else
                                If PuchButton_Options_StateLabelList.Count <= 1 Then
                                    PuchButton_Options_StateLabelList.Add("")
                                End If
                            End If
                            Dim rc As iTextSharp.text.pdf.PdfString = iTextGetPDFObject(mk, PdfName.RC)
                            If Not rc Is Nothing Then
                                If PuchButton_Options_StateLabelList.Count <= 2 Then
                                    PuchButton_Options_StateLabelList.Add(rc.ToUnicodeString() & "")
                                Else
                                    PuchButton_Options_StateLabelList(2) = rc.ToUnicodeString() & ""
                                End If
                            Else
                                If PuchButton_Options_StateLabelList.Count <= 2 Then
                                    PuchButton_Options_StateLabelList.Add("")
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim ap As iTextSharp.text.pdf.PdfDictionary
                        Try
                            If Not merged Is Nothing Then
                                ap = iTextGetPDFObject(merged, PdfName.AP)
                            Else
                                ap = Nothing
                            End If
                        Catch ex As Exception
                            ap = iTextGetPDFObject(merged, PdfName.AP)
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If Not ap Is Nothing Then
                            If Not ap Is Nothing Then
                                Try
                                    If Not iTextGetPDFObject(ap, PdfName.N) Is Nothing Then
                                        Dim xobj As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(ap, PdfName.N)
                                        Dim dic1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj, PdfName.RESOURCES)
                                        Dim xobj2 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(dic1, PdfName.XOBJECT)
                                        Dim xobj3 As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj2, PdfName.FRM)
                                        Dim res1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj3, PdfName.RESOURCES)
                                        Dim xobj4 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(res1, PdfName.XOBJECT)
                                        If xobj4 Is Nothing Then Exit Try
                                        If xobj4.Keys.Count <= 0 Then Exit Try
                                        Dim imgStream As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj4, New PdfName(xobj4.Keys(0).ToString.TrimStart("/"c)))
                                        Dim imgSubtype As iTextSharp.text.pdf.PdfName = iTextGetPDFObject(imgStream, PdfName.SUBTYPE)
                                        If imgSubtype.ToString.ToLower.TrimStart("/"c) = "image" Then
                                            Dim bytes() As Byte = Nothing
                                            Try
                                                bytes = iTextSharp.text.pdf.PdfReader.GetStreamBytesRaw(imgStream)
                                                If iTextSharp.text.Image.GetInstance(bytes).IsJpeg Then
                                                    Dim imgWin As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(bytes))
                                                    PuchButton_Options_StateImageList.Add(imgWin)
                                                    PuchButton_Options_StateImageListByte.Add(bytes)
                                                    PuchButton_Options_State.SelectedIndex = 0
                                                    PuchButton_Options_PictureBox.Image = imgWin
                                                End If
                                            Catch ex As Exception
                                                PuchButton_Options_StateImageList.Add(Nothing)
                                                PuchButton_Options_StateImageListByte.Add(bytes)
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        End If
                                        behavoir += 1
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                                Try
                                    If Not iTextGetPDFObject(ap, PdfName.D) Is Nothing Then
                                        Dim xobj As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(ap, PdfName.D)
                                        Dim dic1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj, PdfName.RESOURCES)
                                        Dim xobj2 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(dic1, PdfName.XOBJECT)
                                        Dim xobj3 As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj2, PdfName.FRM)
                                        Dim res1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj3, PdfName.RESOURCES)
                                        Dim xobj4 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(res1, PdfName.XOBJECT)
                                        Dim imgStream As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj4, New PdfName(xobj4.Keys(0).ToString.TrimStart("/"c)))
                                        Dim imgSubtype As iTextSharp.text.pdf.PdfName = iTextGetPDFObject(imgStream, PdfName.SUBTYPE)
                                        If imgSubtype.ToString.ToLower.TrimStart("/"c) = "image" Then
                                            Dim bytes() As Byte = iTextSharp.text.pdf.PdfReader.GetStreamBytesRaw(imgStream)
                                            Try
                                                If iTextSharp.text.Image.GetInstance(bytes).IsJpeg Then
                                                    Dim img As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bytes)
                                                    Dim imgWin As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(bytes))
                                                    PuchButton_Options_StateImageList.Add(imgWin)
                                                    PuchButton_Options_StateImageListByte.Add(bytes)
                                                End If
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        End If
                                        behavoir += 1
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                                Try
                                    If Not iTextGetPDFObject(ap, PdfName.R) Is Nothing Then
                                        Dim xobj As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(ap, PdfName.R)
                                        Dim dic1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj, PdfName.RESOURCES)
                                        Dim xobj2 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(dic1, PdfName.XOBJECT)
                                        Dim xobj3 As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj2, PdfName.FRM)
                                        Dim res1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj3, PdfName.RESOURCES)
                                        Dim xobj4 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(res1, PdfName.XOBJECT)
                                        Dim imgStream As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj4, New PdfName(xobj4.Keys(0).ToString.TrimStart("/"c)))
                                        Dim imgSubtype As iTextSharp.text.pdf.PdfName = iTextGetPDFObject(imgStream, PdfName.SUBTYPE)
                                        If imgSubtype.ToString.ToLower.TrimStart("/"c) = "image" Then
                                            Dim bytes() As Byte = iTextSharp.text.pdf.PdfReader.GetStreamBytesRaw(imgStream)
                                            Try
                                                If iTextSharp.text.Image.GetInstance(bytes).IsJpeg Then
                                                    Dim img As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bytes)
                                                    Dim imgWin As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(bytes))
                                                    PuchButton_Options_StateImageList.Add(imgWin)
                                                    PuchButton_Options_StateImageListByte.Add(bytes)
                                                End If
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        End If
                                        behavoir += 1
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            End If
                            behavoir += 1
                        Else
                            If Not iTextGetPDFObject(merged, PdfName.AP).GetAsIndirectObject(PdfName.D) Is Nothing Then
                                behavoir += 1
                            End If
                            If Not iTextGetPDFObject(merged, PdfName.AP).GetAsIndirectObject(PdfName.R) Is Nothing Then
                                behavoir += 1
                            End If
                        End If
                        Try
                            Dim h As PdfName = Nothing
                            If Not merged.GetAsName(PdfName.H) Is Nothing Then
                                h = merged.GetAsName(PdfName.H)
                            Else
                                h = iTextGetPDFObject(merged, PdfName.H)
                            End If
                            If Not h Is Nothing Then
                                Select Case h.ToString().ToLower().Trim("/"c).Trim("\"c)
                                    Case "n"
                                        behavoir = 0
                                    Case "o"
                                        behavoir = 2
                                    Case "p"
                                        behavoir = 1
                                    Case Else
                                        behavoir = 0
                                End Select
                            Else
                                behavoir = 3
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                            behavoir = 0
                        End Try
                        PuchButton_Options_Behavior.SelectedIndex = behavoir + 0
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        Try
                            Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                            If Not bc Is Nothing Then
                                If bc.ArrayList.Count = 3 Then
                                    c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                ElseIf bc.ArrayList.Count = 4 Then
                                    c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                ElseIf bc.ArrayList.Count = 1 Then
                                    c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                End If
                            Else
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                            If Not bg Is Nothing Then
                                If bg.ArrayList.Count = 3 Then
                                    c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                ElseIf bg.ArrayList.Count = 4 Then
                                    c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                ElseIf bg.ArrayList.Count = 1 Then
                                    c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                End If
                            Else
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                        End Try
                        Try
                            For k As Integer = 0 To item.Size - 1
                                dict = item.GetWidget(k)
                                Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                                If Not (da Is Nothing) Then
                                    Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                    Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                    Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                    c = colors(colors.Length - 1)
                                    If Not c Is Nothing Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                End If
                            Next
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim mergedKid As PdfDictionary = Nothing
                            If iTextFieldItemPdfDictionary(fldname).Get(PdfName.KIDS) Is Nothing Then
                                mergedKid = item.GetMerged(0)
                            ElseIf fieldIndex >= 0 Then
                                If iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size > (fieldIndex) Then
                                    mergedKid = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex)
                                End If
                            End If
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = iTextGetPDFObject(mergedKid, nm)
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f2 As PdfString = Nothing
                                                    Dim fs As PdfName = Nothing
                                                    If iTextGetPDFObject(d, PdfName.F).GetType Is GetType(PdfDictionary) Then
                                                        Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                        fs = iTextGetPDFObject(f1, PdfName.FS)
                                                        f2 = iTextGetPDFObject(f1, PdfName.F)
                                                    ElseIf iTextGetPDFObject(d, PdfName.F).GetType Is GetType(PdfString) Then
                                                        fs = iTextGetPDFObject(d, PdfName.FS)
                                                        f2 = iTextGetPDFObject(d, PdfName.F)
                                                    End If
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                        Dim js As PdfString = iTextGetPDFObject(d, PdfName.JS)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                        newNode.Nodes.Add(actionNode)
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                        Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                        If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                            Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                            Dim jsMemStream As New MemoryStream
                                                            Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                            If Not jsBytes Is Nothing Then
                                                                Dim js As PdfString = New PdfString(jsBytes)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If PuchButton_Options_State.SelectedIndex <= 0 Then
                            PuchButton_Options_State.SelectedIndex = 0
                        End If
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                        dict = item.GetWidget(0)
                        mk = iTextGetPDFObject(dict, PdfName.MK)
                        merged = item.GetMerged(0)
                        Dim f As iTextSharp.text.pdf.TextField = form.GetNewTextFieldFromField(fldname, fieldIndex, stamp.Writer)
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        Dim fDict As iTextSharp.text.pdf.PdfFormField
                        Dim fldDic As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        If fldDic.Get(PdfName.KIDS) Is Nothing Then
                            form.DecodeGenericDictionary(fldDic, f)
                        ElseIf fieldIndex >= 0 Then
                            form.DecodeGenericDictionary(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), f)
                        Else
                            If fieldIndex = 0 Then fDict = iTextFieldItemPdfDictionary(fldname) Else fDict = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex)
                        End If
                        Try
                            For Each fontName As String In f.Font.FullFontName(0)
                                If Not String.IsNullOrEmpty(fontName & "") Then
                                    If PDFField_FontFamily.Items.Contains(fontName & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    ElseIf PDFField_FontFamily.Items.Contains(fontName.ToString.Replace(" ", "-") & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName.ToString.Replace(" ", "-") & ""
                                        Exit For
                                    Else
                                        If Not PDFField_FontFamily.Items.Contains(fontName & "") Then PDFField_FontFamily.Items.Add(fontName & "")
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    End If
                                End If
                            Next
                            If f.FontSize > 0 Then
                                If PDFField_FontSize.Items.Contains(CStr(CInt(f.FontSize).ToString)) Then
                                    If (CStr(CInt(f.FontSize).ToString)) = "0" Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedItem = (CStr(CInt(f.FontSize).ToString))
                                    End If
                                Else
                                    PDFField_FontSize.Items.Add((CStr(CInt(f.FontSize).ToString)))
                                End If
                            ElseIf CInt(f.FontSize) <= 0 Then
                                If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                            End If
                        Catch exFont As Exception
                            TimeStampAdd(exFont, debugMode)
                        End Try
                        If Not iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname), PdfName.F) Is Nothing Then
                            Dim flags As Integer = iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname), PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            Else
                                PDFField_Locked.Checked = False
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            Else
                                PDFField_ReadOnly.Checked = False
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) = iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        Dim pf As PdfFormField = f.GetTextField
                        If Not fldDic.Get(PdfName.FF) Is Nothing Then
                            Dim intFF As Integer = fldDic.GetAsNumber(PdfName.FF).IntValue
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                            End If
                            Try
                                If Not f.MaxCharacterLength = Nothing Then
                                    If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                        PDFField_Comb.Text = f.MaxCharacterLength.ToString & ""
                                        If (f.MaxCharacterLength + 0) > 0 Then
                                            PDFField_CombChk.Checked = True
                                        End If
                                        PDFField_MaxLen.Text = ""
                                        PDFField_MaxLenChk.Checked = False
                                    Else
                                        PDFField_CombChk.Checked = False
                                        PDFField_Comb.Text = ""
                                        Me.PDFField_MaxLen.Text = (f.MaxCharacterLength + 0)
                                        If (f.MaxCharacterLength + 0) > 0 Then
                                            PDFField_MaxLenChk.Checked = True
                                        End If
                                    End If
                                Else
                                    Dim ml As PdfNumber = iTextGetPDFObject(merged, PdfName.MAXLEN)
                                    If Not ml Is Nothing Then
                                        Me.PDFField_MaxLen.Text = ml.IntValue.ToString & ""
                                        If ml.IntValue > 0 Then Me.PDFField_MaxLenChk.Checked = True
                                        PDFField_CombChk.Checked = False
                                        PDFField_Comb.Text = ""
                                    Else
                                        PDFField_MaxLen.Text = ""
                                        PDFField_MaxLenChk.Checked = False
                                        PDFField_Comb.Text = ""
                                        PDFField_CombChk.Checked = False
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RICHTEXT) = iTextSharp.text.pdf.PdfFormField.FF_RICHTEXT Then
                                PDFField_RichText.Checked = True
                            Else
                                PDFField_RichText.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                                PDFField_Scroll.Checked = False
                            Else
                                PDFField_Scroll.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                                PDFField_CheckSpelling.Checked = False
                            Else
                                PDFField_CheckSpelling.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT) = iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then
                                PDFField_Selection.Checked = True
                            Else
                                PDFField_Selection.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_EDIT) = iTextSharp.text.pdf.PdfFormField.FF_EDIT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PASSWORD) = iTextSharp.text.pdf.PdfFormField.FF_PASSWORD Then
                                PDFField_Password.Checked = True
                            Else
                                PDFField_Password.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTILINE) = iTextSharp.text.pdf.PdfFormField.FF_MULTILINE Then
                                PDFField_MultiLine.Checked = True
                            Else
                                PDFField_MultiLine.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON) = iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF) = iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT) = iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                PDFField_Required.Checked = True
                            Else
                                PDFField_Required.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                PDFField_ReadOnly.Checked = True
                            Else
                                PDFField_ReadOnly.Checked = False
                            End If
                        End If
                        ShowHideTextFieldOptionCheckBoxes()
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = 0
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = 0
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 0
                        End If
                        If Not f.DefaultText Is Nothing Then
                            Me.PDFField_DefaultText.Text = f.DefaultText
                        Else
                            Me.PDFField_DefaultText.Text = ""
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        If f.Rotation > 0 Then
                            PDFField_Orientation.SelectedIndex = (f.Rotation / 90)
                        ElseIf f.Rotation = 0 Then
                            PDFField_Orientation.SelectedIndex = 0
                        Else
                            Dim rot As PdfNumber = iTextGetPDFObject(mk, PdfName.R)
                            If Not rot Is Nothing Then
                                PDFField_Orientation.SelectedItem = rot.IntValue.ToString & ""
                            End If
                        End If
                        Dim tu As PdfString = iTextGetPDFObject(merged, PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        If Not String.IsNullOrEmpty(stamp.AcroFields.GetField(f.FieldName)) Then
                            If Not f.Text Is Nothing Then
                                PDFField_Value.Text = f.Text & ""
                            Else
                                Dim v As PdfString = iTextGetPDFObject(merged, PdfName.V)
                                If Not v Is Nothing Then
                                    PDFField_Value.Text = v.ToUnicodeString()
                                Else
                                    PDFField_Value.Text = ""
                                End If
                            End If
                            If TabControl1.SelectedTab Is TabPage1 Then
                                Me.ActiveControl = PDFField_Value
                                PDFField_Value.Select()
                            End If
                        Else
                            If TabControl1.SelectedTab Is TabPage1 Then
                                PDFField_Value.Text = stamp.AcroFields.GetField(f.FieldName) & ""
                                Me.ActiveControl = PDFField_Value
                                PDFField_Value.Select()
                            End If
                        End If
                        If Not f.DefaultText Is Nothing Then
                            Me.PDFField_DefaultText.Text = f.DefaultText & ""
                        Else
                            Dim dv As PdfString = iTextGetPDFObject(merged, PdfName.DV)
                            If Not dv Is Nothing Then
                                PDFField_DefaultText.Text = dv.ToUnicodeString() & ""
                            End If
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        Else
                            Me.PDFField_Visibility.SelectedIndex = 0
                        End If
                        Try
                            Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                            If Not f.BorderColor Is Nothing Then
                                c = f.BorderColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bc Is Nothing Then
                                    If bc.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            If Not f.BackgroundColor Is Nothing Then
                                c = f.BackgroundColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bg Is Nothing Then
                                    If bg.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.Transparent
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.Transparent
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            Try
                                If Not f.TextColor Is Nothing Then
                                    c = f.TextColor
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                Else
                                    For k As Integer = 0 To item.Size - 1
                                        dict = item.GetWidget(k)
                                        Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                                        If Not (da Is Nothing) Then
                                            Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                            Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                            Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                            c = colors(colors.Length - 1)
                                            If Not c Is Nothing Then
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                            Else
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                            End If
                                        Else
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                        End If
                                    Next
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = Nothing
                                If fldDic.Get(PdfName.KIDS) Is Nothing Then
                                    a = iTextGetPDFObject(fldDic, nm)
                                Else
                                    a = iTextGetPDFObject(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), nm)
                                End If
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    Dim dTmp As PdfObject = iTextGetPDFObject(d, PdfName.JS)
                                                    If Not dTmp Is Nothing Then
                                                        If dTmp.IsString() Then
                                                            Dim js As PdfString = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        ElseIf dTmp.IsStream Then
                                                            Dim jsStream As PRStream = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not jsStream Is Nothing Then
                                                                Dim jsMemStream As New MemoryStream
                                                                Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                If Not jsBytes Is Nothing Then
                                                                    Dim js As PdfString = New PdfString(jsBytes)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            Dim dTmp As PdfObject = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not dTmp Is Nothing Then
                                                                If dTmp.IsString() Then
                                                                    Dim js As PdfString = iTextGetPDFObject(d, PdfName.JS)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                ElseIf dTmp.IsStream Then
                                                                    Dim jsStream As PRStream = iTextGetPDFObject(d, PdfName.JS)
                                                                    If Not jsStream Is Nothing Then
                                                                        Dim jsMemStream As New MemoryStream
                                                                        Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                        If Not jsBytes Is Nothing Then
                                                                            Dim js As PdfString = New PdfString(jsBytes)
                                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                                n.Name = pdfNames2(k)
                                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                                            End If
                                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                                            newNode.Nodes.Add(actionNode)
                                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim AA As PdfDictionary = Nothing
                        If Not iTextFieldItemPdfDictionary(fldname) Is Nothing Then
                            If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.AA) Is Nothing Then
                                AA = iTextFieldItemPdfDictionary(fldname).GetAsDict(PdfName.AA)
                            End If
                        End If
                        Try
                            Dim validateField As PdfDictionary = Nothing
                            If validateField Is Nothing Then
                                validateField = AA
                            End If
                            Dim strJSTMP As String = ""
                            If validateField Is Nothing Then Exit Try
                            If Not PDFField_CopyValidation.Checked Then
                                If Not iTextGetPDFObject(validateField, PdfName.V) Is Nothing Then
                                    Dim validateVV As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(validateField, PdfName.V)
                                    Dim strJS As String = iTextGetPDFString(validateVV, PdfName.JS) & ""
                                    strJSTMP = strJS & ""
                                    PDFField_Validation_Range_Custom.Text = strJSTMP & ""
                                    Dim strS As String = iTextGetPDFObject(validateVV, PdfName.S).ToString
                                    If strS.ToString.TrimStart("/"c).ToLower = "javascript" Then
                                        If strJS.TrimStart("/"c).ToLower.StartsWith("AFRange_Validate".ToLower) Then
                                            strJS = strJS.Replace(CStr("AFRange_Validate"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            Dim strJSParameters() As String = strJS.Split(","c)
                                            Try
                                                PDFField_Validation_Range_From.Text = CInt(strJSParameters(1))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                PDFField_Validation_Range_To.Text = CInt(strJSParameters(3))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            PDFField_Validations_Range.Checked = True
                                        End If
                                    End If
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        Finally
                            If Not PDFField_Validations_Range.Checked And Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                PDFField_Validations_CustomScript.Checked = True
                            End If
                        End Try
                        Try
                            Dim formatField As PdfDictionary = AA
                            If formatField Is Nothing Then
                                Exit Try
                            End If
                            Dim formatFF As PdfDictionary = iTextGetPDFObject(formatField, PdfName.F)
                            Dim strJSTMP As String = ""
                            If Not formatFF Is Nothing Then
                                Dim strJS As String = iTextGetPDFString(formatFF, PdfName.JS) & ""
                                strJSTMP = strJS & ""
                                Dim strS As String = iTextGetPDFString(formatFF, PdfName.S) & ""
                                If strS.ToString.TrimStart("/"c).ToLower = "javascript" Then
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_Format".ToLower) Then
                                        PDFField_Format_Category.SelectedIndex = 1
                                        strJS = strJS.Replace(CStr("AFNumber_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        Dim strJSParameters() As String = strJS.Split(","c)
                                        Try
                                            PDFField_Format_Number_DecimalPlaces.SelectedIndex = CInt(strJSParameters(0))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_SeparatorStyle.SelectedIndex = CInt(strJSParameters(1))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_Negative_UseRedText.Checked = False
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CInt(strJSParameters(2))
                                                Case 0
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                Case 1
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = True
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                Case 2
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = True
                                                Case 3
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = True
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = True
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_Negative_UseRedText.Checked = False
                                            PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CStr(strJSParameters(4) & "").Trim()
                                                Case ""
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case """"""
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0024""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 1
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0044\u004d""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 2
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u20ac""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 3
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0066\u006c""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 4
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0046""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 5
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u006b\u0072""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 6
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u004c\u002e\u0020""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 7
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0050\u0074\u0073""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 8
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u00a3""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 9
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u00a5""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 10
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case Else
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = PDFField_Format_Number_CurrencySymbol.Items.Count - 1
                                                    PDFField_Format_Number_CurrencySymbol_Custom.Text = HexToChar((strJSParameters(4).ToString.Replace("""", "").Trim()))
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CBool(strJSParameters(5).ToString.Trim())
                                                Case True
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = True
                                                Case False
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                                Case Else
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_Format".ToLower) Then
                                        PDFField_Format_Category.SelectedIndex = 2
                                        strJS = strJS.Replace(CStr("AFPercent_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        Dim strJSParameters() As String = strJS.Split(","c)
                                        Try
                                            PDFField_Format_Percentage_DecimalPlaces.SelectedIndex = CInt(strJSParameters(0))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Percentage_SeparatorStyle.SelectedIndex = CInt(strJSParameters(1))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        PDFField_Format_Category.SelectedIndex = 2
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_FormatEx".ToLower) Then
                                        PDFField_Format_Category.SelectedIndex = 3
                                        strJS = strJS.Replace(CStr("AFDate_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        For iVal As Integer = 0 To PDFField_Format_Dates.Items.Count - 1
                                            If strJS = PDFField_Format_Dates.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        PDFField_Format_Category.SelectedIndex = 3
                                        If selIndex >= 0 Then
                                            PDFField_Format_Dates.SelectedIndex = selIndex
                                            PDFField_Format_Date_Custom.Text = strJS.ToString
                                            PDFField_Format_Date_Custom.Visible = False
                                        Else
                                            PDFField_Format_Dates.SelectedIndex = PDFField_Format_Dates.Items.Count - 1
                                            PDFField_Format_Date_Custom.Text = strJS.ToString
                                            PDFField_Format_Date_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_Format(".ToLower) Then
                                        PDFField_Format_Category.SelectedIndex = 4
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFTime_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = CInt(strJS)
                                        PDFField_Format_Category.SelectedIndex = 4
                                        If selIndex >= 0 Then
                                            PDFField_Format_Times.SelectedIndex = selIndex
                                            PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(selIndex).ToString
                                            PDFField_Format_Time_Custom.Visible = False
                                        Else
                                            PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1
                                            PDFField_Format_Time_Custom.Text = strJSTemp.ToString
                                            PDFField_Format_Time_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_FormatEx(".ToLower) Then
                                        PDFField_Format_Category.SelectedIndex = 4
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFTime_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        For iVal As Integer = 0 To PDFField_Format_Times.Items.Count - 1
                                            If strJS = PDFField_Format_Times.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        PDFField_Format_Category.SelectedIndex = 4
                                        If selIndex >= 0 Then
                                            PDFField_Format_Times.SelectedIndex = selIndex
                                            PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(selIndex).ToString
                                            PDFField_Format_Time_Custom.Visible = False
                                        Else
                                            PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1
                                            PDFField_Format_Time_Custom.Text = strJS.ToString
                                            PDFField_Format_Time_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_Format(".ToLower) Then
                                        PDFField_Format_Category.SelectedIndex = 5
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = CInt(strJS)
                                        PDFField_Format_Category.SelectedIndex = 5
                                        If selIndex >= 0 Then
                                            PDFField_Format_Specials.SelectedIndex = selIndex
                                            PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                            PDFField_Format_Special_Custom.Visible = False
                                        Else
                                            PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                            PDFField_Format_Special_Custom.Text = strJSTemp.ToString
                                            PDFField_Format_Special_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_FormatEx(".ToLower) Then
                                        PDFField_Format_Category.SelectedIndex = 5
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        PDFField_Format_Category.SelectedIndex = 5
                                        For iVal As Integer = 0 To PDFField_Format_Specials.Items.Count - 1
                                            If strJS = PDFField_Format_Specials.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        If selIndex >= 0 Then
                                            PDFField_Format_Specials.SelectedIndex = selIndex
                                            PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                            PDFField_Format_Special_Custom.Visible = False
                                        Else
                                            PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                            PDFField_Format_Special_Custom.Text = strJS.ToString
                                            PDFField_Format_Special_Custom.Visible = True
                                        End If
                                    Else
                                        PDFField_Format_Category.SelectedIndex = 6
                                    End If
                                End If
                                PDFField_Format_Custom_Format_Script.Text = strJSTMP
                            End If
                            Dim strJSKeyStrokeTmp As String = ""
                            If True = True Then
                                If Not iTextGetPDFObject(formatField, PdfName.K) Is Nothing Then
                                    Dim formatKK As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.K)
                                    Dim strJS As String = iTextGetPDFString(formatKK, PdfName.JS) & ""
                                    strJSKeyStrokeTmp = strJS & ""
                                    Dim strS As String = iTextGetPDFObject(formatKK, PdfName.S).ToString
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_KeystrokeEx(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_KeystrokeEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                        PDFField_Format_Special_Custom.Text = strJS
                                        PDFField_Format_Special_Custom.Visible = True
                                    End If
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_(".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_(".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    Else
                                        PDFField_Format_Category.SelectedIndex = 6
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    End If
                                End If
                            End If
                            Dim SelFldList As New List(Of String)
                            PDFField_Calculations_Fields_FieldsListBox.Items.Clear()
                            For Each fdfFld As String In pdfReaderDoc.AcroFields.Fields.Keys.ToArray
                                If Not PDFField_Calculations_Fields_FieldsListBox.Items.Contains(fdfFld.Trim() & "") Then
                                    PDFField_Calculations_Fields_FieldsListBox.Items.Add(fdfFld.Trim() & "")
                                End If
                            Next
                            If Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                Dim fld As New iTextSharp.text.pdf.TextField(stamp.Writer, New iTextSharp.text.Rectangle(0, 0, 0, 0), fldname)
                                form.DecodeGenericDictionary(fldDic, fld)
                                If Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                    Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C)
                                    Dim strJS As String = ""
                                    Try
                                        If Not iTextGetPDFObject(calcScriptC, PdfName.JS) Is Nothing Then
                                            If calcScriptC.Get(PdfName.JS).IsString Then
                                                strJS = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfString).ToUnicodeString()
                                            ElseIf calcScriptC.Get(PdfName.JS).IsIndirect Then
                                                If TypeOf (iTextGetPDFObject(calcScriptC, PdfName.JS)) Is PdfStream Then
                                                    Dim streamJS As PdfStream = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfStream)
                                                    strJS = GetStringFromPdfStream(streamJS) & ""
                                                ElseIf TypeOf (iTextGetPDFObject(calcScriptC, PdfName.JS)) Is PdfString Then
                                                    Dim streamJS As PdfString = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfString)
                                                    strJS = streamJS.ToUnicodeString() & ""
                                                End If
                                            End If
                                        End If
                                    Catch ex As Exception
                                        strJS = ""
                                    End Try
                                    Dim strJSKeyStrokeTmp2 As String = strJS & ""
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                                        Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                                        PDFField_Calculations_CustomCalcScript_Text.Text = strJSTemp
                                        strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.Replace(", new Array (", ";")
                                        strJS = strJS.TrimEnd("""")
                                        PDFField_Calculations_Fields.Checked = True
                                        PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                        If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                                            Dim CalcType As String = strJS.ToString.Replace("""", "").Split(";")(0)
                                            Select Case CalcType.ToString.ToLower
                                                Case "sum"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 0
                                                Case "prd"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 1
                                                Case "avg"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 2
                                                Case "min"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 3
                                                Case "max"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 4
                                                Case Else
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = -1
                                            End Select
                                            If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                                                SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                                            End If
                                            PDFField_Calculations_Fields_FieldsListBox.SelectionMode = SelectionMode.MultiSimple
                                            Dim fldSelList As New System.Windows.Forms.ListBox.SelectedObjectCollection(PDFField_Calculations_Fields_FieldsListBox)
                                            If SelFldList.Count > 0 Then
                                                For Each str In SelFldList.ToArray
                                                    If Not String.IsNullOrEmpty(str & "") Then
                                                        If Not fldSelList.Contains(str.ToString.Trim()) Then fldSelList.Add(str.ToString.Trim() & "")
                                                    End If
                                                Next
                                            End If
                                            If Not String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                                PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimStart(","c).TrimStart(" ")
                                            End If
                                        End If
                                    ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then
                                        Dim simpleNotation As String = ""
                                        Dim i1 As Integer = strJS.IndexOf("/** BVCALC ") + "/** BVCALC ".Length
                                        Dim i2 As Integer = strJS.IndexOf(" EVCALC **/") - i1
                                        simpleNotation = strJS.Substring(i1, i2)
                                        PDFField_Calculations_SimpleFieldNotationText.Text = simpleNotation & ""
                                        PDFField_Calculations_SimpleFieldNotation.Checked = True
                                    Else
                                        If Not String.IsNullOrEmpty(strJSKeyStrokeTmp2 & "") Then
                                            PDFField_Calculations_CustomCalcScript.Checked = True
                                            PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                        Else
                                            PDFField_Calculations_CustomCalcScript_Text.Text = ""
                                        End If
                                    End If
                                Else
                                End If
                            ElseIf Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C)
                                Dim strJS As String = iTextGetPDFString(calcScriptC, PdfName.JS) & ""
                                Dim strJSKeyStrokeTmp2 As String = strJS & ""
                                Dim strS As String = iTextGetPDFObject(calcScriptC, PdfName.S).ToString
                                If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                                    Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                                    strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                                    strJS = strJS.TrimStart(CStr("("))
                                    strJS = strJS.TrimStart("""")
                                    strJS = strJS.TrimEnd(CStr(";"))
                                    strJS = strJS.TrimEnd(CStr(")"))
                                    strJS = strJS.Replace(", new Array (", ";")
                                    strJS = strJS.TrimEnd("""")
                                    PDFField_Calculations_Fields.Checked = True
                                    PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                    If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                                        Dim CalcType As String = strJS.ToString.Replace("""", "").Split(";")(0)
                                        Select Case CalcType.ToString.ToLower
                                            Case "sum"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 0
                                            Case "prd"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 1
                                            Case "avg"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 2
                                            Case "min"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 3
                                            Case "max"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 4
                                            Case Else
                                                PDFField_Calculations_Fields_Type.SelectedIndex = -1
                                        End Select
                                        If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                                            SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                                        End If
                                        For Each str In SelFldList.ToArray
                                            If String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                                PDFField_Calculations_Fields_List.Text &= str
                                            Else
                                                PDFField_Calculations_Fields_List.Text &= ", " & str
                                            End If
                                        Next
                                        If Not String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                            PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimStart(","c).TrimStart(" ")
                                        End If
                                    End If
                                ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then
                                    Dim simpleNotation As String = ""
                                    Dim i1 As Integer = strJS.IndexOf("/** BVCALC ") + "/** BVCALC ".Length
                                    Dim i2 As Integer = strJS.IndexOf(" EVCALC **/") - i1
                                    simpleNotation = strJS.Substring(i1, i2)
                                    PDFField_Calculations_SimpleFieldNotationText.Text = simpleNotation & ""
                                    PDFField_Calculations_SimpleFieldNotation.Checked = True
                                End If
                            Else
                            End If
                            If Not strJSKeyStrokeTmp = strJSTMP.ToString.Replace("Format", "Keystroke") And Not String.IsNullOrEmpty(strJSKeyStrokeTmp) Then
                                PDFField_Format_Category.SelectedIndex = 6
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                        RadioButton_CheckedByDefault.Visible = True
                        RadioButton_OnValue.Enabled = True
                        Dim radioGroup As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        Dim _fields As PdfArray = radioGroup.GetAsArray(PdfName.KIDS)
                        If radioGroup.Get(PdfName.KIDS) Is Nothing Then
                            _fields = Nothing
                        Else
                            _fields = radioGroup.GetAsArray(PdfName.KIDS)
                        End If
                        Dim _fieldDic As PdfDictionary = Nothing
                        If Not _fields Is Nothing Then
                            If Not _fields.GetDirectObject(fieldIndex) Is Nothing Then
                                _fieldDic = _fields.GetDirectObject(fieldIndex)
                            ElseIf Not _fields.GetAsIndirectObject(fieldIndex) Is Nothing Then
                                Dim _fieldDicRef As PRIndirectReference = _fields.GetAsIndirectObject(fieldIndex)
                                If pdfReaderDoc.GetPdfObject(_fieldDicRef.Number).IsDictionary Then
                                    _fieldDic = DirectCast(pdfReaderDoc.GetPdfObject(_fieldDicRef.Number), PdfDictionary)
                                End If
                            Else
                                _fieldDic = _fields.GetDirectObject(fieldIndex)
                            End If
                        Else
                            _fieldDic = radioGroup
                        End If
                        merged = _fieldDic
                        mk = iTextGetPDFObject(_fieldDic, PdfName.MK)
                        Dim ap As iTextSharp.text.pdf.PdfDictionary
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        Dim f As iTextSharp.text.pdf.RadioCheckField = stamp.AcroFields.GetNewRadioCheckFieldFromField(fldname, fieldIndex, stamp.Writer)
                        Dim xasdlkjasd As String = f.OnValue
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        form.DecodeGenericDictionary(_fieldDic, f)
                        Try
                            ap = iTextGetPDFObject(merged, PdfName.AP)
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            For Each fontName As String In f.Font.FullFontName(0)
                                If Not String.IsNullOrEmpty(fontName & "") Then
                                    If PDFField_FontFamily.Items.Contains(fontName & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    ElseIf PDFField_FontFamily.Items.Contains(fontName.ToString.Replace(" ", "-") & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName.ToString.Replace(" ", "-") & ""
                                        Exit For
                                    Else
                                        If Not PDFField_FontFamily.Items.Contains(fontName & "") Then PDFField_FontFamily.Items.Add(fontName & "")
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    End If
                                End If
                            Next
                            If f.FontSize > 0 Then
                                If PDFField_FontSize.Items.Contains(CStr(CInt(f.FontSize).ToString)) Then
                                    If (CStr(CInt(f.FontSize).ToString)) = "0" Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedItem = (CStr(CInt(f.FontSize).ToString))
                                    End If
                                Else
                                    PDFField_FontSize.Items.Add((CStr(CInt(f.FontSize).ToString)))
                                End If
                            ElseIf CInt(f.FontSize) <= 0 Then
                                If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                            End If
                        Catch exFont As Exception
                            TimeStampAdd(exFont, debugMode)
                        End Try
                        If Not radioGroup.GetAsNumber(PdfName.F) Is Nothing Then
                            Dim flags As Integer = radioGroup.GetAsNumber(PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) = iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        Dim pf As PdfFormField = f.CheckField
                        If Not radioGroup.Get(PdfName.FF) Is Nothing Then
                            Dim intFF As Integer = radioGroup.GetAsNumber(PdfName.FF).IntValue
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                PDFField_CombChk.Checked = True
                                PDFField_Comb.Text = f.MaxCharacterLength.ToString & ""
                            Else
                                PDFField_CombChk.Checked = False
                                PDFField_Comb.Text = ""
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT) = iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_EDIT) = iTextSharp.text.pdf.PdfFormField.FF_EDIT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PASSWORD) = iTextSharp.text.pdf.PdfFormField.FF_PASSWORD Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTILINE) = iTextSharp.text.pdf.PdfFormField.FF_MULTILINE Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON) = iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF) = iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT) = iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                PDFField_Required.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                PDFField_ReadOnly.Checked = True
                            End If
                        End If
                        PDFField_Value.Visible = False
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        Dim ml As PdfNumber = iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname), PdfName.MAXLEN)
                        If Not ml Is Nothing Then
                            Me.PDFField_MaxLen.Text = ml.IntValue.ToString & ""
                            If ml.IntValue > 0 Then Me.PDFField_MaxLenChk.Checked = True
                        End If
                        If f.Rotation >= 0 Then
                        End If
                        Dim dv As PdfName = Nothing
                        Try
                            Dim aps() As String = form.GetAppearanceStates(fldname).ToArray()
                            For Each aps1 As String In aps.ToArray()
                                Dim xasd As String = aps1
                            Next
                            RadioButton_OnValue.Text = f.OnValue()
                            dv = radioGroup.GetAsName(PdfName.DV)
                            If Not dv Is Nothing Then
                            Else
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        RadioButton_Checked.Checked = False
                        Dim asNameStr As String = ""
                        Try
                            If f.Checked Then
                                RadioButton_Checked.Checked = True
                            End If
                            If TabControl1.SelectedTab Is TabPage1 Then
                                Me.ActiveControl = PDFField_Value_Checked
                                PDFField_Value_Checked.Select()
                            End If
                            Dim v As PdfName = radioGroup.GetAsName(PdfName.V)
                            If Not v Is Nothing Then
                                If RadioButton_OnValue.Text = "" Then
                                    RadioButton_OnValue.Text = v.ToString.TrimStart("/"c).TrimEnd("/"c).ToString & ""
                                Else
                                End If
                                If RadioButton_OnValue.Text.ToLower = "off" Then
                                    RadioButton_OnValue.Text = "Yes"
                                Else
                                    Dim asName As PdfName = radioGroup.GetAsName(PdfName.AS)
                                    asNameStr = asName.ToString.TrimStart("/"c).TrimEnd("/"c).ToString & ""
                                    If Not v Is Nothing Then
                                        If RadioButton_OnValue.Text = asNameStr Then
                                            RadioButton_Checked.Checked = True
                                        Else
                                            RadioButton_Checked.Checked = False
                                        End If
                                    Else
                                        RadioButton_Checked.Checked = False
                                    End If
                                End If
                            End If
                            If Not radioGroup.Get(PdfName.DV) Is Nothing Then
                                Dim dvName As PdfName = radioGroup.GetAsName(PdfName.DV)
                                Dim dvNameStr = dvName.ToString.TrimStart("/"c).TrimEnd("/"c).ToString & ""
                                If dvNameStr = RadioButton_OnValue.Text Then
                                    RadioButton_CheckedByDefault.Checked = True
                                Else
                                    RadioButton_CheckedByDefault.Checked = False
                                End If
                            Else
                                RadioButton_CheckedByDefault.Checked = False
                            End If
                        Catch ex As Exception
                            RadioButton_Checked.Checked = False
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If RadioButton_Checked.Checked = True Then
                            Else
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim tu As PdfString = iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname), PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        If Not mk.Get(New PdfName("CA")) Is Nothing Then
                            Dim chckd As String = mk.Get(New PdfName("CA")).ToString & ""
                            Dim typeChars() As String = New String() {"4", "l", "8", "u", "n", "H"}
                            If Not String.IsNullOrEmpty(chckd.ToLower & "") Then
                                Select Case chckd.ToString
                                    Case typeChars(0).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 0
                                    Case typeChars(1).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 1
                                    Case typeChars(2).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 2
                                    Case typeChars(3).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 3
                                    Case typeChars(4).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 4
                                    Case typeChars(5).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 5
                                    Case Else
                                        RadioButton_FieldCheckType.SelectedIndex = 0
                                End Select
                            End If
                        End If
                        Try
                            Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                            If Not f.BorderColor Is Nothing Then
                                c = f.BorderColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bc Is Nothing Then
                                    If bc.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            If Not f.BackgroundColor Is Nothing Then
                                c = f.BackgroundColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bg Is Nothing Then
                                    If bg.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            Try
                                If Not f.TextColor Is Nothing Then
                                    c = f.TextColor
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                Else
                                    For k As Integer = 0 To item.Size - 1
                                        dict = item.GetWidget(k)
                                        Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                                        If Not (da Is Nothing) Then
                                            Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                            Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                            Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                            c = colors(colors.Length - 1)
                                            If Not c Is Nothing Then
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                            Else
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                            End If
                                        Else
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                        End If
                                    Next
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = iTextGetPDFObject(merged, nm)
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    If Not iTextGetPDFObject(d, PdfName.JS) Is Nothing Then
                                                        Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                        newNode.Nodes.Add(actionNode)
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                        Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                        If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                            Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                            Dim jsMemStream As New MemoryStream
                                                            Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                            If Not jsBytes Is Nothing Then
                                                                Dim js As PdfString = New PdfString(jsBytes)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                        Try
                            If TabControl1.SelectedTab Is TabPage1 Then
                                Me.ActiveControl = PDFField_Value_Checked
                                PDFField_Value_Checked.Select()
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim radioGroup As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        Dim _fields As PdfArray = radioGroup.GetAsArray(PdfName.KIDS)
                        Dim _fieldDic As PdfDictionary = Nothing
                        If Not _fields Is Nothing Then
                            If Not _fields.GetDirectObject(fieldIndex) Is Nothing Then
                                _fieldDic = _fields.GetDirectObject(fieldIndex)
                            ElseIf Not _fields.GetAsIndirectObject(fieldIndex) Is Nothing Then
                                Dim _fieldDicRef As PRIndirectReference = _fields.GetAsIndirectObject(fieldIndex)
                                If pdfReaderDoc.GetPdfObject(_fieldDicRef.Number).IsDictionary Then
                                    _fieldDic = DirectCast(pdfReaderDoc.GetPdfObject(_fieldDicRef.Number), PdfDictionary)
                                End If
                            Else
                                _fieldDic = _fields.GetDirectObject(fieldIndex)
                            End If
                        Else
                            _fieldDic = radioGroup
                        End If
                        merged = _fieldDic
                        mk = iTextGetPDFObject(_fieldDic, PdfName.MK)
                        PDFField_Value.Visible = False
                        lblPDFField_Value.Visible = True
                        Dim radiofield As PdfFormField = Nothing
                        Dim radioFields As New List(Of PdfFormField)
                        Dim radio As RadioCheckField = Nothing
                        Dim defaultValue As String = "Off", valueDefault As String = ""
                        Dim pdfName2 As PdfName = iTextGetPDFObject(radioGroup, PdfName.V)
                        If Not pdfName2 Is Nothing Then
                            valueDefault = pdfName2.ToString().TrimStart("/"c).ToString() & ""
                            PDFField_Value.Visible = False
                            lblPDFField_Value.Visible = True
                        End If
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        Dim f As iTextSharp.text.pdf.RadioCheckField = stamp.AcroFields.GetNewRadioCheckFieldFromField(fldname, fieldIndex, stamp.Writer)
                        RadioButton_OnValue.Text = f.OnValue()
                        If RadioButton_OnValue.Text = valueDefault And Not RadioButton_OnValue.Text = "Off" Then
                            RadioButton_Checked.Checked = True
                        Else
                            RadioButton_Checked.Checked = False
                        End If
                        PDFField_Value_Checked.Select()
                        form.DecodeGenericDictionary(_fieldDic, f)
                        If Not mk.Get(New PdfName("CA")) Is Nothing Then
                            Dim chckd As String = mk.Get(New PdfName("CA")).ToString & ""
                            Dim typeChars() As String = New String() {"4", "l", "8", "u", "n", "H"}
                            If Not String.IsNullOrEmpty(chckd.ToLower & "") Then
                                Select Case chckd.ToString
                                    Case typeChars(0).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 0
                                    Case typeChars(1).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 1
                                    Case typeChars(2).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 2
                                    Case typeChars(3).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 3
                                    Case typeChars(4).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 4
                                    Case typeChars(5).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 5
                                    Case Else
                                        RadioButton_FieldCheckType.SelectedIndex = 0
                                End Select
                            End If
                        End If
                        If Not radioGroup.GetAsNumber(PdfName.F) Is Nothing Then
                            Dim flags As Integer = radioGroup.GetAsNumber(PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) = iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        If Not radioGroup.Get(PdfName.FF) Is Nothing Then
                            Dim intFF As Integer = radioGroup.GetAsNumber(PdfName.FF).IntValue
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                PDFField_CombChk.Checked = True
                                PDFField_Comb.Text = f.MaxCharacterLength.ToString & ""
                            Else
                                PDFField_CombChk.Checked = False
                                PDFField_Comb.Text = ""
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT) = iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_EDIT) = iTextSharp.text.pdf.PdfFormField.FF_EDIT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PASSWORD) = iTextSharp.text.pdf.PdfFormField.FF_PASSWORD Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTILINE) = iTextSharp.text.pdf.PdfFormField.FF_MULTILINE Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON) = iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF) = iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT) = iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                PDFField_Required.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                PDFField_ReadOnly.Checked = True
                            End If
                        End If
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        Dim ml As PdfNumber = iTextGetPDFObject(_fieldDic, PdfName.MAXLEN)
                        If Not ml Is Nothing Then
                            Me.PDFField_MaxLen.Text = ml.IntValue.ToString & ""
                            If ml.IntValue > 0 Then Me.PDFField_MaxLenChk.Checked = True
                        End If
                        If f.Rotation >= 0 Then
                        End If
                        Dim tu As PdfString = iTextGetPDFObject(_fieldDic, PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                        If Not bc Is Nothing Then
                            If bc.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                        End If
                        Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                        If Not bg Is Nothing Then
                            If bg.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                        End If
                        Try
                            dict = item.GetWidget(fieldIndex)
                            Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                            If Not (da Is Nothing) Then
                                Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                Dim asd1 = item.GetWidget(fieldIndex).GetAsString(PdfName.DA)
                                Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                c = colors(colors.Length - 1)
                                If Not c Is Nothing Then
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                End If
                            Else
                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = iTextGetPDFObject(merged, nm)
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                        Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                        newNode.Nodes.Add(actionNode)
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                        Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                        If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                            Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                            Dim jsMemStream As New MemoryStream
                                                            Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                            If Not jsBytes Is Nothing Then
                                                                Dim js As PdfString = New PdfString(jsBytes)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                        ComboBox_ItemDisplay.SelectionMode = SelectionMode.One
                        PDFEdit_Options_ComboBoxes.Visible = True
                        ListBox_Additional_Options.Visible = False
                        ComboBox_Additional_Options.Visible = True
                        dict = item.GetWidget(0)
                        mk = iTextGetPDFObject(dict, PdfName.MK)
                        merged = item.GetMerged(0)
                        Dim f As iTextSharp.text.pdf.TextField = form.GetNewComboFromField(fldname, fieldIndex, stamp.Writer)
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        Dim fDict As iTextSharp.text.pdf.PdfFormField
                        Dim fldDic As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        If fldDic.Get(PdfName.KIDS) Is Nothing Then
                            form.DecodeGenericDictionary(fldDic, f)
                            For Each k As PdfName In fldDic.Keys.ToArray()
                                f.GetComboField.Put(k, fldDic.Get(k))
                            Next
                        ElseIf fieldIndex >= 0 Then
                            form.DecodeGenericDictionary(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), f)
                            For Each k As PdfName In fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex).Keys.ToArray()
                                f.GetComboField.Put(k, fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex).Get(k))
                            Next
                        Else
                            If fieldIndex >= 0 Then
                                fDict = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex)
                                For Each k As PdfName In fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex).Keys.ToArray()
                                    f.GetComboField.Put(k, fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex).Get(k))
                                Next
                            Else
                                fDict = iTextFieldItemPdfDictionary(fldname)
                                For Each k As PdfName In fDict.Keys.ToArray()
                                    f.GetComboField.Put(k, fDict.Get(k))
                                Next
                            End If
                        End If
                        Try
                            For Each fontName As String In f.Font.FullFontName(0)
                                If Not String.IsNullOrEmpty(fontName & "") Then
                                    If PDFField_FontFamily.Items.Contains(fontName & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    ElseIf PDFField_FontFamily.Items.Contains(fontName.ToString.Replace(" ", "-") & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName.ToString.Replace(" ", "-") & ""
                                        Exit For
                                    Else
                                        If Not PDFField_FontFamily.Items.Contains(fontName & "") Then PDFField_FontFamily.Items.Add(fontName & "")
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    End If
                                End If
                            Next
                            If f.FontSize > 0 Then
                                If PDFField_FontSize.Items.Contains(CStr(CInt(f.FontSize).ToString)) Then
                                    If (CStr(CInt(f.FontSize).ToString)) = "0" Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedItem = (CStr(CInt(f.FontSize).ToString))
                                    End If
                                Else
                                    PDFField_FontSize.Items.Add((CStr(CInt(f.FontSize).ToString)))
                                End If
                            ElseIf CInt(f.FontSize) <= 0 Then
                                If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                            End If
                        Catch exFont As Exception
                            TimeStampAdd(exFont, debugMode)
                        End Try
                        If Not iTextGetPDFObject(fldDic, PdfName.F) Is Nothing Then
                            Dim flags As Integer = iTextGetPDFObject(merged, PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) = iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        Dim pf As PdfFormField = f.GetComboField
                        If Not iTextGetPDFObject(fldDic, PdfName.FF) Is Nothing Then
                            Dim intFF As Integer = iTextGetPDFObject(merged, PdfName.FF).IntValue + 0
                            If intFF >= 67108864 Then
                                ComboBox_CommitImmediately.Checked = True
                            Else
                                ComboBox_CommitImmediately.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                                PDFField_Selection.Checked = True
                            Else
                                PDFField_Selection.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                PDFField_CombChk.Checked = True
                                PDFField_Comb.Text = f.MaxCharacterLength.ToString & ""
                            Else
                                PDFField_CombChk.Checked = False
                                PDFField_Comb.Text = ""
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                                PDFField_Scroll.Checked = False
                            Else
                                PDFField_Scroll.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                                ComboBox_CheckSpelling.Checked = False
                            Else
                                ComboBox_CheckSpelling.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT) = iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_EDIT) = iTextSharp.text.pdf.PdfFormField.FF_EDIT Then
                                ComboBox_AllowEnterCustomText.Checked = True
                            Else
                                ComboBox_AllowEnterCustomText.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON) = iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF) = iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PASSWORD) = iTextSharp.text.pdf.PdfFormField.FF_PASSWORD Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTILINE) = iTextSharp.text.pdf.PdfFormField.FF_MULTILINE Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT) = iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                PDFField_Required.Checked = True
                            Else
                                PDFField_Required.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                PDFField_ReadOnly.Checked = True
                            Else
                                PDFField_ReadOnly.Checked = False
                            End If
                        End If
                        Dim optInteger As Integer = f.Options
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        Dim ml As PdfNumber = iTextGetPDFObject(merged, PdfName.MAXLEN)
                        If Not ml Is Nothing Then
                            Me.PDFField_MaxLen.Text = ml.IntValue.ToString & ""
                            If ml.IntValue > 0 Then Me.PDFField_MaxLenChk.Checked = True
                        End If
                        If f.Rotation >= 0 Then
                        End If
                        If Not f.Text Is Nothing Then
                            Me.PDFField_DefaultText.Text = f.Text & ""
                        Else
                            Dim v As PdfString = mk.Get(New PdfName("CA"))
                            If Not v Is Nothing Then
                                Me.PDFField_DefaultText.Text = v.ToString() & ""
                            End If
                        End If
                        Dim tu As PdfString = iTextGetPDFObject(merged, PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        Dim opt As PdfArray = merged.GetAsArray(PdfName.OPT)
                        If Not opt Is Nothing Then
                            Dim optItemDisplay As New List(Of String), optItemValue As New List(Of String)
                            For i As Integer = 0 To opt.Size - 1
                                If opt(i).IsArray Then
                                    Dim optItems As PdfArray = opt.GetAsArray(i)
                                    If optItems.Size = 2 Then
                                        ComboBox_ItemDisplay.Items.Add(optItems.GetAsString(1).ToString & "")
                                        ComboBox_ItemValue.Items.Add(optItems.GetAsString(0).ToString & "")
                                    ElseIf optItems.Size = 1 Then
                                        ComboBox_ItemDisplay.Items.Add(optItems.GetAsString(0).ToString & "")
                                        ComboBox_ItemValue.Items.Add(optItems.GetAsString(0).ToString & "")
                                    End If
                                ElseIf opt(i).IsString Then
                                    ComboBox_ItemDisplay.Items.Add(opt.GetAsString(i).ToUnicodeString() & "")
                                    ComboBox_ItemValue.Items.Add(opt.GetAsString(i).ToUnicodeString() & "")
                                End If
                            Next
                            Dim val As String = stamp.AcroFields.GetListSelection(fldname)(0)
                            btnComboBox_ItemDefault.Text = val & ""
                            If Not String.IsNullOrEmpty(val) Then
                                For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                                    If ComboBox_ItemValue.Items(i).ToString = val Then
                                        ComboBox_ItemDisplay.SelectedIndex = i
                                        Exit For
                                    End If
                                Next
                            End If
                        End If
                        Try
                            If Not f.Text Is Nothing Then
                                PDFField_Value.Text = f.Text & ""
                            Else
                                Dim v As PdfString = iTextGetPDFObject(merged, PdfName.V)
                                If Not v Is Nothing Then
                                    PDFField_Value.Text = v.ToUnicodeString()
                                Else
                                    PDFField_Value.Text = ""
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If Not f.DefaultText Is Nothing Then
                                Me.PDFField_DefaultText.Text = f.DefaultText & ""
                            Else
                                Dim dv As PdfString = iTextGetPDFObject(merged, PdfName.DV)
                                If Not dv Is Nothing Then
                                    PDFField_DefaultText.Text = dv.ToUnicodeString() & ""
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        Else
                            Me.PDFField_Visibility.SelectedIndex = 0
                        End If
                        Try
                            Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                            If Not f.BorderColor Is Nothing Then
                                c = f.BorderColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bc Is Nothing Then
                                    If bc.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            If Not f.BackgroundColor Is Nothing Then
                                c = f.BackgroundColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bg Is Nothing Then
                                    If bg.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            Try
                                If Not f.TextColor Is Nothing Then
                                    c = f.TextColor
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                Else
                                    For k As Integer = 0 To item.Size - 1
                                        dict = item.GetWidget(k)
                                        Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                                        If Not (da Is Nothing) Then
                                            Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                            Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                            Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                            c = colors(colors.Length - 1)
                                            If Not c Is Nothing Then
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                            Else
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                            End If
                                        Else
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                        End If
                                    Next
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = Nothing
                                If fldDic.Get(PdfName.KIDS) Is Nothing Then
                                    a = iTextGetPDFObject(fldDic, nm)
                                Else
                                    a = iTextGetPDFObject(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), nm)
                                End If
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    Dim dTmp As PdfObject = iTextGetPDFObject(d, PdfName.JS)
                                                    If Not dTmp Is Nothing Then
                                                        If dTmp.IsString() Then
                                                            Dim js As PdfString = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        ElseIf dTmp.IsStream Then
                                                            Dim jsStream As PRStream = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not jsStream Is Nothing Then
                                                                Dim jsMemStream As New MemoryStream
                                                                Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                If Not jsBytes Is Nothing Then
                                                                    Dim js As PdfString = New PdfString(jsBytes)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            Dim dTmp As PdfObject = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not dTmp Is Nothing Then
                                                                If dTmp.IsString() Then
                                                                    Dim js As PdfString = iTextGetPDFObject(d, PdfName.JS)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                ElseIf dTmp.IsStream Then
                                                                    Dim jsStream As PRStream = iTextGetPDFObject(d, PdfName.JS)
                                                                    If Not jsStream Is Nothing Then
                                                                        Dim jsMemStream As New MemoryStream
                                                                        Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                        If Not jsBytes Is Nothing Then
                                                                            Dim js As PdfString = New PdfString(jsBytes)
                                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                                n.Name = pdfNames2(k)
                                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                                            End If
                                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                                            newNode.Nodes.Add(actionNode)
                                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim AA As PdfDictionary = Nothing
                        If Not iTextFieldItemPdfDictionary(fldname) Is Nothing Then
                            If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.AA) Is Nothing Then
                                AA = iTextFieldItemPdfDictionary(fldname).GetAsDict(PdfName.AA)
                            End If
                        End If
                        Try
                            PDFField_Validations_None.Checked = True
                            Dim validateField As PdfDictionary = Nothing
                            If validateField Is Nothing Then
                                validateField = AA
                            End If
                            Dim strJSTMP As String = ""
                            If Not PDFField_CopyValidation.Checked Then
                                If Not iTextGetPDFObject(validateField, PdfName.V) Is Nothing Then
                                    Dim validateVV As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(validateField, PdfName.V)
                                    Dim strJS As String = iTextGetPDFString(validateVV, PdfName.JS) & ""
                                    strJSTMP = strJS & ""
                                    PDFField_Validation_Range_Custom.Text = strJSTMP & ""
                                    Dim strS As String = iTextGetPDFObject(validateVV, PdfName.S).ToString
                                    If strS.ToString.TrimStart("/"c).ToLower = "javascript" Then
                                        If strJS.TrimStart("/"c).ToLower.StartsWith("AFRange_Validate".ToLower) Then
                                            strJS = strJS.Replace(CStr("AFRange_Validate"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            Dim strJSParameters() As String = strJS.Split(","c)
                                            Try
                                                PDFField_Validation_Range_From.Text = CInt(strJSParameters(1))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                PDFField_Validation_Range_To.Text = CInt(strJSParameters(3))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            PDFField_Validations_Range.Checked = True
                                        End If
                                    End If
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        Finally
                            If Not PDFField_Validations_Range.Checked And Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                PDFField_Validations_CustomScript.Checked = True
                            End If
                        End Try
                        Try
                            PDFField_Format_Category.SelectedIndex = 0
                            Dim formatField As PdfDictionary = AA
                            If formatField Is Nothing Then
                                Exit Try
                            End If
                            Dim formatFF As PdfDictionary = iTextGetPDFObject(formatField, PdfName.F)
                            Dim strJSTMP As String = ""
                            If Not formatFF Is Nothing Then
                                Dim strJS As String = iTextGetPDFString(formatFF, PdfName.JS) & ""
                                strJSTMP = strJS & ""
                                Dim strS As String = iTextGetPDFString(formatFF, PdfName.S) & ""
                                If strS.ToString.TrimStart("/"c).ToLower = "javascript" Then
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_Format".ToLower) Then
                                        strJS = strJS.Replace(CStr("AFNumber_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        Dim strJSParameters() As String = strJS.Split(","c)
                                        Try
                                            PDFField_Format_Number_DecimalPlaces.SelectedIndex = CInt(strJSParameters(0))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_SeparatorStyle.SelectedIndex = CInt(strJSParameters(1))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_Negative_UseRedText.Checked = False
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CInt(strJSParameters(2))
                                                Case 0
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                Case 1
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = True
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                Case 2
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = True
                                                Case 3
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = True
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = True
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_Negative_UseRedText.Checked = False
                                            PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CStr(strJSParameters(4) & "").Trim()
                                                Case ""
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case """"""
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0024""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 1
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0044\u004d""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 2
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u20ac""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 3
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0066\u006c""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 4
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0046""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 5
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u006b\u0072""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 6
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u004c\u002e\u0020""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 7
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0050\u0074\u0073""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 8
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u00a3""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 9
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u00a5""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 10
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case Else
                                                    PDFField_Format_Number_CurrencySymbol.Items.Add(strJSParameters(4))
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = PDFField_Format_Number_CurrencySymbol.Items.Count - 1
                                                    PDFField_Format_Category.SelectedIndex = PDFField_Format_Category.Items.Count - 1
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CBool(strJSParameters(5).ToString.Trim())
                                                Case True
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = True
                                                Case False
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                                Case Else
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_Format".ToLower) Then
                                        strJS = strJS.Replace(CStr("AFPercent_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        Dim strJSParameters() As String = strJS.Split(","c)
                                        Try
                                            PDFField_Format_Percentage_DecimalPlaces.SelectedIndex = CInt(strJSParameters(0))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Percentage_SeparatorStyle.SelectedIndex = CInt(strJSParameters(1))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        PDFField_Format_Category.SelectedIndex = 2
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_FormatEx".ToLower) Then
                                        strJS = strJS.Replace(CStr("AFDate_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        For iVal As Integer = 0 To PDFField_Format_Dates.Items.Count - 1
                                            If strJS = PDFField_Format_Dates.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        PDFField_Format_Category.SelectedIndex = 3
                                        If selIndex >= 0 Then
                                            PDFField_Format_Dates.SelectedIndex = selIndex
                                            PDFField_Format_Date_Custom.Text = strJS.ToString
                                            PDFField_Format_Date_Custom.Visible = False
                                        Else
                                            PDFField_Format_Dates.SelectedIndex = PDFField_Format_Dates.Items.Count - 1
                                            PDFField_Format_Date_Custom.Text = strJS.ToString
                                            PDFField_Format_Date_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_Format(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFTime_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = CInt(strJS)
                                        PDFField_Format_Category.SelectedIndex = 4
                                        If selIndex >= 0 Then
                                            PDFField_Format_Times.SelectedIndex = selIndex
                                            PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(selIndex).ToString
                                            PDFField_Format_Time_Custom.Visible = False
                                        Else
                                            PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1
                                            PDFField_Format_Time_Custom.Text = strJSTemp.ToString
                                            PDFField_Format_Time_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_FormatEx(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFTime_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        For iVal As Integer = 0 To PDFField_Format_Times.Items.Count - 1
                                            If strJS = PDFField_Format_Times.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        PDFField_Format_Category.SelectedIndex = 4
                                        If selIndex >= 0 Then
                                            PDFField_Format_Times.SelectedIndex = selIndex
                                            PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(selIndex).ToString
                                            PDFField_Format_Time_Custom.Visible = False
                                        Else
                                            PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1
                                            PDFField_Format_Time_Custom.Text = strJS.ToString
                                            PDFField_Format_Time_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_Format(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = CInt(strJS)
                                        PDFField_Format_Category.SelectedIndex = 5
                                        If selIndex >= 0 Then
                                            PDFField_Format_Specials.SelectedIndex = selIndex
                                            PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                            PDFField_Format_Special_Custom.Visible = False
                                        Else
                                            PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                            PDFField_Format_Special_Custom.Text = strJSTemp.ToString
                                            PDFField_Format_Special_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_FormatEx(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        PDFField_Format_Category.SelectedIndex = 5
                                        For iVal As Integer = 0 To PDFField_Format_Specials.Items.Count - 1
                                            If strJS = PDFField_Format_Specials.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        If selIndex >= 0 Then
                                            PDFField_Format_Specials.SelectedIndex = selIndex
                                            PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                            PDFField_Format_Special_Custom.Visible = False
                                        Else
                                            PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                            PDFField_Format_Special_Custom.Text = strJS.ToString
                                            PDFField_Format_Special_Custom.Visible = True
                                        End If
                                    End If
                                End If
                                PDFField_Format_Custom_Format_Script.Text = strJSTMP
                            End If
                            Dim strJSKeyStrokeTmp As String = ""
                            If True = True Then
                                If Not iTextGetPDFObject(formatField, PdfName.K) Is Nothing Then
                                    Dim formatKK As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.K)
                                    Dim strJS As String = iTextGetPDFString(formatKK, PdfName.JS) & ""
                                    strJSKeyStrokeTmp = strJS & ""
                                    Dim strS As String = iTextGetPDFObject(formatKK, PdfName.S).ToString
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_KeystrokeEx(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_KeystrokeEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                        PDFField_Format_Special_Custom.Text = strJS
                                        PDFField_Format_Special_Custom.Visible = True
                                    End If
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_(".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_(".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    Else
                                        PDFField_Format_Category.SelectedIndex = 6
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    End If
                                End If
                            End If
                            Dim SelFldList As New List(Of String)
                            PDFField_Calculations_Fields_FieldsListBox.Items.Clear()
                            For Each fdfFld As String In pdfReaderDoc.AcroFields.Fields.Keys.ToArray
                                If Not PDFField_Calculations_Fields_FieldsListBox.Items.Contains(fdfFld.Trim() & "") Then
                                    PDFField_Calculations_Fields_FieldsListBox.Items.Add(fdfFld.Trim() & "")
                                End If
                            Next
                            If Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                If Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                    Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C)
                                    Dim strJS As String = iTextGetPDFString(calcScriptC, PdfName.JS) & ""
                                    Dim strJSKeyStrokeTmp2 As String = strJS & ""
                                    Dim strS As String = iTextGetPDFObject(calcScriptC, PdfName.S).ToString
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                                        Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                                        PDFField_Calculations_CustomCalcScript_Text.Text = strJSTemp
                                        strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.Replace(", new Array (", ";")
                                        strJS = strJS.TrimEnd("""")
                                        PDFField_Calculations_Fields.Checked = True
                                        PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                        If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                                            Dim CalcType As String = strJS.ToString.Replace("""", "").Split(";")(0)
                                            Select Case CalcType.ToString.ToLower
                                                Case "sum"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 0
                                                Case "prd"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 1
                                                Case "avg"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 2
                                                Case "min"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 3
                                                Case "max"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 4
                                                Case Else
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = -1
                                            End Select
                                            If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                                                SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                                            End If
                                            PDFField_Calculations_Fields_FieldsListBox.SelectionMode = SelectionMode.MultiSimple
                                            Dim fldSelList As New System.Windows.Forms.ListBox.SelectedObjectCollection(PDFField_Calculations_Fields_FieldsListBox)
                                            If SelFldList.Count > 0 Then
                                                For Each str In SelFldList.ToArray
                                                    If Not String.IsNullOrEmpty(str & "") Then
                                                        If Not fldSelList.Contains(str.ToString.Trim()) Then fldSelList.Add(str.ToString.Trim() & "")
                                                    End If
                                                Next
                                            End If
                                            If Not String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                                PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimStart(","c).TrimStart(" ")
                                            End If
                                        End If
                                    ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then
                                        Dim simpleNotation As String = ""
                                        Dim i1 As Integer = strJS.IndexOf("/** BVCALC ") + "/** BVCALC ".Length
                                        Dim i2 As Integer = strJS.IndexOf(" EVCALC **/") - i1
                                        simpleNotation = strJS.Substring(i1, i2)
                                        PDFField_Calculations_SimpleFieldNotationText.Text = simpleNotation & ""
                                        PDFField_Calculations_SimpleFieldNotation.Checked = True
                                    Else
                                        If Not String.IsNullOrEmpty(strJSKeyStrokeTmp2 & "") Then
                                            PDFField_Calculations_CustomCalcScript.Checked = True
                                            PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                        Else
                                            PDFField_Calculations_CustomCalcScript_Text.Text = ""
                                        End If
                                    End If
                                Else
                                End If
                            ElseIf Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C)
                                Dim strJS As String = iTextGetPDFString(calcScriptC, PdfName.JS) & ""
                                Dim strJSKeyStrokeTmp2 As String = strJS & ""
                                Dim strS As String = iTextGetPDFObject(calcScriptC, PdfName.S).ToString
                                If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                                    Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                                    PDFField_Calculations_CustomCalcScript_Text.Text = strJSTemp
                                    strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                                    strJS = strJS.TrimStart(CStr("("))
                                    strJS = strJS.TrimStart("""")
                                    strJS = strJS.TrimEnd(CStr(";"))
                                    strJS = strJS.TrimEnd(CStr(")"))
                                    strJS = strJS.Replace(", new Array (", ";")
                                    strJS = strJS.TrimEnd("""")
                                    PDFField_Calculations_Fields.Checked = True
                                    PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                    If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                                        Dim CalcType As String = strJS.ToString.Replace("""", "").Split(";")(0)
                                        Select Case CalcType.ToString.ToLower
                                            Case "sum"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 0
                                            Case "prd"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 1
                                            Case "avg"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 2
                                            Case "min"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 3
                                            Case "max"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 4
                                            Case Else
                                                PDFField_Calculations_Fields_Type.SelectedIndex = -1
                                        End Select
                                        If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                                            SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                                        End If
                                        For Each str In SelFldList.ToArray
                                            If String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                                PDFField_Calculations_Fields_List.Text &= str
                                            Else
                                                PDFField_Calculations_Fields_List.Text &= ", " & str
                                            End If
                                        Next
                                        If Not String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                            PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimStart(","c).TrimStart(" ")
                                        End If
                                    End If
                                ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then
                                    Dim simpleNotation As String = ""
                                    Dim i1 As Integer = strJS.IndexOf("/** BVCALC ") + "/** BVCALC ".Length
                                    Dim i2 As Integer = strJS.IndexOf(" EVCALC **/") - i1
                                    simpleNotation = strJS.Substring(i1, i2)
                                    PDFField_Calculations_SimpleFieldNotationText.Text = simpleNotation & ""
                                    PDFField_Calculations_SimpleFieldNotation.Checked = True
                                End If
                            Else
                            End If
                            If Not strJSKeyStrokeTmp = strJSTMP.ToString.Replace("Format", "Keystroke") And Not String.IsNullOrEmpty(strJSKeyStrokeTmp) Then
                                PDFField_Format_Category.SelectedIndex = 6
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If TabControl1.SelectedTab Is TabPage3 Then
                                Me.ActiveControl = ComboBox_ItemDisplay
                                ComboBox_ItemDisplay.Select()
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                        PDFEdit_Options_ComboBoxes.Visible = True
                        ListBox_Additional_Options.Visible = True
                        ComboBox_Additional_Options.Visible = False
                        dict = item.GetWidget(0)
                        mk = iTextGetPDFObject(dict, PdfName.MK)
                        merged = item.GetMerged(0)
                        Dim f As iTextSharp.text.pdf.TextField = form.GetNewListboxFromField(fldname, fieldIndex, stamp.Writer)
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        Dim fDict As iTextSharp.text.pdf.PdfFormField
                        Dim fldDic As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        If fldDic.Get(PdfName.KIDS) Is Nothing Then
                            form.DecodeGenericDictionary(fldDic, f)
                        ElseIf fieldIndex >= 0 Then
                            form.DecodeGenericDictionary(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), f)
                            mk = fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex).GetAsDict(PdfName.MK)
                        Else
                            If fieldIndex = 0 Then fDict = iTextFieldItemPdfDictionary(fldname) Else fDict = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex)
                        End If
                        Try
                            For Each fontName As String In f.Font.FullFontName(0)
                                If Not String.IsNullOrEmpty(fontName & "") Then
                                    If PDFField_FontFamily.Items.Contains(fontName & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    ElseIf PDFField_FontFamily.Items.Contains(fontName.ToString.Replace(" ", "-") & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName.ToString.Replace(" ", "-") & ""
                                        Exit For
                                    Else
                                        If Not PDFField_FontFamily.Items.Contains(fontName & "") Then PDFField_FontFamily.Items.Add(fontName & "")
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    End If
                                End If
                            Next
                            If f.FontSize > 0 Then
                                If PDFField_FontSize.Items.Contains(CStr(CInt(f.FontSize).ToString)) Then
                                    If (CStr(CInt(f.FontSize).ToString)) = "0" Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedItem = (CStr(CInt(f.FontSize).ToString))
                                    End If
                                Else
                                    PDFField_FontSize.Items.Add((CStr(CInt(f.FontSize).ToString)))
                                End If
                            ElseIf CInt(f.FontSize) <= 0 Then
                                If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                            End If
                        Catch exFont As Exception
                            TimeStampAdd(exFont, debugMode)
                        End Try
                        If Not iTextGetPDFObject(fldDic, PdfName.F) Is Nothing Then
                            Dim flags As Integer = iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname), PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) = iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        Dim pf As PdfFormField = f.GetListField
                        If Not fldDic.Get(PdfName.FF) Is Nothing Then
                            Dim intFF As Integer = fldDic.GetAsNumber(PdfName.FF).IntValue
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                PDFField_CombChk.Checked = True
                                PDFField_Comb.Text = f.MaxCharacterLength.ToString & ""
                            Else
                                PDFField_CombChk.Checked = False
                                PDFField_Comb.Text = ""
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT) = iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_EDIT) = iTextSharp.text.pdf.PdfFormField.FF_EDIT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PASSWORD) = iTextSharp.text.pdf.PdfFormField.FF_PASSWORD Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTILINE) = iTextSharp.text.pdf.PdfFormField.FF_MULTILINE Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON) = iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF) = iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT) = iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                PDFField_Required.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                PDFField_ReadOnly.Checked = True
                            End If
                        End If
                        Dim optInteger As Integer = fldDic.GetAsNumber(PdfName.FF).IntValue + 0
                        ListBox_Options_MultipleSelection.Enabled = True
                        ListBox_Options_Commit.Enabled = True
                        If optInteger >= 67108864 Then
                            ListBox_Options_Commit.Checked = True
                            ListBox_Options_MultipleSelection.Checked = False
                            optInteger = optInteger - 67108864
                            ComboBox_ItemDisplay.SelectionMode = SelectionMode.One
                        Else
                            If optInteger >= iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                                ListBox_Options_MultipleSelection.Checked = True
                                ListBox_Options_Commit.Checked = False
                                optInteger = optInteger - iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT
                                ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple
                            Else
                                ListBox_Options_MultipleSelection.Checked = False
                                ListBox_Options_Commit.Checked = False
                                ComboBox_ItemDisplay.SelectionMode = SelectionMode.One
                            End If
                        End If
                        If optInteger >= iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                        End If
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        Dim ml As PdfNumber = iTextGetPDFObject(merged, PdfName.MAXLEN)
                        If Not ml Is Nothing Then
                            Me.PDFField_MaxLen.Text = ml.IntValue.ToString & ""
                            If ml.IntValue > 0 Then Me.PDFField_MaxLenChk.Checked = True
                        End If
                        If f.Rotation >= 0 Then
                        End If
                        If Not f.Text Is Nothing Then
                            Me.PDFField_DefaultText.Text = f.Text & ""
                        Else
                            Dim v As PdfString = mk.Get(New PdfName("CA"))
                            If Not v Is Nothing Then
                                Me.PDFField_DefaultText.Text = v.ToString() & ""
                            End If
                        End If
                        Dim opt As PdfArray = fldDic.GetAsArray(PdfName.OPT)
                        If Not opt Is Nothing Then
                            Dim optItemDisplay As New List(Of String), optItemValue As New List(Of String)
                            For i As Integer = 0 To opt.Size - 1
                                Dim optItems As PdfArray = opt.GetAsArray(i)
                                If optItems.Size = 2 Then
                                    ComboBox_ItemDisplay.Items.Add(optItems.GetAsString(1).ToString & "")
                                    ComboBox_ItemValue.Items.Add(optItems.GetAsString(0).ToString & "")
                                ElseIf optItems.Size = 1 Then
                                    ComboBox_ItemDisplay.Items.Add(optItems.GetAsString(0).ToString & "")
                                    ComboBox_ItemValue.Items.Add(optItems.GetAsString(0).ToString & "")
                                End If
                            Next
                        End If
                        If ListBox_Options_MultipleSelection.Checked = True Then
                            Dim valArray As PdfArray = fldDic.GetAsArray(PdfName.I)
                            btnComboBox_ItemDefault.Text = ""
                            ComboBox_ItemDisplay.ClearSelected()
                            If Not valArray Is Nothing Then
                                For vIndex As Integer = 0 To valArray.Size - 1
                                    Dim iSel As Integer = valArray.GetAsNumber(vIndex).IntValue & ""
                                    ComboBox_ItemDisplay.SetSelected(CInt(iSel), True)
                                Next
                                btnComboBox_ItemDefault.Text = btnComboBox_ItemDefault.Text.ToString.TrimEnd(CStr(","c)).TrimStart(CStr(","c))
                            End If
                        Else
                            Try
                                Dim valArray As PdfArray = fldDic.GetAsArray(PdfName.I)
                                btnComboBox_ItemDefault.Text = ""
                                ComboBox_ItemDisplay.ClearSelected()
                                If Not valArray Is Nothing Then
                                    For vIndex As Integer = 0 To valArray.Size - 1
                                        Dim iSel As Integer = valArray.GetAsNumber(vIndex).IntValue & ""
                                        ComboBox_ItemDisplay.SetSelected(CInt(iSel), True)
                                        Exit For
                                    Next
                                    btnComboBox_ItemDefault.Text = btnComboBox_ItemDefault.Text.ToString.TrimEnd(CStr(","c)).TrimStart(CStr(","c))
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        End If
                        Dim tu As PdfString = iTextGetPDFObject(merged, PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                        If Not bc Is Nothing Then
                            If bc.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                        End If
                        Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                        If Not bg Is Nothing Then
                            If bg.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                        End If
                        Try
                            For k As Integer = 0 To item.Size - 1
                                Dim da As PdfString = Nothing
                                If Not fldDic.Get(PdfName.KIDS) Is Nothing Then
                                    da = iTextGetPDFObject(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), PdfName.DA)
                                Else
                                    da = iTextGetPDFObject(dict, PdfName.DA)
                                End If
                                If Not (da Is Nothing) Then
                                    Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                    Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                    Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                    c = colors(colors.Length - 1)
                                    If Not c Is Nothing Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Try
                                    Dim a As PdfDictionary = iTextGetPDFObject(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), nm)
                                    If Not a Is Nothing Then
                                        If nm.Equals(PdfName.A) Then
                                            pdfNames2.Clear()
                                            pdfNames2.Add(PdfName.A, "Mouse Up")
                                        Else
                                            pdfNames2.Clear()
                                            pdfNames2.Add(PdfName.D, "Mouse Down")
                                            pdfNames2.Add(PdfName.E, "Mouse Enter")
                                            pdfNames2.Add(PdfName.X, "Mouse Exit")
                                            pdfNames2.Add(PdfName.BL, "On Blur")
                                            pdfNames2.Add(PdfName.FO, "On Focus")
                                        End If
                                        For Each k As PdfName In pdfNames2.Keys.ToArray
                                            Dim strk As String = k.ToString
                                            Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                            Dim s As PdfName = Nothing
                                            If Not d Is Nothing Then
                                                s = iTextGetPDFObject(d, PdfName.S)
                                            Else
                                                s = iTextGetPDFObject(a, PdfName.S)
                                                d = a
                                            End If
                                            If Not s Is Nothing Then
                                                Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                    Case "SubmitForm".ToLower
                                                        Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                        Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                        Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                        newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                        Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                        actionNode.Nodes.Add(f2.ToUnicodeString())
                                                        newNode.Nodes.Add(actionNode)
                                                        Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                        If Not Flags Is Nothing Then
                                                            Dim flagNode As New TreeNode("FLAGS")
                                                            flagNode.Name = "FLAGS"
                                                            flagNode.Text = "FLAGS"
                                                            flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                        Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                        If Not Fields Is Nothing Then
                                                            If Fields.Size > 0 Then
                                                                Dim flagNode As New TreeNode("FIELDS")
                                                                flagNode.Name = "FIELDS"
                                                                flagNode.Text = "FIELDS"
                                                                For fld As Integer = 0 To Fields.Size - 1
                                                                    Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                    flagNode.Nodes.Add(fldName1)
                                                                Next
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                        End If
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    Case "JavaScript".ToLower
                                                        If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                            Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                            Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                            If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                Dim jsMemStream As New MemoryStream
                                                                Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                If Not jsBytes Is Nothing Then
                                                                    Dim js As PdfString = New PdfString(jsBytes)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                End If
                                                            End If
                                                        End If
                                                    Case "Named".ToLower
                                                        Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                        Dim actionNode As New Windows.Forms.TreeNode("N")
                                                        actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                        actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Nodes.Add(actionNode)
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                End Select
                                            End If
                                            If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                                Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                                For i As Integer = 0 To nxtIndex.Size - 1
                                                    Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                    s = iTextGetPDFObject(nxt, PdfName.S)
                                                    If Not s Is Nothing Then
                                                        Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                            Case "SubmitForm".ToLower
                                                                Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                                Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                                Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                                Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                                actionNode.Nodes.Add(f2.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                                If Not Flags Is Nothing Then
                                                                    Dim flagNode As New TreeNode("FLAGS")
                                                                    flagNode.Name = "FLAGS"
                                                                    flagNode.Text = "FLAGS"
                                                                    flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                                Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                                If Not Fields Is Nothing Then
                                                                    If Fields.Size > 0 Then
                                                                        Dim flagNode As New TreeNode("FIELDS")
                                                                        flagNode.Name = "FIELDS"
                                                                        flagNode.Text = "FIELDS"
                                                                        For fld As Integer = 0 To Fields.Size - 1
                                                                            Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                            flagNode.Nodes.Add(fldName1)
                                                                        Next
                                                                        newNode.Nodes.Add(flagNode)
                                                                    End If
                                                                End If
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            Case "JavaScript".ToLower
                                                                If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                    Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                    Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                    If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                        Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                        Dim jsMemStream As New MemoryStream
                                                                        Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                        If Not jsBytes Is Nothing Then
                                                                            Dim js As PdfString = New PdfString(jsBytes)
                                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                                n.Name = pdfNames2(k)
                                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                                            End If
                                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                                            newNode.Nodes.Add(actionNode)
                                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                        End If
                                                                    End If
                                                                End If
                                                            Case "Named".ToLower
                                                                Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("N")
                                                                actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                                actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        End Select
                                                    End If
                                                Next
                                            Else
                                                Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                                Do While Not nxt Is Nothing
                                                    s = iTextGetPDFObject(nxt, PdfName.S)
                                                    If Not s Is Nothing Then
                                                        Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                            Case "SubmitForm".ToLower
                                                                Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                                Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                                Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                                Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                                actionNode.Nodes.Add(f2.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                                If Not Flags Is Nothing Then
                                                                    Dim flagNode As New TreeNode("FLAGS")
                                                                    flagNode.Name = "FLAGS"
                                                                    flagNode.Text = "FLAGS"
                                                                    flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                                Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                                If Not Fields Is Nothing Then
                                                                    If Fields.Size > 0 Then
                                                                        Dim flagNode As New TreeNode("FIELDS")
                                                                        flagNode.Name = "FIELDS"
                                                                        flagNode.Text = "FIELDS"
                                                                        For fld As Integer = 0 To Fields.Size - 1
                                                                            Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                            flagNode.Nodes.Add(fldName1)
                                                                        Next
                                                                        newNode.Nodes.Add(flagNode)
                                                                    End If
                                                                End If
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            Case "JavaScript".ToLower
                                                                If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                    Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                    Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                    If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                        Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                        Dim jsMemStream As New MemoryStream
                                                                        Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                        If Not jsBytes Is Nothing Then
                                                                            Dim js As PdfString = New PdfString(jsBytes)
                                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                                n.Name = pdfNames2(k)
                                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                                            End If
                                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                                            newNode.Nodes.Add(actionNode)
                                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                        End If
                                                                    End If
                                                                End If
                                                            Case "Named".ToLower
                                                                Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("N")
                                                                actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                                actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        End Select
                                                    End If
                                                    nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                                Loop
                                            End If
                                        Next
                                    End If
                                Catch ex As Exception
                                    Err.Clear()
                                End Try
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = ""
                            PDFField_SelectionChanged_None.Checked = True
                            Dim formatField As PdfDictionary = iTextGetPDFObject(fldDic, PdfName.AA)
                            If formatField Is Nothing Then Exit Try
                            Dim strJSTMP As String = ""
                            Dim strJSKeyStrokeTmp As String = ""
                            If Not formatField.Get(PdfName.K) Is Nothing Then
                                Dim formatK As PdfDictionary = iTextGetPDFObject(formatField, PdfName.K)
                                If Not formatK Is Nothing Then
                                    PDFField_SelectionChanged_ExecuteJavaScript.Checked = True
                                    If Not formatK.Get(PdfName.JS) Is Nothing Then
                                        If formatK.Get(PdfName.JS).IsString Then
                                            Dim strJS As String = formatK.GetAsString(PdfName.JS).ToUnicodeString.ToString & ""
                                            If Not String.IsNullOrEmpty(strJS & "") Then
                                                PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = strJS & ""
                                            End If
                                        End If
                                    End If
                                Else
                                    PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = ""
                                    PDFField_SelectionChanged_None.Checked = True
                                End If
                            Else
                                PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = ""
                                PDFField_SelectionChanged_None.Checked = True
                            End If
                        Catch ex As Exception
                            PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = ""
                            PDFField_SelectionChanged_None.Checked = True
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If TabControl1.SelectedTab Is TabPage3 Then
                                Me.ActiveControl = ComboBox_ItemDisplay
                                ComboBox_ItemDisplay.Select()
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        Try
                            Dim sb As New System.Text.StringBuilder
                            lblSignatureInformation.Text = ""
                            Dim af As AcroFields = pdfReaderDoc.AcroFields
                            Dim names As List(Of String) = af.GetSignatureNames
                            If names.Contains(fldname) Then
                                Dim name As String = fldname
                                Dim pk As PdfPKCS7 = af.VerifySignature(name)
                                If Not pk Is Nothing Then
                                    sb.AppendFormat("Signature Verified: {0}" & vbLf, pk.Verify().ToString())
                                    sb.AppendFormat("Signature Reason: {0}" & vbLf, pk.Reason.ToString())
                                    sb.AppendFormat("Signature Location: {0}" & vbLf, pk.Location.ToString())
                                    sb.AppendFormat("Signature Version: {0}" & vbLf, pk.Version.ToString())
                                    sb.AppendFormat("Signature Serial: {0}" & vbLf, pk.SigningCertificate.SerialNumber.ToString)
                                    sb.AppendFormat("Signature Date: {0}" & vbLf, pk.SignDate.ToString())
                                    sb.AppendFormat("Certificate Valid: {0}" & vbLf, pk.Certificates(0).IsValidNow().ToString())
                                    sb.AppendFormat("Certificate StartDate: {0}" & vbLf, pk.Certificates(0).CertificateStructure.StartDate.ToDateTime().ToString())
                                    sb.AppendFormat("Certificate EndDate: {0}" & vbLf, pk.Certificates(0).CertificateStructure.EndDate.ToDateTime().ToString())
                                    sb.AppendFormat("Certificate Issuer: {0}" & vbLf, pk.Certificates(0).CertificateStructure.Issuer.ToString())
                                    sb.AppendFormat("Certificate Subject: {0}" & vbLf, pk.Certificates(0).CertificateStructure.Subject.ToString())
                                    sb.AppendFormat("Certificate Version: {0}" & vbLf, pk.Certificates(0).CertificateStructure.Version.ToString())
                                    sb.AppendFormat("Certificate Encryption Algorithm: {0}" & vbLf, pk.GetEncryptionAlgorithm().ToString.ToString())
                                    lblSignatureInformation.Text = sb.ToString
                                End If
                                Exit Try
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim bs As PdfDictionary
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 0
                            If Not merged.GetAsDict(PdfName.BS) Is Nothing Then
                                bs = merged.GetAsDict(PdfName.BS)
                                If Not bs.GetAsNumber(PdfName.W) Is Nothing Then
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = bs.GetAsNumber(PdfName.W).IntValue - 1
                                End If
                                If Not bs.GetAsName(PdfName.S) Is Nothing Then
                                    Select Case bs.GetAsName(PdfName.S).ToString.TrimStart("/"c).ToLower
                                        Case "d"
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 1
                                        Case "b"
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 2
                                        Case "i"
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 3
                                        Case "u"
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 4
                                        Case Else
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 0
                                    End Select
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                        If Not bc Is Nothing Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            If bc.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                        End If
                        Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.Transparent
                        If Not bg Is Nothing Then
                            If bg.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                        End If
                        Try
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            Try
                                For k As Integer = 0 To item.Size - 1
                                    dict = item.GetWidget(k)
                                    Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                                    If Not (da Is Nothing) Then
                                        Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                        Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                        Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                        c = colors(colors.Length - 1)
                                        If Not c Is Nothing Then
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                        Else
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                        End If
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                    End If
                                Next
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = iTextGetPDFObject(merged, nm)
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                        Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                        newNode.Nodes.Add(actionNode)
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                        Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                        If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                            Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                            Dim jsMemStream As New MemoryStream
                                                            Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                            If Not jsBytes Is Nothing Then
                                                                Dim js As PdfString = New PdfString(jsBytes)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Signed_Nothing.Checked = True
                            PDFField_Signed_ReadOnly_SelectionListbox.Items.Clear()
                            PDFField_Signed_ReadOnly_SelectionListbox.Visible = False
                            PDFField_Signed_ReadOnly_Textbox.Text = ""
                            PDFField_Signed_ExecuteScript_Textbox.Text = ""
                            PDFField_Signed_ReadOnly_Textbox.Visible = True
                            Dim SelFldList As New List(Of String)
                            PDFField_Signed_ReadOnly_SelectionListbox.Items.Clear()
                            For Each fdfFld As String In pdfReaderDoc.AcroFields.Fields.Keys.ToArray
                                PDFField_Signed_ReadOnly_SelectionListbox.Items.Add(fdfFld.Trim() & "")
                            Next
                            Dim strJSKeyStrokeTmp As String = ""
                            If Not iTextGetPDFObject(merged, PdfName.LOCK) Is Nothing Then
                                Dim signedLockObj As PdfDictionary = iTextGetPDFObject(merged, PdfName.LOCK)
                                If Not signedLockObj Is Nothing Then
                                    If Not iTextGetPDFObject(signedLockObj, PdfName.ACTION) Is Nothing Then
                                        Dim strLockAction As String = iTextGetPDFObject(signedLockObj, PdfName.ACTION).ToString
                                        Dim strLockActionType As String = iTextGetPDFObject(signedLockObj, PdfName.TYPE).ToString
                                        If (strLockActionType & "").ToString.ToLower.TrimStart("/"c) = "SigFieldLock".ToString.ToLower Then
                                            PDFField_Signed_ReadOnly.Checked = True
                                            Select Case strLockAction.ToLower.TrimStart("/"c)
                                                Case "All".ToLower
                                                    PDFField_Signed_ReadOnlyType_ComboBox.SelectedIndex = 0
                                                    PDFField_Signed_ReadOnly_Textbox.Text = ""
                                                Case "Exclude".ToLower
                                                    PDFField_Signed_ReadOnlyType_ComboBox.SelectedIndex = 1
                                                    PDFField_Signed_ReadOnly_Textbox.Text = ""
                                                    Dim arrSignedFields As PdfArray = iTextGetPDFObject(signedLockObj, PdfName.FIELDS)
                                                    If Not arrSignedFields Is Nothing Then
                                                        For sidx As Integer = 0 To arrSignedFields.Size
                                                            Dim strSignedField As PdfString = arrSignedFields(sidx)
                                                            If String.IsNullOrEmpty(PDFField_Signed_ReadOnly_Textbox.Text & "") Then
                                                                PDFField_Signed_ReadOnly_Textbox.Text = strSignedField.ToUnicodeString & ""
                                                            Else
                                                                PDFField_Signed_ReadOnly_Textbox.Text &= "," & strSignedField.ToUnicodeString & ""
                                                            End If
                                                        Next
                                                    End If
                                                Case "Include".ToLower
                                                    PDFField_Signed_ReadOnlyType_ComboBox.SelectedIndex = 2
                                                    PDFField_Signed_ReadOnly_Textbox.Text = ""
                                                    Dim arrSignedFields As PdfArray = iTextGetPDFObject(signedLockObj, PdfName.FIELDS)
                                                    If Not arrSignedFields Is Nothing Then
                                                        For sidx As Integer = 0 To arrSignedFields.Size
                                                            Dim strSignedField As PdfString = arrSignedFields(sidx)
                                                            If String.IsNullOrEmpty(PDFField_Signed_ReadOnly_Textbox.Text & "") Then
                                                                PDFField_Signed_ReadOnly_Textbox.Text = strSignedField.ToUnicodeString & ""
                                                            Else
                                                                PDFField_Signed_ReadOnly_Textbox.Text &= "," & strSignedField.ToUnicodeString & ""
                                                            End If
                                                        Next
                                                    End If
                                                Case Else
                                                    PDFField_Signed_ReadOnlyType_ComboBox.SelectedIndex = 0
                                                    GoTo TRY_AA
                                            End Select
                                        Else
                                            GoTo TRY_AA
                                        End If
                                    Else
                                        GoTo TRY_AA
                                    End If
                                Else
                                    GoTo TRY_AA
                                End If
                            ElseIf Not iTextGetPDFObject(merged, PdfName.AA) Is Nothing Then
TRY_AA:
                                Dim signedAA As PdfDictionary = iTextGetPDFObject(merged, PdfName.AA)
                                If Not signedAA Is Nothing Then
                                    If Not iTextGetPDFObject(signedAA, PdfName.F) Is Nothing Then
                                        Dim signedFObj As PdfDictionary = iTextGetPDFObject(signedAA, PdfName.F)
                                        If Not signedFObj Is Nothing Then
                                            If Not iTextGetPDFObject(signedFObj, PdfName.JS) Is Nothing Then
                                                Dim strJS As String = iTextGetPDFString(signedFObj, PdfName.JS) & ""
                                                If Not String.IsNullOrEmpty(strJS & "") Then
                                                    PDFField_Signed_ExecuteScript.Checked = True
                                                    PDFField_Signed_ExecuteScript_Textbox.Text = strJS & ""
                                                End If
                                            End If
                                        End If
                                    End If
                                Else
                                    PDFField_SelectionChanged_None.Checked = True
                                    PDFField_Signed_ExecuteScript_Textbox.Text = ""
                                End If
                            Else
                                PDFField_SelectionChanged_None.Checked = True
                                PDFField_Signed_ExecuteScript_Textbox.Text = ""
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If TabControl1.SelectedTab Is TabPage13 Then
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case Else
                End Select
                Return True
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            Finally
                PDFField_Actions_TreeView_Display_Show()
                PdfForm_FieldNames_UpdateButton()
                PDFField_Value_Checked.Checked = RadioButton_Checked.Checked
                If RadioButton_OnValue.Text = "Off" Then
                    RadioButton_OnValue.Text = "Yes"
                End If
            End Try
        Catch exMain As Exception
            TimeStampAdd(exMain, debugMode)
        Finally
            cUserRect.pauseDraw = blnPauseDraw
            fldNameHighlightedCopy = ""
        End Try
    End Function
    Public Function getPdfFieldName2(strFieldnameWithBrackets As String) As String
        If String.IsNullOrEmpty(strFieldnameWithBrackets & "") Then
            Return ""
        End If
        Try
            If strFieldnameWithBrackets.Contains("["c) Then
                Return CStr(strFieldnameWithBrackets.Substring(0, strFieldnameWithBrackets.LastIndexOf("["c)) & "") & ""
            Else
                Return strFieldnameWithBrackets & ""
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
        Return strFieldnameWithBrackets & ""
    End Function
    Public Function getPdfFieldNumber(strFieldnameWithBrackets As String) As String
        If String.IsNullOrEmpty(strFieldnameWithBrackets & "") Then
            Return "0"
        End If
        Try
            If strFieldnameWithBrackets.Contains("["c) Then
                Return CStr(strFieldnameWithBrackets.Substring(strFieldnameWithBrackets.IndexOf("["c), strFieldnameWithBrackets.Length - strFieldnameWithBrackets.IndexOf("["c)).ToString.TrimEnd("]"c).TrimStart("["c) & "")
            Else
                Return strFieldnameWithBrackets & ""
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
        Return "0"
    End Function
    Public Function A0_PDFFormField_LoadProperties(ByVal b() As Byte, showFieldPropertiesWindow As Boolean, ByVal fldname As String, Optional ByVal pageNumber As Integer = -1, Optional ByVal fieldIndex As Integer = -1) As Boolean
        If fldname = "" Then
            Return False
        End If
        If fieldIndex < 0 Then
            fieldIndex = fldKidIndex
        End If
        Try
            Dim lstFldNames As New List(Of String)
            lstFldNames.AddRange(GetAllFieldsOnPage(Session, pdfOwnerPassword, CInt(page), True, False))
            ComboBox2.Items.Clear()
            For Each fldName1 As String In lstFldNames
                If Not fldName1 Is Nothing Then
                    ComboBox2.Items.Add(fldName1)
                End If
            Next
            ComboBox3.Items.Clear()
            If Not fldname = "" And fieldIndex >= 0 Then
                ComboBox3.Enabled = True
                ComboBox2.SelectedItem = fldname
                For Each fldName2 As String In GetAllFieldsOnPage(Session, pdfOwnerPassword, CInt(page), True, True)
                    Dim fldNum As String = getPdfFieldNumber(fldName2) & ""
                    fldName2 = fldName2.Substring(0, fldName2.LastIndexOf("[")) & ""
                    If fldName2 = fldname And fldKidIndex >= 0 And fldKidIndex = CInt(fldNum) Then
                        ComboBox3.Items.Add(fldNum)
                    End If
                Next
                ComboBox3.SelectedItem = fldKidIndex.ToString
            Else
                ComboBox3.Enabled = False
            End If
        Catch exComboBoxes As Exception
            TimeStampAdd(exComboBoxes, debugMode)
            Err.Clear()
        End Try
        Dim blnPauseDraw As Boolean = cUserRect.pauseDraw
        Try
            cUserRect.pauseDraw = True
            RadioButton_CheckedByDefault.Visible = False
            Try
                If Not PDFField_Copy.Checked Then A0_ClearPanelFieldProperties(fieldIndex, False)
            Catch ex As Exception
                Throw ex
            End Try
            Try
                PDFField_TabOrder.Text = "-1"
                puchButtonIcon_Default_IconFitToBounds = False
                puchButtonIcon_Default_ScaleIcon = 0
                puchButtonIcon_Default_ProportionalIcon = 0
                puchButtonIcon_Default_IconHorizontalAdjustment = 0.5
                puchButtonIcon_Default_IconVerticalAdjustment = 0.5
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Dim arrayMouseActions As New List(Of String)
            arrayMouseActions.Add("Mouse Down")
            arrayMouseActions.Add("Mouse Up")
            arrayMouseActions.Add("Mouse Enter")
            arrayMouseActions.Add("Mouse Exit")
            arrayMouseActions.Add("On Blur")
            arrayMouseActions.Add("On Focus")
            If pdfReaderDoc Is Nothing Then
                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            ElseIf pdfReaderDoc.FileLength <= 0 Then
                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            ElseIf pdfReaderDoc.FileLength <> Session.Length Then
                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            Else
                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
            End If
            ShowHidePDFField_Action_Panels(PDFField_Action_Panel_List)
            PDFField_Format_Category.SelectedIndex = 0
            Try
                grpBoxPuchButton_IconAndLabel.Visible = True
                grpBoxPuchButton_IconPlacement.Visible = False
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                PDFField_Locked.Checked = False
                PDFField_ReadOnly.Checked = False
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                Dim memStream As New MemoryStream
                Dim stamp As PdfStamper = getStamper(pdfReaderDoc, memStream)
                Dim form As AcroFields = stamp.AcroFields
                Dim str As String = ""
                Dim item As AcroFields.Item = form.GetFieldItem(fldname)
                Dim itemIndex As Integer = 0
                Try
                    If Not iTextGetPDFObject(item.GetMerged(0), PdfName.AA) Is Nothing Then
                        Dim aa As PdfDictionary = iTextGetPDFObject(item.GetMerged(item.Size - 1), PdfName.AA)
                        If Not iTextGetPDFObject(aa, PdfName.C) Is Nothing Then
                            Dim d As Boolean = True
                        End If
                    End If
                Catch exTest As Exception
                    TimeStampAdd(exTest, debugMode)
                End Try
                Dim dict As PdfDictionary = item.GetWidget(itemIndex)
                Dim mk As PdfDictionary = iTextGetPDFObject(dict, PdfName.MK)
                Dim c As iTextSharp.text.BaseColor = Nothing
                Dim merged As PdfDictionary = item.GetMerged(itemIndex)
                Me.PDFField_MaxLenChk.Checked = False
                RadioButton_OnValue.Enabled = True
                Select Case form.GetFieldType(fldname)
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                        dict = item.GetWidget(0)
                        mk = iTextGetPDFObject(dict, PdfName.MK)
                        merged = item.GetMerged(0)
                        Dim f As iTextSharp.text.pdf.PushbuttonField = Nothing
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        f = form.GetNewPushbuttonFromField(fldname, fieldIndex, stamp.Writer)
                        Dim fldDic As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        If fldDic.Get(PdfName.KIDS) Is Nothing Then
                            form.DecodeGenericDictionary(fldDic, f)
                            mk = fldDic.GetAsDict(PdfName.MK)
                            dict = fldDic
                        ElseIf fieldIndex >= 0 Then
                            merged = fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex)
                            form.DecodeGenericDictionary(merged, f)
                            mk = merged.GetAsDict(PdfName.MK)
                            dict = merged
                        End If
                        Dim pf As PdfFormField = f.Field
                        form.DecodeGenericDictionary(dict, f)
                        Try
                            Me.PuchButton_Options_Icon_ChkFitToBounds.Checked = f.IconFitToBounds + 0
                            Me.PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex = f.ScaleIcon - 1
                            If Me.PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex <> 1 Then
                                Me.PuchButton_Options_Icon_CmbScale.SelectedIndex = IIf(f.ProportionalIcon, 0, 1)
                                Me.PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value = f.IconHorizontalAdjustment * 100
                                Me.PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value = f.IconVerticalAdjustment * 100
                            Else
                                Me.PuchButton_Options_Icon_CmbScale.SelectedIndex = 1
                                Me.PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value = f.IconHorizontalAdjustment * 100
                                Me.PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value = f.IconVerticalAdjustment * 100
                            End If
                            PuchButton_Options_Icon_Trackbar_Offset_Vertical_Scroll(Me, New EventArgs())
                            PuchButton_Options_Icon_Trackbar_Offset_Horizontal_Scroll(Me, New EventArgs())
                            puchButtonIcon_Default_IconFitToBounds = PuchButton_Options_Icon_ChkFitToBounds.Checked
                            puchButtonIcon_Default_ScaleIcon = PuchButton_Options_Icon_CmbScale.SelectedIndex
                            puchButtonIcon_Default_ProportionalIcon = PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex
                            puchButtonIcon_Default_IconHorizontalAdjustment = PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value
                            puchButtonIcon_Default_IconVerticalAdjustment = PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If Not iTextGetPDFObject(fldDic, PdfName.F) Is Nothing Then
                            Dim flags As Integer = iTextGetPDFObject(fldDic, PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) > 0 Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        Try
                            For Each fontName As String In f.Font.FullFontName(0)
                                If Not String.IsNullOrEmpty(fontName & "") Then
                                    If PDFField_FontFamily.Items.Contains(fontName & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    ElseIf PDFField_FontFamily.Items.Contains(fontName.ToString.Replace(" ", "-") & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName.ToString.Replace(" ", "-") & ""
                                        Exit For
                                    Else
                                        If Not PDFField_FontFamily.Items.Contains(fontName & "") Then PDFField_FontFamily.Items.Add(fontName & "")
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    End If
                                End If
                            Next
                            If f.FontSize > 0 Then
                                If PDFField_FontSize.Items.Contains(CStr(CInt(f.FontSize).ToString)) Then
                                    If (CStr(CInt(f.FontSize).ToString)) = "0" Then
                                        PDFField_FontSize.SelectedIndex = PDFField_FontSize.SelectedIndex = 0
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedItem = (CStr(CInt(f.FontSize).ToString))
                                    End If
                                Else
                                    PDFField_FontSize.Items.Add((CStr(CInt(f.FontSize).ToString)))
                                End If
                            ElseIf CInt(f.FontSize) <= 0 Then
                                If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                            End If
                        Catch exFont As Exception
                            TimeStampAdd(exFont, debugMode)
                        End Try
                        If f.Rotation > 0 Then
                            PDFField_Orientation.SelectedIndex = (f.Rotation / 90)
                        ElseIf f.Rotation = 0 Then
                            PDFField_Orientation.SelectedIndex = 0
                        Else
                            Dim rot As PdfNumber = iTextGetPDFObject(mk, PdfName.R)
                            If Not rot Is Nothing Then
                                PDFField_Orientation.SelectedItem = rot.IntValue.ToString & ""
                            End If
                        End If
                        PDFField_Value.Visible = False
                        lblPDFField_Value.Visible = True
                        Dim tu As PdfString = iTextGetPDFObject(merged, PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        PuchButton_Options_Layout.SelectedIndex = f.Layout - 1
                        PuchButton_Options_StateLabelList.Clear()
                        PuchButton_Options_StateImageList.Clear()
                        PuchButton_Options_StateImageListByte.Clear()
                        PuchButton_Options_PictureBox.Image = Nothing
                        Dim behavoir As Integer = 0
                        Try
                            Dim ca As iTextSharp.text.pdf.PdfString = mk.Get(New PdfName("CA"))
                            If Not ca Is Nothing Then
                                If PuchButton_Options_StateLabelList.Count <= 0 Then
                                    PuchButton_Options_StateLabelList.Add(ca.ToUnicodeString() & "")
                                Else
                                    PuchButton_Options_StateLabelList(0) = ca.ToUnicodeString() & ""
                                End If
                            Else
                                If PuchButton_Options_StateLabelList.Count <= 0 Then
                                    PuchButton_Options_StateLabelList.Add("")
                                End If
                            End If
                            Try
                                PuchButton_Options_Label.Text = PuchButton_Options_StateLabelList(0) & ""
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                            Dim ac As iTextSharp.text.pdf.PdfString = iTextGetPDFObject(mk, PdfName.AC)
                            If Not ac Is Nothing Then
                                If PuchButton_Options_StateLabelList.Count <= 1 Then
                                    PuchButton_Options_StateLabelList.Add(ac.ToUnicodeString() & "")
                                Else
                                    PuchButton_Options_StateLabelList(1) = ac.ToUnicodeString() & ""
                                End If
                            Else
                                If PuchButton_Options_StateLabelList.Count <= 1 Then
                                    PuchButton_Options_StateLabelList.Add("")
                                End If
                            End If
                            Dim rc As iTextSharp.text.pdf.PdfString = iTextGetPDFObject(mk, PdfName.RC)
                            If Not rc Is Nothing Then
                                If PuchButton_Options_StateLabelList.Count <= 2 Then
                                    PuchButton_Options_StateLabelList.Add(rc.ToUnicodeString() & "")
                                Else
                                    PuchButton_Options_StateLabelList(2) = rc.ToUnicodeString() & ""
                                End If
                            Else
                                If PuchButton_Options_StateLabelList.Count <= 2 Then
                                    PuchButton_Options_StateLabelList.Add("")
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim ap As iTextSharp.text.pdf.PdfDictionary
                        Try
                            If Not merged Is Nothing Then
                                ap = iTextGetPDFObject(merged, PdfName.AP)
                            Else
                                ap = Nothing
                            End If
                        Catch ex As Exception
                            ap = iTextGetPDFObject(merged, PdfName.AP)
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If Not ap Is Nothing Then
                            If Not ap Is Nothing Then
                                Try
                                    If Not iTextGetPDFObject(ap, PdfName.N) Is Nothing Then
                                        Dim xobj As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(ap, PdfName.N)
                                        Dim dic1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj, PdfName.RESOURCES)
                                        Dim xobj2 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(dic1, PdfName.XOBJECT)
                                        Dim xobj3 As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj2, PdfName.FRM)
                                        Dim res1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj3, PdfName.RESOURCES)
                                        Dim xobj4 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(res1, PdfName.XOBJECT)
                                        If xobj4 Is Nothing Then Exit Try
                                        If xobj4.Keys.Count <= 0 Then Exit Try
                                        Dim imgStream As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj4, New PdfName(xobj4.Keys(0).ToString.TrimStart("/"c)))
                                        Dim imgSubtype As iTextSharp.text.pdf.PdfName = iTextGetPDFObject(imgStream, PdfName.SUBTYPE)
                                        If imgSubtype.ToString.ToLower.TrimStart("/"c) = "image" Then
                                            Dim bytes() As Byte = Nothing
                                            Try
                                                bytes = iTextSharp.text.pdf.PdfReader.GetStreamBytesRaw(imgStream)
                                                If iTextSharp.text.Image.GetInstance(bytes).IsJpeg Then
                                                    Dim imgWin As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(bytes))
                                                    PuchButton_Options_StateImageList.Add(imgWin)
                                                    PuchButton_Options_StateImageListByte.Add(bytes)
                                                    PuchButton_Options_State.SelectedIndex = 0
                                                    PuchButton_Options_PictureBox.Image = imgWin
                                                End If
                                            Catch ex As Exception
                                                PuchButton_Options_StateImageList.Add(Nothing)
                                                PuchButton_Options_StateImageListByte.Add(bytes)
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        End If
                                        behavoir += 1
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                                Try
                                    If Not iTextGetPDFObject(ap, PdfName.D) Is Nothing Then
                                        Dim xobj As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(ap, PdfName.D)
                                        Dim dic1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj, PdfName.RESOURCES)
                                        Dim xobj2 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(dic1, PdfName.XOBJECT)
                                        Dim xobj3 As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj2, PdfName.FRM)
                                        Dim res1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj3, PdfName.RESOURCES)
                                        Dim xobj4 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(res1, PdfName.XOBJECT)
                                        Dim imgStream As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj4, New PdfName(xobj4.Keys(0).ToString.TrimStart("/"c)))
                                        Dim imgSubtype As iTextSharp.text.pdf.PdfName = iTextGetPDFObject(imgStream, PdfName.SUBTYPE)
                                        If imgSubtype.ToString.ToLower.TrimStart("/"c) = "image" Then
                                            Dim bytes() As Byte = iTextSharp.text.pdf.PdfReader.GetStreamBytesRaw(imgStream)
                                            Try
                                                If iTextSharp.text.Image.GetInstance(bytes).IsJpeg Then
                                                    Dim img As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bytes)
                                                    Dim imgWin As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(bytes))
                                                    PuchButton_Options_StateImageList.Add(imgWin)
                                                    PuchButton_Options_StateImageListByte.Add(bytes)
                                                End If
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        End If
                                        behavoir += 1
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                                Try
                                    If Not iTextGetPDFObject(ap, PdfName.R) Is Nothing Then
                                        Dim xobj As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(ap, PdfName.R)
                                        Dim dic1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj, PdfName.RESOURCES)
                                        Dim xobj2 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(dic1, PdfName.XOBJECT)
                                        Dim xobj3 As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj2, PdfName.FRM)
                                        Dim res1 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(xobj3, PdfName.RESOURCES)
                                        Dim xobj4 As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(res1, PdfName.XOBJECT)
                                        Dim imgStream As iTextSharp.text.pdf.PdfStream = iTextGetPDFObject(xobj4, New PdfName(xobj4.Keys(0).ToString.TrimStart("/"c)))
                                        Dim imgSubtype As iTextSharp.text.pdf.PdfName = iTextGetPDFObject(imgStream, PdfName.SUBTYPE)
                                        If imgSubtype.ToString.ToLower.TrimStart("/"c) = "image" Then
                                            Dim bytes() As Byte = iTextSharp.text.pdf.PdfReader.GetStreamBytesRaw(imgStream)
                                            Try
                                                If iTextSharp.text.Image.GetInstance(bytes).IsJpeg Then
                                                    Dim img As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bytes)
                                                    Dim imgWin As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(bytes))
                                                    PuchButton_Options_StateImageList.Add(imgWin)
                                                    PuchButton_Options_StateImageListByte.Add(bytes)
                                                End If
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                        End If
                                        behavoir += 1
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            End If
                            behavoir += 1
                        Else
                            If Not iTextGetPDFObject(merged, PdfName.AP).GetAsIndirectObject(PdfName.D) Is Nothing Then
                                behavoir += 1
                            End If
                            If Not iTextGetPDFObject(merged, PdfName.AP).GetAsIndirectObject(PdfName.R) Is Nothing Then
                                behavoir += 1
                            End If
                        End If
                        Try
                            Dim h As PdfName = Nothing
                            If Not merged.GetAsName(PdfName.H) Is Nothing Then
                                h = merged.GetAsName(PdfName.H)
                            Else
                                h = iTextGetPDFObject(merged, PdfName.H)
                            End If
                            If Not h Is Nothing Then
                                Select Case h.ToString().ToLower().Trim("/"c).Trim("\"c)
                                    Case "n"
                                        behavoir = 0
                                    Case "o"
                                        behavoir = 2
                                    Case "p"
                                        behavoir = 1
                                    Case Else
                                        behavoir = 0
                                End Select
                            Else
                                behavoir = 3
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                            behavoir = 0
                        End Try
                        PuchButton_Options_Behavior.SelectedIndex = behavoir + 0
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        Try
                            Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                            If Not bc Is Nothing Then
                                If bc.ArrayList.Count = 3 Then
                                    c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                ElseIf bc.ArrayList.Count = 4 Then
                                    c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                ElseIf bc.ArrayList.Count = 1 Then
                                    c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                End If
                            Else
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                            If Not bg Is Nothing Then
                                If bg.ArrayList.Count = 3 Then
                                    c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                ElseIf bg.ArrayList.Count = 4 Then
                                    c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                ElseIf bg.ArrayList.Count = 1 Then
                                    c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                End If
                            Else
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                        End Try
                        Try
                            For k As Integer = 0 To item.Size - 1
                                dict = item.GetWidget(k)
                                Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                                If Not (da Is Nothing) Then
                                    Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                    Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                    Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                    c = colors(colors.Length - 1)
                                    If Not c Is Nothing Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                End If
                            Next
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim mergedKid As PdfDictionary = Nothing
                            If iTextFieldItemPdfDictionary(fldname).Get(PdfName.KIDS) Is Nothing Then
                                mergedKid = item.GetMerged(0)
                            ElseIf fieldIndex >= 0 Then
                                If iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).Size > (fieldIndex) Then
                                    mergedKid = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex)
                                End If
                            End If
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = iTextGetPDFObject(mergedKid, nm)
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f2 As PdfString = Nothing
                                                    Dim fs As PdfName = Nothing
                                                    If iTextGetPDFObject(d, PdfName.F).GetType Is GetType(PdfDictionary) Then
                                                        Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                        fs = iTextGetPDFObject(f1, PdfName.FS)
                                                        f2 = iTextGetPDFObject(f1, PdfName.F)
                                                    ElseIf iTextGetPDFObject(d, PdfName.F).GetType Is GetType(PdfString) Then
                                                        fs = iTextGetPDFObject(d, PdfName.FS)
                                                        f2 = iTextGetPDFObject(d, PdfName.F)
                                                    End If
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                        Dim js As PdfString = iTextGetPDFObject(d, PdfName.JS)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                        newNode.Nodes.Add(actionNode)
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                        Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                        If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                            Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                            Dim jsMemStream As New MemoryStream
                                                            Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                            If Not jsBytes Is Nothing Then
                                                                Dim js As PdfString = New PdfString(jsBytes)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If PuchButton_Options_State.SelectedIndex <= 0 Then
                            PuchButton_Options_State.SelectedIndex = 0
                        End If
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                        dict = item.GetWidget(0)
                        mk = iTextGetPDFObject(dict, PdfName.MK)
                        merged = item.GetMerged(0)
                        Dim f As iTextSharp.text.pdf.TextField = form.GetNewTextFieldFromField(fldname, fieldIndex, stamp.Writer)
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        btnLeft.Text = r.Left.ToString
                        btnRight.Text = r.Right.ToString
                        btnBottom.Text = getPDFHeight() - r.Bottom.ToString
                        btnTop.Text = getPDFHeight() - r.Top.ToString
                        btnWidth.Text = r.Width.ToString
                        btnHeight.Text = r.Height.ToString
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        Dim fDict As iTextSharp.text.pdf.PdfFormField
                        Dim fldDic As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        If fldDic.Get(PdfName.KIDS) Is Nothing Then
                            form.DecodeGenericDictionary(fldDic, f)
                        ElseIf fieldIndex >= 0 Then
                            form.DecodeGenericDictionary(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), f)
                        Else
                            If fieldIndex = 0 Then fDict = iTextFieldItemPdfDictionary(fldname) Else fDict = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex)
                        End If
                        Try
                            For Each fontName As String In f.Font.FullFontName(0)
                                If Not String.IsNullOrEmpty(fontName & "") Then
                                    If PDFField_FontFamily.Items.Contains(fontName & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    ElseIf PDFField_FontFamily.Items.Contains(fontName.ToString.Replace(" ", "-") & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName.ToString.Replace(" ", "-") & ""
                                        Exit For
                                    Else
                                        If Not PDFField_FontFamily.Items.Contains(fontName & "") Then PDFField_FontFamily.Items.Add(fontName & "")
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    End If
                                End If
                            Next
                            If f.FontSize > 0 Then
                                If PDFField_FontSize.Items.Contains(CStr(CInt(f.FontSize).ToString)) Then
                                    If (CStr(CInt(f.FontSize).ToString)) = "0" Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedItem = (CStr(CInt(f.FontSize).ToString))
                                    End If
                                Else
                                    PDFField_FontSize.Items.Add((CStr(CInt(f.FontSize).ToString)))
                                End If
                            ElseIf CInt(f.FontSize) <= 0 Then
                                If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                            End If
                        Catch exFont As Exception
                            TimeStampAdd(exFont, debugMode)
                        End Try
                        If Not iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname), PdfName.F) Is Nothing Then
                            Dim flags As Integer = iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname), PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            Else
                                PDFField_Locked.Checked = False
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            Else
                                PDFField_ReadOnly.Checked = False
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) = iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        Dim pf As PdfFormField = f.GetTextField
                        If Not fldDic.Get(PdfName.FF) Is Nothing Then
                            Dim intFF As Integer = fldDic.GetAsNumber(PdfName.FF).IntValue
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                            End If
                            Try
                                If Not f.MaxCharacterLength = Nothing Then
                                    If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                        PDFField_Comb.Text = f.MaxCharacterLength.ToString & ""
                                        If (f.MaxCharacterLength + 0) > 0 Then
                                            PDFField_CombChk.Checked = True
                                        End If
                                        PDFField_MaxLen.Text = ""
                                        PDFField_MaxLenChk.Checked = False
                                    Else
                                        PDFField_CombChk.Checked = False
                                        PDFField_Comb.Text = ""
                                        Me.PDFField_MaxLen.Text = (f.MaxCharacterLength + 0)
                                        If (f.MaxCharacterLength + 0) > 0 Then
                                            PDFField_MaxLenChk.Checked = True
                                        End If
                                    End If
                                Else
                                    Dim ml As PdfNumber = iTextGetPDFObject(merged, PdfName.MAXLEN)
                                    If Not ml Is Nothing Then
                                        Me.PDFField_MaxLen.Text = ml.IntValue.ToString & ""
                                        If ml.IntValue > 0 Then Me.PDFField_MaxLenChk.Checked = True
                                        PDFField_CombChk.Checked = False
                                        PDFField_Comb.Text = ""
                                    Else
                                        PDFField_MaxLen.Text = ""
                                        PDFField_MaxLenChk.Checked = False
                                        PDFField_Comb.Text = ""
                                        PDFField_CombChk.Checked = False
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RICHTEXT) = iTextSharp.text.pdf.PdfFormField.FF_RICHTEXT Then
                                PDFField_RichText.Checked = True
                            Else
                                PDFField_RichText.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                                PDFField_Scroll.Checked = False
                            Else
                                PDFField_Scroll.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                                PDFField_CheckSpelling.Checked = False
                            Else
                                PDFField_CheckSpelling.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT) = iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then
                                PDFField_Selection.Checked = True
                            Else
                                PDFField_Selection.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_EDIT) = iTextSharp.text.pdf.PdfFormField.FF_EDIT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PASSWORD) = iTextSharp.text.pdf.PdfFormField.FF_PASSWORD Then
                                PDFField_Password.Checked = True
                            Else
                                PDFField_Password.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTILINE) = iTextSharp.text.pdf.PdfFormField.FF_MULTILINE Then
                                PDFField_MultiLine.Checked = True
                            Else
                                PDFField_MultiLine.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON) = iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF) = iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT) = iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                PDFField_Required.Checked = True
                            Else
                                PDFField_Required.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                PDFField_ReadOnly.Checked = True
                            Else
                                PDFField_ReadOnly.Checked = False
                            End If
                        End If
                        ShowHideTextFieldOptionCheckBoxes()
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = 0
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = 0
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 0
                        End If
                        If Not f.DefaultText Is Nothing Then
                            Me.PDFField_DefaultText.Text = f.DefaultText
                        Else
                            Me.PDFField_DefaultText.Text = ""
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        If f.Rotation > 0 Then
                            PDFField_Orientation.SelectedIndex = (f.Rotation / 90)
                        ElseIf f.Rotation = 0 Then
                            PDFField_Orientation.SelectedIndex = 0
                        Else
                            Dim rot As PdfNumber = iTextGetPDFObject(mk, PdfName.R)
                            If Not rot Is Nothing Then
                                PDFField_Orientation.SelectedItem = rot.IntValue.ToString & ""
                            End If
                        End If
                        Dim tu As PdfString = iTextGetPDFObject(merged, PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        If Not String.IsNullOrEmpty(stamp.AcroFields.GetField(f.FieldName)) Then
                            If Not f.Text Is Nothing Then
                                PDFField_Value.Text = f.Text & ""
                            Else
                                Dim v As PdfString = iTextGetPDFObject(merged, PdfName.V)
                                If Not v Is Nothing Then
                                    PDFField_Value.Text = v.ToUnicodeString()
                                Else
                                    PDFField_Value.Text = ""
                                End If
                            End If
                            If TabControl1.SelectedTab Is TabPage1 Then
                                Me.ActiveControl = PDFField_Value
                                PDFField_Value.Select()
                            End If
                        Else
                            PDFField_Value.Text = stamp.AcroFields.GetField(f.FieldName) & ""
                            If TabControl1.SelectedTab Is TabPage1 Then
                                Me.ActiveControl = PDFField_Value
                                PDFField_Value.Select()
                            End If
                        End If
                        If Not f.DefaultText Is Nothing Then
                            Me.PDFField_DefaultText.Text = f.DefaultText & ""
                        Else
                            Dim dv As PdfString = iTextGetPDFObject(merged, PdfName.DV)
                            If Not dv Is Nothing Then
                                PDFField_DefaultText.Text = dv.ToUnicodeString() & ""
                            End If
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        Else
                            Me.PDFField_Visibility.SelectedIndex = 0
                        End If
                        Try
                            Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                            If Not f.BorderColor Is Nothing Then
                                c = f.BorderColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bc Is Nothing Then
                                    If bc.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            If Not f.BackgroundColor Is Nothing Then
                                c = f.BackgroundColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bg Is Nothing Then
                                    If bg.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.Transparent
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.Transparent
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            Try
                                If Not f.TextColor Is Nothing Then
                                    c = f.TextColor
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                Else
                                    For k As Integer = 0 To item.Size - 1
                                        dict = item.GetWidget(k)
                                        Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                                        If Not (da Is Nothing) Then
                                            Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                            Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                            Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                            c = colors(colors.Length - 1)
                                            If Not c Is Nothing Then
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                            Else
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                            End If
                                        Else
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                        End If
                                    Next
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = Nothing
                                If fldDic.Get(PdfName.KIDS) Is Nothing Then
                                    a = iTextGetPDFObject(fldDic, nm)
                                Else
                                    a = iTextGetPDFObject(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), nm)
                                End If
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    Dim dTmp As PdfObject = iTextGetPDFObject(d, PdfName.JS)
                                                    If Not dTmp Is Nothing Then
                                                        If dTmp.IsString() Then
                                                            Dim js As PdfString = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        ElseIf dTmp.IsStream Then
                                                            Dim jsStream As PRStream = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not jsStream Is Nothing Then
                                                                Dim jsMemStream As New MemoryStream
                                                                Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                If Not jsBytes Is Nothing Then
                                                                    Dim js As PdfString = New PdfString(jsBytes)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            Dim dTmp As PdfObject = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not dTmp Is Nothing Then
                                                                If dTmp.IsString() Then
                                                                    Dim js As PdfString = iTextGetPDFObject(d, PdfName.JS)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                ElseIf dTmp.IsStream Then
                                                                    Dim jsStream As PRStream = iTextGetPDFObject(d, PdfName.JS)
                                                                    If Not jsStream Is Nothing Then
                                                                        Dim jsMemStream As New MemoryStream
                                                                        Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                        If Not jsBytes Is Nothing Then
                                                                            Dim js As PdfString = New PdfString(jsBytes)
                                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                                n.Name = pdfNames2(k)
                                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                                            End If
                                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                                            newNode.Nodes.Add(actionNode)
                                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim AA As PdfDictionary = Nothing
                        If Not iTextFieldItemPdfDictionary(fldname) Is Nothing Then
                            If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.AA) Is Nothing Then
                                AA = iTextFieldItemPdfDictionary(fldname).GetAsDict(PdfName.AA)
                            End If
                        End If
                        Try
                            Dim validateField As PdfDictionary = Nothing
                            If validateField Is Nothing Then
                                validateField = AA
                            End If
                            Dim strJSTMP As String = ""
                            If validateField Is Nothing Then Exit Try
                            If Not PDFField_CopyValidation.Checked Then
                                If Not iTextGetPDFObject(validateField, PdfName.V) Is Nothing Then
                                    Dim validateVV As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(validateField, PdfName.V)
                                    Dim strJS As String = iTextGetPDFString(validateVV, PdfName.JS) & ""
                                    strJSTMP = strJS & ""
                                    PDFField_Validation_Range_Custom.Text = strJSTMP & ""
                                    Dim strS As String = iTextGetPDFObject(validateVV, PdfName.S).ToString
                                    If strS.ToString.TrimStart("/"c).ToLower = "javascript" Then
                                        If strJS.TrimStart("/"c).ToLower.StartsWith("AFRange_Validate".ToLower) Then
                                            strJS = strJS.Replace(CStr("AFRange_Validate"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            Dim strJSParameters() As String = strJS.Split(","c)
                                            Try
                                                PDFField_Validation_Range_From.Text = CInt(strJSParameters(1))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                PDFField_Validation_Range_To.Text = CInt(strJSParameters(3))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            PDFField_Validations_Range.Checked = True
                                        End If
                                    End If
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        Finally
                            If Not PDFField_Validations_Range.Checked And Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                PDFField_Validations_CustomScript.Checked = True
                            End If
                        End Try
                        Try
                            Dim formatField As PdfDictionary = AA
                            If formatField Is Nothing Then
                                Exit Try
                            End If
                            Dim formatFF As PdfDictionary = iTextGetPDFObject(formatField, PdfName.F)
                            Dim strJSTMP As String = ""
                            If Not formatFF Is Nothing Then
                                Dim strJS As String = iTextGetPDFString(formatFF, PdfName.JS) & ""
                                strJSTMP = strJS & ""
                                Dim strS As String = iTextGetPDFString(formatFF, PdfName.S) & ""
                                If strS.ToString.TrimStart("/"c).ToLower = "javascript" Then
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_Format".ToLower) Then
                                        strJS = strJS.Replace(CStr("AFNumber_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        Dim strJSParameters() As String = strJS.Split(","c)
                                        Try
                                            PDFField_Format_Number_DecimalPlaces.SelectedIndex = CInt(strJSParameters(0))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_SeparatorStyle.SelectedIndex = CInt(strJSParameters(1))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_Negative_UseRedText.Checked = False
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CInt(strJSParameters(2))
                                                Case 0
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                Case 1
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = True
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                Case 2
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = True
                                                Case 3
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = True
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = True
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_Negative_UseRedText.Checked = False
                                            PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CStr(strJSParameters(4) & "").Trim()
                                                Case ""
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case """"""
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0024""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 1
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0044\u004d""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 2
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u20ac""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 3
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0066\u006c""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 4
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0046""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 5
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u006b\u0072""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 6
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u004c\u002e\u0020""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 7
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0050\u0074\u0073""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 8
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u00a3""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 9
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u00a5""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 10
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case Else
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = PDFField_Format_Number_CurrencySymbol.Items.Count - 1
                                                    PDFField_Format_Number_CurrencySymbol_Custom.Text = HexToChar((strJSParameters(4).ToString.Replace("""", "")))
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CBool(strJSParameters(5).ToString.Trim())
                                                Case True
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = True
                                                Case False
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                                Case Else
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_Format".ToLower) Then
                                        strJS = strJS.Replace(CStr("AFPercent_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        Dim strJSParameters() As String = strJS.Split(","c)
                                        Try
                                            PDFField_Format_Percentage_DecimalPlaces.SelectedIndex = CInt(strJSParameters(0))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Percentage_SeparatorStyle.SelectedIndex = CInt(strJSParameters(1))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        PDFField_Format_Category.SelectedIndex = 2
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_FormatEx".ToLower) Then
                                        strJS = strJS.Replace(CStr("AFDate_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        For iVal As Integer = 0 To PDFField_Format_Dates.Items.Count - 1
                                            If strJS = PDFField_Format_Dates.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        PDFField_Format_Category.SelectedIndex = 3
                                        If selIndex >= 0 Then
                                            PDFField_Format_Dates.SelectedIndex = selIndex
                                            PDFField_Format_Date_Custom.Text = strJS.ToString
                                            PDFField_Format_Date_Custom.Visible = False
                                        Else
                                            PDFField_Format_Dates.SelectedIndex = PDFField_Format_Dates.Items.Count - 1
                                            PDFField_Format_Date_Custom.Text = strJS.ToString
                                            PDFField_Format_Date_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_Format(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFTime_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = CInt(strJS)
                                        PDFField_Format_Category.SelectedIndex = 4
                                        If selIndex >= 0 Then
                                            PDFField_Format_Times.SelectedIndex = selIndex
                                            PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(selIndex).ToString
                                            PDFField_Format_Time_Custom.Visible = False
                                        Else
                                            PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1
                                            PDFField_Format_Time_Custom.Text = strJSTemp.ToString
                                            PDFField_Format_Time_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_FormatEx(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFTime_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        For iVal As Integer = 0 To PDFField_Format_Times.Items.Count - 1
                                            If strJS = PDFField_Format_Times.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        PDFField_Format_Category.SelectedIndex = 4
                                        If selIndex >= 0 Then
                                            PDFField_Format_Times.SelectedIndex = selIndex
                                            PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(selIndex).ToString
                                            PDFField_Format_Time_Custom.Visible = False
                                        Else
                                            PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1
                                            PDFField_Format_Time_Custom.Text = strJS.ToString
                                            PDFField_Format_Time_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_Format(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = CInt(strJS)
                                        PDFField_Format_Category.SelectedIndex = 5
                                        If selIndex >= 0 Then
                                            PDFField_Format_Specials.SelectedIndex = selIndex
                                            PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                            PDFField_Format_Special_Custom.Visible = False
                                        Else
                                            PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                            PDFField_Format_Special_Custom.Text = strJSTemp.ToString
                                            PDFField_Format_Special_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_FormatEx(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        PDFField_Format_Category.SelectedIndex = 5
                                        For iVal As Integer = 0 To PDFField_Format_Specials.Items.Count - 1
                                            If strJS = PDFField_Format_Specials.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        If selIndex >= 0 Then
                                            PDFField_Format_Specials.SelectedIndex = selIndex
                                            PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                            PDFField_Format_Special_Custom.Visible = False
                                        Else
                                            PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                            PDFField_Format_Special_Custom.Text = strJS.ToString
                                            PDFField_Format_Special_Custom.Visible = True
                                        End If
                                    Else
                                        PDFField_Format_Category.SelectedIndex = 6
                                    End If
                                End If
                                PDFField_Format_Custom_Format_Script.Text = strJSTMP
                            End If
                            Dim strJSKeyStrokeTmp As String = ""
                            If True = True Then
                                If Not iTextGetPDFObject(formatField, PdfName.K) Is Nothing Then
                                    Dim formatKK As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.K)
                                    Dim strJS As String = iTextGetPDFString(formatKK, PdfName.JS) & ""
                                    strJSKeyStrokeTmp = strJS & ""
                                    Dim strS As String = iTextGetPDFObject(formatKK, PdfName.S).ToString
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_KeystrokeEx(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_KeystrokeEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                        PDFField_Format_Special_Custom.Text = strJS
                                        PDFField_Format_Special_Custom.Visible = True
                                    End If
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_(".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_(".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    Else
                                        PDFField_Format_Category.SelectedIndex = 6
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    End If
                                End If
                            End If
                            Dim SelFldList As New List(Of String)
                            PDFField_Calculations_Fields_FieldsListBox.Items.Clear()
                            For Each fdfFld As String In pdfReaderDoc.AcroFields.Fields.Keys.ToArray
                                If Not PDFField_Calculations_Fields_FieldsListBox.Items.Contains(fdfFld.Trim() & "") Then
                                    PDFField_Calculations_Fields_FieldsListBox.Items.Add(fdfFld.Trim() & "")
                                End If
                            Next
                            If Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                Dim fld As New iTextSharp.text.pdf.TextField(stamp.Writer, New iTextSharp.text.Rectangle(0, 0, 0, 0), fldname)
                                form.DecodeGenericDictionary(fldDic, fld)
                                If Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                    Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C)
                                    Dim strJS As String = ""
                                    Try
                                        If Not iTextGetPDFObject(calcScriptC, PdfName.JS) Is Nothing Then
                                            If calcScriptC.Get(PdfName.JS).IsString Then
                                                strJS = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfString).ToUnicodeString()
                                            ElseIf calcScriptC.Get(PdfName.JS).IsIndirect Then
                                                If TypeOf (iTextGetPDFObject(calcScriptC, PdfName.JS)) Is PdfStream Then
                                                    Dim streamJS As PdfStream = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfStream)
                                                    strJS = GetStringFromPdfStream(streamJS) & ""
                                                ElseIf TypeOf (iTextGetPDFObject(calcScriptC, PdfName.JS)) Is PdfString Then
                                                    Dim streamJS As PdfString = DirectCast(iTextGetPDFObject(calcScriptC, PdfName.JS), PdfString)
                                                    strJS = streamJS.ToUnicodeString() & ""
                                                End If
                                            End If
                                        End If
                                    Catch ex As Exception
                                        strJS = ""
                                    End Try
                                    Dim strJSKeyStrokeTmp2 As String = strJS & ""
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                                        Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                                        PDFField_Calculations_CustomCalcScript_Text.Text = strJSTemp
                                        strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.Replace(", new Array (", ";")
                                        strJS = strJS.TrimEnd("""")
                                        PDFField_Calculations_Fields.Checked = True
                                        PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                        If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                                            Dim CalcType As String = strJS.ToString.Replace("""", "").Split(";")(0)
                                            Select Case CalcType.ToString.ToLower
                                                Case "sum"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 0
                                                Case "prd"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 1
                                                Case "avg"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 2
                                                Case "min"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 3
                                                Case "max"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 4
                                                Case Else
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = -1
                                            End Select
                                            If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                                                SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                                            End If
                                            PDFField_Calculations_Fields_FieldsListBox.SelectionMode = SelectionMode.MultiSimple
                                            Dim fldSelList As New System.Windows.Forms.ListBox.SelectedObjectCollection(PDFField_Calculations_Fields_FieldsListBox)
                                            If SelFldList.Count > 0 Then
                                                For Each str In SelFldList.ToArray
                                                    If Not String.IsNullOrEmpty(str & "") Then
                                                        If Not fldSelList.Contains(str.ToString.Trim()) Then fldSelList.Add(str.ToString.Trim() & "")
                                                    End If
                                                Next
                                            End If
                                            If Not String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                                PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimStart(","c).TrimStart(" ")
                                            End If
                                        End If
                                    ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then
                                        Dim simpleNotation As String = ""
                                        Dim i1 As Integer = strJS.IndexOf("/** BVCALC ") + "/** BVCALC ".Length
                                        Dim i2 As Integer = strJS.IndexOf(" EVCALC **/") - i1
                                        simpleNotation = strJS.Substring(i1, i2)
                                        PDFField_Calculations_SimpleFieldNotationText.Text = simpleNotation & ""
                                        PDFField_Calculations_SimpleFieldNotation.Checked = True
                                    Else
                                        If Not String.IsNullOrEmpty(strJSKeyStrokeTmp2 & "") Then
                                            PDFField_Calculations_CustomCalcScript.Checked = True
                                            PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                        Else
                                            PDFField_Calculations_CustomCalcScript_Text.Text = ""
                                        End If
                                    End If
                                Else
                                End If
                            ElseIf Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C)
                                Dim strJS As String = iTextGetPDFString(calcScriptC, PdfName.JS) & ""
                                Dim strJSKeyStrokeTmp2 As String = strJS & ""
                                Dim strS As String = iTextGetPDFObject(calcScriptC, PdfName.S).ToString
                                If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                                    Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                                    strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                                    strJS = strJS.TrimStart(CStr("("))
                                    strJS = strJS.TrimStart("""")
                                    strJS = strJS.TrimEnd(CStr(";"))
                                    strJS = strJS.TrimEnd(CStr(")"))
                                    strJS = strJS.Replace(", new Array (", ";")
                                    strJS = strJS.TrimEnd("""")
                                    PDFField_Calculations_Fields.Checked = True
                                    PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                    If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                                        Dim CalcType As String = strJS.ToString.Replace("""", "").Split(";")(0)
                                        Select Case CalcType.ToString.ToLower
                                            Case "sum"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 0
                                            Case "prd"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 1
                                            Case "avg"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 2
                                            Case "min"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 3
                                            Case "max"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 4
                                            Case Else
                                                PDFField_Calculations_Fields_Type.SelectedIndex = -1
                                        End Select
                                        If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                                            SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                                        End If
                                        For Each str In SelFldList.ToArray
                                            If String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                                PDFField_Calculations_Fields_List.Text &= str
                                            Else
                                                PDFField_Calculations_Fields_List.Text &= ", " & str
                                            End If
                                        Next
                                        If Not String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                            PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimStart(","c).TrimStart(" ")
                                        End If
                                    End If
                                ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then
                                    Dim simpleNotation As String = ""
                                    Dim i1 As Integer = strJS.IndexOf("/** BVCALC ") + "/** BVCALC ".Length
                                    Dim i2 As Integer = strJS.IndexOf(" EVCALC **/") - i1
                                    simpleNotation = strJS.Substring(i1, i2)
                                    PDFField_Calculations_SimpleFieldNotationText.Text = simpleNotation & ""
                                    PDFField_Calculations_SimpleFieldNotation.Checked = True
                                End If
                            Else
                            End If
                            If Not strJSKeyStrokeTmp = strJSTMP.ToString.Replace("Format", "Keystroke") And Not String.IsNullOrEmpty(strJSKeyStrokeTmp) Then
                                PDFField_Format_Category.SelectedIndex = 6
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                        RadioButton_CheckedByDefault.Visible = True
                        RadioButton_OnValue.Enabled = True
                        Dim radioGroup As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        Dim _fields As PdfArray = radioGroup.GetAsArray(PdfName.KIDS)
                        If radioGroup.Get(PdfName.KIDS) Is Nothing Then
                            _fields = Nothing
                        Else
                            _fields = radioGroup.GetAsArray(PdfName.KIDS)
                        End If
                        Try
                            If TabControl1.SelectedTab Is TabPage1 Then
                                Me.ActiveControl = PDFField_Value_Checked
                                PDFField_Value_Checked.Select()
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim _fieldDic As PdfDictionary = Nothing
                        If Not _fields Is Nothing Then
                            If Not _fields.GetDirectObject(fieldIndex) Is Nothing Then
                                _fieldDic = _fields.GetDirectObject(fieldIndex)
                            ElseIf Not _fields.GetAsIndirectObject(fieldIndex) Is Nothing Then
                                Dim _fieldDicRef As PRIndirectReference = _fields.GetAsIndirectObject(fieldIndex)
                                If pdfReaderDoc.GetPdfObject(_fieldDicRef.Number).IsDictionary Then
                                    _fieldDic = DirectCast(pdfReaderDoc.GetPdfObject(_fieldDicRef.Number), PdfDictionary)
                                End If
                            Else
                                _fieldDic = _fields.GetDirectObject(fieldIndex)
                            End If
                        Else
                            _fieldDic = radioGroup
                        End If
                        merged = _fieldDic
                        mk = iTextGetPDFObject(_fieldDic, PdfName.MK)
                        Dim ap As iTextSharp.text.pdf.PdfDictionary
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        Dim f As iTextSharp.text.pdf.RadioCheckField = stamp.AcroFields.GetNewRadioCheckFieldFromField(fldname, fieldIndex, stamp.Writer)
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        form.DecodeGenericDictionary(_fieldDic, f)
                        Try
                            ap = iTextGetPDFObject(merged, PdfName.AP)
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            For Each fontName As String In f.Font.FullFontName(0)
                                If Not String.IsNullOrEmpty(fontName & "") Then
                                    If PDFField_FontFamily.Items.Contains(fontName & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    ElseIf PDFField_FontFamily.Items.Contains(fontName.ToString.Replace(" ", "-") & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName.ToString.Replace(" ", "-") & ""
                                        Exit For
                                    Else
                                        If Not PDFField_FontFamily.Items.Contains(fontName & "") Then PDFField_FontFamily.Items.Add(fontName & "")
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    End If
                                End If
                            Next
                            If f.FontSize > 0 Then
                                If PDFField_FontSize.Items.Contains(CStr(CInt(f.FontSize).ToString)) Then
                                    If (CStr(CInt(f.FontSize).ToString)) = "0" Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedItem = (CStr(CInt(f.FontSize).ToString))
                                    End If
                                Else
                                    PDFField_FontSize.Items.Add((CStr(CInt(f.FontSize).ToString)))
                                End If
                            ElseIf CInt(f.FontSize) <= 0 Then
                                If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                            End If
                        Catch exFont As Exception
                            TimeStampAdd(exFont, debugMode)
                        End Try
                        If Not radioGroup.GetAsNumber(PdfName.F) Is Nothing Then
                            Dim flags As Integer = radioGroup.GetAsNumber(PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) = iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        Dim pf As PdfFormField = f.CheckField
                        If Not radioGroup.Get(PdfName.FF) Is Nothing Then
                            Dim intFF As Integer = radioGroup.GetAsNumber(PdfName.FF).IntValue
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                PDFField_CombChk.Checked = True
                                PDFField_Comb.Text = f.MaxCharacterLength.ToString & ""
                            Else
                                PDFField_CombChk.Checked = False
                                PDFField_Comb.Text = ""
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT) = iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_EDIT) = iTextSharp.text.pdf.PdfFormField.FF_EDIT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PASSWORD) = iTextSharp.text.pdf.PdfFormField.FF_PASSWORD Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTILINE) = iTextSharp.text.pdf.PdfFormField.FF_MULTILINE Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON) = iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF) = iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT) = iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                PDFField_Required.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                PDFField_ReadOnly.Checked = True
                            End If
                        End If
                        PDFField_Value.Visible = False
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        Dim ml As PdfNumber = iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname), PdfName.MAXLEN)
                        If Not ml Is Nothing Then
                            Me.PDFField_MaxLen.Text = ml.IntValue.ToString & ""
                            If ml.IntValue > 0 Then Me.PDFField_MaxLenChk.Checked = True
                        End If
                        If f.Rotation >= 0 Then
                        End If
                        Dim dv As PdfName = Nothing
                        Try
                            RadioButton_OnValue.Text = ""
                            dv = radioGroup.GetAsName(PdfName.DV)
                            RadioButton_OnValue.Text = f.OnValue() & ""
                            If Not dv Is Nothing Then
                            Else
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        RadioButton_Checked.Checked = False
                        Dim asNameStr As String = ""
                        Try
                            If f.Checked Then
                                RadioButton_Checked.Checked = True
                            End If
                            Dim v As PdfName = radioGroup.GetAsName(PdfName.V)
                            If Not v Is Nothing Then
                                If RadioButton_OnValue.Text = "" Then
                                    RadioButton_OnValue.Text = v.ToString.TrimStart("/"c).TrimEnd("/"c).ToString & ""
                                Else
                                End If
                                If RadioButton_OnValue.Text.ToLower = "off" Then
                                    RadioButton_OnValue.Text = "Yes"
                                Else
                                    Dim asName As PdfName = radioGroup.GetAsName(PdfName.AS)
                                    asNameStr = asName.ToString.TrimStart("/"c).TrimEnd("/"c).ToString & ""
                                    If Not v Is Nothing Then
                                        If RadioButton_OnValue.Text = asNameStr Then
                                            RadioButton_Checked.Checked = True
                                        Else
                                            RadioButton_Checked.Checked = False
                                        End If
                                    Else
                                        RadioButton_Checked.Checked = False
                                    End If
                                End If
                            Else
                            End If
                            If Not radioGroup.Get(PdfName.DV) Is Nothing Then
                                Dim dvName As PdfName = radioGroup.GetAsName(PdfName.DV)
                                Dim dvNameStr = dvName.ToString.TrimStart("/"c).TrimEnd("/"c).ToString & ""
                                If dvNameStr = RadioButton_OnValue.Text Then
                                    RadioButton_CheckedByDefault.Checked = True
                                Else
                                    RadioButton_CheckedByDefault.Checked = False
                                End If
                            Else
                                RadioButton_CheckedByDefault.Checked = False
                            End If
                        Catch ex As Exception
                            RadioButton_Checked.Checked = False
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If RadioButton_Checked.Checked = True Then
                            Else
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim tu As PdfString = iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname), PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        If Not mk.Get(New PdfName("CA")) Is Nothing Then
                            Dim chckd As String = mk.Get(New PdfName("CA")).ToString & ""
                            Dim typeChars() As String = New String() {"4", "l", "8", "u", "n", "H"}
                            If Not String.IsNullOrEmpty(chckd.ToLower & "") Then
                                Select Case chckd.ToString
                                    Case typeChars(0).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 0
                                    Case typeChars(1).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 1
                                    Case typeChars(2).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 2
                                    Case typeChars(3).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 3
                                    Case typeChars(4).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 4
                                    Case typeChars(5).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 5
                                    Case Else
                                        RadioButton_FieldCheckType.SelectedIndex = 0
                                End Select
                            End If
                        End If
                        Try
                            Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                            If Not f.BorderColor Is Nothing Then
                                c = f.BorderColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bc Is Nothing Then
                                    If bc.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            If Not f.BackgroundColor Is Nothing Then
                                c = f.BackgroundColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bg Is Nothing Then
                                    If bg.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            Try
                                If Not f.TextColor Is Nothing Then
                                    c = f.TextColor
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                Else
                                    For k As Integer = 0 To item.Size - 1
                                        dict = item.GetWidget(k)
                                        Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                                        If Not (da Is Nothing) Then
                                            Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                            Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                            Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                            c = colors(colors.Length - 1)
                                            If Not c Is Nothing Then
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                            Else
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                            End If
                                        Else
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                        End If
                                    Next
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = iTextGetPDFObject(merged, nm)
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    If Not iTextGetPDFObject(d, PdfName.JS) Is Nothing Then
                                                        Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                        newNode.Nodes.Add(actionNode)
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                        Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                        If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                            Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                            Dim jsMemStream As New MemoryStream
                                                            Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                            If Not jsBytes Is Nothing Then
                                                                Dim js As PdfString = New PdfString(jsBytes)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                        Try
                            If TabControl1.SelectedTab Is TabPage1 Then
                                Me.ActiveControl = PDFField_Value_Checked
                                PDFField_Value_Checked.Select()
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim radioGroup As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        Dim _fields As PdfArray = radioGroup.GetAsArray(PdfName.KIDS)
                        Dim _fieldDic As PdfDictionary = Nothing
                        If Not _fields Is Nothing Then
                            If Not _fields.GetDirectObject(fieldIndex) Is Nothing Then
                                _fieldDic = _fields.GetDirectObject(fieldIndex)
                            ElseIf Not _fields.GetAsIndirectObject(fieldIndex) Is Nothing Then
                                Dim _fieldDicRef As PRIndirectReference = _fields.GetAsIndirectObject(fieldIndex)
                                If pdfReaderDoc.GetPdfObject(_fieldDicRef.Number).IsDictionary Then
                                    _fieldDic = DirectCast(pdfReaderDoc.GetPdfObject(_fieldDicRef.Number), PdfDictionary)
                                End If
                            Else
                                _fieldDic = _fields.GetDirectObject(fieldIndex)
                            End If
                        Else
                            _fieldDic = radioGroup
                        End If
                        merged = _fieldDic
                        mk = iTextGetPDFObject(_fieldDic, PdfName.MK)
                        PDFField_Value.Visible = False
                        lblPDFField_Value.Visible = True
                        Dim radiofield As PdfFormField = Nothing
                        Dim radioFields As New List(Of PdfFormField)
                        Dim radio As RadioCheckField = Nothing
                        Dim defaultValue As String = "Off", valueDefault As String = ""
                        Dim pdfName2 As PdfName = iTextGetPDFObject(radioGroup, PdfName.V)
                        If Not pdfName2 Is Nothing Then
                            valueDefault = pdfName2.ToString().TrimStart("/"c).ToString() & ""
                            PDFField_Value.Visible = False
                            lblPDFField_Value.Visible = True
                        End If
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        defaultValue = getRadioButtonOnValue(fldname, fieldIndex).ToString.TrimStart("/"c)
                        RadioButton_OnValue.Text = defaultValue
                        If defaultValue = valueDefault And Not defaultValue = "Off" Then
                            RadioButton_Checked.Checked = True
                        Else
                            RadioButton_Checked.Checked = False
                        End If
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        Dim f As iTextSharp.text.pdf.RadioCheckField = stamp.AcroFields.GetNewRadioCheckFieldFromField(fldname, fieldIndex, stamp.Writer)
                        form.DecodeGenericDictionary(_fieldDic, f)
                        If Not mk.Get(New PdfName("CA")) Is Nothing Then
                            Dim chckd As String = mk.Get(New PdfName("CA")).ToString & ""
                            Dim typeChars() As String = New String() {"4", "l", "8", "u", "n", "H"}
                            If Not String.IsNullOrEmpty(chckd.ToLower & "") Then
                                Select Case chckd.ToString
                                    Case typeChars(0).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 0
                                    Case typeChars(1).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 1
                                    Case typeChars(2).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 2
                                    Case typeChars(3).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 3
                                    Case typeChars(4).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 4
                                    Case typeChars(5).ToString
                                        RadioButton_FieldCheckType.SelectedIndex = 5
                                    Case Else
                                        RadioButton_FieldCheckType.SelectedIndex = 0
                                End Select
                            End If
                        End If
                        If Not radioGroup.GetAsNumber(PdfName.F) Is Nothing Then
                            Dim flags As Integer = radioGroup.GetAsNumber(PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) = iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        If Not radioGroup.Get(PdfName.FF) Is Nothing Then
                            Dim intFF As Integer = radioGroup.GetAsNumber(PdfName.FF).IntValue
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                PDFField_CombChk.Checked = True
                                PDFField_Comb.Text = f.MaxCharacterLength.ToString & ""
                            Else
                                PDFField_CombChk.Checked = False
                                PDFField_Comb.Text = ""
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT) = iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_EDIT) = iTextSharp.text.pdf.PdfFormField.FF_EDIT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PASSWORD) = iTextSharp.text.pdf.PdfFormField.FF_PASSWORD Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTILINE) = iTextSharp.text.pdf.PdfFormField.FF_MULTILINE Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON) = iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF) = iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT) = iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                PDFField_Required.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                PDFField_ReadOnly.Checked = True
                            End If
                        End If
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        Dim ml As PdfNumber = iTextGetPDFObject(_fieldDic, PdfName.MAXLEN)
                        If Not ml Is Nothing Then
                            Me.PDFField_MaxLen.Text = ml.IntValue.ToString & ""
                            If ml.IntValue > 0 Then Me.PDFField_MaxLenChk.Checked = True
                        End If
                        If f.Rotation >= 0 Then
                        End If
                        Dim tu As PdfString = iTextGetPDFObject(_fieldDic, PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                        If Not bc Is Nothing Then
                            If bc.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                        End If
                        Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                        If Not bg Is Nothing Then
                            If bg.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                        End If
                        Try
                            dict = item.GetWidget(fieldIndex)
                            Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                            If Not (da Is Nothing) Then
                                Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                Dim asd1 = item.GetWidget(fieldIndex).GetAsString(PdfName.DA)
                                Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                c = colors(colors.Length - 1)
                                If Not c Is Nothing Then
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                End If
                            Else
                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = iTextGetPDFObject(merged, nm)
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                        Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                        newNode.Nodes.Add(actionNode)
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                        Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                        If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                            Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                            Dim jsMemStream As New MemoryStream
                                                            Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                            If Not jsBytes Is Nothing Then
                                                                Dim js As PdfString = New PdfString(jsBytes)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                        ComboBox_ItemDisplay.SelectionMode = SelectionMode.One
                        PDFEdit_Options_ComboBoxes.Visible = True
                        ListBox_Additional_Options.Visible = False
                        ComboBox_Additional_Options.Visible = True
                        dict = item.GetWidget(0)
                        mk = iTextGetPDFObject(dict, PdfName.MK)
                        merged = item.GetMerged(0)
                        Dim f As iTextSharp.text.pdf.TextField = form.GetNewComboFromField(fldname, fieldIndex, stamp.Writer)
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        Dim fDict As iTextSharp.text.pdf.PdfFormField
                        Dim fldDic As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        If fldDic.Get(PdfName.KIDS) Is Nothing Then
                            form.DecodeGenericDictionary(fldDic, f)
                            For Each k As PdfName In fldDic.Keys.ToArray()
                                f.GetComboField.Put(k, fldDic.Get(k))
                            Next
                        ElseIf fieldIndex >= 0 Then
                            form.DecodeGenericDictionary(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), f)
                            For Each k As PdfName In fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex).Keys.ToArray()
                                f.GetComboField.Put(k, fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex).Get(k))
                            Next
                        Else
                            If fieldIndex >= 0 Then
                                fDict = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex)
                                For Each k As PdfName In fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex).Keys.ToArray()
                                    f.GetComboField.Put(k, fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex).Get(k))
                                Next
                            Else
                                fDict = iTextFieldItemPdfDictionary(fldname)
                                For Each k As PdfName In fDict.Keys.ToArray()
                                    f.GetComboField.Put(k, fDict.Get(k))
                                Next
                            End If
                        End If
                        Try
                            For Each fontName As String In f.Font.FullFontName(0)
                                If Not String.IsNullOrEmpty(fontName & "") Then
                                    If PDFField_FontFamily.Items.Contains(fontName & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    ElseIf PDFField_FontFamily.Items.Contains(fontName.ToString.Replace(" ", "-") & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName.ToString.Replace(" ", "-") & ""
                                        Exit For
                                    Else
                                        If Not PDFField_FontFamily.Items.Contains(fontName & "") Then PDFField_FontFamily.Items.Add(fontName & "")
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    End If
                                End If
                            Next
                            If f.FontSize > 0 Then
                                If PDFField_FontSize.Items.Contains(CStr(CInt(f.FontSize).ToString)) Then
                                    If (CStr(CInt(f.FontSize).ToString)) = "0" Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedItem = (CStr(CInt(f.FontSize).ToString))
                                    End If
                                Else
                                    PDFField_FontSize.Items.Add((CStr(CInt(f.FontSize).ToString)))
                                End If
                            ElseIf CInt(f.FontSize) <= 0 Then
                                If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                            End If
                        Catch exFont As Exception
                            TimeStampAdd(exFont, debugMode)
                        End Try
                        If Not iTextGetPDFObject(fldDic, PdfName.F) Is Nothing Then
                            Dim flags As Integer = iTextGetPDFObject(merged, PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) = iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        Dim pf As PdfFormField = f.GetComboField
                        If Not iTextGetPDFObject(fldDic, PdfName.FF) Is Nothing Then
                            Dim intFF As Integer = iTextGetPDFObject(merged, PdfName.FF).IntValue + 0
                            If intFF >= 67108864 Then
                                ComboBox_CommitImmediately.Checked = True
                            Else
                                ComboBox_CommitImmediately.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                                PDFField_Selection.Checked = True
                            Else
                                PDFField_Selection.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                PDFField_CombChk.Checked = True
                                PDFField_Comb.Text = f.MaxCharacterLength.ToString & ""
                            Else
                                PDFField_CombChk.Checked = False
                                PDFField_Comb.Text = ""
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                                PDFField_Scroll.Checked = False
                            Else
                                PDFField_Scroll.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                                ComboBox_CheckSpelling.Checked = False
                            Else
                                ComboBox_CheckSpelling.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT) = iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_EDIT) = iTextSharp.text.pdf.PdfFormField.FF_EDIT Then
                                ComboBox_AllowEnterCustomText.Checked = True
                            Else
                                ComboBox_AllowEnterCustomText.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON) = iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF) = iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PASSWORD) = iTextSharp.text.pdf.PdfFormField.FF_PASSWORD Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTILINE) = iTextSharp.text.pdf.PdfFormField.FF_MULTILINE Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT) = iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                PDFField_Required.Checked = True
                            Else
                                PDFField_Required.Checked = False
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                PDFField_ReadOnly.Checked = True
                            Else
                                PDFField_ReadOnly.Checked = False
                            End If
                        End If
                        Dim optInteger As Integer = f.Options
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        Dim ml As PdfNumber = iTextGetPDFObject(merged, PdfName.MAXLEN)
                        If Not ml Is Nothing Then
                            Me.PDFField_MaxLen.Text = ml.IntValue.ToString & ""
                            If ml.IntValue > 0 Then Me.PDFField_MaxLenChk.Checked = True
                        End If
                        If f.Rotation >= 0 Then
                        End If
                        If Not f.Text Is Nothing Then
                            Me.PDFField_DefaultText.Text = f.Text & ""
                        Else
                            Dim v As PdfString = mk.Get(New PdfName("CA"))
                            If Not v Is Nothing Then
                                Me.PDFField_DefaultText.Text = v.ToString() & ""
                            End If
                        End If
                        Dim tu As PdfString = iTextGetPDFObject(merged, PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        Dim opt As PdfArray = merged.GetAsArray(PdfName.OPT)
                        If Not opt Is Nothing Then
                            Dim optItemDisplay As New List(Of String), optItemValue As New List(Of String)
                            For i As Integer = 0 To opt.Size - 1
                                If opt(i).IsArray Then
                                    Dim optItems As PdfArray = opt.GetAsArray(i)
                                    If optItems.Size = 2 Then
                                        ComboBox_ItemDisplay.Items.Add(optItems.GetAsString(1).ToString & "")
                                        ComboBox_ItemValue.Items.Add(optItems.GetAsString(0).ToString & "")
                                    ElseIf optItems.Size = 1 Then
                                        ComboBox_ItemDisplay.Items.Add(optItems.GetAsString(0).ToString & "")
                                        ComboBox_ItemValue.Items.Add(optItems.GetAsString(0).ToString & "")
                                    End If
                                ElseIf opt(i).IsString Then
                                    ComboBox_ItemDisplay.Items.Add(opt.GetAsString(i).ToUnicodeString() & "")
                                    ComboBox_ItemValue.Items.Add(opt.GetAsString(i).ToUnicodeString() & "")
                                End If
                            Next
                            Dim val As String = stamp.AcroFields.GetListSelection(fldname)(0)
                            btnComboBox_ItemDefault.Text = val & ""
                            If Not String.IsNullOrEmpty(val) Then
                                For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                                    If ComboBox_ItemValue.Items(i).ToString = val Then
                                        ComboBox_ItemDisplay.SelectedIndex = i
                                        Exit For
                                    End If
                                Next
                            End If
                        End If
                        Try
                            If Not f.Text Is Nothing Then
                                PDFField_Value.Text = f.Text & ""
                            Else
                                Dim v As PdfString = iTextGetPDFObject(merged, PdfName.V)
                                If Not v Is Nothing Then
                                    PDFField_Value.Text = v.ToUnicodeString()
                                Else
                                    PDFField_Value.Text = ""
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If Not f.DefaultText Is Nothing Then
                                Me.PDFField_DefaultText.Text = f.DefaultText & ""
                            Else
                                Dim dv As PdfString = iTextGetPDFObject(merged, PdfName.DV)
                                If Not dv Is Nothing Then
                                    PDFField_DefaultText.Text = dv.ToUnicodeString() & ""
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        Else
                            Me.PDFField_Visibility.SelectedIndex = 0
                        End If
                        Try
                            Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                            If Not f.BorderColor Is Nothing Then
                                c = f.BorderColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bc Is Nothing Then
                                    If bc.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bc.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            If Not f.BackgroundColor Is Nothing Then
                                c = f.BackgroundColor
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            Else
                                If Not bg Is Nothing Then
                                    If bg.ArrayList.Count = 3 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 4 Then
                                        c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    ElseIf bg.ArrayList.Count = 1 Then
                                        c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                                End If
                            End If
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            Try
                                If Not f.TextColor Is Nothing Then
                                    c = f.TextColor
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                Else
                                    For k As Integer = 0 To item.Size - 1
                                        dict = item.GetWidget(k)
                                        Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                                        If Not (da Is Nothing) Then
                                            Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                            Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                            Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                            c = colors(colors.Length - 1)
                                            If Not c Is Nothing Then
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                            Else
                                                If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                            End If
                                        Else
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                        End If
                                    Next
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = Nothing
                                If fldDic.Get(PdfName.KIDS) Is Nothing Then
                                    a = iTextGetPDFObject(fldDic, nm)
                                Else
                                    a = iTextGetPDFObject(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), nm)
                                End If
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    Dim dTmp As PdfObject = iTextGetPDFObject(d, PdfName.JS)
                                                    If Not dTmp Is Nothing Then
                                                        If dTmp.IsString() Then
                                                            Dim js As PdfString = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        ElseIf dTmp.IsStream Then
                                                            Dim jsStream As PRStream = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not jsStream Is Nothing Then
                                                                Dim jsMemStream As New MemoryStream
                                                                Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                If Not jsBytes Is Nothing Then
                                                                    Dim js As PdfString = New PdfString(jsBytes)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            Dim dTmp As PdfObject = iTextGetPDFObject(d, PdfName.JS)
                                                            If Not dTmp Is Nothing Then
                                                                If dTmp.IsString() Then
                                                                    Dim js As PdfString = iTextGetPDFObject(d, PdfName.JS)
                                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                        n.Name = pdfNames2(k)
                                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                                    End If
                                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                    Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                    actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                    actionNode.Nodes.Add(js.ToUnicodeString())
                                                                    newNode.Nodes.Add(actionNode)
                                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                ElseIf dTmp.IsStream Then
                                                                    Dim jsStream As PRStream = iTextGetPDFObject(d, PdfName.JS)
                                                                    If Not jsStream Is Nothing Then
                                                                        Dim jsMemStream As New MemoryStream
                                                                        Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                        If Not jsBytes Is Nothing Then
                                                                            Dim js As PdfString = New PdfString(jsBytes)
                                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                                n.Name = pdfNames2(k)
                                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                                            End If
                                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                            Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                            actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                            actionNode.Nodes.Add(js.ToUnicodeString())
                                                                            newNode.Nodes.Add(actionNode)
                                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim AA As PdfDictionary = Nothing
                        If Not iTextFieldItemPdfDictionary(fldname) Is Nothing Then
                            If Not iTextFieldItemPdfDictionary(fldname).Get(PdfName.AA) Is Nothing Then
                                AA = iTextFieldItemPdfDictionary(fldname).GetAsDict(PdfName.AA)
                            End If
                        End If
                        Try
                            PDFField_Validations_None.Checked = True
                            Dim validateField As PdfDictionary = Nothing
                            If validateField Is Nothing Then
                                validateField = AA
                            End If
                            Dim strJSTMP As String = ""
                            If Not PDFField_CopyValidation.Checked Then
                                If Not iTextGetPDFObject(validateField, PdfName.V) Is Nothing Then
                                    Dim validateVV As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(validateField, PdfName.V)
                                    Dim strJS As String = iTextGetPDFString(validateVV, PdfName.JS) & ""
                                    strJSTMP = strJS & ""
                                    PDFField_Validation_Range_Custom.Text = strJSTMP & ""
                                    Dim strS As String = iTextGetPDFObject(validateVV, PdfName.S).ToString
                                    If strS.ToString.TrimStart("/"c).ToLower = "javascript" Then
                                        If strJS.TrimStart("/"c).ToLower.StartsWith("AFRange_Validate".ToLower) Then
                                            strJS = strJS.Replace(CStr("AFRange_Validate"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            Dim strJSParameters() As String = strJS.Split(","c)
                                            Try
                                                PDFField_Validation_Range_From.Text = CInt(strJSParameters(1))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                PDFField_Validation_Range_To.Text = CInt(strJSParameters(3))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            PDFField_Validations_Range.Checked = True
                                        End If
                                    End If
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        Finally
                            If Not PDFField_Validations_Range.Checked And Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                PDFField_Validations_CustomScript.Checked = True
                            End If
                        End Try
                        Try
                            PDFField_Format_Category.SelectedIndex = 0
                            Dim formatField As PdfDictionary = AA
                            If formatField Is Nothing Then
                                Exit Try
                            End If
                            Dim formatFF As PdfDictionary = iTextGetPDFObject(formatField, PdfName.F)
                            Dim strJSTMP As String = ""
                            If Not formatFF Is Nothing Then
                                Dim strJS As String = iTextGetPDFString(formatFF, PdfName.JS) & ""
                                strJSTMP = strJS & ""
                                Dim strS As String = iTextGetPDFString(formatFF, PdfName.S) & ""
                                If strS.ToString.TrimStart("/"c).ToLower = "javascript" Then
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_Format".ToLower) Then
                                        strJS = strJS.Replace(CStr("AFNumber_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        Dim strJSParameters() As String = strJS.Split(","c)
                                        Try
                                            PDFField_Format_Number_DecimalPlaces.SelectedIndex = CInt(strJSParameters(0))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_SeparatorStyle.SelectedIndex = CInt(strJSParameters(1))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_Negative_UseRedText.Checked = False
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CInt(strJSParameters(2))
                                                Case 0
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                Case 1
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = True
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                Case 2
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = True
                                                Case 3
                                                    PDFField_Format_Number_Negative_ShowParantheses.Checked = True
                                                    PDFField_Format_Number_Negative_UseRedText.Checked = True
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_Negative_UseRedText.Checked = False
                                            PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CStr(strJSParameters(4) & "").Trim()
                                                Case ""
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case """"""
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0024""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 1
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0044\u004d""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 2
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u20ac""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 3
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0066\u006c""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 4
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0046""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 5
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u006b\u0072""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 6
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u004c\u002e\u0020""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 7
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u0020\u0050\u0074\u0073""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 8
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u00a3""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 9
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case CStr(" ""\u00a5""").Trim()
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 10
                                                    PDFField_Format_Category.SelectedIndex = 1
                                                Case Else
                                                    PDFField_Format_Number_CurrencySymbol.Items.Add(strJSParameters(4))
                                                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = PDFField_Format_Number_CurrencySymbol.Items.Count - 1
                                                    PDFField_Format_Category.SelectedIndex = PDFField_Format_Category.Items.Count - 1
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            Select Case CBool(strJSParameters(5).ToString.Trim())
                                                Case True
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = True
                                                Case False
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                                Case Else
                                                    PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                            End Select
                                        Catch exF As Exception
                                            PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_Format".ToLower) Then
                                        strJS = strJS.Replace(CStr("AFPercent_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        Dim strJSParameters() As String = strJS.Split(","c)
                                        Try
                                            PDFField_Format_Percentage_DecimalPlaces.SelectedIndex = CInt(strJSParameters(0))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        Try
                                            PDFField_Format_Percentage_SeparatorStyle.SelectedIndex = CInt(strJSParameters(1))
                                        Catch exF As Exception
                                            TimeStampAdd(exF, debugMode)
                                        End Try
                                        PDFField_Format_Category.SelectedIndex = 2
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_FormatEx".ToLower) Then
                                        strJS = strJS.Replace(CStr("AFDate_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        For iVal As Integer = 0 To PDFField_Format_Dates.Items.Count - 1
                                            If strJS = PDFField_Format_Dates.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        PDFField_Format_Category.SelectedIndex = 3
                                        If selIndex >= 0 Then
                                            PDFField_Format_Dates.SelectedIndex = selIndex
                                            PDFField_Format_Date_Custom.Text = strJS.ToString
                                            PDFField_Format_Date_Custom.Visible = False
                                        Else
                                            PDFField_Format_Dates.SelectedIndex = PDFField_Format_Dates.Items.Count - 1
                                            PDFField_Format_Date_Custom.Text = strJS.ToString
                                            PDFField_Format_Date_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_Format(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFTime_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = CInt(strJS)
                                        PDFField_Format_Category.SelectedIndex = 4
                                        If selIndex >= 0 Then
                                            PDFField_Format_Times.SelectedIndex = selIndex
                                            PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(selIndex).ToString
                                            PDFField_Format_Time_Custom.Visible = False
                                        Else
                                            PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1
                                            PDFField_Format_Time_Custom.Text = strJSTemp.ToString
                                            PDFField_Format_Time_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_FormatEx(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFTime_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        For iVal As Integer = 0 To PDFField_Format_Times.Items.Count - 1
                                            If strJS = PDFField_Format_Times.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        PDFField_Format_Category.SelectedIndex = 4
                                        If selIndex >= 0 Then
                                            PDFField_Format_Times.SelectedIndex = selIndex
                                            PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(selIndex).ToString
                                            PDFField_Format_Time_Custom.Visible = False
                                        Else
                                            PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1
                                            PDFField_Format_Time_Custom.Text = strJS.ToString
                                            PDFField_Format_Time_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_Format(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_Format"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = CInt(strJS)
                                        PDFField_Format_Category.SelectedIndex = 5
                                        If selIndex >= 0 Then
                                            PDFField_Format_Specials.SelectedIndex = selIndex
                                            PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                            PDFField_Format_Special_Custom.Visible = False
                                        Else
                                            PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                            PDFField_Format_Special_Custom.Text = strJSTemp.ToString
                                            PDFField_Format_Special_Custom.Visible = True
                                        End If
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_FormatEx(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_FormatEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        Dim selIndex As Integer = -1
                                        PDFField_Format_Category.SelectedIndex = 5
                                        For iVal As Integer = 0 To PDFField_Format_Specials.Items.Count - 1
                                            If strJS = PDFField_Format_Specials.Items(iVal).ToString Then
                                                selIndex = iVal
                                                Exit For
                                            End If
                                        Next
                                        If selIndex >= 0 Then
                                            PDFField_Format_Specials.SelectedIndex = selIndex
                                            PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                            PDFField_Format_Special_Custom.Visible = False
                                        Else
                                            PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                            PDFField_Format_Special_Custom.Text = strJS.ToString
                                            PDFField_Format_Special_Custom.Visible = True
                                        End If
                                    End If
                                End If
                                PDFField_Format_Custom_Format_Script.Text = strJSTMP
                            End If
                            Dim strJSKeyStrokeTmp As String = ""
                            If True = True Then
                                If Not iTextGetPDFObject(formatField, PdfName.K) Is Nothing Then
                                    Dim formatKK As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.K)
                                    Dim strJS As String = iTextGetPDFString(formatKK, PdfName.JS) & ""
                                    strJSKeyStrokeTmp = strJS & ""
                                    Dim strS As String = iTextGetPDFObject(formatKK, PdfName.S).ToString
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_KeystrokeEx(".ToLower) Then
                                        Dim strJSTemp As String = strJS
                                        strJS = strJS.Replace(CStr("AFSpecial_KeystrokeEx"), "")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd("""")
                                        PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                        PDFField_Format_Special_Custom.Text = strJS
                                        PDFField_Format_Special_Custom.Visible = True
                                    End If
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_(".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_(".ToLower) Then
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    Else
                                        PDFField_Format_Category.SelectedIndex = 6
                                        PDFField_Format_Custom_Keystroke_Script.Text = strJS
                                    End If
                                End If
                            End If
                            Dim SelFldList As New List(Of String)
                            PDFField_Calculations_Fields_FieldsListBox.Items.Clear()
                            For Each fdfFld As String In pdfReaderDoc.AcroFields.Fields.Keys.ToArray
                                If Not PDFField_Calculations_Fields_FieldsListBox.Items.Contains(fdfFld.Trim() & "") Then
                                    PDFField_Calculations_Fields_FieldsListBox.Items.Add(fdfFld.Trim() & "")
                                End If
                            Next
                            If Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                If Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                    Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C)
                                    Dim strJS As String = iTextGetPDFString(calcScriptC, PdfName.JS) & ""
                                    Dim strJSKeyStrokeTmp2 As String = strJS & ""
                                    Dim strS As String = iTextGetPDFObject(calcScriptC, PdfName.S).ToString
                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                                        Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                                        PDFField_Calculations_CustomCalcScript_Text.Text = strJSTemp
                                        strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                                        strJS = strJS.TrimStart(CStr("("))
                                        strJS = strJS.TrimStart("""")
                                        strJS = strJS.TrimEnd(CStr(";"))
                                        strJS = strJS.TrimEnd(CStr(")"))
                                        strJS = strJS.Replace(", new Array (", ";")
                                        strJS = strJS.TrimEnd("""")
                                        PDFField_Calculations_Fields.Checked = True
                                        PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                        If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                                            Dim CalcType As String = strJS.ToString.Replace("""", "").Split(";")(0)
                                            Select Case CalcType.ToString.ToLower
                                                Case "sum"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 0
                                                Case "prd"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 1
                                                Case "avg"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 2
                                                Case "min"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 3
                                                Case "max"
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = 4
                                                Case Else
                                                    PDFField_Calculations_Fields_Type.SelectedIndex = -1
                                            End Select
                                            If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                                                SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                                            End If
                                            PDFField_Calculations_Fields_FieldsListBox.SelectionMode = SelectionMode.MultiSimple
                                            Dim fldSelList As New System.Windows.Forms.ListBox.SelectedObjectCollection(PDFField_Calculations_Fields_FieldsListBox)
                                            If SelFldList.Count > 0 Then
                                                For Each str In SelFldList.ToArray
                                                    If Not String.IsNullOrEmpty(str & "") Then
                                                        If Not fldSelList.Contains(str.ToString.Trim()) Then fldSelList.Add(str.ToString.Trim() & "")
                                                    End If
                                                Next
                                            End If
                                            If Not String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                                PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimStart(","c).TrimStart(" ")
                                            End If
                                        End If
                                    ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then
                                        Dim simpleNotation As String = ""
                                        Dim i1 As Integer = strJS.IndexOf("/** BVCALC ") + "/** BVCALC ".Length
                                        Dim i2 As Integer = strJS.IndexOf(" EVCALC **/") - i1
                                        simpleNotation = strJS.Substring(i1, i2)
                                        PDFField_Calculations_SimpleFieldNotationText.Text = simpleNotation & ""
                                        PDFField_Calculations_SimpleFieldNotation.Checked = True
                                    Else
                                        If Not String.IsNullOrEmpty(strJSKeyStrokeTmp2 & "") Then
                                            PDFField_Calculations_CustomCalcScript.Checked = True
                                            PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                        Else
                                            PDFField_Calculations_CustomCalcScript_Text.Text = ""
                                        End If
                                    End If
                                Else
                                End If
                            ElseIf Not iTextGetPDFObject(formatField, PdfName.C) Is Nothing Then
                                Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, PdfName.C)
                                Dim strJS As String = iTextGetPDFString(calcScriptC, PdfName.JS) & ""
                                Dim strJSKeyStrokeTmp2 As String = strJS & ""
                                Dim strS As String = iTextGetPDFObject(calcScriptC, PdfName.S).ToString
                                If strJS.TrimStart("/"c).ToLower.StartsWith("AFSimple_Calculate(".ToLower) Then
                                    Dim strJSTemp As String = strJS.TrimStart("/"c).ToString & ""
                                    PDFField_Calculations_CustomCalcScript_Text.Text = strJSTemp
                                    strJS = strJS.Replace(CStr("AFSimple_Calculate"), "")
                                    strJS = strJS.TrimStart(CStr("("))
                                    strJS = strJS.TrimStart("""")
                                    strJS = strJS.TrimEnd(CStr(";"))
                                    strJS = strJS.TrimEnd(CStr(")"))
                                    strJS = strJS.Replace(", new Array (", ";")
                                    strJS = strJS.TrimEnd("""")
                                    PDFField_Calculations_Fields.Checked = True
                                    PDFField_Calculations_CustomCalcScript_Text.Text = strJSKeyStrokeTmp2
                                    If strJS.ToString.Replace("""", "").Split(";").Length > 0 Then
                                        Dim CalcType As String = strJS.ToString.Replace("""", "").Split(";")(0)
                                        Select Case CalcType.ToString.ToLower
                                            Case "sum"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 0
                                            Case "prd"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 1
                                            Case "avg"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 2
                                            Case "min"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 3
                                            Case "max"
                                                PDFField_Calculations_Fields_Type.SelectedIndex = 4
                                            Case Else
                                                PDFField_Calculations_Fields_Type.SelectedIndex = -1
                                        End Select
                                        If strJS.ToString.Replace("""", "").Split(";")(1).Split(","c).Length > 0 Then
                                            SelFldList.AddRange(strJS.ToString.Replace("""", "").Split(";")(1).Split(","c))
                                        End If
                                        For Each str In SelFldList.ToArray
                                            If String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                                PDFField_Calculations_Fields_List.Text &= str
                                            Else
                                                PDFField_Calculations_Fields_List.Text &= ", " & str
                                            End If
                                        Next
                                        If Not String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                                            PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimStart(","c).TrimStart(" ")
                                        End If
                                    End If
                                ElseIf strJS.ToLower.StartsWith("/** BVCALC ".ToLower) And strJS.ToLower.Contains(" EVCALC **/".ToLower) Then
                                    Dim simpleNotation As String = ""
                                    Dim i1 As Integer = strJS.IndexOf("/** BVCALC ") + "/** BVCALC ".Length
                                    Dim i2 As Integer = strJS.IndexOf(" EVCALC **/") - i1
                                    simpleNotation = strJS.Substring(i1, i2)
                                    PDFField_Calculations_SimpleFieldNotationText.Text = simpleNotation & ""
                                    PDFField_Calculations_SimpleFieldNotation.Checked = True
                                End If
                            Else
                            End If
                            If Not strJSKeyStrokeTmp = strJSTMP.ToString.Replace("Format", "Keystroke") And Not String.IsNullOrEmpty(strJSKeyStrokeTmp) Then
                                PDFField_Format_Category.SelectedIndex = 6
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If TabControl1.SelectedTab Is TabPage3 Then
                                Me.ActiveControl = ComboBox_ItemDisplay
                                ComboBox_ItemDisplay.Select()
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                        PDFEdit_Options_ComboBoxes.Visible = True
                        ListBox_Additional_Options.Visible = True
                        ComboBox_Additional_Options.Visible = False
                        dict = item.GetWidget(0)
                        mk = iTextGetPDFObject(dict, PdfName.MK)
                        merged = item.GetMerged(0)
                        Dim f As iTextSharp.text.pdf.TextField = form.GetNewListboxFromField(fldname, fieldIndex, stamp.Writer)
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        Dim fDict As iTextSharp.text.pdf.PdfFormField
                        Dim fldDic As PdfDictionary = iTextFieldItemPdfDictionary(fldname)
                        If fldDic.Get(PdfName.KIDS) Is Nothing Then
                            form.DecodeGenericDictionary(fldDic, f)
                        ElseIf fieldIndex >= 0 Then
                            form.DecodeGenericDictionary(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), f)
                            mk = fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex).GetAsDict(PdfName.MK)
                        Else
                            If fieldIndex = 0 Then fDict = iTextFieldItemPdfDictionary(fldname) Else fDict = iTextFieldItemPdfDictionary(fldname).GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex)
                        End If
                        Try
                            For Each fontName As String In f.Font.FullFontName(0)
                                If Not String.IsNullOrEmpty(fontName & "") Then
                                    If PDFField_FontFamily.Items.Contains(fontName & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    ElseIf PDFField_FontFamily.Items.Contains(fontName.ToString.Replace(" ", "-") & "") Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName.ToString.Replace(" ", "-") & ""
                                        Exit For
                                    Else
                                        If Not PDFField_FontFamily.Items.Contains(fontName & "") Then PDFField_FontFamily.Items.Add(fontName & "")
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontFamily.SelectedItem = fontName & ""
                                        Exit For
                                    End If
                                End If
                            Next
                            If f.FontSize > 0 Then
                                If PDFField_FontSize.Items.Contains(CStr(CInt(f.FontSize).ToString)) Then
                                    If (CStr(CInt(f.FontSize).ToString)) = "0" Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedItem = (CStr(CInt(f.FontSize).ToString))
                                    End If
                                Else
                                    PDFField_FontSize.Items.Add((CStr(CInt(f.FontSize).ToString)))
                                End If
                            ElseIf CInt(f.FontSize) <= 0 Then
                                If Not PDFField_CopyAppearance.Checked Then PDFField_FontSize.SelectedIndex = 0
                            End If
                        Catch exFont As Exception
                            TimeStampAdd(exFont, debugMode)
                        End Try
                        If Not iTextGetPDFObject(fldDic, PdfName.F) Is Nothing Then
                            Dim flags As Integer = iTextGetPDFObject(iTextFieldItemPdfDictionary(fldname), PdfName.F).IntValue + 0
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKEDCONTENTS
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_TOGGLENOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED) = iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_LOCKED
                                PDFField_Locked.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY) = iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_READONLY
                                PDFField_ReadOnly.Checked = True
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOVIEW
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOROTATE
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM) = iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_NOZOOM
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT) = iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_PRINT
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN) = iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_HIDDEN
                            End If
                            If (flags And iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE) = iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE Then
                                flags -= iTextSharp.text.pdf.PdfFormField.FLAGS_INVISIBLE
                            End If
                        End If
                        Dim pf As PdfFormField = f.GetListField
                        If Not fldDic.Get(PdfName.FF) Is Nothing Then
                            Dim intFF As Integer = fldDic.GetAsNumber(PdfName.FF).IntValue
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON) = iTextSharp.text.pdf.PdfFormField.FF_RADIOSINUNISON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMB) = iTextSharp.text.pdf.PdfFormField.FF_COMB Then
                                PDFField_CombChk.Checked = True
                                PDFField_Comb.Text = f.MaxCharacterLength.ToString & ""
                            Else
                                PDFField_CombChk.Checked = False
                                PDFField_Comb.Text = ""
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSCROLL Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK) = iTextSharp.text.pdf.PdfFormField.FF_DONOTSPELLCHECK Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT) = iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_FILESELECT) = iTextSharp.text.pdf.PdfFormField.FF_FILESELECT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_EDIT) = iTextSharp.text.pdf.PdfFormField.FF_EDIT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_COMBO) = iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PASSWORD) = iTextSharp.text.pdf.PdfFormField.FF_PASSWORD Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_MULTILINE) = iTextSharp.text.pdf.PdfFormField.FF_MULTILINE Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON) = iTextSharp.text.pdf.PdfFormField.FF_PUSHBUTTON Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_RADIO) = iTextSharp.text.pdf.PdfFormField.FF_RADIO Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF) = iTextSharp.text.pdf.PdfFormField.FF_NO_TOGGLE_TO_OFF Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT) = iTextSharp.text.pdf.PdfFormField.FF_NO_EXPORT Then
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_REQUIRED) = iTextSharp.text.pdf.PdfFormField.FF_REQUIRED Then
                                PDFField_Required.Checked = True
                            End If
                            If (intFF And iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY) = iTextSharp.text.pdf.PdfFormField.FF_READ_ONLY Then
                                PDFField_ReadOnly.Checked = True
                            End If
                        End If
                        Dim optInteger As Integer = fldDic.GetAsNumber(PdfName.FF).IntValue + 0
                        ListBox_Options_MultipleSelection.Enabled = True
                        ListBox_Options_Commit.Enabled = True
                        If optInteger >= 67108864 Then
                            ListBox_Options_Commit.Checked = True
                            ListBox_Options_MultipleSelection.Checked = False
                            optInteger = optInteger - 67108864
                            ComboBox_ItemDisplay.SelectionMode = SelectionMode.One
                        Else
                            If optInteger >= iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT Then
                                ListBox_Options_MultipleSelection.Checked = True
                                ListBox_Options_Commit.Checked = False
                                optInteger = optInteger - iTextSharp.text.pdf.PdfFormField.FF_MULTISELECT
                                ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple
                            Else
                                ListBox_Options_MultipleSelection.Checked = False
                                ListBox_Options_Commit.Checked = False
                                ComboBox_ItemDisplay.SelectionMode = SelectionMode.One
                            End If
                        End If
                        If optInteger >= iTextSharp.text.pdf.PdfFormField.FF_COMBO Then
                        End If
                        If f.Alignment >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextAlign.SelectedIndex = CInt(f.Alignment + 0)
                        End If
                        If f.BorderWidth + 0 > 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = CInt(f.BorderWidth - 1)
                        End If
                        If f.BorderStyle >= 0 Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = CInt(f.BorderStyle + 0)
                        End If
                        If f.FieldName = String.Empty Then
                        End If
                        If Not f.Font Is Nothing Then
                        End If
                        If f.FontSize >= 0 Then
                        End If
                        Dim ml As PdfNumber = iTextGetPDFObject(merged, PdfName.MAXLEN)
                        If Not ml Is Nothing Then
                            Me.PDFField_MaxLen.Text = ml.IntValue.ToString & ""
                            If ml.IntValue > 0 Then Me.PDFField_MaxLenChk.Checked = True
                        End If
                        If f.Rotation >= 0 Then
                        End If
                        If Not f.Text Is Nothing Then
                            Me.PDFField_DefaultText.Text = f.Text & ""
                        Else
                            Dim v As PdfString = mk.Get(New PdfName("CA"))
                            If Not v Is Nothing Then
                                Me.PDFField_DefaultText.Text = v.ToString() & ""
                            End If
                        End If
                        Dim opt As PdfArray = fldDic.GetAsArray(PdfName.OPT)
                        If Not opt Is Nothing Then
                            Dim optItemDisplay As New List(Of String), optItemValue As New List(Of String)
                            For i As Integer = 0 To opt.Size - 1
                                Dim optItems As PdfArray = opt.GetAsArray(i)
                                If optItems.Size = 2 Then
                                    ComboBox_ItemDisplay.Items.Add(optItems.GetAsString(1).ToString & "")
                                    ComboBox_ItemValue.Items.Add(optItems.GetAsString(0).ToString & "")
                                ElseIf optItems.Size = 1 Then
                                    ComboBox_ItemDisplay.Items.Add(optItems.GetAsString(0).ToString & "")
                                    ComboBox_ItemValue.Items.Add(optItems.GetAsString(0).ToString & "")
                                End If
                            Next
                        End If
                        If ListBox_Options_MultipleSelection.Checked = True Then
                            Dim valArray As PdfArray = fldDic.GetAsArray(PdfName.I)
                            btnComboBox_ItemDefault.Text = ""
                            ComboBox_ItemDisplay.ClearSelected()
                            If Not valArray Is Nothing Then
                                For vIndex As Integer = 0 To valArray.Size - 1
                                    Dim iSel As Integer = valArray.GetAsNumber(vIndex).IntValue & ""
                                    ComboBox_ItemDisplay.SetSelected(CInt(iSel), True)
                                Next
                                btnComboBox_ItemDefault.Text = btnComboBox_ItemDefault.Text.ToString.TrimEnd(CStr(","c)).TrimStart(CStr(","c))
                            End If
                        Else
                            Try
                                Dim valArray As PdfArray = fldDic.GetAsArray(PdfName.I)
                                btnComboBox_ItemDefault.Text = ""
                                ComboBox_ItemDisplay.ClearSelected()
                                If Not valArray Is Nothing Then
                                    For vIndex As Integer = 0 To valArray.Size - 1
                                        Dim iSel As Integer = valArray.GetAsNumber(vIndex).IntValue & ""
                                        ComboBox_ItemDisplay.SetSelected(CInt(iSel), True)
                                        Exit For
                                    Next
                                    btnComboBox_ItemDefault.Text = btnComboBox_ItemDefault.Text.ToString.TrimEnd(CStr(","c)).TrimStart(CStr(","c))
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        End If
                        Dim tu As PdfString = iTextGetPDFObject(merged, PdfName.TU)
                        If Not tu Is Nothing Then
                            PDFField_Tooltip.Text = tu.ToUnicodeString() & ""
                        End If
                        If f.Visibility >= 0 Then
                            Me.PDFField_Visibility.SelectedIndex = CInt(f.Visibility + 0)
                        End If
                        Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                        If Not bc Is Nothing Then
                            If bc.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                        End If
                        Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                        If Not bg Is Nothing Then
                            If bg.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                        End If
                        Try
                            For k As Integer = 0 To item.Size - 1
                                Dim da As PdfString = Nothing
                                If Not fldDic.Get(PdfName.KIDS) Is Nothing Then
                                    da = iTextGetPDFObject(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), PdfName.DA)
                                Else
                                    da = iTextGetPDFObject(dict, PdfName.DA)
                                End If
                                If Not (da Is Nothing) Then
                                    Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                    Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                    Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                    c = colors(colors.Length - 1)
                                    If Not c Is Nothing Then
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                    End If
                                Else
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = iTextGetPDFObject(fldDic.GetAsArray(PdfName.KIDS).GetAsDict(fieldIndex), nm)
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                        Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                        newNode.Nodes.Add(actionNode)
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                        Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                        If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                            Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                            Dim jsMemStream As New MemoryStream
                                                            Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                            If Not jsBytes Is Nothing Then
                                                                Dim js As PdfString = New PdfString(jsBytes)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = ""
                            PDFField_SelectionChanged_None.Checked = True
                            Dim formatField As PdfDictionary = iTextGetPDFObject(fldDic, PdfName.AA)
                            If formatField Is Nothing Then Exit Try
                            Dim strJSTMP As String = ""
                            Dim strJSKeyStrokeTmp As String = ""
                            If Not formatField.Get(PdfName.K) Is Nothing Then
                                Dim formatK As PdfDictionary = iTextGetPDFObject(formatField, PdfName.K)
                                If Not formatK Is Nothing Then
                                    PDFField_SelectionChanged_ExecuteJavaScript.Checked = True
                                    If Not formatK.Get(PdfName.JS) Is Nothing Then
                                        If formatK.Get(PdfName.JS).IsString Then
                                            Dim strJS As String = formatK.GetAsString(PdfName.JS).ToUnicodeString.ToString & ""
                                            If Not String.IsNullOrEmpty(strJS & "") Then
                                                PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = strJS & ""
                                            End If
                                        End If
                                    End If
                                Else
                                    PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = ""
                                    PDFField_SelectionChanged_None.Checked = True
                                End If
                            Else
                                PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = ""
                                PDFField_SelectionChanged_None.Checked = True
                            End If
                        Catch ex As Exception
                            PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text = ""
                            PDFField_SelectionChanged_None.Checked = True
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If TabControl1.SelectedTab Is TabPage3 Then
                                Me.ActiveControl = ComboBox_ItemDisplay
                                ComboBox_ItemDisplay.Select()
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                        Dim p As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = form.GetFieldPositions(fldname)
                        Dim r As New iTextSharp.text.Rectangle(p(fieldIndex).position.Left, p(fieldIndex).position.Bottom, p(fieldIndex).position.Right, p(fieldIndex).position.Top)
                        PDFField_TabOrder.Text = form.GetFieldItem(fldname).GetTabOrder(fieldIndex).ToString() & ""
                        Try
                            Dim sb As New System.Text.StringBuilder
                            lblSignatureInformation.Text = ""
                            Dim af As AcroFields = pdfReaderDoc.AcroFields
                            Dim names As List(Of String) = af.GetSignatureNames
                            If names.Contains(fldname) Then
                                Dim name As String = fldname
                                Dim pk As PdfPKCS7 = af.VerifySignature(name)
                                If Not pk Is Nothing Then
                                    sb.AppendFormat("Signature Verified: {0}" & vbLf, pk.Verify().ToString())
                                    sb.AppendFormat("Signature Reason: {0}" & vbLf, pk.Reason.ToString())
                                    sb.AppendFormat("Signature Location: {0}" & vbLf, pk.Location.ToString())
                                    sb.AppendFormat("Signature Version: {0}" & vbLf, pk.Version.ToString())
                                    sb.AppendFormat("Signature Serial: {0}" & vbLf, pk.SigningCertificate.SerialNumber.ToString)
                                    sb.AppendFormat("Signature Date: {0}" & vbLf, pk.SignDate.ToString())
                                    sb.AppendFormat("Certificate Valid: {0}" & vbLf, pk.Certificates(0).IsValidNow().ToString())
                                    sb.AppendFormat("Certificate StartDate: {0}" & vbLf, pk.Certificates(0).CertificateStructure.StartDate.ToDateTime().ToString())
                                    sb.AppendFormat("Certificate EndDate: {0}" & vbLf, pk.Certificates(0).CertificateStructure.EndDate.ToDateTime().ToString())
                                    sb.AppendFormat("Certificate Issuer: {0}" & vbLf, pk.Certificates(0).CertificateStructure.Issuer.ToString())
                                    sb.AppendFormat("Certificate Subject: {0}" & vbLf, pk.Certificates(0).CertificateStructure.Subject.ToString())
                                    sb.AppendFormat("Certificate Version: {0}" & vbLf, pk.Certificates(0).CertificateStructure.Version.ToString())
                                    sb.AppendFormat("Certificate Encryption Algorithm: {0}" & vbLf, pk.GetEncryptionAlgorithm().ToString.ToString())
                                    lblSignatureInformation.Text = sb.ToString
                                End If
                                Exit Try
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            Dim bs As PdfDictionary
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 0
                            If Not merged.GetAsDict(PdfName.BS) Is Nothing Then
                                bs = merged.GetAsDict(PdfName.BS)
                                If Not bs.GetAsNumber(PdfName.W) Is Nothing Then
                                    If Not PDFField_CopyAppearance.Checked Then PDFField_BorderWidth.SelectedIndex = bs.GetAsNumber(PdfName.W).IntValue - 1
                                End If
                                If Not bs.GetAsName(PdfName.S) Is Nothing Then
                                    Select Case bs.GetAsName(PdfName.S).ToString.TrimStart("/"c).ToLower
                                        Case "d"
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 1
                                        Case "b"
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 2
                                        Case "i"
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 3
                                        Case "u"
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 4
                                        Case Else
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderStyle.SelectedIndex = 0
                                    End Select
                                End If
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim bc As PdfArray = iTextGetPDFObject(mk, PdfName.BC)
                        If Not bc Is Nothing Then
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                            If bc.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(1).DoubleValue * 255), CInt(bc.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bc.GetAsNumber(0).IntValue * 255), CInt(bc.GetAsNumber(1).IntValue * 255), CInt(bc.GetAsNumber(2).IntValue), CInt(bc.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bc.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255), CInt(bc.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BorderColorPicker.BackColor = Color.Transparent
                        End If
                        Dim bg As PdfArray = iTextGetPDFObject(mk, PdfName.BG)
                        If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                        If Not bg Is Nothing Then
                            If bg.ArrayList.Count = 3 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(1).DoubleValue * 255), CInt(bg.GetAsNumber(2).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 4 Then
                                c = ColorConvertCMYK2RGB(CInt(bg.GetAsNumber(0).IntValue * 255), CInt(bg.GetAsNumber(1).IntValue * 255), CInt(bg.GetAsNumber(2).IntValue), CInt(bg.GetAsNumber(3).IntValue))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            ElseIf bg.ArrayList.Count = 1 Then
                                c = New iTextSharp.text.BaseColor(CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255), CInt(bg.GetAsNumber(0).DoubleValue * 255))
                                If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                            End If
                        Else
                            If Not PDFField_CopyAppearance.Checked Then PDFField_BackgroundColorPicker.BackColor = Color.White
                        End If
                        Try
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            Try
                                For k As Integer = 0 To item.Size - 1
                                    dict = item.GetWidget(k)
                                    Dim da As PdfString = iTextGetPDFObject(dict, PdfName.DA)
                                    If Not (da Is Nothing) Then
                                        Dim dao() As Object = AcroFields.SplitDAelements(da.ToUnicodeString())
                                        Dim asd1 = item.GetWidget(k).GetAsString(PdfName.DA)
                                        Dim colors() As Object = AcroFields.SplitDAelements(asd1.ToString())
                                        c = colors(colors.Length - 1)
                                        If Not c Is Nothing Then
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = convertBaseColor_2_SystemColor(c)
                                        Else
                                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                        End If
                                    Else
                                        If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                                    End If
                                Next
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Catch ex As Exception
                            If Not PDFField_CopyAppearance.Checked Then PDFField_TextColorPicker.BackColor = Color.Black
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Actions_TreeView.Nodes.Clear()
                            Dim pdfNames As New Dictionary(Of PdfName, String)
                            Dim pdfNames2 As New Dictionary(Of PdfName, String)
                            pdfNames.Clear()
                            pdfNames.Add(PdfName.A, "Mouse Up")
                            pdfNames.Add(PdfName.AA, "Other")
                            For Each nm As PdfName In pdfNames.Keys
                                Dim strnm As String = nm.ToString
                                Dim a As PdfDictionary = iTextGetPDFObject(merged, nm)
                                If Not a Is Nothing Then
                                    If nm.Equals(PdfName.A) Then
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.A, "Mouse Up")
                                    Else
                                        pdfNames2.Clear()
                                        pdfNames2.Add(PdfName.D, "Mouse Down")
                                        pdfNames2.Add(PdfName.E, "Mouse Enter")
                                        pdfNames2.Add(PdfName.X, "Mouse Exit")
                                        pdfNames2.Add(PdfName.BL, "On Blur")
                                        pdfNames2.Add(PdfName.FO, "On Focus")
                                    End If
                                    For Each k As PdfName In pdfNames2.Keys.ToArray
                                        Dim strk As String = k.ToString
                                        Dim d As PdfDictionary = iTextGetPDFObject(a, k)
                                        Dim s As PdfName = Nothing
                                        If Not d Is Nothing Then
                                            s = iTextGetPDFObject(d, PdfName.S)
                                        Else
                                            s = iTextGetPDFObject(a, PdfName.S)
                                            d = a
                                        End If
                                        If Not s Is Nothing Then
                                            Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                Case "SubmitForm".ToLower
                                                    Dim f1 As PdfDictionary = iTextGetPDFObject(d, PdfName.F)
                                                    Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                    Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                    newNode.Name = s.ToString().TrimStart("/"c).TrimEnd("/"c)
                                                    Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                    actionNode.Nodes.Add(f2.ToUnicodeString())
                                                    newNode.Nodes.Add(actionNode)
                                                    Dim Flags As PdfNumber = iTextGetPDFObject(d, PdfName.FLAGS)
                                                    If Not Flags Is Nothing Then
                                                        Dim flagNode As New TreeNode("FLAGS")
                                                        flagNode.Name = "FLAGS"
                                                        flagNode.Text = "FLAGS"
                                                        flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                        newNode.Nodes.Add(flagNode)
                                                    End If
                                                    Dim Fields As PdfArray = iTextGetPDFObject(d, PdfName.FIELDS)
                                                    If Not Fields Is Nothing Then
                                                        If Fields.Size > 0 Then
                                                            Dim flagNode As New TreeNode("FIELDS")
                                                            flagNode.Name = "FIELDS"
                                                            flagNode.Text = "FIELDS"
                                                            For fld As Integer = 0 To Fields.Size - 1
                                                                Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                flagNode.Nodes.Add(fldName1)
                                                            Next
                                                            newNode.Nodes.Add(flagNode)
                                                        End If
                                                    End If
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                Case "JavaScript".ToLower
                                                    If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                        Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                            n.Name = pdfNames2(k)
                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                        End If
                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                        newNode.Nodes.Add(actionNode)
                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                        Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                        If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                            Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                            Dim jsMemStream As New MemoryStream
                                                            Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                            If Not jsBytes Is Nothing Then
                                                                Dim js As PdfString = New PdfString(jsBytes)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            End If
                                                        End If
                                                    End If
                                                Case "Named".ToLower
                                                    Dim named As PdfName = iTextGetPDFObject(d, PdfName.N)
                                                    If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                        Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                        n.Name = pdfNames2(k)
                                                        PDFField_Actions_TreeView.Nodes.Add(n)
                                                    End If
                                                    Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                    Dim actionNode As New Windows.Forms.TreeNode("N")
                                                    actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                    actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                    newNode.Nodes.Add(actionNode)
                                                    newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                    PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                            End Select
                                        End If
                                        If Not iTextGetPDFObject(d, PdfName.NEXT) Is Nothing Then
                                            Dim nxtIndex As PdfArray = iTextGetPDFObject(d, PdfName.NEXT)
                                            For i As Integer = 0 To nxtIndex.Size - 1
                                                Dim nxt As PdfDictionary = nxtIndex.GetAsDict(i)
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(nxt, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                            Next
                                        Else
                                            Dim nxt As PdfDictionary = iTextGetPDFObject(d, PdfName.NEXT)
                                            Do While Not nxt Is Nothing
                                                s = iTextGetPDFObject(nxt, PdfName.S)
                                                If Not s Is Nothing Then
                                                    Select Case s.ToString.ToLower.TrimStart("/"c).TrimEnd("/"c)
                                                        Case "SubmitForm".ToLower
                                                            Dim f1 As PdfDictionary = iTextGetPDFObject(nxt, PdfName.F)
                                                            Dim fs As PdfName = iTextGetPDFObject(f1, PdfName.FS)
                                                            Dim f2 As PdfString = iTextGetPDFObject(f1, PdfName.F)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & fs.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode(fs.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            actionNode.Name = newNode.Name & ">>" & fs.ToString() & ">>" & f2.ToUnicodeString()
                                                            actionNode.Nodes.Add(f2.ToUnicodeString())
                                                            newNode.Nodes.Add(actionNode)
                                                            Dim Flags As PdfNumber = iTextGetPDFObject(nxt, PdfName.FLAGS)
                                                            If Not Flags Is Nothing Then
                                                                Dim flagNode As New TreeNode("FLAGS")
                                                                flagNode.Name = "FLAGS"
                                                                flagNode.Text = "FLAGS"
                                                                flagNode.Nodes.Add(Flags.IntValue.ToString())
                                                                newNode.Nodes.Add(flagNode)
                                                            End If
                                                            Dim Fields As PdfArray = iTextGetPDFObject(a, PdfName.FIELDS)
                                                            If Not Fields Is Nothing Then
                                                                If Fields.Size > 0 Then
                                                                    Dim flagNode As New TreeNode("FIELDS")
                                                                    flagNode.Name = "FIELDS"
                                                                    flagNode.Text = "FIELDS"
                                                                    For fld As Integer = 0 To Fields.Size - 1
                                                                        Dim fldName1 As String = Fields.GetAsString(fld).ToUnicodeString() & ""
                                                                        flagNode.Nodes.Add(fldName1)
                                                                    Next
                                                                    newNode.Nodes.Add(flagNode)
                                                                End If
                                                            End If
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                        Case "JavaScript".ToLower
                                                            If Not d.GetAsString(PdfName.JS) Is Nothing Then
                                                                Dim js As PdfString = d.GetAsString(PdfName.JS)
                                                                If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                    Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                    n.Name = pdfNames2(k)
                                                                    PDFField_Actions_TreeView.Nodes.Add(n)
                                                                End If
                                                                Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                actionNode.Nodes.Add(js.ToUnicodeString())
                                                                newNode.Nodes.Add(actionNode)
                                                                newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                            ElseIf Not d.GetAsStream(PdfName.JS) Is Nothing Then
                                                                Dim jsRef As PdfIndirectReference = d.GetAsIndirectObject(PdfName.JS)
                                                                If Not stamp.Reader.GetPdfObject(jsRef.Number) Is Nothing Then
                                                                    Dim jsStream As PRStream = stamp.Reader.GetPdfObject(jsRef.Number)
                                                                    Dim jsMemStream As New MemoryStream
                                                                    Dim jsBytes() As Byte = PdfReader.GetStreamBytes(jsStream)
                                                                    If Not jsBytes Is Nothing Then
                                                                        Dim js As PdfString = New PdfString(jsBytes)
                                                                        If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                            Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                            n.Name = pdfNames2(k)
                                                                            PDFField_Actions_TreeView.Nodes.Add(n)
                                                                        End If
                                                                        Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                                        newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & js.ToUnicodeString())
                                                                        Dim actionNode As New Windows.Forms.TreeNode("JS")
                                                                        actionNode.Name = newNode.Name & ">>/JS>>" & js.ToUnicodeString()
                                                                        actionNode.Nodes.Add(js.ToUnicodeString())
                                                                        newNode.Nodes.Add(actionNode)
                                                                        newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                                        PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                                    End If
                                                                End If
                                                            End If
                                                        Case "Named".ToLower
                                                            Dim named As PdfName = iTextGetPDFObject(nxt, PdfName.N)
                                                            If Not PDFField_Actions_TreeView.Nodes.ContainsKey(pdfNames2(k)) Then
                                                                Dim n As TreeNode = New Windows.Forms.TreeNode(pdfNames2(k))
                                                                n.Name = pdfNames2(k)
                                                                PDFField_Actions_TreeView.Nodes.Add(n)
                                                            End If
                                                            Dim newNode As New Windows.Forms.TreeNode(s.ToString().TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Name = pdfNames2(k) & ">>" & s.ToString().TrimStart("/"c).TrimEnd(CStr("/"c) & ">>" & named.ToString())
                                                            Dim actionNode As New Windows.Forms.TreeNode("N")
                                                            actionNode.Name = newNode.Name & ">>/N>>" & named.ToString
                                                            actionNode.Nodes.Add(named.ToString.TrimStart("/"c).TrimEnd("/"c))
                                                            newNode.Nodes.Add(actionNode)
                                                            newNode.Name = newNode.Name & PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Count.ToString & ""
                                                            PDFField_Actions_TreeView.Nodes(pdfNames2(k)).Nodes.Add(newNode)
                                                    End Select
                                                End If
                                                nxt = iTextGetPDFObject(nxt, PdfName.NEXT)
                                            Loop
                                        End If
                                    Next
                                End If
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            PDFField_Signed_Nothing.Checked = True
                            PDFField_Signed_ReadOnly_SelectionListbox.Items.Clear()
                            PDFField_Signed_ReadOnly_SelectionListbox.Visible = False
                            PDFField_Signed_ReadOnly_Textbox.Text = ""
                            PDFField_Signed_ExecuteScript_Textbox.Text = ""
                            PDFField_Signed_ReadOnly_Textbox.Visible = True
                            Dim SelFldList As New List(Of String)
                            PDFField_Signed_ReadOnly_SelectionListbox.Items.Clear()
                            For Each fdfFld As String In pdfReaderDoc.AcroFields.Fields.Keys.ToArray
                                PDFField_Signed_ReadOnly_SelectionListbox.Items.Add(fdfFld.Trim() & "")
                            Next
                            Dim strJSKeyStrokeTmp As String = ""
                            If Not iTextGetPDFObject(merged, PdfName.LOCK) Is Nothing Then
                                Dim signedLockObj As PdfDictionary = iTextGetPDFObject(merged, PdfName.LOCK)
                                If Not signedLockObj Is Nothing Then
                                    If Not iTextGetPDFObject(signedLockObj, PdfName.ACTION) Is Nothing Then
                                        Dim strLockAction As String = iTextGetPDFObject(signedLockObj, PdfName.ACTION).ToString
                                        Dim strLockActionType As String = iTextGetPDFObject(signedLockObj, PdfName.TYPE).ToString
                                        If (strLockActionType & "").ToString.ToLower.TrimStart("/"c) = "SigFieldLock".ToString.ToLower Then
                                            PDFField_Signed_ReadOnly.Checked = True
                                            Select Case strLockAction.ToLower.TrimStart("/"c)
                                                Case "All".ToLower
                                                    PDFField_Signed_ReadOnlyType_ComboBox.SelectedIndex = 0
                                                    PDFField_Signed_ReadOnly_Textbox.Text = ""
                                                Case "Exclude".ToLower
                                                    PDFField_Signed_ReadOnlyType_ComboBox.SelectedIndex = 1
                                                    PDFField_Signed_ReadOnly_Textbox.Text = ""
                                                    Dim arrSignedFields As PdfArray = iTextGetPDFObject(signedLockObj, PdfName.FIELDS)
                                                    If Not arrSignedFields Is Nothing Then
                                                        For sidx As Integer = 0 To arrSignedFields.Size
                                                            Dim strSignedField As PdfString = arrSignedFields(sidx)
                                                            If String.IsNullOrEmpty(PDFField_Signed_ReadOnly_Textbox.Text & "") Then
                                                                PDFField_Signed_ReadOnly_Textbox.Text = strSignedField.ToUnicodeString & ""
                                                            Else
                                                                PDFField_Signed_ReadOnly_Textbox.Text &= "," & strSignedField.ToUnicodeString & ""
                                                            End If
                                                        Next
                                                    End If
                                                Case "Include".ToLower
                                                    PDFField_Signed_ReadOnlyType_ComboBox.SelectedIndex = 2
                                                    PDFField_Signed_ReadOnly_Textbox.Text = ""
                                                    Dim arrSignedFields As PdfArray = iTextGetPDFObject(signedLockObj, PdfName.FIELDS)
                                                    If Not arrSignedFields Is Nothing Then
                                                        For sidx As Integer = 0 To arrSignedFields.Size
                                                            Dim strSignedField As PdfString = arrSignedFields(sidx)
                                                            If String.IsNullOrEmpty(PDFField_Signed_ReadOnly_Textbox.Text & "") Then
                                                                PDFField_Signed_ReadOnly_Textbox.Text = strSignedField.ToUnicodeString & ""
                                                            Else
                                                                PDFField_Signed_ReadOnly_Textbox.Text &= "," & strSignedField.ToUnicodeString & ""
                                                            End If
                                                        Next
                                                    End If
                                                Case Else
                                                    PDFField_Signed_ReadOnlyType_ComboBox.SelectedIndex = 0
                                                    GoTo TRY_AA
                                            End Select
                                        Else
                                            GoTo TRY_AA
                                        End If
                                    Else
                                        GoTo TRY_AA
                                    End If
                                Else
                                    GoTo TRY_AA
                                End If
                            ElseIf Not iTextGetPDFObject(merged, PdfName.AA) Is Nothing Then
TRY_AA:
                                Dim signedAA As PdfDictionary = iTextGetPDFObject(merged, PdfName.AA)
                                If Not signedAA Is Nothing Then
                                    If Not iTextGetPDFObject(signedAA, PdfName.F) Is Nothing Then
                                        Dim signedFObj As PdfDictionary = iTextGetPDFObject(signedAA, PdfName.F)
                                        If Not signedFObj Is Nothing Then
                                            If Not iTextGetPDFObject(signedFObj, PdfName.JS) Is Nothing Then
                                                Dim strJS As String = iTextGetPDFString(signedFObj, PdfName.JS) & ""
                                                If Not String.IsNullOrEmpty(strJS & "") Then
                                                    PDFField_Signed_ExecuteScript.Checked = True
                                                    PDFField_Signed_ExecuteScript_Textbox.Text = strJS & ""
                                                End If
                                            End If
                                        End If
                                    End If
                                Else
                                    PDFField_SelectionChanged_None.Checked = True
                                    PDFField_Signed_ExecuteScript_Textbox.Text = ""
                                End If
                            Else
                                PDFField_SelectionChanged_None.Checked = True
                                PDFField_Signed_ExecuteScript_Textbox.Text = ""
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            If TabControl1.SelectedTab Is TabPage13 Then
                                Me.ActiveControl = ComboBox_ItemDisplay
                                ComboBox_ItemDisplay.Select() '
                                ComboBox_ItemDisplay.Select()
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Case Else
                End Select
                Return True
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            Finally
                PDFField_Actions_TreeView_Display_Show()
                PdfForm_FieldNames_UpdateButton()
                PDFField_Value_Checked.Checked = RadioButton_Checked.Checked
                If RadioButton_OnValue.Text = "Off" Then
                    RadioButton_OnValue.Text = "Yes"
                End If
            End Try
        Catch exMain As Exception
            TimeStampAdd(exMain, debugMode)
        Finally
            cUserRect.pauseDraw = blnPauseDraw
            fldNameHighlightedCopy = ""
            pnlFields.Visible = showFieldPropertiesWindow
        End Try
    End Function
    Function ColorConvertCMYK2RGB(ByVal c As Integer, ByVal m As Integer, ByVal y As Integer, ByVal k As Integer) As iTextSharp.text.BaseColor
        If Not (c >= 0 And c <= 100) Then Return Nothing
        If Not (m >= 0 And m <= 100) Then Return Nothing
        If Not (y >= 0 And y <= 100) Then Return Nothing
        Dim chRed As Integer
        Dim chGreen As Integer
        Dim chBlue As Integer
        chRed = ExtractColor(c, k)
        chGreen = ExtractColor(m, k)
        chBlue = ExtractColor(y, k)
        Return New iTextSharp.text.BaseColor(chRed, chGreen, chBlue)
    End Function
    Function Max(ByVal v1 As Object, ByVal v2 As Object) As Object
        Return IIf(v1 > v2, v1, v2)
    End Function
    Function Min(ByVal v1 As Object, ByVal v2 As Object) As Object
        Return IIf(v1 < v2, v1, v2)
    End Function
    Function ExtractColor(ByVal chColor As Integer, ByVal chBlack As Integer) As Integer
        Dim ch As Integer
        ch = (100 - chColor) - chBlack
        ch = Min(ch, 255)
        ch = ch * 2.56
        ch = Max(ch, 0)
        ExtractColor = ch
    End Function
    Public Function GetFormFieldType(ByVal b() As Byte, ByVal fldname As String) As Integer
        Try
            Return pdfReaderDoc.AcroFields.GetFieldType(fldname)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
        End Try
        Return -1
    End Function
    Public Function GetFormFieldType(ByVal r As PdfReader, ByVal fldname As String) As Integer
        Try
            Return r.AcroFields.GetFieldType(fldname)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
        End Try
        Return -1
    End Function
    Public Sub InitializeFieldNames()
        PDFField_Name.Text = ""
    End Sub
    Public Function DeleteTempFiles(Optional fp As String = "") As Boolean
        Try
            If String.IsNullOrEmpty(fp & "") Then
                fp = ApplicationDataFolder(False,"temp")
            End If
            A0_PictureBox1.Image = Nothing
            A0_PictureBox2.Image = Nothing
            For Each f As String In Directory.GetFiles(fp)
                Try
                    If Not Path.GetFileName(f).ToString.ToLower = ("readme.txt".ToLower()) Then
                        If f.ToLower().StartsWith(ApplicationDataFolder(False,"temp").ToLower) Then
                            If File.Exists(f) Then File.Delete(f)
                        End If
                    End If
                Catch ex As Exception
                    Err.Clear()
                End Try
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return False
        End Try
        Return True
    End Function
    Public Function DeleteTempSubFolders(Optional fp As String = "") As Boolean
        Try
            If String.IsNullOrEmpty(fp & "") Then
                fp = ApplicationDataFolder(False,"temp")
            End If
            A0_PictureBox1.Image = Nothing
            A0_PictureBox2.Image = Nothing
            For Each f As String In Directory.GetDirectories(fp)
                Try
                    If f.ToLower().StartsWith(ApplicationDataFolder(False,"temp").ToLower) Then
                        If Directory.Exists(f) Then
                            If Not Directory.GetFiles(f) Is Nothing Then
                                If Directory.GetFiles(f).Length > 0 Then
                                    If DeleteTempFiles(f) Then
                                        Directory.Delete(f)
                                    End If
                                Else
                                    Directory.Delete(f)
                                End If
                            Else
                                Directory.Delete(f)
                            End If
                        End If
                    End If
                Catch ex As Exception
                    Err.Clear()
                End Try
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return False
        End Try
        Return True
    End Function
    Public Sub DeleteTempFilesImageCache()
        Dim fp As String = ApplicationDataFolder(False,"temp")
        A0_PictureBox1.Image = Nothing
        A0_PictureBox2.Image = Nothing
        For Each f As String In Directory.GetFiles(fp)
            Try
                If Path.GetFileName(f).StartsWith("image_cache_history_") Then
                    If File.Exists(f) Then File.Delete(f)
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
        Next
        Return
    End Sub
    Private Sub Form1_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles Me.FormClosed
    End Sub
    Private Sub Form1_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing
        Try
            Select Case e.CloseReason
                Case CloseReason.WindowsShutDown
                    End
                Case CloseReason.TaskManagerClosing
                    End
                Case Else
                    Me.StatusToolStrip = "Status: Closing - please wait..."
                    Try
                        SaveSetting("PDFormsNet", "settings", "maxshow", CmbHistoryMaxShow_ToolStripComboBox1.SelectedIndex.ToString & "")
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    Try
                        blnModelPopupClose = MsgBoxResult.Ok
                        If Not A0_CloseDocument(True, True) Then
                            Me.StatusToolStrip = "Status: Closing was cancelled."
                            e.Cancel = True
                            Return
                        End If
                        TimeStampSaveToFile(ApplicationDataFolder(False, "") & "log.txt")
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    Try
                        ReleaseMemory()
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    Try
                        DeleteTempFiles()
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    Try
                        Try
                            GC.Collect()
                            If Not GC.WaitForFullGCComplete(100) Then
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Catch exGc As Exception
                        TimeStampAdd(exGc, debugMode)
                    End Try
            End Select
        Catch ex As Exception
            Err.Clear()
        End Try
Goto_END_APP:
        'End If
        Return
    End Sub
    ''' <summary>
    ''' Creates bar code
    ''' </summary>
    ''' <param name="pdfFile">pdfFile bytes</param>
    ''' <param name="code">10 digit code</param>
    ''' <param name="width">width of bar code</param>
    ''' <param name="height">height of bar code</param>
    ''' <param name="x">Position X (left=0)</param>
    ''' <param name="y">Position Y (bottom=0)</param>
    ''' <returns>Returns PDF File with barcode</returns>
    ''' <remarks></remarks>
    Public Function CreateBarCode(ByVal pdfFile As Byte(), ByVal page As Integer, ByVal code As String, ByVal width As Single, ByVal height As Single, ByVal x As Integer, ByVal y As Integer) As Byte()
        Dim code128 As New iTextSharp.text.pdf.Barcode128
        Dim pdfMem As New MemoryStream
        Try
            code128.CodeType = iTextSharp.text.pdf.Barcode.CODE128
            code128.ChecksumText = True
            Dim f As iTextSharp.text.pdf.BaseFont = BaseFont.CreateFont("Helvetica", "winansi", False)
            code128.Font = f
            code128.TextAlignment = Element.ALIGN_CENTER
            code128.AltText = code
            code128.GenerateChecksum = True
            code128.StartStopText = True
            code128.Code = code
            Dim m As New MemoryStream
            code128.CreateDrawingImage(System.Drawing.Color.Black, System.Drawing.Color.White).Save(m, System.Drawing.Imaging.ImageFormat.Jpeg)
            Dim reader As New PdfReader(pdfFile)
            Dim stamp As PdfStamper = getStamper(reader, pdfMem)
            Dim myImage As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(m.ToArray)
            myImage.ScaleToFit(width, height)
            myImage.SetAbsolutePosition(x, y)
            myImage.Alignment = Element.ALIGN_CENTER
            stamp.GetOverContent(page).AddImage(myImage)
            stamp.Writer.CloseStream = False
            stamp.Close()
            If Not pdfMem Is Nothing Then
                If pdfMem.CanSeek Then
                    pdfMem.Position = 0
                End If
                Return pdfMem.ToArray
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            pdfMem.Dispose()
        End Try
        Return Nothing
    End Function
    Public Function CreateBarCode2(ByVal pdfFile As Byte(), ByVal page As Integer, ByVal code As String, ByVal width As Single, ByVal height As Single, ByVal x As Integer, ByVal y As Integer) As Byte()
        Dim code128 As New iTextSharp.text.pdf.Barcode128
        Dim pdfMem As New MemoryStream
        Try
            code128.CodeType = iTextSharp.text.pdf.Barcode.CODE128
            code128.ChecksumText = True
            Dim f As iTextSharp.text.pdf.BaseFont = BaseFont.CreateFont("Helvetica", "winansi", False)
            code128.Font = f
            code128.TextAlignment = Element.ALIGN_CENTER
            code128.AltText = code
            code128.GenerateChecksum = True
            code128.StartStopText = True
            code128.Code = code
            Dim m As New MemoryStream
            code128.CreateDrawingImage(System.Drawing.Color.Black, System.Drawing.Color.White).Save(m, System.Drawing.Imaging.ImageFormat.Jpeg)
            Dim reader As New PdfReader(pdfFile)
            Dim stamp As PdfStamper = getStamper(reader, pdfMem)
            Dim myImage As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(m.ToArray)
            myImage.ScaleToFit(width, height)
            myImage.SetAbsolutePosition(x, y)
            myImage.Alignment = Element.ALIGN_CENTER
            Dim bmpImg As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(myImage.RawData))
            Dim bmpgraphics As Graphics = System.Drawing.Graphics.FromImage(bmpImg)
            bmpgraphics.CompositingQuality = CompositingQuality.HighQuality
            bmpgraphics.InterpolationMode = InterpolationMode.HighQualityBicubic
            bmpgraphics.SmoothingMode = SmoothingMode.AntiAlias
            bmpgraphics.FillRectangle(System.Drawing.Brushes.White, New System.Drawing.RectangleF(5, height - 20, width - 10, 20))
            bmpgraphics.DrawString(code, New System.Drawing.Font("Arial", 8, FontStyle.Regular), System.Drawing.Brushes.Black, New PointF(10, height - 24))
            Dim barCodeImg As New MemoryStream
            bmpImg.Save(barCodeImg, System.Drawing.Imaging.ImageFormat.Gif)
            Dim imgBarCode As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(barCodeImg.ToArray)
            imgBarCode.ScaleToFit(width, height)
            imgBarCode.SetAbsolutePosition(x, y)
            stamp.GetOverContent(page).AddImage(imgBarCode)
            stamp.Writer.CloseStream = False
            stamp.Close()
            If Not pdfMem Is Nothing Then
                If pdfMem.CanSeek Then
                    pdfMem.Position = 0
                End If
                Return pdfMem.ToArray
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            pdfMem.Dispose()
        End Try
        Return Nothing
    End Function
    Public Function CreateBarCodeWithText(ByVal pdfFile As Byte(), ByVal page As Integer, ByVal code As String, ByVal width As Single, ByVal height As Single, ByVal x As Integer, ByVal y As Integer) As Byte()
        Dim code128 As New iTextSharp.text.pdf.Barcode128
        Dim pdfMem As New MemoryStream
        Try
            code128.CodeType = iTextSharp.text.pdf.Barcode.CODE128
            code128.ChecksumText = True
            Dim f As iTextSharp.text.pdf.BaseFont = BaseFont.CreateFont("Helvetica", "winansi", False)
            code128.Font = f
            code128.Baseline = 7.0F
            code128.TextAlignment = Element.ALIGN_CENTER
            code128.AltText = code
            code128.GenerateChecksum = True
            code128.StartStopText = True
            code128.Code = code
            Dim reader As New PdfReader(pdfFile)
            Dim stamp As PdfStamper = getStamper(reader, pdfMem)
            Dim cb As PdfContentByte = stamp.GetOverContent(page)
            Dim i As iTextSharp.text.Image = code128.CreateImageWithBarcode(cb, iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK)
            i.SetAbsolutePosition(x, y)
            i.ScaleToFit(width, height)
            i.SpacingAfter = 10
            i.SpacingBefore = 10
            i.BackgroundColor = (CMYKColor.WHITE)
            cb.Fill()
            cb.AddImage(i)
            cb.Fill()
            stamp.Writer.CloseStream = False
            stamp.Close()
            If Not pdfMem Is Nothing Then
                If pdfMem.CanSeek Then
                    pdfMem.Position = 0
                End If
                Return pdfMem.ToArray
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            pdfMem.Dispose()
        End Try
        Return Nothing
    End Function
    Private Sub frmMain_GiveFeedback(ByVal sender As Object, ByVal e As System.Windows.Forms.GiveFeedbackEventArgs) Handles Me.GiveFeedback
    End Sub
    Public Function getOpenWithApplicationNames(ByVal f As String) As String()
        Dim appNames As New List(Of String)
        Try
            With My.Computer.Registry.ClassesRoot
                Dim pathClass As String = System.IO.Path.GetExtension(f).ToString.ToLower() & "\OpenWithList"
                Dim r As RegistryKey = .OpenSubKey(pathClass, False)
                For Each subkeyName As String In r.GetSubKeyNames
                    appNames.Add(subkeyName)
                Next
                Return appNames.ToArray
            End With
        Catch ex As Exception
            Err.Clear()
            Return New String() {}
        End Try
    End Function
    Public Sub setOpenWithMenuItems()
    End Sub
    Public Sub webbrowserControlFix()
        Dim BrowserVer As Integer, RegVal As Integer
        Using Wb As New WebBrowser()
            BrowserVer = Wb.Version.Major
        End Using
        If BrowserVer >= 11 Then
            RegVal = 11001
        ElseIf BrowserVer = 10 Then
            RegVal = 10001
        ElseIf BrowserVer = 9 Then
            RegVal = 9999
        ElseIf BrowserVer = 8 Then
            RegVal = 8888
        Else
            RegVal = 7000
        End If
        Dim Key As RegistryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION", True)
        Key.SetValue(System.Diagnostics.Process.GetCurrentProcess().ProcessName + ".exe", RegVal, RegistryValueKind.DWord)
        Key.Close()
    End Sub
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Try
            ToolStripComboBoxImageProcessor.SelectedIndex = imageProcessor
        Catch ex As Exception
            Err.Clear()
        End Try
        Try
            If GetSetting(Application.ProductName, "LICENSE", "GNU", "") = "" Then
                Select Case MsgBox("VIEW " & Application.ProductName & " LICENSE AGREEMENT?", MsgBoxStyle.YesNo + MsgBoxStyle.ApplicationModal, "IMPORTANT:")
                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                        SaveSetting(Application.ProductName, "LICENSE", "GNU", DateTime.Now.ToString())
                        Process.Start(appPath & "GNU General Public License v3.0.txt")
                End Select
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
        Try
            Dim str As String = "bytes=0-"
            Dim strSplit() As String = str.Split("="c)(1).Split("-"c)
            Dim intSplit As Integer = strSplit.Length
            intSplit = intSplit
        Catch ex As Exception
            Err.Clear()
        End Try
        Try
            ITEXTInActionToolStripMenuItem.Visible = True
            IT3XTBestOfStackExchangeToolStripMenuItem.Visible = True
            IT3XTSignatureReferenceToolStripMenuItem.Visible = True
            CosEditToolStripMenuItem1.Visible = True
        Catch ex As Exception
            Err.Clear()
        End Try
        Try
            PdfToolStripMenuItem.Visible = False
            FdfToolStripMenuItem.Visible = False
            XfdfToolStripMenuItem.Visible = False
            XmlToolStripMenuItem.Visible = False
            XdpToolStripMenuItem.Visible = False
            AssociationExtensionsToolStripMenuItem.Visible = False
        Catch ex As Exception
            Err.Clear()
        End Try
        Try
            If File.Exists(appPath & "resources/icon.png") Then
                Using Bmp As New Bitmap(appPath & "resources/icon.png")
                    Dim m As New MemoryStream
                    Icon.FromHandle(Bmp.GetHicon).Save(m)
                    File.WriteAllBytes(appPath & "resources/icon.ico", m.ToArray)
                End Using
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
        _debugVariable = False
        loadReaderCount = 0
        Dim m2 As New MemoryStream
        _debugFileName = appPath & "acro.pdf"
        fpath = appPath & "acro.pdf"
        ipath = appPath & "acro.jpg"
        pdfReaderDoc = Nothing
        pdfOwnerPassword = ""
        _autoScrollPages = False
        _PreserveUsageRights = True
        cFDFApp = New FDFApp.FDFApp_Class
        _cFDFDoc = Nothing
        dlg = Nothing
        dlgValues = New List(Of String)
        ignoreClick = False
        frmEmail1 = Nothing
        _highlightedFieldCopy = ""
        pnlFieldTabOrder_PauseUpdate = False
        fields_tab_order = Nothing
        calculationOrderList = Nothing
        _pnlCompression_Pause = False
        _showMaxHistoryMaxShow = -1
        _pnlPageSizeAspectRatioW = -1
        _pnlPageSizeAspectRatioH = -1
        _pnlPageSizeAspectRatioPause = False
        PdfForm_FieldNames = New List(Of String)
        changingPermissionRestrictionCombo = False
        customFormatScripts = New String() {"", ""}
        preventClickDialog = False
        openHistoryListFile = ApplicationDataFolder(False, "") & "open-history.txt"
        fldKidIndex = 0
        scrollIndex = Nothing
        scrollValue = 0
        preventDragging = False
        lockCursor = False
        rotType = RotateFlipType.RotateNoneFlipNone
        imgNewImage = Nothing
        pnlFields_Dragging = False
        mousex = 0
        mousey = 0
        fldNameHighlightedCopy = ""
        puchButtonIcon_Default_IconFitToBounds = False
        puchButtonIcon_Default_ScaleIcon = 0
        puchButtonIcon_Default_ProportionalIcon = 0
        puchButtonIcon_Default_IconHorizontalAdjustment = 0.5F
        puchButtonIcon_Default_IconVerticalAdjustment = 0.5F
        tmpCombPercent = ""
        tmpPercent = 0.0F
        removeKidFieldIndex = -1
        _pictureBoxImage = Nothing
        _outputIndex = 0
        _outputIndexMax = 0
        fldRectangles = Nothing
        fldNameHighlighted = ""
        _pdfW = 0
        _pdfH = 0
        clsPreloadImagesThread = Nothing
        preloadCount = 1
        timeLogs = ""
        LoadImageGs_InUse = False
        memName = ""
        mem = New Dictionary(Of String, Byte())
        dicColors = New Dictionary(Of String, iTextSharp.text.BaseColor)
        iMyCustomColors = New Integer() {}
        dicFieldTypes = New Dictionary(Of String, Integer)
        WHITE = New iTextSharp.text.BaseColor(255, 255, 255)
        LIGHT_GRAY = New iTextSharp.text.BaseColor(192, 192, 192)
        GRAY = New iTextSharp.text.BaseColor(128, 128, 128)
        DARK_GRAY = New iTextSharp.text.BaseColor(64, 64, 64)
        BLACK = New iTextSharp.text.BaseColor(0, 0, 0)
        RED = New iTextSharp.text.BaseColor(255, 0, 0)
        PINK = New iTextSharp.text.BaseColor(255, 175, 175)
        ORANGE = New iTextSharp.text.BaseColor(255, 200, 0)
        YELLOW = New iTextSharp.text.BaseColor(255, 255, 0)
        GREEN = New iTextSharp.text.BaseColor(0, 255, 0)
        MAGENTA = New iTextSharp.text.BaseColor(255, 0, 255)
        CYAN = New iTextSharp.text.BaseColor(0, 255, 255)
        BLUE = New iTextSharp.text.BaseColor(0, 0, 255)
        Transparent = New iTextSharp.text.BaseColor(0, 0, 0, 0)
        FIELD_TYPE_TEXT = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
        FIELD_TYPE_SIGNATURE = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
        FIELD_TYPE_RADIOBUTTON = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
        FIELD_TYPE_PUSHBUTTON = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
        FIELD_TYPE_NONE = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE
        FIELD_TYPE_LIST = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
        FIELD_TYPE_COMBO = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
        FIELD_TYPE_CHECKBOX = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
        pageSizes = New Dictionary(Of String, iTextSharp.text.Rectangle)
        cUserRect = New clsUserRect()
        _clickPoints = New List(Of System.Drawing.PointF)
        _dragging = False
        tm = New System.Text.StringBuilder()
        fieldsOnPageList = New List(Of String)
        PuchButton_Options_StateImageList = New List(Of System.Drawing.Image)
        PuchButton_Options_StateImageListByte = New List(Of Byte())
        PuchButton_Options_StateLabelList = New List(Of String)
        ComboBox_SortItems_SelectedItems = New List(Of String)
        ComboBox_SortItems_SelectedItemsVals = New List(Of String)
        ComboBox_Original_Items = New Dictionary(Of String, String)
        pictureboxThumb = New List(Of PictureBox)
        _copy_Appearance_frmMain = New clsCopy_Appearance_frmMain
        cLinks = Nothing
        _pdfURI = ""
        _pdfData = Nothing
        _fdfData = Nothing
        _outPutType = Nothing
        _flatten = False
        _openPassword = ""
        _ownerPassword = ""
        _sid = "input"
        _dimensionsList = New List(Of Single)
        dlgValues = New List(Of String)
        ToolStripStatusLabel1.Text = ""
        StatusToolStrip = ""
        ToolStripStatusLabel_XY.Visible = False
        PDFField_Name.Text = ""
        PDFField_TabOrder.Text = ""
        PDFField_Index.Text = "-1"
        cFDFDoc = New FDFApp.FDFDoc_Class
        cFDFApp = New FDFApp.FDFApp_Class
        PDFField_Index.Text = -1
        cUserRect.frm = Me
        If cUserRect.mPictureBox Is Nothing Then
            cUserRect.SetPictureBox(Me.A0_PictureBox2, False)
        End If
        bgButtonFaceColor = btnHighLite.BackColor
        btnHighLite.BackColor = Drawing.Color.Pink
        _sid = "output"
        sign_reason = ""
        sign_location = ""
        sign_lineColor = Color.Black
        sign_AppearanceRenderModeIndex = -1
        sign_lineWidthIndex = -1
        sign_contact = ""
        sign_pfxPath = ""
        sign_pfxBytes = Nothing
        sign_pfxPassword = ""
        sign_datetime = ""
        sign_creator = ""
        loadReaderCount = 0
        tmrFireRefresh = New Timer
        flash = Nothing
        '
        fieldNames = New List(Of String)
        lv = New List(Of clsAutocomplete)
        cfdf = New FDFApp.FDFDoc_Class
        cpdf = New FDFApp.FDFApp_Class
        pwCrack = New clsBruteForcePw
        frmSecurityPassword = New dialogSecurityPassword(Me)
        jsProcess = New Dictionary(Of System.Windows.Forms.Control, Process)
        frmImageRotation_ImageBytes = Nothing
        SignatureImage = Nothing
        dsBrowser = Nothing
        pauseBtnTextChanged = False
        Load_DropDowns()
        Try
            displayAdminControls()
        Catch ex As Exception
            Err.Clear()
        End Try
        ComboBox1.SelectedIndex = 0
        ResizePictureBox1()
        Dim extensions As New List(Of String)
        extensions.AddRange(New String() {".fdf", ".xfdf", ".xdp", ".xml", ".pdf", ".xpdf", ".htm", ".html", ".json"})
        Dim imageExtensions As New List(Of String)
        imageExtensions.AddRange(New String() {".jpg", ".gif", ".png", ".jpeg", ".tif", ".tiff"})
        Try
            Dim worker As System.Threading.Thread = Nothing
            Try
                appPath = Application.StartupPath.ToString.TrimEnd("\"c) & "\"
                appPathTemp = ApplicationDataFolder(False, "temp")
                If Not Directory.Exists(ApplicationDataFolder(False, "temp") & "") Then
                    Directory.CreateDirectory(ApplicationDataFolder(False, "temp") & "")
                End If
                worker = New System.Threading.Thread(New System.Threading.ThreadStart(Function() FontFactory.RegisterDirectories()))
                worker.Start()
                Do Until (Not worker.ThreadState = 0)
                    Threading.Thread.Sleep(50)
                Loop
                'DefaultFont = New iTextSharp.text.Font(FontFactory.GetFont(PDFField_FontFamily.Items(PDFField_FontFamily.SelectedIndex).ToString(), defaultFontSize, iTextSharp.text.Font.NORMAL, New BaseColor(PDFField_TextColorPicker.BackColor)))
            Catch ex As Exception
                Err.Clear()
            Finally
                If Not worker.ThreadState = 16 Then
                    worker.Abort()
                End If
                worker = Nothing
            End Try
        Catch ex As Exception
            Err.Clear()
        End Try
        Try
            Dim Args() As String = Environment.CommandLine.Split(""" """)
            If Not Args Is Nothing Then
                If Args.Length > 0 Then
                    Dim intX As Integer = 0
                    _outputIndex = 0
                    mem.Clear()
                    fpath = ""
                    For Each arg As String In Args
                        intX += 1
                        If Not String.IsNullOrEmpty(arg.ToString().Trim() & "") Then
                            If FileExists(arg.ToString().Trim() & "") Then
                                If extensions.Contains("." & GetFileExtension(arg & "").ToString.TrimStart("."c).ToLower()) Then
                                    fpath = arg.ToString().Trim()
                                    If String.IsNullOrEmpty(fpath & "") Then
                                        fpath = appPath & "acro.pdf"
                                        OpenFile(fpath, False)
                                    Else
                                        TimeStampAdd("openfile:" & fpath)
                                        OpenFile(fpath, False)
                                    End If
                                    ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                    A0_PictureBox1.Enabled = True
                                    A0_PictureBox2.Enabled = True
                                    Return
                                ElseIf imageExtensions.Contains("." & GetFileExtension(arg & "").ToString.TrimStart("."c).ToLower()) Then
                                    fpath = arg.ToString().Trim()
                                    If String.IsNullOrEmpty(fpath & "") Then
                                        Return
                                    Else
                                        ImportImage(fpath)
                                    End If
                                    ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                    A0_PictureBox1.Enabled = True
                                    A0_PictureBox2.Enabled = True
                                    Return
                                End If
                            ElseIf System.IO.Directory.Exists(arg.ToString().Trim() & "") Then
                                ' OPEN FILE EXPLORER
                                clsFF = New dialogListFiles(Me)
                                Dim folderpath1 As String = arg.ToString().Trim() & ""
                                Try
                                    If folderpath1 = "" Then
                                        clsFF.txtFTPRoot.Text = ApplicationDataFolder(False, "")
                                        clsFF.txtFileName.Text = ""
                                        clsFF.LoadDialog(ApplicationDataFolder(False, ""), "", False)
                                    Else
                                        clsFF.txtFTPRoot.Text = folderpath1
                                        clsFF.txtFileName.Text = ""
                                        clsFF.LoadDialog(folderpath1.ToString.TrimEnd("\"c) & "\", "", False)
                                    End If
                                    clsFF.DialogResult = Windows.Forms.DialogResult.Ignore
                                    Select Case clsFF.ShowDialog(Me)
                                        Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                                            If dlgValues.Count >= 5 Then
                                                Select Case Path.GetExtension(dlgValues(0)).ToString.ToLower.TrimStart(".")
                                                    Case "pdf", "xfdf", "fdf", "xdp", "xml"
                                                        clsFF.Close()
                                                        clsFF.Dispose()
                                                        OpenFile(dlgValues(4).ToString.TrimEnd("\"c) & "\" & dlgValues(0).ToString, True, True)
                                                    Case "jpeg", "jpg", "gif", "png", "bmp", "tif", "tiff"
                                                        clsFF.Close()
                                                        clsFF.Dispose()
                                                        ImportImage(dlgValues(4).ToString.TrimEnd("\"c) & "\" & dlgValues(0).ToString, True)
                                                    Case Else
                                                        clsFF.Close()
                                                        clsFF.Dispose()
                                                End Select
                                            Else
                                                clsFF.Close()
                                                clsFF.Dispose()
                                            End If
                                        Case Else
                                    End Select
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                Finally
                                    If Not clsFF Is Nothing Then
                                        clsFF = Nothing
                                    End If
                                End Try
                            ElseIf IsValidUrl(arg.ToString().Trim() & "") Then
                                Using wc As New System.Net.WebClient
                                    Dim b As Byte() = wc.DownloadData(arg.ToString().Trim() & "")
                                    For Each k As String In wc.ResponseHeaders.Keys
                                        Try
                                            If wc.ResponseHeaders(k).ToLower() = "text/html" And k.ToString.ToLower = "content-type".ToLower() Then
                                                Try
                                                    Dim dMultipleChoice As New dialogMultiChoice(Me)
                                                    dMultipleChoice.lblMessage.Text = "Import HTML page as..."
                                                    Dim clsBut As New List(Of dialogMultiChoice.clsButton)
                                                    Dim btn As dialogMultiChoice.clsButton
                                                    btn = New dialogMultiChoice.clsButton("as HTML", True, DialogResult.OK)
                                                    clsBut.Add(btn)
                                                    btn = New dialogMultiChoice.clsButton("as Image", True, DialogResult.Yes)
                                                    clsBut.Add(btn)
                                                    btn = New dialogMultiChoice.clsButton("", False, DialogResult.No)
                                                    clsBut.Add(btn)
                                                    btn = New dialogMultiChoice.clsButton("Cancel", True, DialogResult.Cancel)
                                                    clsBut.Add(btn)
                                                    Select Case dMultipleChoice.ShowDialog(Me, "Import HTML page as:", clsBut.ToArray())
                                                        Case DialogResult.OK
                                                            Convert_ImportURl2HTMLFile(CStr(arg.ToString().Trim() & "") & "")
                                                        Case DialogResult.Yes
                                                            Convert_ImportURl2ImageFile(CStr(arg.ToString().Trim() & "") & "")
                                                        Case Else
                                                            Exit Select
                                                    End Select
                                                    Return
                                                Catch exURL As Exception
                                                    Throw exURL
                                                End Try
                                            ElseIf k.ToString.ToLower = "content-type".ToLower() And (wc.ResponseHeaders(k).ToLower() = "text/html".ToLower() Or wc.ResponseHeaders(k).ToLower() = cFDFApp.MimePDF.ToLower() Or wc.ResponseHeaders(k).ToLower() = cFDFApp.MimeFDF.ToLower() Or wc.ResponseHeaders(k).ToLower() = cFDFApp.MimeXDP.ToLower() Or wc.ResponseHeaders(k).ToLower() = cFDFApp.MimeXFDF.ToLower() Or wc.ResponseHeaders(k).ToLower() = cFDFApp.MimeHTML.ToLower()) Then
                                                Try
                                                    OpenFileFromUrl(CStr(arg.ToString().Trim() & ""), True, True)
                                                    Return
                                                Catch exURL As Exception
                                                    Throw exURL
                                                End Try
                                            End If
                                        Catch exArgs As Exception
                                            Err.Clear()
                                        End Try
                                    Next
                                End Using
                            End If
                        End If
                    Next

                End If
            End If
            If Clipboard.ContainsImage() Then
                ImportImageFromClipboardToolStripMenuItem_Click(Me, New EventArgs())
                Return
            ElseIf Clipboard.ContainsData(System.Windows.Forms.DataFormats.Bitmap) Then
                ImportImageFromClipboardToolStripMenuItem_Click(Me, New EventArgs())
                Return
            ElseIf Clipboard.ContainsText(System.Windows.Forms.TextDataFormat.Text) Then
                Dim oDataString As String = System.Windows.Forms.Clipboard.GetText(TextDataFormat.Text)
                Try
                    If FileExists(oDataString & "") Then
                        If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                            ImportImageFromClipboardToolStripMenuItem_Click(Me, New EventArgs())
                            Return
                        ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                            ImportImageFromClipboardToolStripMenuItem_Click(Me, New EventArgs())
                            Return
                        End If
                    ElseIf System.IO.Directory.Exists(oDataString & "") Then
                        ' OPEN FILE EXPLORER
                        clsFF = New dialogListFiles(Me)
                        Dim folderpath1 As String = oDataString.ToString().Trim() & ""
                        Try
                            If folderpath1 = "" Then
                                clsFF.txtFTPRoot.Text = ApplicationDataFolder(False, "")
                                clsFF.txtFileName.Text = ""
                                clsFF.LoadDialog(ApplicationDataFolder(False, ""), "", False)
                            Else
                                clsFF.txtFTPRoot.Text = folderpath1
                                clsFF.txtFileName.Text = ""
                                clsFF.LoadDialog(folderpath1.ToString.TrimEnd("\"c) & "\", "", False)
                            End If
                            clsFF.DialogResult = Windows.Forms.DialogResult.Ignore
                            Select Case clsFF.ShowDialog(Me)
                                Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                                    If dlgValues.Count >= 5 Then
                                        Select Case Path.GetExtension(dlgValues(0)).ToString.ToLower.TrimStart(".")
                                            Case "pdf", "xfdf", "fdf", "xdp", "xml"
                                                clsFF.Close()
                                                clsFF.Dispose()
                                                OpenFile(dlgValues(4).ToString.TrimEnd("\"c) & "\" & dlgValues(0).ToString, True, True)
                                            Case "jpeg", "jpg", "gif", "png", "bmp", "tif", "tiff"
                                                clsFF.Close()
                                                clsFF.Dispose()
                                                ImportImage(dlgValues(4).ToString.TrimEnd("\"c) & "\" & dlgValues(0).ToString, True)
                                            Case Else
                                                clsFF.Close()
                                                clsFF.Dispose()
                                        End Select
                                    Else
                                        clsFF.Close()
                                        clsFF.Dispose()
                                    End If
                                Case Else
                            End Select
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        Finally
                            If Not clsFF Is Nothing Then
                                clsFF = Nothing
                            End If
                        End Try
                    End If
                Catch ex2 As Exception
                    TimeStampAdd(ex2, debugMode)
                End Try
            ElseIf Clipboard.ContainsText(System.Windows.Forms.TextDataFormat.UnicodeText) Then
                Dim oDataString As String = System.Windows.Forms.Clipboard.GetText(TextDataFormat.UnicodeText)
                Try
                    If FileExists(oDataString & "") Then
                        If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                            ImportImageFromClipboardToolStripMenuItem_Click(Me, New EventArgs())
                            Return
                        ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                            ImportImageFromClipboardToolStripMenuItem_Click(Me, New EventArgs())
                            Return
                        End If

                    ElseIf System.IO.Directory.Exists(oDataString & "") Then
                        ' OPEN FILE EXPLORER
                        clsFF = New dialogListFiles(Me)
                        Dim folderpath1 As String = oDataString.ToString().Trim() & ""
                        Try
                            If folderpath1 = "" Then
                                clsFF.txtFTPRoot.Text = ApplicationDataFolder(False, "")
                                clsFF.txtFileName.Text = ""
                                clsFF.LoadDialog(ApplicationDataFolder(False, ""), "", False)
                            Else
                                clsFF.txtFTPRoot.Text = folderpath1
                                clsFF.txtFileName.Text = ""
                                clsFF.LoadDialog(folderpath1.ToString.TrimEnd("\"c) & "\", "", False)
                            End If
                            clsFF.DialogResult = Windows.Forms.DialogResult.Ignore
                            Select Case clsFF.ShowDialog(Me)
                                Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                                    If dlgValues.Count >= 5 Then
                                        Select Case Path.GetExtension(dlgValues(0)).ToString.ToLower.TrimStart(".")
                                            Case "pdf", "xfdf", "fdf", "xdp", "xml"
                                                clsFF.Close()
                                                clsFF.Dispose()
                                                OpenFile(dlgValues(4).ToString.TrimEnd("\"c) & "\" & dlgValues(0).ToString, True, True)
                                            Case "jpeg", "jpg", "gif", "png", "bmp", "tif", "tiff"
                                                clsFF.Close()
                                                clsFF.Dispose()
                                                ImportImage(dlgValues(4).ToString.TrimEnd("\"c) & "\" & dlgValues(0).ToString, True)
                                            Case Else
                                                clsFF.Close()
                                                clsFF.Dispose()
                                        End Select
                                    Else
                                        clsFF.Close()
                                        clsFF.Dispose()
                                    End If
                                Case Else
                            End Select
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        Finally
                            If Not clsFF Is Nothing Then
                                clsFF = Nothing
                            End If
                        End Try
                    End If
                Catch ex2 As Exception
                    TimeStampAdd(ex2, debugMode)
                End Try
            ElseIf Clipboard.GetFileDropList.Count > 0 Then
                Dim oDataString As String = Clipboard.GetFileDropList(0).ToString()
                Try
                    If FileExists(oDataString & "") Then
                        If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                            ImportImageFromClipboardToolStripMenuItem_Click(Me, New EventArgs())
                            Return
                        ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                            ImportImageFromClipboardToolStripMenuItem_Click(Me, New EventArgs())
                            Return
                        End If

                    ElseIf System.IO.Directory.Exists(oDataString & "") Then
                        ' OPEN FILE EXPLORER
                        clsFF = New dialogListFiles(Me)
                        Dim folderpath1 As String = oDataString.ToString().Trim() & ""
                        Try
                            If folderpath1 = "" Then
                                clsFF.txtFTPRoot.Text = ApplicationDataFolder(False, "")
                                clsFF.txtFileName.Text = ""
                                clsFF.LoadDialog(ApplicationDataFolder(False, ""), "", False)
                            Else
                                clsFF.txtFTPRoot.Text = folderpath1
                                clsFF.txtFileName.Text = ""
                                clsFF.LoadDialog(folderpath1.ToString.TrimEnd("\"c) & "\", "", False)
                            End If
                            clsFF.DialogResult = Windows.Forms.DialogResult.Ignore
                            Select Case clsFF.ShowDialog(Me)
                                Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                                    If dlgValues.Count >= 5 Then
                                        Select Case Path.GetExtension(dlgValues(0)).ToString.ToLower.TrimStart(".")
                                            Case "pdf", "xfdf", "fdf", "xdp", "xml"
                                                clsFF.Close()
                                                clsFF.Dispose()
                                                OpenFile(dlgValues(4).ToString.TrimEnd("\"c) & "\" & dlgValues(0).ToString, True, True)
                                            Case "jpeg", "jpg", "gif", "png", "bmp", "tif", "tiff"
                                                clsFF.Close()
                                                clsFF.Dispose()
                                                ImportImage(dlgValues(4).ToString.TrimEnd("\"c) & "\" & dlgValues(0).ToString, True)
                                            Case Else
                                                clsFF.Close()
                                                clsFF.Dispose()
                                        End Select
                                    Else
                                        clsFF.Close()
                                        clsFF.Dispose()
                                    End If
                                Case Else
                            End Select
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        Finally
                            If Not clsFF Is Nothing Then
                                clsFF = Nothing
                            End If
                        End Try
                    End If
                Catch ex2 As Exception
                    TimeStampAdd(ex2, debugMode)
                End Try
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
        If debugMode Then
            OpenFile(_debugFileName)
        End If
    End Sub
    Private Sub btnSaveAs_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSaveAs.Click
        SaveAs()
    End Sub
    Public Function SaveAsOneImage() As Boolean
        preventClickDialog = True
        Dim SaveAsFileDialog1 As New frmSaveAs()
        SaveAsFileDialog1.o.Filter = "JPG|*.jpg|PNG|*.png|GIF|*.gif|BMP|*.bmp|TIFF|*.tiff"
        SaveAsFileDialog1.o.FilterIndex = 0
        If IsValidUrl(fpath) Then
            SaveAsFileDialog1.o.FileName = System.IO.Path.GetFileName(fpath & "")
            SaveAsFileDialog1.FilePath = ""
            SaveAsFileDialog1.frmSaveAs_TextFilePath.Text = ""
        Else
            If String.IsNullOrEmpty(fpath & "") Then
                SaveAsFileDialog1.o.InitialDirectory = ApplicationDataFolder(False, "") & ""
            Else
                SaveAsFileDialog1.o.InitialDirectory = System.IO.Path.GetDirectoryName(fpath)
            End If
            If String.IsNullOrEmpty(fpath & "") Then
                SaveAsFileDialog1.o.FileName = ""
                SaveAsFileDialog1.FilePath = ""
                SaveAsFileDialog1.frmSaveAs_TextFilePath.Text = ""
            Else
                SaveAsFileDialog1.o.FileName = System.IO.Path.GetFileNameWithoutExtension(fpath & "") & ".jpg"
                SaveAsFileDialog1.FilePath = System.IO.Path.GetDirectoryName(fpath).TrimEnd("\"c) & "\"c & System.IO.Path.GetFileNameWithoutExtension(fpath & "") & ".jpg"
                SaveAsFileDialog1.frmSaveAs_TextFilePath.Text = System.IO.Path.GetDirectoryName(fpath).TrimEnd("\"c) & "\"c & System.IO.Path.GetFileNameWithoutExtension(fpath & "") & ".jpg"
            End If
        End If
        SaveAsFileDialog1.o.AutoUpgradeEnabled = True
        SaveAsFileDialog1.o.DefaultExt = ".jpg"
        SaveAsFileDialog1.o.FilterIndex = 1
        SaveAsFileDialog1.o.Title = "Save As"
        SaveAsFileDialog1.o.ValidateNames = True
        SaveAsFileDialog1.o.OverwritePrompt = True
        Try
            SaveAsFileDialog1.PDFVersion = "1." & pdfReaderDoc.PdfVersion.ToString() & ""
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If SaveAsFileDialog1.FilePathExtension.ToString.TrimStart("."c).ToLower = "pdf" Then
                SaveAsFileDialog1.ShowFrmSaveAs_PDFVersion(True)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not String.IsNullOrEmpty(pdfOwnerPassword & "") Then
                SaveAsFileDialog1.chkRemoveUnusedObjects.Checked = False
            End If
SaveAsCopyRetry:
            SaveAsFileDialog1.frm_ShowForm(True, Me)
            Try
                modelPopupFrmSaveAs_DoEvents(SaveAsFileDialog1)
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Select Case SaveAsFileDialog1.dialogResult_1
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    Dim chkRemoveUnusedObjects As Boolean = SaveAsFileDialog1.chkRemoveUnusedObjects.Checked
                    If chkRemoveUnusedObjects Then
                        Try
                            CleanUpFields()
                        Catch ex1 As Exception
                            Err.Clear()
                        End Try
                        Try
                            RemoveUnusedObjectsToolStripMenuItem_Click(Me, New EventArgs())
                        Catch ex1 As Exception
                            Err.Clear()
                        End Try
                    End If
                    If Not String.IsNullOrEmpty(SaveAsFileDialog1.frmSaveAs_TextFilePath.Text) Then
                        Dim fn As String = SaveAsFileDialog1.frmSaveAs_TextFilePath.Text & ""
                        Dim b() As Byte = Nothing
                        Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                            Case "pdf"
                                fpath = fn
                                Dim PdfVersion As String = SaveAsFileDialog1.PDFVersion.ToString & ""
                                b = Session("output")
                                File.WriteAllBytes(fpath, b)
                                Session("saved") = b
                                Session() = b
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                                addOpenHistoryListItem(fpath & "")
                                loadToolStripMenu_OpenHistoryList()
                            Case "fdf"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.FDF, True)
                                File.WriteAllBytes(fn, b)
                            Case "xfdf"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.xFDF, True)
                                File.WriteAllBytes(fn, b)
                            Case "xdp"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XDP, True)
                                File.WriteAllBytes(fn, b)
                            Case "xml"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XML, True)
                                File.WriteAllBytes(fn, b)
                            Case "xls"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XML, True)
                                File.WriteAllBytes(fn, b.ToArray())
                            Case "json"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.Json, True)
                                File.WriteAllBytes(fn, b)
                            Case "txt"
                                _cFDFDoc = cFDFDoc(True)
                                Dim strBuilder As New System.Text.StringBuilder
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                For Each fld As FDFApp.FDFDoc_Class.FDFField In cFDFDoc.XDPGetAllFields()
                                    Dim strAppend As String = fld.FieldName.ToString & ": "
                                    For i As Integer = 0 To fld.FieldValue.Count - 1
                                        strAppend &= fld.FieldValue(i) & ","
                                    Next
                                    strAppend.TrimEnd(","c)
                                    strBuilder.AppendLine(strAppend.ToString)
                                Next
                                File.WriteAllText(fn, strBuilder.ToString)
                            Case "html", "htm"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                Dim inlineImages As Boolean = True, includeFields As Boolean = True
                                Select Case MsgBox("Inline images using base64 URL encoding?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Inline Images:")
                                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                        inlineImages = True
                                    Case Else
                                        inlineImages = False
                                End Select
                                Try
                                    includeFields = False
                                    If _cFDFDoc.XDPFieldCount() > 0 Then
                                        Select Case MsgBox("Include html form fields?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "HTML form fields:")
                                            Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                                includeFields = True
                                            Case Else
                                                includeFields = False
                                        End Select
                                    End If
                                Catch exFields As Exception
                                    Err.Clear()
                                End Try
                                b = System.Text.Encoding.UTF8.GetBytes(createHTMLFile("", includeFields, inlineImages, "", Me, "", False, fn, False, -1))
                                File.WriteAllBytes(fn, b)
                                Select Case MsgBox("Open HTML File?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Open:")
                                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                        Process.Start(fn)
                                    Case Else
                                End Select
                            Case "png"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                Dim oneBitmap As Bitmap = Nothing, tempBitmap As Bitmap = Nothing
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                    If oneBitmap Is Nothing Then
                                        oneBitmap = i.Clone
                                    Else
                                        tempBitmap = New Bitmap(oneBitmap.Width + i.Width, oneBitmap.Height + i.Height)
                                        Using g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(tempBitmap)
                                            g.DrawImage(oneBitmap.Clone, New System.Drawing.Rectangle(0, 0, oneBitmap.Width, oneBitmap.Height))
                                            g.DrawImage(i.Clone, New System.Drawing.Rectangle(0, oneBitmap.Height, i.Width, i.Height + oneBitmap.Height))
                                            g.Dispose()
                                        End Using
                                    End If
                                    'i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Png)
                                Next
                                tempBitmap.Save(fn, System.Drawing.Imaging.ImageFormat.Png)
                                Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                        If File.Exists(fnPg) Then
                                            Process.Start(fnPg)
                                        End If
                                    Case Else
                                        Exit Select
                                End Select
                            Case "jpg"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                Dim oneBitmap As Bitmap = Nothing, tempBitmap As Bitmap = Nothing
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                    If oneBitmap Is Nothing Then
                                        oneBitmap = i.Clone
                                    Else
                                        tempBitmap = New Bitmap(oneBitmap.Width, oneBitmap.Height + i.Height)
                                        Using g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(tempBitmap)
                                            g.DrawImage(oneBitmap.Clone, New System.Drawing.Rectangle(0, 0, oneBitmap.Width, oneBitmap.Height))
                                            g.DrawImage(i.Clone, 0, oneBitmap.Height, i.Width, i.Height)
                                            g.Dispose()
                                        End Using
                                        oneBitmap = tempBitmap.Clone
                                    End If
                                    'i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Png)
                                Next
                                tempBitmap.Save(fn, System.Drawing.Imaging.ImageFormat.Jpeg)
                                Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                        If File.Exists(fnPg) Then
                                            Process.Start(fnPg)
                                        End If
                                    Case Else
                                        Exit Select
                                End Select
                            Case "bmp"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                Dim oneBitmap As Bitmap = Nothing, tempBitmap As Bitmap = Nothing
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                    If oneBitmap Is Nothing Then
                                        oneBitmap = i.Clone
                                    Else
                                        tempBitmap = New Bitmap(oneBitmap.Width + i.Width, oneBitmap.Height + i.Height)
                                        Using g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(tempBitmap)
                                            g.DrawImage(oneBitmap.Clone, New System.Drawing.Rectangle(0, 0, oneBitmap.Width, oneBitmap.Height))
                                            g.DrawImage(i.Clone, New System.Drawing.Rectangle(0, oneBitmap.Height, i.Width, i.Height + oneBitmap.Height))
                                            g.Dispose()
                                        End Using
                                    End If
                                    'i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Png)
                                Next
                                tempBitmap.Save(fn, System.Drawing.Imaging.ImageFormat.Bmp)
                                Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                        If File.Exists(fnPg) Then
                                            Process.Start(fnPg)
                                        End If
                                    Case Else
                                        Exit Select
                                End Select
                            Case "gif"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                Dim oneBitmap As Bitmap = Nothing, tempBitmap As Bitmap = Nothing
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                    If oneBitmap Is Nothing Then
                                        oneBitmap = i.Clone
                                    Else
                                        tempBitmap = New Bitmap(oneBitmap.Width + i.Width, oneBitmap.Height + i.Height)
                                        Using g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(tempBitmap)
                                            g.DrawImage(oneBitmap.Clone, New System.Drawing.Rectangle(0, 0, oneBitmap.Width, oneBitmap.Height))
                                            g.DrawImage(i.Clone, New System.Drawing.Rectangle(0, oneBitmap.Height, i.Width, i.Height + oneBitmap.Height))
                                            g.Dispose()
                                        End Using
                                    End If
                                    'i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Png)
                                Next
                                tempBitmap.Save(fn, System.Drawing.Imaging.ImageFormat.Gif)
                                Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                        If File.Exists(fnPg) Then
                                            Process.Start(fnPg)
                                        End If
                                    Case Else
                                        Exit Select
                                End Select
                            Case "tiff", "tif"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                Dim oneBitmap As Bitmap = Nothing, tempBitmap As Bitmap = Nothing
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                    If oneBitmap Is Nothing Then
                                        oneBitmap = i.Clone
                                    Else
                                        tempBitmap = New Bitmap(oneBitmap.Width + i.Width, oneBitmap.Height + i.Height)
                                        Using g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(tempBitmap)
                                            g.DrawImage(oneBitmap.Clone, New System.Drawing.Rectangle(0, 0, oneBitmap.Width, oneBitmap.Height))
                                            g.DrawImage(i.Clone, New System.Drawing.Rectangle(0, oneBitmap.Height, i.Width, i.Height + oneBitmap.Height))
                                            g.Dispose()
                                        End Using
                                    End If
                                    'i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Png)
                                Next
                                tempBitmap.Save(fn, System.Drawing.Imaging.ImageFormat.Tiff)
                                Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                        If File.Exists(fnPg) Then
                                            Process.Start(fnPg)
                                        End If
                                    Case Else
                                        Exit Select
                                End Select
                            Case Else
                                b = Session("output")
                                File.WriteAllBytes(fn, b)
                        End Select
                    End If
                    StatusToolStrip = "Status: File saved successfully."
                    Return True
                Case Else
                    Return False
            End Select
        Catch ex As Exception
            StatusToolStrip = "Error: File not saved."
            TimeStampAdd(ex, debugMode)
        Finally
            timerPreventDefaultExpires.Enabled = True
            If Not SaveAsFileDialog1 Is Nothing Then
                SaveAsFileDialog1.frm_Close()
                SaveAsFileDialog1.Close()
                SaveAsFileDialog1.Dispose()
                SaveAsFileDialog1 = Nothing
            End If
            If Not Me.Visible Then
                Me.Show()
                Me.BringToFront()
            End If
            Try
                If ToolStripStatusLabel5.Text.ToString().ToLower = "Status: File saved successfully.".ToString().ToLower Then
                    fldNameHighlighted = ""
                    fldNameHighlightedCopy = fldNameHighlighted & ""
                    fldKidIndex = fldKidIndex
                    cUserRect._highLightFieldName = ""
                    cUserRect.rect = Nothing
                    cUserRect.rectBackup = Nothing
                    cUserRect.rectOld = Nothing
                    cUserRect.mIsClick = False
                    mMove = False
                    fldRectangles = getFieldRectangles(True)
                    A0_LoadPDF(True, False, True)
                End If
            Catch exRefresh As Exception
                TimeStampAdd(exRefresh, debugMode)
            End Try
        End Try
    End Function
    Public Function SaveAs(Optional saveAsCopy As Boolean = False) As Boolean
        preventClickDialog = True
        Dim SaveAsFileDialog1 As New frmSaveAs()
        SaveAsFileDialog1.o.Filter = "PDF|*.pdf|FDF|*.fdf|XFDF|*.xfdf|XDP|*.xdp|XML|*.xml|XLS|*.xls|Json|*.json|HTML|*.html|HTM|*.htm|Text|*.txt|JPG|*.jpg|PNG|*.png|GIF|*.gif|BMP|*.bmp|TIFF|*.tiff"
        SaveAsFileDialog1.o.FilterIndex = 0
        If IsValidUrl(fpath) Then
            SaveAsFileDialog1.o.FileName = System.IO.Path.GetFileName(fpath & "")
            SaveAsFileDialog1.FilePath = ""
            SaveAsFileDialog1.frmSaveAs_TextFilePath.Text = ""
        Else
            If String.IsNullOrEmpty(fpath & "") Then
                SaveAsFileDialog1.o.InitialDirectory = ApplicationDataFolder(False, "") & ""
            Else
                SaveAsFileDialog1.o.InitialDirectory = System.IO.Path.GetDirectoryName(fpath)
            End If
            If String.IsNullOrEmpty(fpath & "") Then
                SaveAsFileDialog1.o.FileName = ""
                SaveAsFileDialog1.FilePath = ""
                SaveAsFileDialog1.frmSaveAs_TextFilePath.Text = ""
            Else
                SaveAsFileDialog1.o.FileName = System.IO.Path.GetFileName(fpath & "")
                SaveAsFileDialog1.FilePath = fpath
                SaveAsFileDialog1.frmSaveAs_TextFilePath.Text = fpath
            End If
        End If
        SaveAsFileDialog1.o.AutoUpgradeEnabled = True
        SaveAsFileDialog1.o.DefaultExt = ".pdf"
        SaveAsFileDialog1.o.FilterIndex = 1
        SaveAsFileDialog1.o.Title = "Save As"
        SaveAsFileDialog1.o.ValidateNames = True
        SaveAsFileDialog1.o.OverwritePrompt = True
        Try
            SaveAsFileDialog1.PDFVersion = "1." & pdfReaderDoc.PdfVersion.ToString() & ""
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If SaveAsFileDialog1.FilePathExtension.ToString.TrimStart("."c).ToLower = "pdf" Then
                SaveAsFileDialog1.ShowFrmSaveAs_PDFVersion(True)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not String.IsNullOrEmpty(pdfOwnerPassword & "") Then
                SaveAsFileDialog1.chkRemoveUnusedObjects.Checked = False
            End If
SaveAsCopyRetry:
            SaveAsFileDialog1.frm_ShowForm(True, Me)
            Try
                modelPopupFrmSaveAs_DoEvents(SaveAsFileDialog1)
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Select Case SaveAsFileDialog1.dialogResult_1
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    Dim chkRemoveUnusedObjects As Boolean = SaveAsFileDialog1.chkRemoveUnusedObjects.Checked
                    If chkRemoveUnusedObjects Then
                        Try
                            CleanUpFields()
                        Catch ex1 As Exception
                            Err.Clear()
                        End Try
                        Try
                            RemoveUnusedObjectsToolStripMenuItem_Click(Me, New EventArgs())
                        Catch ex1 As Exception
                            Err.Clear()
                        End Try
                    End If
                    If Not String.IsNullOrEmpty(SaveAsFileDialog1.frmSaveAs_TextFilePath.Text) Then
                        Dim fn As String = SaveAsFileDialog1.frmSaveAs_TextFilePath.Text & ""
                        Dim b() As Byte = Nothing
                        If saveAsCopy = True Then
                            If fn.ToString.ToLower = fpath.ToString.ToLower Then
                                GoTo SaveAsCopyRetry
                            End If
                        End If
                        Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                            Case "pdf"
                                fpath = fn
                                Dim PdfVersion As String = SaveAsFileDialog1.PDFVersion.ToString & ""
                                b = Session("output")
                                File.WriteAllBytes(fpath, b)
                                Session("saved") = b
                                Session() = b
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                                addOpenHistoryListItem(fpath & "")
                                loadToolStripMenu_OpenHistoryList()
                            Case "fdf"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.FDF, True)
                                File.WriteAllBytes(fn, b)
                            Case "xfdf"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.xFDF, True)
                                File.WriteAllBytes(fn, b)
                            Case "xdp"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XDP, True)
                                File.WriteAllBytes(fn, b)
                            Case "xml"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XML, True)
                                File.WriteAllBytes(fn, b)
                            Case "xls"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XML, True)
                                File.WriteAllBytes(fn, b.ToArray())
                            Case "json"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                b = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.Json, True)
                                File.WriteAllBytes(fn, b)
                            Case "txt"
                                _cFDFDoc = cFDFDoc(True)
                                Dim strBuilder As New System.Text.StringBuilder
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                For Each fld As FDFApp.FDFDoc_Class.FDFField In cFDFDoc.XDPGetAllFields()
                                    Dim strAppend As String = fld.FieldName.ToString & ": "
                                    For i As Integer = 0 To fld.FieldValue.Count - 1
                                        strAppend &= fld.FieldValue(i) & ","
                                    Next
                                    strAppend.TrimEnd(","c)
                                    strBuilder.AppendLine(strAppend.ToString)
                                Next
                                File.WriteAllText(fn, strBuilder.ToString)
                            Case "html", "htm"
                                _cFDFDoc = cFDFDoc(True)
                                If Not String.IsNullOrEmpty(fpath & "") Then cFDFDoc.FDFSetFile(fpath)
                                Dim inlineImages As Boolean = True, includeFields As Boolean = True
                                Select Case MsgBox("Inline images using base64 URL encoding?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Inline Images:")
                                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                        inlineImages = True
                                    Case Else
                                        inlineImages = False
                                End Select
                                Try
                                    includeFields = False
                                    If _cFDFDoc.XDPFieldCount() > 0 Then
                                        Select Case MsgBox("Include html form fields?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "HTML form fields:")
                                            Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                                includeFields = True
                                            Case Else
                                                includeFields = False
                                        End Select
                                    End If
                                Catch exFields As Exception
                                    Err.Clear()
                                End Try
                                b = System.Text.Encoding.UTF8.GetBytes(createHTMLFile("", includeFields, inlineImages, "", Me, "", False, fn, False, -1))
                                File.WriteAllBytes(fn, b)
                                Select Case MsgBox("Open HTML File?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Open:")
                                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                        Process.Start(fn)
                                    Case Else
                                End Select
                            Case "png"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim frmImageRot As New frmImageRotation
                                    frmImageRot.showImageResizeOptions = True
                                    frmImageRot.LoadPictureBox(b)
                                    Select Case frmImageRot.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            Dim w As Integer = CInt(frmImageRot.ImageRotation_txtResizeWidth.Text)
                                            Dim h As Integer = CInt(frmImageRot.ImageRotation_txtResizeHeight.Text)
                                            Dim cOpt As New clsPDFOptimization()
                                            clsPDFOptimization.cancelOptimize_Shared = False
                                            b = A0_LoadImage(m.ToArray(), pg, w, h, False)
                                            Dim bm As Bitmap = Bitmap.FromStream(New MemoryStream(b))
                                            Select Case frmImageRot.ImageRotation_ImageFlip.SelectedIndex
                                                Case 0
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipNone)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                    End Select
                                                Case 1
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                    End Select
                                                Case 2
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipX)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipX)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipX)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                    End Select
                                                Case 3
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipXY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipXY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipXY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                    End Select
                                            End Select
                                            Dim i As System.Drawing.Image = bm.Clone
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Png)
                                        Case Else
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Png)
                                    End Select
                                Next
                                If r.NumberOfPages = 1 Then
                                    Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            If File.Exists(fnPg) Then
                                                Process.Start(fnPg)
                                            End If
                                        Case Else
                                            Exit Select
                                    End Select
                                End If
                            Case "jpg"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim frmImageRot As New frmImageRotation
                                    frmImageRot.showImageResizeOptions = True
                                    frmImageRot.LoadPictureBox(b)
                                    Select Case frmImageRot.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            Dim w As Integer = CInt(frmImageRot.ImageRotation_txtResizeWidth.Text)
                                            Dim h As Integer = CInt(frmImageRot.ImageRotation_txtResizeHeight.Text)
                                            Dim cOpt As New clsPDFOptimization()
                                            clsPDFOptimization.cancelOptimize_Shared = False
                                            b = A0_LoadImage(m.ToArray(), pg, w, h, False)
                                            Dim bm As Bitmap = Bitmap.FromStream(New MemoryStream(b))
                                            Select Case frmImageRot.ImageRotation_ImageFlip.SelectedIndex
                                                Case 0
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipNone)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                    End Select
                                                Case 1
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                    End Select
                                                Case 2
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipX)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipX)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipX)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                    End Select
                                                Case 3
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipXY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipXY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipXY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                    End Select
                                            End Select
                                            Dim i As System.Drawing.Image = bm.Clone
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Jpeg)
                                        Case Else
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Jpeg)
                                    End Select
                                Next
                                If r.NumberOfPages = 1 Then
                                    Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            If File.Exists(fnPg) Then
                                                Process.Start(fnPg)
                                            End If
                                        Case Else
                                            Exit Select
                                    End Select
                                End If
                            Case "bmp"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim frmImageRot As New frmImageRotation
                                    frmImageRot.showImageResizeOptions = True
                                    frmImageRot.LoadPictureBox(b)
                                    Select Case frmImageRot.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            Dim w As Integer = CInt(frmImageRot.ImageRotation_txtResizeWidth.Text)
                                            Dim h As Integer = CInt(frmImageRot.ImageRotation_txtResizeHeight.Text)
                                            Dim cOpt As New clsPDFOptimization()
                                            clsPDFOptimization.cancelOptimize_Shared = False
                                            b = A0_LoadImage(m.ToArray(), pg, w, h, False)
                                            Dim bm As Bitmap = Bitmap.FromStream(New MemoryStream(b))
                                            Select Case frmImageRot.ImageRotation_ImageFlip.SelectedIndex
                                                Case 0
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipNone)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                    End Select
                                                Case 1
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                    End Select
                                                Case 2
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipX)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipX)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipX)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                    End Select
                                                Case 3
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipXY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipXY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipXY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                    End Select
                                            End Select
                                            Dim i As System.Drawing.Image = bm.Clone
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Bmp)
                                        Case Else
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Bmp)
                                    End Select
                                Next
                                If r.NumberOfPages = 1 Then
                                    Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            If File.Exists(fnPg) Then
                                                Process.Start(fnPg)
                                            End If
                                        Case Else
                                            Exit Select
                                    End Select
                                End If
                            Case "gif"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim frmImageRot As New frmImageRotation
                                    frmImageRot.showImageResizeOptions = True
                                    frmImageRot.LoadPictureBox(b)
                                    Select Case frmImageRot.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            Dim w As Integer = CInt(frmImageRot.ImageRotation_txtResizeWidth.Text)
                                            Dim h As Integer = CInt(frmImageRot.ImageRotation_txtResizeHeight.Text)
                                            Dim cOpt As New clsPDFOptimization()
                                            clsPDFOptimization.cancelOptimize_Shared = False
                                            b = A0_LoadImage(m.ToArray(), pg, w, h, False)
                                            Dim bm As Bitmap = Bitmap.FromStream(New MemoryStream(b))
                                            Select Case frmImageRot.ImageRotation_ImageFlip.SelectedIndex
                                                Case 0
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipNone)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                    End Select
                                                Case 1
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                    End Select
                                                Case 2
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipX)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipX)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipX)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                    End Select
                                                Case 3
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipXY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipXY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipXY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                    End Select
                                            End Select
                                            Dim i As System.Drawing.Image = bm.Clone
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Gif)
                                        Case Else
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Gif)
                                    End Select
                                Next
                                If r.NumberOfPages = 1 Then
                                    Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            If File.Exists(fnPg) Then
                                                Process.Start(fnPg)
                                            End If
                                        Case Else
                                            Exit Select
                                    End Select
                                End If
                            Case "tiff", "tif"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim frmImageRot As New frmImageRotation
                                    frmImageRot.showImageResizeOptions = True
                                    frmImageRot.LoadPictureBox(b)
                                    Select Case frmImageRot.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            Dim w As Integer = CInt(frmImageRot.ImageRotation_txtResizeWidth.Text)
                                            Dim h As Integer = CInt(frmImageRot.ImageRotation_txtResizeHeight.Text)
                                            Dim cOpt As New clsPDFOptimization()
                                            clsPDFOptimization.cancelOptimize_Shared = False
                                            b = A0_LoadImage(m.ToArray(), pg, w, h, False)
                                            Dim bm As Bitmap = Bitmap.FromStream(New MemoryStream(b))
                                            Select Case frmImageRot.ImageRotation_ImageFlip.SelectedIndex
                                                Case 0
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipNone)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                    End Select
                                                Case 1
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                    End Select
                                                Case 2
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipX)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipX)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipX)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                    End Select
                                                Case 3
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipXY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipXY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipXY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                    End Select
                                            End Select
                                            Dim i As System.Drawing.Image = bm.Clone
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Tiff)
                                        Case Else
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Tiff)
                                    End Select
                                Next
                                If r.NumberOfPages = 1 Then
                                    Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            If File.Exists(fnPg) Then
                                                Process.Start(fnPg)
                                            End If
                                        Case Else
                                            Exit Select
                                    End Select
                                End If
                            Case Else
                                b = Session("output")
                                File.WriteAllBytes(fn, b)
                        End Select
                    End If
                    StatusToolStrip = "Status: File saved successfully."
                    Return True
                Case Else
                    Return False
            End Select
        Catch ex As Exception
            StatusToolStrip = "Error: File not saved."
            TimeStampAdd(ex, debugMode)
        Finally
            timerPreventDefaultExpires.Enabled = True
            If Not SaveAsFileDialog1 Is Nothing Then
                SaveAsFileDialog1.frm_Close()
                SaveAsFileDialog1.Close()
                SaveAsFileDialog1.Dispose()
                SaveAsFileDialog1 = Nothing
            End If
            If Not Me.Visible Then
                Me.Show()
                Me.BringToFront()
            End If
            Try
                If ToolStripStatusLabel5.Text.ToString().ToLower = "Status: File saved successfully.".ToString().ToLower Then
                    fldNameHighlighted = ""
                    fldNameHighlightedCopy = fldNameHighlighted & ""
                    fldKidIndex = fldKidIndex
                    cUserRect._highLightFieldName = ""
                    cUserRect.rect = Nothing
                    cUserRect.rectBackup = Nothing
                    cUserRect.rectOld = Nothing
                    cUserRect.mIsClick = False
                    mMove = False
                    fldRectangles = getFieldRectangles(True)
                    A0_LoadPDF(True, False, True)
                End If
            Catch exRefresh As Exception
                TimeStampAdd(exRefresh, debugMode)
            End Try
        End Try
    End Function
    Public Function SavePageImageAs() As Boolean
        preventClickDialog = True
        Dim SaveAsFileDialog1 As New frmSaveAs()
        'SaveAsFileDialog1.o.Filter = "PDF|*.pdf|FDF|*.fdf|XFDF|*.xfdf|XDP|*.xdp|XML|*.xml|XLS|*.xls|Json|*.json|HTML|*.html|HTM|*.htm|Text|*.txt|JPG|*.jpg|PNG|*.png|GIF|*.gif|BMP|*.bmp|TIFF|*.tiff"
        SaveAsFileDialog1.o.Filter = "JPG|*.jpg|PNG|*.png|GIF|*.gif|BMP|*.bmp|TIFF|*.tiff"
        SaveAsFileDialog1.o.FilterIndex = 0
        If IsValidUrl(fpath) Then
            SaveAsFileDialog1.o.FileName = System.IO.Path.GetFileName(fpath & "")
            SaveAsFileDialog1.FilePath = ""
            SaveAsFileDialog1.frmSaveAs_TextFilePath.Text = ""
        Else
            If String.IsNullOrEmpty(fpath & "") Then
                SaveAsFileDialog1.o.InitialDirectory = ApplicationDataFolder(False, "") & ""
            Else
                SaveAsFileDialog1.o.InitialDirectory = System.IO.Path.GetDirectoryName(fpath)
            End If
            If String.IsNullOrEmpty(fpath & "") Then
                SaveAsFileDialog1.o.FileName = ""
                SaveAsFileDialog1.FilePath = ""
                SaveAsFileDialog1.frmSaveAs_TextFilePath.Text = ""
            Else
                SaveAsFileDialog1.o.FileName = System.IO.Path.GetFileName(fpath & "")
                SaveAsFileDialog1.FilePath = fpath
                SaveAsFileDialog1.frmSaveAs_TextFilePath.Text = fpath
            End If
        End If
        SaveAsFileDialog1.o.AutoUpgradeEnabled = True
        SaveAsFileDialog1.o.DefaultExt = ".jpg"
        SaveAsFileDialog1.o.FilterIndex = 1
        SaveAsFileDialog1.o.Title = "Save As"
        SaveAsFileDialog1.o.ValidateNames = True
        SaveAsFileDialog1.o.OverwritePrompt = True
        Try
            SaveAsFileDialog1.PDFVersion = "1." & pdfReaderDoc.PdfVersion.ToString() & ""
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If SaveAsFileDialog1.FilePathExtension.ToString.TrimStart("."c).ToLower = "pdf" Then
                SaveAsFileDialog1.ShowFrmSaveAs_PDFVersion(True)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not String.IsNullOrEmpty(pdfOwnerPassword & "") Then
                SaveAsFileDialog1.chkRemoveUnusedObjects.Checked = False
            End If
            SaveAsFileDialog1.frm_ShowForm(True, Me)
            Try
                modelPopupFrmSaveAs_DoEvents(SaveAsFileDialog1)
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Select Case SaveAsFileDialog1.dialogResult_1
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    Dim chkRemoveUnusedObjects As Boolean = SaveAsFileDialog1.chkRemoveUnusedObjects.Checked
                    If chkRemoveUnusedObjects Then
                        Try
                            CleanUpFields()
                        Catch ex1 As Exception
                            Err.Clear()
                        End Try
                        Try
                            RemoveUnusedObjectsToolStripMenuItem_Click(Me, New EventArgs())
                        Catch ex1 As Exception
                            Err.Clear()
                        End Try
                    End If
                    If Not String.IsNullOrEmpty(SaveAsFileDialog1.frmSaveAs_TextFilePath.Text) Then
                        Dim fn As String = SaveAsFileDialog1.frmSaveAs_TextFilePath.Text & ""
                        Dim b() As Byte = Nothing
                        Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                            Case "png"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = page.ToString 'cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim frmImageRot As New frmImageRotation
                                    frmImageRot.showImageResizeOptions = True
                                    frmImageRot.LoadPictureBox(b)
                                    Select Case frmImageRot.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            Dim w As Integer = CInt(frmImageRot.ImageRotation_txtResizeWidth.Text)
                                            Dim h As Integer = CInt(frmImageRot.ImageRotation_txtResizeHeight.Text)
                                            Dim cOpt As New clsPDFOptimization()
                                            clsPDFOptimization.cancelOptimize_Shared = False
                                            b = A0_LoadImage(m.ToArray(), pg, w, h, False)
                                            Dim bm As Bitmap = Bitmap.FromStream(New MemoryStream(b))
                                            Select Case frmImageRot.ImageRotation_ImageFlip.SelectedIndex
                                                Case 0
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipNone)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                    End Select
                                                Case 1
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                    End Select
                                                Case 2
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipX)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipX)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipX)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                    End Select
                                                Case 3
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipXY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipXY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipXY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                    End Select
                                            End Select
                                            Dim i As System.Drawing.Image = bm.Clone
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Png)
                                        Case Else
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Png)
                                    End Select
                                Next
                                If r.NumberOfPages = 1 Then
                                    Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            If File.Exists(fnPg) Then
                                                Process.Start(fnPg)
                                            End If
                                        Case Else
                                            Exit Select
                                    End Select
                                End If
                            Case "jpg"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = page.ToString 'cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim frmImageRot As New frmImageRotation
                                    frmImageRot.showImageResizeOptions = True
                                    frmImageRot.LoadPictureBox(b)
                                    Select Case frmImageRot.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            Dim w As Integer = CInt(frmImageRot.ImageRotation_txtResizeWidth.Text)
                                            Dim h As Integer = CInt(frmImageRot.ImageRotation_txtResizeHeight.Text)
                                            Dim cOpt As New clsPDFOptimization()
                                            clsPDFOptimization.cancelOptimize_Shared = False
                                            b = A0_LoadImage(m.ToArray(), pg, w, h, False)
                                            Dim bm As Bitmap = Bitmap.FromStream(New MemoryStream(b))
                                            Select Case frmImageRot.ImageRotation_ImageFlip.SelectedIndex
                                                Case 0
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipNone)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                    End Select
                                                Case 1
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                    End Select
                                                Case 2
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipX)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipX)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipX)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                    End Select
                                                Case 3
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipXY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipXY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipXY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                    End Select
                                            End Select
                                            Dim i As System.Drawing.Image = bm.Clone
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Jpeg)
                                        Case Else
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Jpeg)
                                    End Select
                                Next
                                If r.NumberOfPages = 1 Then
                                    Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            If File.Exists(fnPg) Then
                                                Process.Start(fnPg)
                                            End If
                                        Case Else
                                            Exit Select
                                    End Select
                                End If
                            Case "bmp"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = page.ToString 'cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim frmImageRot As New frmImageRotation
                                    frmImageRot.showImageResizeOptions = True
                                    frmImageRot.LoadPictureBox(b)
                                    Select Case frmImageRot.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            Dim w As Integer = CInt(frmImageRot.ImageRotation_txtResizeWidth.Text)
                                            Dim h As Integer = CInt(frmImageRot.ImageRotation_txtResizeHeight.Text)
                                            Dim cOpt As New clsPDFOptimization()
                                            clsPDFOptimization.cancelOptimize_Shared = False
                                            b = A0_LoadImage(m.ToArray(), pg, w, h, False)
                                            Dim bm As Bitmap = Bitmap.FromStream(New MemoryStream(b))
                                            Select Case frmImageRot.ImageRotation_ImageFlip.SelectedIndex
                                                Case 0
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipNone)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                    End Select
                                                Case 1
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                    End Select
                                                Case 2
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipX)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipX)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipX)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                    End Select
                                                Case 3
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipXY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipXY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipXY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                    End Select
                                            End Select
                                            Dim i As System.Drawing.Image = bm.Clone
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Bmp)
                                        Case Else
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Bmp)
                                    End Select
                                Next
                                If r.NumberOfPages = 1 Then
                                    Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            If File.Exists(fnPg) Then
                                                Process.Start(fnPg)
                                            End If
                                        Case Else
                                            Exit Select
                                    End Select
                                End If
                            Case "gif"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = page.ToString 'cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim frmImageRot As New frmImageRotation
                                    frmImageRot.showImageResizeOptions = True
                                    frmImageRot.LoadPictureBox(b)
                                    Select Case frmImageRot.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            Dim w As Integer = CInt(frmImageRot.ImageRotation_txtResizeWidth.Text)
                                            Dim h As Integer = CInt(frmImageRot.ImageRotation_txtResizeHeight.Text)
                                            Dim cOpt As New clsPDFOptimization()
                                            clsPDFOptimization.cancelOptimize_Shared = False
                                            b = A0_LoadImage(m.ToArray(), pg, w, h, False)
                                            Dim bm As Bitmap = Bitmap.FromStream(New MemoryStream(b))
                                            Select Case frmImageRot.ImageRotation_ImageFlip.SelectedIndex
                                                Case 0
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipNone)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                    End Select
                                                Case 1
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                    End Select
                                                Case 2
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipX)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipX)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipX)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                    End Select
                                                Case 3
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipXY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipXY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipXY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                    End Select
                                            End Select
                                            Dim i As System.Drawing.Image = bm.Clone
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Gif)
                                        Case Else
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Gif)
                                    End Select
                                Next
                                If r.NumberOfPages = 1 Then
                                    Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            If File.Exists(fnPg) Then
                                                Process.Start(fnPg)
                                            End If
                                        Case Else
                                            Exit Select
                                    End Select
                                End If
                            Case "tiff", "tif"
                                LoadPDFReaderDoc(pdfOwnerPassword, True)
                                Dim r As PdfReader = pdfReaderDoc.Clone()
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = page.ToString 'cdialog.ShowDialog("Select Page Range:", "Page range: " & "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString) & ""), Me, "1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString)) & "")
                                Dim m As MemoryStream
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    If Not CStr("1" & CStr(IIf(r.NumberOfPages <= 1, "", "-" & r.NumberOfPages.ToString))).ToString() = pgImportedStr Then
                                        r.SelectPages(pgImportedStr)
                                        m = New MemoryStream(getPDFBytes(r))
                                    Else
                                        m = New MemoryStream(Session)
                                    End If
                                Else
                                    m = New MemoryStream(Session)
                                End If
                                Dim fnPg As String = ""
                                For pg As Integer = 1 To r.NumberOfPages
                                    StatusToolStrip("Status: ", True) = "Exporting page #" & pg.ToString & " of " & pdfReaderDoc.NumberOfPages.ToString & " pages"
                                    fnPg = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileNameWithoutExtension(fn) & CStr(IIf(pdfReaderDoc.NumberOfPages > 1, "-" & pg, "")) & "." & GetFileExtension(fn).ToString.Replace(".", "").ToLower.TrimStart("."c)
                                    b = A0_LoadImage(m.ToArray(), pg, getPDFWidth(m.ToArray(), pg) * getPercent(r.Clone(), pg), getPDFHeight(m.ToArray(), pg) * getPercent(r.Clone(), pg), False)
                                    Dim frmImageRot As New frmImageRotation
                                    frmImageRot.showImageResizeOptions = True
                                    frmImageRot.LoadPictureBox(b)
                                    Select Case frmImageRot.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            Dim w As Integer = CInt(frmImageRot.ImageRotation_txtResizeWidth.Text)
                                            Dim h As Integer = CInt(frmImageRot.ImageRotation_txtResizeHeight.Text)
                                            Dim cOpt As New clsPDFOptimization()
                                            clsPDFOptimization.cancelOptimize_Shared = False
                                            b = A0_LoadImage(m.ToArray(), pg, w, h, False)
                                            Dim bm As Bitmap = Bitmap.FromStream(New MemoryStream(b))
                                            Select Case frmImageRot.ImageRotation_ImageFlip.SelectedIndex
                                                Case 0
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipNone)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipNone)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipNone)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipNone)
                                                    End Select
                                                Case 1
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipY)
                                                    End Select
                                                Case 2
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipX)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipX)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipX)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipX)
                                                    End Select
                                                Case 3
                                                    Select Case frmImageRot.ImageRotation_ImageRotation.SelectedIndex
                                                        Case 0
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                        Case 1
                                                            bm.RotateFlip(RotateFlipType.Rotate90FlipXY)
                                                        Case 2
                                                            bm.RotateFlip(RotateFlipType.Rotate180FlipXY)
                                                        Case 3
                                                            bm.RotateFlip(RotateFlipType.Rotate270FlipXY)
                                                        Case 4
                                                            bm.RotateFlip(RotateFlipType.RotateNoneFlipXY)
                                                    End Select
                                            End Select
                                            Dim i As System.Drawing.Image = bm.Clone
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Tiff)
                                        Case Else
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fnPg, System.Drawing.Imaging.ImageFormat.Tiff)
                                    End Select
                                Next
                                If r.NumberOfPages = 1 Then
                                    Select Case MsgBox("Open file: " & Path.GetFileName(fnPg) & "", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.SystemModal, "Open File?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            If File.Exists(fnPg) Then
                                                Process.Start(fnPg)
                                            End If
                                        Case Else
                                            Exit Select
                                    End Select
                                End If
                            Case Else
                                b = Session("output")
                                File.WriteAllBytes(fn, b)
                        End Select
                    End If
                    StatusToolStrip = "Status: File saved successfully."
                    Return True
                Case Else
                    Return False
            End Select
        Catch ex As Exception
            StatusToolStrip = "Error: File not saved."
            TimeStampAdd(ex, debugMode)
        Finally
            timerPreventDefaultExpires.Enabled = True
            If Not SaveAsFileDialog1 Is Nothing Then
                SaveAsFileDialog1.frm_Close()
                SaveAsFileDialog1.Close()
                SaveAsFileDialog1.Dispose()
                SaveAsFileDialog1 = Nothing
            End If
            If Not Me.Visible Then
                Me.Show()
                Me.BringToFront()
            End If
            Try
                If ToolStripStatusLabel5.Text.ToString().ToLower = "Status: File saved successfully.".ToString().ToLower Then
                    fldNameHighlighted = ""
                    fldNameHighlightedCopy = fldNameHighlighted & ""
                    fldKidIndex = fldKidIndex
                    cUserRect._highLightFieldName = ""
                    cUserRect.rect = Nothing
                    cUserRect.rectBackup = Nothing
                    cUserRect.rectOld = Nothing
                    cUserRect.mIsClick = False
                    mMove = False
                    fldRectangles = getFieldRectangles(True)
                    A0_LoadPDF(True, False, True)
                End If
            Catch exRefresh As Exception
                TimeStampAdd(exRefresh, debugMode)
            End Try
        End Try
    End Function
    Private Sub btnSave_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSave.Click
        Try
            If String.IsNullOrEmpty(pdfOwnerPassword) Then
                CleanUpFields()
            End If
        Catch ex1 As Exception
            Err.Clear()
        End Try
        Try
            If String.IsNullOrEmpty(pdfOwnerPassword) Then
                RemoveUnusedObjectsToolStripMenuItem_Click(Me, New EventArgs())
            End If
        Catch ex1 As Exception
            Err.Clear()
        End Try
        Try
            If Not String.IsNullOrEmpty(fpath) Then
                Dim fn As String = fpath & ""
                Try
                    Dim b() As Byte = Session().ToArray()
                    File.WriteAllBytes(fn, b)
                    Session("saved") = b
                    Session() = b
                    LoadPDFReaderDoc(pdfOwnerPassword, True)
                    Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                    addOpenHistoryListItem(fpath & "")
                    loadToolStripMenu_OpenHistoryList()
                    StatusToolStrip = "Status: File saved successfully."
                Catch ex As Exception
                    SaveAs()
                End Try
                Return
            Else
                SaveAs()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            Try
                If ToolStripStatusLabel5.Text.ToString().ToLower = "Status: File saved successfully.".ToString().ToLower Then
                    fldNameHighlighted = ""
                    fldNameHighlightedCopy = fldNameHighlighted & ""
                    fldKidIndex = fldKidIndex
                    cUserRect._highLightFieldName = ""
                    cUserRect.rect = Nothing
                    cUserRect.rectBackup = Nothing
                    cUserRect.rectOld = Nothing
                    cUserRect.mIsClick = False
                    mMove = False
                    fldRectangles = getFieldRectangles(True)
                    A0_LoadPDF(True, False, True)
                End If
            Catch exRefresh As Exception
                TimeStampAdd(exRefresh, debugMode)
            End Try
        End Try
    End Sub
    Public Function IsValidUrl(ByVal url As String) As Boolean
        Dim sPattern As String = ""
        sPattern = "http(s)?://([\w+?\.\w+])+([a-zA-Z0-9\~\!\@\#\$\%\^\&\*\(\)_\-\=\+\\\/\?\.\:\;\'\,]*)?"
        Return System.Text.RegularExpressions.Regex.IsMatch(url, sPattern)
    End Function
    Public Function FileExists(ByVal strFilePath As String) As Boolean
        Try
            If String.IsNullOrEmpty(strFilePath & "") Then
                Return False
            End If
            If My.Computer.FileSystem.FileExists(strFilePath) Then
                Return True
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
        Return False
    End Function
    Public Function GetFileExtension(ByVal strFilePath As String) As String
        Try
            Dim strExt As String = ""
            strExt = strFilePath.Substring(strFilePath.LastIndexOf("."c), strFilePath.Length - strFilePath.LastIndexOf("."c))
            Return strExt & ""
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Path.GetExtension(strFilePath) & ""
        End Try
        Return False
    End Function
    Public timeStamps As New Dictionary(Of Long, String)
    Public Sub TimeStampAdd(Optional ByVal str As String = "")
        Dim dt As DateTime = New DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, DateTime.Now.Millisecond)
        Try
            If Not timeStamps.Keys.Contains(dt.Ticks) Then
                timeStamps.Add(dt.Ticks, str)
            Else
                dt = New DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, DateTime.Now.Millisecond + 1)
                timeStamps.Add(dt.Ticks, "+(" & dt.ToString & "-" & str)
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Shared Function GetExecutingMethodName(ByVal exception As Exception) As String
        Dim trace = New StackTrace(exception)
        Dim frame = trace.GetFrame(0)
        Dim method = frame.GetMethod()
        Return String.Concat(method.DeclaringType.FullName, ".", method.Name)
    End Function
    Public Sub TimeStampAdd(ByVal ex As Exception, Optional ByVal throwException As Boolean = False)
        Dim dt As DateTime = New DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, DateTime.Now.Millisecond)
        Try
            If Not timeStamps.Keys.Contains(dt.Ticks) Then
                Dim st As New StackTrace(True)
                Dim strBlder As New System.Text.StringBuilder(Environment.NewLine)
                Try
                    strBlder.AppendLine("FILE PATH:")
                    strBlder.AppendLine(fpath.ToString & "")
                Catch exStr As Exception
                    strBlder.AppendLine("1-" & exStr.Message)
                End Try
                Try
                    strBlder.AppendLine("ERR.METHOD:")
                    strBlder.AppendLine(GetExecutingMethodName(ex).ToString)
                Catch exStr As Exception
                    strBlder.AppendLine("1-" & exStr.Message)
                End Try
                Try
                    strBlder.AppendLine("ERR.LINE#:")
                    strBlder.AppendLine(st.GetFrame(0).GetFileLineNumber().ToString)
                Catch exStr As Exception
                    strBlder.AppendLine("2-" & exStr.Message)
                End Try
                Try
                    strBlder.AppendLine("ERR.COLUMN#:")
                    strBlder.AppendLine(st.GetFrame(0).GetFileColumnNumber().ToString)
                Catch exStr As Exception
                    strBlder.AppendLine("2-" & exStr.Message)
                End Try
                Try
                    strBlder.AppendLine("ERR.MESSAGE:")
                    strBlder.AppendLine(ex.Message)
                Catch exStr As Exception
                    strBlder.AppendLine("3-" & exStr.Message)
                End Try
                Try
                    strBlder.AppendLine("ERR.INNEREXCEPTION.StackTrace:")
                    strBlder.AppendLine(ex.StackTrace().ToString)
                Catch exStr As Exception
                    strBlder.AppendLine("7-" & exStr.Message)
                End Try
                timeStamps.Add(dt.Ticks, strBlder.ToString())
            Else
                dt = New DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, DateTime.Now.Millisecond + 1)
                timeStamps.Add(dt.Ticks, "+(" & dt.ToString & "-" & ex.Message)
            End If
        Catch exError As Exception
            Err.Clear()
        End Try
        If throwException Then
            Throw ex
        Else
            Err.Clear()
        End If
    End Sub
    Public Function TimeStampInfo() As String
        Dim str As New System.Text.StringBuilder()
        str.AppendLine("CREATED(TimeStampInfo): " & DateTime.Now.ToString)
        Dim tsPrevious As DateTime = Nothing
        For tsIndex As Integer = timeStamps.Keys.Count - 1 To 0 Step -1
            Dim ts As DateTime = New DateTime(timeStamps.Keys(tsIndex))
            If Not tsPrevious = Nothing Then
                Dim dateDifferenceInt As Long = ((ts - tsPrevious).Milliseconds) + ((ts - tsPrevious).Seconds * 1000) + ((ts - tsPrevious).Minutes * 1000 * 60)
                If True = True Or Math.Abs(dateDifferenceInt) > 1200 Then
                    str.AppendLine(ts.Year.ToString("0000") & "/" & ts.Month.ToString("00") & "/" & ts.Day.ToString("00") & " T:" & ts.Hour.ToString("00") & ":" & ts.Minute.ToString("00") & ":" & ts.Second.ToString("00") & ":" & ts.Millisecond.ToString("0000") & " (" & dateDifferenceInt.ToString() & " ms) - " & timeStamps(timeStamps.Keys(tsIndex)).ToString)
                End If
            Else
                str.AppendLine(ts.Year.ToString("0000") & "/" & ts.Month.ToString("00") & "/" & ts.Day.ToString("00") & " T:" & ts.Hour.ToString("00") & ":" & ts.Minute.ToString("00") & ":" & ts.Second.ToString("00") & ":" & ts.Millisecond.ToString("0000") & " - " & timeStamps(timeStamps.Keys(tsIndex)).ToString)
            End If
            tsPrevious = ts
        Next
        Return str.ToString
    End Function
    Public Sub TimeStampSaveToFile(ByVal fn As String)
        Dim str As New System.Text.StringBuilder()
        str.AppendLine("CREATED(TimeStampInfo): " & DateTime.Now.ToString)
        Dim tsPrevious As DateTime = Nothing
        For tsIndex As Integer = timeStamps.Keys.Count - 1 To 0 Step -1
            Dim ts As DateTime = New DateTime(timeStamps.Keys(tsIndex))
            If Not tsPrevious = Nothing Then
                Dim dateDifferenceInt As Long = ((ts - tsPrevious).Milliseconds) + ((ts - tsPrevious).Seconds * 1000) + ((ts - tsPrevious).Minutes * 1000 * 60)
                If True = True Or Math.Abs(dateDifferenceInt) > 1200 Then
                    str.AppendLine(ts.Year.ToString("0000") & "/" & ts.Month.ToString("00") & "/" & ts.Day.ToString("00") & " T:" & ts.Hour.ToString("00") & ":" & ts.Minute.ToString("00") & ":" & ts.Second.ToString("00") & ":" & ts.Millisecond.ToString("0000") & " (" & dateDifferenceInt.ToString() & " ms) - " & timeStamps(timeStamps.Keys(tsIndex)).ToString)
                End If
            Else
                str.AppendLine(ts.Year.ToString("0000") & "/" & ts.Month.ToString("00") & "/" & ts.Day.ToString("00") & " T:" & ts.Hour.ToString("00") & ":" & ts.Minute.ToString("00") & ":" & ts.Second.ToString("00") & ":" & ts.Millisecond.ToString("0000") & " - " & timeStamps(timeStamps.Keys(tsIndex)).ToString)
            End If
            tsPrevious = ts
        Next
        File.WriteAllText(fn, str.ToString)
    End Sub
    Public Function TimeStamp_DiffMilliseconds(ByVal dt1 As DateTime, ByVal dt2 As DateTime) As Long
        Return Math.Abs(New TimeSpan(dt1.Ticks = dt2.Ticks).Milliseconds)
    End Function
    Public Sub OpenFile(Optional ByVal fp As String = "", Optional ByVal blnDeleteTempFiles As Boolean = True, Optional ByVal showPrompts As Boolean = True)
        Try
            TimeStampAdd("OpenFile(started)")
            Try
                If Not clsFF Is Nothing Then
                    If clsFF.Visible Then
                        showPrompts = False
                    End If
                End If
            Catch exShowDialog As Exception
                TimeStampAdd(exShowDialog, debugMode)
            End Try
            cUserRect.pauseDraw = True
            MenuBar_Enabled = False
            Try
                StatusToolStrip("Status: ", True) = "Loading, please wait..."
                computerMemory()
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                If Not String.IsNullOrEmpty(fp) Then
                    If IsValidUrl(fp) Then
                        Try
                            If A0_CloseDocument(blnDeleteTempFiles, showPrompts) = False Then
                                StatusToolStrip("Aborting Open File:", True) = "File Not saved"
                                TimeStampAdd("Aborting opening file: changes not saved")
                                Exit Sub
                            End If
                            cUserRect.rect = Nothing
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        fpath = fp
                        GoTo GOTO_KNOWN_FILENAME
                    ElseIf FileExists(fp) Then
                        Try
                            If A0_CloseDocument(blnDeleteTempFiles, showPrompts) = False Then
                                StatusToolStrip("Aborting Open File:", True) = "File Not saved"
                                TimeStampAdd("Aborting opening file: changes not saved")
                                Exit Sub
                            End If
                            cUserRect.rect = Nothing
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        OpenFileDialog1.FileName = fp
                        OpenFileDialog1.InitialDirectory = System.IO.Path.GetDirectoryName(fp & "")
                        fpath = fp
                        GoTo GOTO_KNOWN_FILENAME
                    End If
                ElseIf Not String.IsNullOrEmpty(fpath & "") Then
                    If FileExists(fpath) Then
                        OpenFileDialog1.InitialDirectory = System.IO.Path.GetDirectoryName(fpath & "")
                        OpenFileDialog1.FileName = Path.GetFileName(fpath & "")
                    End If
                Else
                    OpenFileDialog1.FileName = ""
                    OpenFileDialog1.InitialDirectory = ApplicationDataFolder(False, "")
                End If
                preventClickDialog = True
                OpenFileDialog1.Filter = "All Formats|*.pdf;*.fdf;*.xfdf;*.xdp;*.json;*.jpg;*.jpeg;*.bmp;*.gif;*.png;*.tif;*.tiff;*.html;*.htm;*.txt|PDF|*.pdf|FDF|*.fdf|XFDF|*.xfdf|XDP|*.xdp|Json|*.json|JPG|*.jpg|JPEG|*.jpeg|BMP|*.bmp|GIF|*.gif|PNG|*.png|Tif|*.tif|TIFF|*.tiff|HTML|*.html|HTM|*.htm|TXT|*.txt|All Files|*.*"
                OpenFileDialog1.AutoUpgradeEnabled = True
                OpenFileDialog1.DefaultExt = ".pdf"
                OpenFileDialog1.FilterIndex = 1
                OpenFileDialog1.Title = "Open Document"
                OpenFileDialog1.ValidateNames = True
                Select Case OpenFileDialog1.ShowDialog(Me)
                    Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                        If Not String.IsNullOrEmpty(OpenFileDialog1.FileName) Then
                            fpath = OpenFileDialog1.FileName & ""
                            Dim fn As String = fpath & ""
GOTO_KNOWN_FILENAME:
                            Dim b() As Byte = Nothing
                            _outputIndex = 0
                            mem.Clear()
                            If IsValidUrl(fpath) Then
                                OpenFileFromUrl(fpath, False, True)
                                Return
                            ElseIf FileExists(fpath) Then
                                If GetFileExtension(fpath & "").ToString.Replace(".", "").ToLower = "pdf" Then
                                    If IsPasswordProtected(fpath) Then
                                        OpenFile_WithPassword(fpath)
                                        Return
                                    Else
                                        pdfOwnerPassword = ""
                                    End If
                                End If
                            Else
                                Return
                            End If
                            Select Case GetFileExtension(fpath).ToString.Replace(".", "").ToLower
                                Case "pdf"
GOTO_case_PDF:
                                    Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                                    cUserRect.pauseDraw = True
                                    Dim pdfBytes() As Byte = File.ReadAllBytes(fpath)
                                    Session("saved") = pdfBytes
                                    Session("image_undo_history_0") = pdfBytes
                                    Session("output") = pdfBytes
                                    LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                    cFDFDoc = cFDFApp.PDFOpen(Session, True, True, pdfOwnerPassword)
                                    LoadPageList(Me.btnPage, cFDFDoc)
                                    ClearPDFEncryptionPanel(True, False)
                                    LoadPDFEncryptionPanel(pdfBytes, False)
                                    addOpenHistoryListItem(fpath)
                                    loadToolStripMenu_OpenHistoryList()
                                Case "fdf"
                                    cFDFDoc = cFDFApp.FDFOpenFromFile(fpath, True, True)
                                    If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                        fpath = cFDFDoc.FDFGetFile & ""
                                    Else
                                        fpath = ""
                                    End If
                                    Dim cls As New clsPromptDialog
                                    fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                                    If Not String.IsNullOrEmpty(fpath & "") Then
                                        cFDFDoc.FDFSetFile(fpath & "")
                                        Select Case cFDFDoc.Determine_Type(fpath)
                                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                                addOpenHistoryListItem(fpath)
                                                Try
                                                    Using mMerged As New MemoryStream
                                                        Dim fdfReaderDoc As New FdfReader(fpath)
                                                        pdfReaderDoc = New PdfReader(fpath, getBytes(pdfOwnerPassword & ""))
                                                        Using stamp As New PdfStamper(pdfReaderDoc, mMerged)
                                                            stamp.AcroFields.SetFields(fdfReaderDoc)
                                                            For Each fldName As String In fdfReaderDoc.Fields.Keys
                                                                Select Case stamp.AcroFields.GetFieldType(fldName)
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName))
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                            If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                                Dim vs As New List(Of String)
                                                                                If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                                    For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                                        stamp.AcroFields.SetField(fldName, vs(0))
                                                                                        Exit For
                                                                                    Next
                                                                                ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                                    For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                                        stamp.AcroFields.SetField(fldName, vs(0))
                                                                                        Exit For
                                                                                    Next
                                                                                End If
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c))
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString())
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                            If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                                Dim v As PdfName, vs As New List(Of String)
                                                                                If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                                    For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                                    Next
                                                                                ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                                    For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                                    Next
                                                                                End If
                                                                                stamp.AcroFields.SetListSelection(fldName, vs.ToArray())
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                                stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c)})
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                                stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString()})
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.A) Is Nothing Then
                                                                            Dim a As New PdfAction
                                                                            If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A) Is Nothing Then
                                                                                If stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                                    PdfReader.KillIndirect(stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsIndirectObject(PdfName.A))
                                                                                End If
                                                                                stamp.AcroFields.Fields(fldName).GetMerged(0).Remove(PdfName.A)
                                                                            End If
                                                                            Dim aDic As PdfDictionary = fdfReaderDoc.Fields(fldName).GetAsDict(PdfName.A)
                                                                            For Each n As PdfName In aDic.Keys
                                                                                If aDic.Get(n).IsName Then
                                                                                    a.Put(n, aDic.GetAsName(n))
                                                                                ElseIf aDic.Get(n).IsString Then
                                                                                    a.Put(n, aDic.GetAsString(n))
                                                                                ElseIf aDic.Get(n).IsArray Then
                                                                                    a.Put(n, aDic.GetAsArray(n))
                                                                                ElseIf aDic.Get(n).IsStream Then
                                                                                    a.Put(n, aDic.GetAsStream(n))
                                                                                Else
                                                                                    a.Put(n, aDic.Get(n))
                                                                                End If
                                                                            Next
                                                                            If aDic.Get(PdfName.FS) Is Nothing Then
                                                                                a.Put(PdfName.FS, PdfName.URL)
                                                                            End If
                                                                            Dim pb As PushbuttonField = stamp.AcroFields.GetNewPushbuttonFromField(fldName)
                                                                            Dim fld As PdfFormField = pb.Field
                                                                            fld.Action = a
                                                                            stamp.AcroFields.ReplacePushbuttonField(fldName, fld)
                                                                            If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                                Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsDict(PdfName.A)
                                                                                stamp.AcroFields.Fields(fldName).GetMerged(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                            End If
                                                                            If Not stamp.AcroFields.Fields(fldName).GetWidget(0).Get(PdfName.A).IsIndirect Then
                                                                                Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetWidget(0).GetAsDict(PdfName.A)
                                                                                stamp.AcroFields.Fields(fldName).GetWidget(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE
                                                                    Case Else
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                                End Select
                                                            Next
                                                            stamp.Writer.CloseStream = False
                                                            fdfReaderDoc.Close()
                                                            stamp.Close()
                                                            Session = mMerged.ToArray()
                                                            LoadPDFReaderDoc(pdfOwnerPassword, True)
                                                        End Using
                                                        Session("saved") = mMerged.ToArray()
                                                    End Using
                                                Catch exMerged As Exception
                                                    TimeStampAdd(exMerged, debugMode)
                                                    Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                End Try
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                ClearPDFEncryptionPanel(True, False)
                                                LoadPDFEncryptionPanel(Session, False)
                                                addOpenHistoryListItem(fpath)
                                                loadToolStripMenu_OpenHistoryList()
                                            Case FDFApp.FDFDoc_Class.FDFType.XPDF
                                                addOpenHistoryListItem(fpath)
                                                Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                ClearPDFEncryptionPanel(True, False)
                                                LoadPDFEncryptionPanel(Session, False)
                                                addOpenHistoryListItem(fpath)
                                                loadToolStripMenu_OpenHistoryList()
                                            Case Else
                                                Session("output") = Nothing
                                        End Select
                                    End If
                                Case "xfdf"
                                    cFDFDoc = cFDFApp.FDFOpenFromFile(fpath, True, True)
                                    If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                        fpath = cFDFDoc.FDFGetFile & ""
                                    Else
                                        fpath = ""
                                    End If
                                    Dim cls As New clsPromptDialog
                                    fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                                    If Not String.IsNullOrEmpty(fpath & "") Then
                                        cFDFDoc.FDFSetFile(fpath & "")
                                        Select Case cFDFDoc.Determine_Type(fpath)
                                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                                addOpenHistoryListItem(fpath)
                                                Try
                                                    Using mMerged As New MemoryStream
                                                        Dim fdfReaderDoc As New FdfReader(fpath)
                                                        pdfReaderDoc = New PdfReader(fpath, getBytes(pdfOwnerPassword & ""))
                                                        Using stamp As New PdfStamper(pdfReaderDoc, mMerged)
                                                            stamp.AcroFields.SetFields(fdfReaderDoc)
                                                            For Each fldName As String In fdfReaderDoc.Fields.Keys
                                                                Select Case stamp.AcroFields.GetFieldType(fldName)
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName))
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                            If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                                Dim vs As New List(Of String)
                                                                                If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                                    For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                                        stamp.AcroFields.SetField(fldName, vs(0))
                                                                                        Exit For
                                                                                    Next
                                                                                ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                                    For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                                        stamp.AcroFields.SetField(fldName, vs(0))
                                                                                        Exit For
                                                                                    Next
                                                                                End If
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c))
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString())
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                            If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                                Dim v As PdfName, vs As New List(Of String)
                                                                                If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                                    For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                                    Next
                                                                                ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                                    For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                                    Next
                                                                                End If
                                                                                stamp.AcroFields.SetListSelection(fldName, vs.ToArray())
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                                stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c)})
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                                stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString()})
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.A) Is Nothing Then
                                                                            Dim a As New PdfAction
                                                                            If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A) Is Nothing Then
                                                                                If stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                                    PdfReader.KillIndirect(stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsIndirectObject(PdfName.A))
                                                                                End If
                                                                                stamp.AcroFields.Fields(fldName).GetMerged(0).Remove(PdfName.A)
                                                                            End If
                                                                            Dim aDic As PdfDictionary = fdfReaderDoc.Fields(fldName).GetAsDict(PdfName.A)
                                                                            For Each n As PdfName In aDic.Keys
                                                                                If aDic.Get(n).IsName Then
                                                                                    a.Put(n, aDic.GetAsName(n))
                                                                                ElseIf aDic.Get(n).IsString Then
                                                                                    a.Put(n, aDic.GetAsString(n))
                                                                                ElseIf aDic.Get(n).IsArray Then
                                                                                    a.Put(n, aDic.GetAsArray(n))
                                                                                ElseIf aDic.Get(n).IsStream Then
                                                                                    a.Put(n, aDic.GetAsStream(n))
                                                                                Else
                                                                                    a.Put(n, aDic.Get(n))
                                                                                End If
                                                                            Next
                                                                            If aDic.Get(PdfName.FS) Is Nothing Then
                                                                                a.Put(PdfName.FS, PdfName.URL)
                                                                            End If
                                                                            Dim pb As PushbuttonField = stamp.AcroFields.GetNewPushbuttonFromField(fldName)
                                                                            Dim fld As PdfFormField = pb.Field
                                                                            fld.Action = a
                                                                            stamp.AcroFields.ReplacePushbuttonField(fldName, fld)
                                                                            If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                                Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsDict(PdfName.A)
                                                                                stamp.AcroFields.Fields(fldName).GetMerged(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                            End If
                                                                            If Not stamp.AcroFields.Fields(fldName).GetWidget(0).Get(PdfName.A).IsIndirect Then
                                                                                Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetWidget(0).GetAsDict(PdfName.A)
                                                                                stamp.AcroFields.Fields(fldName).GetWidget(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE
                                                                    Case Else
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                                End Select
                                                            Next
                                                            stamp.Writer.CloseStream = False
                                                            fdfReaderDoc.Close()
                                                            stamp.Close()
                                                            pdfReaderDoc.Close()
                                                        End Using
                                                        Session("saved") = mMerged.ToArray()
                                                    End Using
                                                Catch exMerged As Exception
                                                    TimeStampAdd(exMerged, debugMode)
                                                    Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                End Try
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                ClearPDFEncryptionPanel(True, False)
                                                LoadPDFEncryptionPanel(Session, False)
                                                addOpenHistoryListItem(fpath)
                                                loadToolStripMenu_OpenHistoryList()
                                            Case FDFApp.FDFDoc_Class.FDFType.XPDF
                                                addOpenHistoryListItem(fpath)
                                                Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                ClearPDFEncryptionPanel(True, False)
                                                LoadPDFEncryptionPanel(Session, False)
                                                addOpenHistoryListItem(fpath)
                                                loadToolStripMenu_OpenHistoryList()
                                            Case Else
                                                Session("output") = Nothing
                                        End Select
                                    End If
                                Case "xdp"
                                    cFDFDoc = cFDFApp.FDFOpenFromFile(fpath, True, True)
                                    If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                        fpath = cFDFDoc.FDFGetFile & ""
                                    Else
                                        fpath = ""
                                    End If
                                    Dim cls As New clsPromptDialog
                                    fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                                    If Not String.IsNullOrEmpty(fpath & "") Then
                                        cFDFDoc.FDFSetFile(fpath & "")
                                        Select Case cFDFDoc.Determine_Type(fpath)
                                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                                addOpenHistoryListItem(fpath)
                                                Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc(True)
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                ClearPDFEncryptionPanel(True, False)
                                                LoadPDFEncryptionPanel(Session, False)
                                                addOpenHistoryListItem(fpath)
                                                loadToolStripMenu_OpenHistoryList()
                                            Case FDFApp.FDFDoc_Class.FDFType.XPDF
                                                addOpenHistoryListItem(fpath)
                                                Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc(True)
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                ClearPDFEncryptionPanel(True, False)
                                                LoadPDFEncryptionPanel(Session, False)
                                                addOpenHistoryListItem(fpath)
                                                loadToolStripMenu_OpenHistoryList()
                                            Case Else
                                                Session("output") = Nothing
                                        End Select
                                    End If
                                Case "xml"
                                    cFDFDoc = cFDFApp.FDFOpenFromFile(fpath, True, True)
                                    If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                        fpath = cFDFDoc.FDFGetFile & ""
                                    Else
                                        fpath = ""
                                    End If
                                    Dim cls As New clsPromptDialog
                                    fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                                    If Not String.IsNullOrEmpty(fpath & "") Then
                                        cFDFDoc.FDFSetFile(fpath & "")
                                        Select Case cFDFDoc.Determine_Type(fpath)
                                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                                addOpenHistoryListItem(fpath)
                                                Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                ClearPDFEncryptionPanel(True, False)
                                                LoadPDFEncryptionPanel(Session, False)
                                                addOpenHistoryListItem(fpath)
                                                loadToolStripMenu_OpenHistoryList()
                                            Case FDFApp.FDFDoc_Class.FDFType.XPDF
                                                addOpenHistoryListItem(fpath)
                                                Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                ClearPDFEncryptionPanel(True, False)
                                                LoadPDFEncryptionPanel(Session, False)
                                                addOpenHistoryListItem(fpath)
                                                loadToolStripMenu_OpenHistoryList()
                                            Case Else
                                                Session("output") = Nothing
                                        End Select
                                    End If
                                Case "json"
                                    cFDFDoc.FDFClose()
                                    cFDFDoc = cFDFApp.FDFOpenFromFile(fpath, True, True)
                                    If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                        fpath = cFDFDoc.FDFGetFile & ""
                                    Else
                                        fpath = ""
                                    End If
                                    Dim cls As New clsPromptDialog
                                    fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", Path.GetDirectoryName(fpath).ToString().TrimEnd("\"c) & "\" & "", "PDF path?", Me)
                                    If Not String.IsNullOrEmpty(fpath & "") Then
                                        cFDFDoc.FDFSetFile(fpath & "")
                                        Select Case cFDFDoc.Determine_Type(fpath)
                                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                                addOpenHistoryListItem(fpath)
                                                Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc(True)
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                ClearPDFEncryptionPanel(True, False)
                                                LoadPDFEncryptionPanel(Session, False)
                                                addOpenHistoryListItem(fpath)
                                                loadToolStripMenu_OpenHistoryList()
                                            Case FDFApp.FDFDoc_Class.FDFType.XPDF, FDFApp.FDFDoc_Class.FDFType.XFA
                                                addOpenHistoryListItem(fpath)
                                                Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                ClearPDFEncryptionPanel(True, False)
                                                LoadPDFEncryptionPanel(Session, False)
                                                addOpenHistoryListItem(fpath)
                                                loadToolStripMenu_OpenHistoryList()
                                            Case Else
                                                Session("output") = Nothing
                                        End Select
                                    End If
                                Case "txt"
                                    cFDFDoc.FDFClose()
                                    Dim strFileData As String = System.IO.File.ReadAllText(fpath)
                                    Dim doc As New iTextSharp.text.Document
                                    Dim cntrRenameTxt As Integer = 10
GoTo_RenameTXT:
                                    fpath = System.IO.Path.GetDirectoryName(fpath).ToString.TrimEnd("\"c) & "\"c & System.IO.Path.GetFileNameWithoutExtension(fpath) & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 7).ToString.ToLower() & ".pdf"
                                    If System.IO.File.Exists(fpath) Then
                                        cntrRenameTxt -= 1
                                        If cntrRenameTxt > 0 Then
                                            GoTo GoTo_RenameTXT
                                        Else
                                            fpath = ""
                                            fpath = ""
                                            Return
                                        End If
                                    End If
                                    PdfWriter.GetInstance(doc, New System.IO.FileStream(fpath, FileMode.Create))
                                    doc.Open()
                                    doc.Add(New Paragraph(strFileData))
                                    doc.Close()
                                    fpath = fpath
                                    GoTo GOTO_case_PDF
                                Case "jpg", "jpeg", "bmp", "gif", "png", "tif", "tiff"
                                    ImportImage(fpath, showPrompts)
                                    LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                Case "htm", "html"
                                    'addOpenHistoryListItem(fpath)
                                    'ConvertHTMLFileFromFile(fpath & "")
                                    'Return
                                    addOpenHistoryListItem(fpath)
                                    fp = fpath
                                    If Not String.IsNullOrEmpty(fp.ToString()) Then
                                        fpath = fp.ToString()
                                        If IsValidUrl(fpath) Or FileExists(fpath) Then
                                            addOpenHistoryListItem(fpath)
                                            'ConvertHTMLFileFromUrl(fpath)
                                            Dim dMultipleChoice As New dialogMultiChoice(Me)
                                            dMultipleChoice.lblMessage.Text = "Import HTML page as..."
                                            Dim clsBut As New List(Of dialogMultiChoice.clsButton)
                                            Dim btn As dialogMultiChoice.clsButton
                                            btn = New dialogMultiChoice.clsButton("as HTML", True, DialogResult.OK)
                                            clsBut.Add(btn)
                                            btn = New dialogMultiChoice.clsButton("as Image", True, DialogResult.Yes)
                                            clsBut.Add(btn)
                                            btn = New dialogMultiChoice.clsButton("", False, DialogResult.No)
                                            clsBut.Add(btn)
                                            btn = New dialogMultiChoice.clsButton("Cancel", True, DialogResult.Cancel)
                                            clsBut.Add(btn)
                                            Select Case dMultipleChoice.ShowDialog(Me, "Import HTML page as:", clsBut.ToArray())
                                                Case DialogResult.OK
                                                    Convert_ImportURl2HTMLFile(fpath & "")
                                                Case DialogResult.Yes
                                                    Convert_ImportURl2ImageFile(fpath & "")
                                                Case Else
                                                    Return
                                            End Select
                                        ElseIf FileExists(fp.ToString()) Then
                                            OpenFileDialog1.FileName = fp.ToString()
                                            GoTo GOTO_KNOWN_FILENAME
                                        End If
                                    Else
                                        Return
                                    End If
                                    'ConvertHTMLFileFromFile(fpath & "")
                                    Return
                                Case Else
                                    b = Session("output")
                                    LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                    File.WriteAllBytes(fpath, b)
                            End Select
                            Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                            fldRectangles = getFieldRectangles(True)
                            ignoreClick = True
                            A0_PictureBox2.Visible = True
                            If pnlFields.Visible Then pnlFields.Visible = False
                            A0_PictureBox1.Enabled = True
                            A0_PictureBox2.Enabled = True
                        End If
                    Case Else
                        Return
                End Select
            Catch ex As Exception
                StatusToolStrip("File Load Error-A: ", True) = ex.Message.ToString() & ""
                TimeStampAdd(ex, debugMode)
            Finally
                timerPreventDefaultExpires.Enabled = True
                tm = New System.Text.StringBuilder
                CheckfieldNameExits("", True)
                If Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        If UseIntellegentCaching_Thumnails_ToolStripMenuItem.Checked Then
                            Load_Thumbnails1_Panel(False, True)
                        End If
                    End If
                End If
                Try
                    If Not Session Is Nothing Then
                        If Session.Length > 0 Then
                            If _cFDFDoc Is Nothing Then
                                _cFDFDoc = cFDFDoc(True)
                            End If
                        End If
                    End If
                Catch exLoadFDFDoc As Exception
                    TimeStampAdd(exLoadFDFDoc, debugMode)
                End Try
            End Try
            StatusToolStrip("Status: ", True) = "Finishing, please wait..."
        Catch exMain1 As Exception
            StatusToolStrip("File Load Error: ", True) = exMain1.Message.ToString() & ""
            TimeStampAdd(exMain1, debugMode)
        Finally
            ignoreClick = False
            MenuBar_Enabled = True
            computerMemory()
            Try
                cUserRect.pauseDraw = False
                If Not String.IsNullOrEmpty(fpath) And Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        StatusToolStrip("Status: ", True) = "File loading completed (see log for errors)."
                        Me.ToolStripStatusLabel2.Text = (fpath & "").ToString()
                        A0_LoadPDF_Properties()
                        A0_LoadPDF(True, True, True, 1, True)
                    Else
                        StatusToolStrip("Error: ", True) = "File not loaded."
                    End If
                Else
                    StatusToolStrip("Error: ", True) = "File not loaded."
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                StatusToolStrip("Error: ", True) = "File not loaded."
            End Try
            TimeStampAdd("OpenFile(completed)")
        End Try
    End Sub
    Public Sub OpenFileFromUrl(Optional ByVal fp As String = "", Optional ByVal blnDeleteTempFiles As Boolean = True, Optional ByVal showPrompts As Boolean = True)
        Try
            cUserRect.pauseDraw = True
            Try
                If Not clsFF Is Nothing Then
                    If clsFF.Visible Then
                        showPrompts = False
                    End If
                End If
            Catch exShowDialog As Exception
                TimeStampAdd(exShowDialog, debugMode)
            End Try
            Try
                If A0_CloseDocument(blnDeleteTempFiles, showPrompts) = False Then
                    StatusToolStrip("Aborting Open File:", True) = "File Not saved"
                    TimeStampAdd("Aborting opening file: changes not saved")
                    Return
                End If
                cUserRect.rect = Nothing
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            MenuBar_Enabled = False
            Try
                StatusToolStrip("Status: ", True) = "Loading, please wait..."
                computerMemory()
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                If Not String.IsNullOrEmpty(fp.ToString().Trim()) Then
                    fpath = fp.ToString()
                    If IsValidUrl(fpath) Then
                        GoTo GOTO_KNOWN_FILENAME
                    ElseIf FileExists(fp.ToString()) Then
                        OpenFileDialog1.FileName = fp.ToString().Trim()
                        GoTo GOTO_KNOWN_FILENAME
                    End If
                Else
                    fpath = ""
                End If
                preventClickDialog = True
                Try
                    Me.Hide()
                    If Clipboard.ContainsText() Then
                        If IsValidUrl(Clipboard.GetText(TextDataFormat.Text).ToString().Trim() & "") Then
                            fpath = Clipboard.GetText(TextDataFormat.Text)
                        End If
                    End If
                    fpath = New clsPromptDialog().ShowDialog("Open file path or Url:", "Open File From URL:", Me, fpath & "")
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    Me.Show()
                End Try
                If Not String.IsNullOrEmpty(fpath) Then
                    If IsValidUrl(fpath) Then
                        GoTo GOTO_KNOWN_FILENAME
                    ElseIf FileExists(fpath) Then
                        OpenFileDialog1.InitialDirectory = Path.GetDirectoryName(fpath & "")
                        OpenFileDialog1.FileName = Path.GetFileName(fpath & "")
                    End If
                Else
                    Return
                End If
                If Not String.IsNullOrEmpty(fpath) Then
                    Dim fn As String = fpath & ""
                    fpath = fn
GOTO_KNOWN_FILENAME:
                    Dim b() As Byte = Nothing
                    _outputIndex = 0
                    mem.Clear()
                    fn = fpath
                    If IsValidUrl(fpath) Then
                        Dim wc As New System.Net.WebClient
                        Try
                            Dim url As New System.Uri(CStr(fpath))
                            b = wc.DownloadData(url)
                            fn = ApplicationDataFolder(False,"temp") & System.IO.Path.GetFileNameWithoutExtension(fpath & "")
                            Try
                                Select Case cfdf.Determine_Type(b)
                                    Case FDFApp.FDFDoc_Class.FDFType.FDF
                                        fn = fn & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".fdf"
                                    Case FDFApp.FDFDoc_Class.FDFType.Json
                                        fn = fn & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".json"
                                    Case FDFApp.FDFDoc_Class.FDFType.PDF
                                        fn = fn & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".pdf"
                                    Case FDFApp.FDFDoc_Class.FDFType.XDP
                                        fn = fn & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".xdp"
                                    Case FDFApp.FDFDoc_Class.FDFType.XFA
                                        fn = fn & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".pdf"
                                    Case FDFApp.FDFDoc_Class.FDFType.xFDF
                                        fn = fn & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".xfdf"
                                    Case FDFApp.FDFDoc_Class.FDFType.XML
                                        fn = fn & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".xml"
                                    Case FDFApp.FDFDoc_Class.FDFType.XPDF
                                        fn = fn & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".pdf"
                                    Case Else
                                        fn = fn & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".dat"
                                End Select
                            Catch exFilename As Exception
                                TimeStampAdd(exFilename, debugMode)
                            End Try
                            If Not b Is Nothing Then
                                If b.Length > 0 Then
                                    System.IO.File.WriteAllBytes(fn, b)
                                    OpenFileDialog1.FileName = fn
                                    If GetFileExtension(fn & "").ToString.Replace(".", "").ToLower = "pdf" Then
                                        If IsPasswordProtected(fn) Then
                                            OpenFile_WithPassword(fn)
                                            Return
                                        Else
                                            pdfOwnerPassword = ""
                                        End If
                                    End If
                                Else
                                    MsgBox("Download failed", MsgBoxStyle.Critical + MsgBoxStyle.OkOnly + MsgBoxStyle.ApplicationModal, "Download Failed")
                                End If
                            Else
                                MsgBox("Download failed", MsgBoxStyle.Critical + MsgBoxStyle.OkOnly + MsgBoxStyle.ApplicationModal, "Download Failed")
                                Return
                            End If
                        Catch exDownlaod As Exception
                            MsgBox("Download failed!" & Environment.NewLine & Environment.NewLine & "Error: " & exDownlaod.Message, MsgBoxStyle.Critical + MsgBoxStyle.OkOnly + MsgBoxStyle.ApplicationModal, "Download Failed!")
                            TimeStampAdd(exDownlaod, debugMode)
                        End Try
                    ElseIf FileExists(fn) Then
                        If GetFileExtension(fn & "").ToString.Replace(".", "").ToLower = "pdf" Then
                            If IsPasswordProtected(fn) Then
                                OpenFile_WithPassword(fn)
                                Return
                            Else
                                pdfOwnerPassword = ""
                            End If
                        End If
                    Else
                        Return
                    End If
                    Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                        Case "pdf"
                            Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                            Session("saved") = File.ReadAllBytes(fn)
                            Session("image_undo_history_0") = Session("saved")
                            Session("output") = Session("saved")
                            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                            _cFDFDoc = cFDFDoc
                            LoadPageList(Me.btnPage, cFDFDoc)
                            pageIndex = 0
                            cmbPercent.SelectedIndex = 3
                            ClearPDFEncryptionPanel(True, False)
                            LoadPDFEncryptionPanel(Session("output"), False)
                            addOpenHistoryListItem(fpath)
                            loadToolStripMenu_OpenHistoryList()
                            cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
                        Case "fdf"
                            cFDFDoc = cFDFApp.FDFOpenFromFileiText(fn, True, True)
                            If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                fpath = cFDFDoc.FDFGetFile & ""
                            Else
                                fpath = ""
                            End If
                            Dim cls As New clsPromptDialog
                            fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                            If Not String.IsNullOrEmpty(fpath & "") Then
                                cFDFDoc.FDFSetFile(fpath & "")
                                Select Case cFDFDoc.Determine_Type(fpath)
                                    Case FDFApp.FDFDoc_Class.FDFType.PDF
                                        addOpenHistoryListItem(fn)
                                        Try
                                            Using mMerged As New MemoryStream
                                                Dim fdfReaderDoc As New FdfReader(fn)
                                                pdfReaderDoc = New PdfReader(fpath, getBytes(pdfOwnerPassword & ""))
                                                Using stamp As New PdfStamper(pdfReaderDoc, mMerged)
                                                    stamp.AcroFields.SetFields(fdfReaderDoc)
                                                    For Each fldName As String In fdfReaderDoc.Fields.Keys
                                                        Select Case stamp.AcroFields.GetFieldType(fldName)
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName))
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                                                If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                    If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                        Dim vs As New List(Of String)
                                                                        If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                            For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                                stamp.AcroFields.SetField(fldName, vs(0))
                                                                                Exit For
                                                                            Next
                                                                        ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                            For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                                stamp.AcroFields.SetField(fldName, vs(0))
                                                                                Exit For
                                                                            Next
                                                                        End If
                                                                    ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c))
                                                                    ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString())
                                                                    End If
                                                                End If
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                                                If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                    If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                        Dim v As PdfName, vs As New List(Of String)
                                                                        If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                            For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                            Next
                                                                        ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                            For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                            Next
                                                                        End If
                                                                        stamp.AcroFields.SetListSelection(fldName, vs.ToArray())
                                                                    ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                        stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c)})
                                                                    ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                        stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString()})
                                                                    End If
                                                                End If
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                                                If Not fdfReaderDoc.Fields(fldName).Get(PdfName.A) Is Nothing Then
                                                                    Dim a As New PdfAction
                                                                    If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A) Is Nothing Then
                                                                        If stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                            PdfReader.KillIndirect(stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsIndirectObject(PdfName.A))
                                                                        End If
                                                                        stamp.AcroFields.Fields(fldName).GetMerged(0).Remove(PdfName.A)
                                                                    End If
                                                                    Dim aDic As PdfDictionary = fdfReaderDoc.Fields(fldName).GetAsDict(PdfName.A)
                                                                    For Each n As PdfName In aDic.Keys
                                                                        If aDic.Get(n).IsName Then
                                                                            a.Put(n, aDic.GetAsName(n))
                                                                        ElseIf aDic.Get(n).IsString Then
                                                                            a.Put(n, aDic.GetAsString(n))
                                                                        ElseIf aDic.Get(n).IsArray Then
                                                                            a.Put(n, aDic.GetAsArray(n))
                                                                        ElseIf aDic.Get(n).IsStream Then
                                                                            a.Put(n, aDic.GetAsStream(n))
                                                                        Else
                                                                            a.Put(n, aDic.Get(n))
                                                                        End If
                                                                    Next
                                                                    If aDic.Get(PdfName.FS) Is Nothing Then
                                                                        a.Put(PdfName.FS, PdfName.URL)
                                                                    End If
                                                                    Dim pb As PushbuttonField = stamp.AcroFields.GetNewPushbuttonFromField(fldName)
                                                                    Dim fld As PdfFormField = pb.Field
                                                                    fld.Action = a
                                                                    stamp.AcroFields.ReplacePushbuttonField(fldName, fld)
                                                                    If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                        Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsDict(PdfName.A)
                                                                        stamp.AcroFields.Fields(fldName).GetMerged(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                    End If
                                                                    If Not stamp.AcroFields.Fields(fldName).GetWidget(0).Get(PdfName.A).IsIndirect Then
                                                                        Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetWidget(0).GetAsDict(PdfName.A)
                                                                        stamp.AcroFields.Fields(fldName).GetWidget(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                    End If
                                                                End If
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE
                                                            Case Else
                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                        End Select
                                                    Next
                                                    stamp.Writer.CloseStream = False
                                                    fdfReaderDoc.Close()
                                                    stamp.Close()
                                                    pdfReaderDoc.Close()
                                                End Using
                                                Session("saved") = mMerged.ToArray()
                                            End Using
                                        Catch exMerged As Exception
                                            TimeStampAdd(exMerged, debugMode)
                                            Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, pdfOwnerPassword & "")
                                        End Try
                                        Session("image_undo_history_0") = Session("saved")
                                        Session("output") = Session("saved")
                                        LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                        _cFDFDoc = cFDFDoc
                                        LoadPageList(Me.btnPage, cFDFDoc)
                                        pageIndex = 0
                                        cmbPercent.SelectedIndex = 3
                                    Case FDFApp.FDFDoc_Class.FDFType.XPDF, FDFApp.FDFDoc_Class.FDFType.XFA
                                        addOpenHistoryListItem(fn)
                                        Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, pdfOwnerPassword & "")
                                        Session("image_undo_history_0") = Session("saved")
                                        Session("output") = Session("saved")
                                        LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                        _cFDFDoc = cFDFDoc
                                        LoadPageList(Me.btnPage, cFDFDoc)
                                        pageIndex = 0
                                        cmbPercent.SelectedIndex = 3
                                    Case Else
                                        Session("output") = Nothing
                                End Select
                            End If
                        Case "xfdf"
                            cFDFDoc = cFDFApp.FDFOpenFromFile(fn, True, True)
                            If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                fpath = cFDFDoc.FDFGetFile & ""
                            Else
                                fpath = ""
                            End If
                            Dim cls As New clsPromptDialog
                            fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                            If Not String.IsNullOrEmpty(fpath & "") Then
                                cFDFDoc.FDFSetFile(fpath & "")
                                Select Case cFDFDoc.Determine_Type(fpath)
                                    Case FDFApp.FDFDoc_Class.FDFType.PDF
                                        addOpenHistoryListItem(fn)
                                        Try
                                            Using mMerged As New MemoryStream
                                                Dim fdfReaderDoc As New FdfReader(fn)
                                                pdfReaderDoc = New PdfReader(fpath, getBytes(pdfOwnerPassword & ""))
                                                Using stamp As New PdfStamper(pdfReaderDoc, mMerged)
                                                    stamp.AcroFields.SetFields(fdfReaderDoc)
                                                    For Each fldName As String In fdfReaderDoc.Fields.Keys
                                                        Select Case stamp.AcroFields.GetFieldType(fldName)
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName))
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                                                If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                    If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                        Dim vs As New List(Of String)
                                                                        If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                            For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                                stamp.AcroFields.SetField(fldName, vs(0))
                                                                                Exit For
                                                                            Next
                                                                        ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                            For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                                stamp.AcroFields.SetField(fldName, vs(0))
                                                                                Exit For
                                                                            Next
                                                                        End If
                                                                    ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c))
                                                                    ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString())
                                                                    End If
                                                                End If
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                                                If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                    If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                        Dim v As PdfName, vs As New List(Of String)
                                                                        If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                            For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                            Next
                                                                        ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                            For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                            Next
                                                                        End If
                                                                        stamp.AcroFields.SetListSelection(fldName, vs.ToArray())
                                                                    ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                        stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c)})
                                                                    ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                        stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString()})
                                                                    End If
                                                                End If
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                                                If Not fdfReaderDoc.Fields(fldName).Get(PdfName.A) Is Nothing Then
                                                                    Dim a As New PdfAction
                                                                    If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A) Is Nothing Then
                                                                        If stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                            PdfReader.KillIndirect(stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsIndirectObject(PdfName.A))
                                                                        End If
                                                                        stamp.AcroFields.Fields(fldName).GetMerged(0).Remove(PdfName.A)
                                                                    End If
                                                                    Dim aDic As PdfDictionary = fdfReaderDoc.Fields(fldName).GetAsDict(PdfName.A)
                                                                    For Each n As PdfName In aDic.Keys
                                                                        If aDic.Get(n).IsName Then
                                                                            a.Put(n, aDic.GetAsName(n))
                                                                        ElseIf aDic.Get(n).IsString Then
                                                                            a.Put(n, aDic.GetAsString(n))
                                                                        ElseIf aDic.Get(n).IsArray Then
                                                                            a.Put(n, aDic.GetAsArray(n))
                                                                        ElseIf aDic.Get(n).IsStream Then
                                                                            a.Put(n, aDic.GetAsStream(n))
                                                                        Else
                                                                            a.Put(n, aDic.Get(n))
                                                                        End If
                                                                    Next
                                                                    If aDic.Get(PdfName.FS) Is Nothing Then
                                                                        a.Put(PdfName.FS, PdfName.URL)
                                                                    End If
                                                                    Dim pb As PushbuttonField = stamp.AcroFields.GetNewPushbuttonFromField(fldName)
                                                                    Dim fld As PdfFormField = pb.Field
                                                                    fld.Action = a
                                                                    stamp.AcroFields.ReplacePushbuttonField(fldName, fld)
                                                                    If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                        Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsDict(PdfName.A)
                                                                        stamp.AcroFields.Fields(fldName).GetMerged(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                    End If
                                                                    If Not stamp.AcroFields.Fields(fldName).GetWidget(0).Get(PdfName.A).IsIndirect Then
                                                                        Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetWidget(0).GetAsDict(PdfName.A)
                                                                        stamp.AcroFields.Fields(fldName).GetWidget(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                    End If
                                                                End If
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE
                                                            Case Else
                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                        End Select
                                                    Next
                                                    stamp.Writer.CloseStream = False
                                                    fdfReaderDoc.Close()
                                                    stamp.Close()
                                                    pdfReaderDoc.Close()
                                                End Using
                                                Session("saved") = mMerged.ToArray()
                                            End Using
                                        Catch exMerged As Exception
                                            TimeStampAdd(exMerged, debugMode)
                                            Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, pdfOwnerPassword & "")
                                        End Try
                                        Session("image_undo_history_0") = Session("saved")
                                        Session("output") = Session("saved")
                                        LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                        _cFDFDoc = cFDFDoc
                                        LoadPageList(Me.btnPage, cFDFDoc)
                                        pageIndex = 0
                                        cmbPercent.SelectedIndex = 3
                                    Case FDFApp.FDFDoc_Class.FDFType.XPDF
                                        addOpenHistoryListItem(fn)
                                        Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, pdfOwnerPassword & "")
                                        Session("image_undo_history_0") = Session("saved")
                                        Session("output") = Session("saved")
                                        LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                        _cFDFDoc = cFDFDoc
                                        LoadPageList(Me.btnPage, cFDFDoc)
                                        pageIndex = 0
                                        cmbPercent.SelectedIndex = 3
                                    Case Else
                                        Session("output") = Nothing
                                End Select
                            End If
                        Case "xdp"
                            cFDFDoc = cFDFApp.FDFOpenFromFile(fn, True, True)
                            If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                fpath = cFDFDoc.FDFGetFile & ""
                            Else
                                fpath = ""
                            End If
                            Dim cls As New clsPromptDialog
                            fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                            If Not String.IsNullOrEmpty(fpath & "") Then
                                cFDFDoc.FDFSetFile(fpath & "")
                                Select Case cFDFDoc.Determine_Type(fpath)
                                    Case FDFApp.FDFDoc_Class.FDFType.PDF
                                        addOpenHistoryListItem(fn)
                                        Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, "")
                                        Session("image_undo_history_0") = Session("saved")
                                        Session("output") = Session("saved")
                                        LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                        _cFDFDoc = cFDFDoc
                                        LoadPageList(Me.btnPage, cFDFDoc)
                                        pageIndex = 0
                                        cmbPercent.SelectedIndex = 3
                                    Case FDFApp.FDFDoc_Class.FDFType.XPDF
                                        addOpenHistoryListItem(fn)
                                        Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, "")
                                        Session("image_undo_history_0") = Session("saved")
                                        Session("output") = Session("saved")
                                        LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                        _cFDFDoc = cFDFDoc
                                        LoadPageList(Me.btnPage, cFDFDoc)
                                        pageIndex = 0
                                        cmbPercent.SelectedIndex = 3
                                    Case Else
                                        Session("output") = Nothing
                                End Select
                            End If
                        Case "jpg", "jpeg", "bmp", "gif", "png", "tif", "tiff"
                            ImportImage(fn, showPrompts)
                            LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                        Case "htm", "html"
                            addOpenHistoryListItem(fn)
                            Dim dMultipleChoice As New dialogMultiChoice(Me)
                            dMultipleChoice.lblMessage.Text = "Import HTML page as..."
                            Dim clsBut As New List(Of dialogMultiChoice.clsButton)
                            Dim btn As dialogMultiChoice.clsButton
                            btn = New dialogMultiChoice.clsButton("as HTML", True, DialogResult.OK)
                            clsBut.Add(btn)
                            btn = New dialogMultiChoice.clsButton("as Image", True, DialogResult.Yes)
                            clsBut.Add(btn)
                            btn = New dialogMultiChoice.clsButton("", False, DialogResult.No)
                            clsBut.Add(btn)
                            btn = New dialogMultiChoice.clsButton("Cancel", True, DialogResult.Cancel)
                            clsBut.Add(btn)
                            Select Case dMultipleChoice.ShowDialog(Me, "Import HTML page as:", clsBut.ToArray())
                                Case DialogResult.OK
                                    Convert_ImportURl2HTMLFile(fn & "")
                                Case DialogResult.Yes
                                    Convert_ImportURl2ImageFile(fn & "")
                                Case Else
                                    Exit Select
                            End Select
                            Return
                        Case Else
                            b = Session("output")
                            File.WriteAllBytes(fn, b)
                    End Select
                    Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                    fldRectangles = getFieldRectangles(True)
                    ignoreClick = True
                    A0_PictureBox2.Visible = True
                    If pnlFields.Visible Then pnlFields.Visible = False
                    A0_PictureBox1.Enabled = True
                    A0_PictureBox2.Enabled = True
                    pageIndex = 0
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            Finally
                timerPreventDefaultExpires.Enabled = True
                tm = New System.Text.StringBuilder
                CheckfieldNameExits("", True)
                If Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        If UseIntellegentCaching_Thumnails_ToolStripMenuItem.Checked Then
                            Load_Thumbnails1_Panel(False, True)
                        End If
                    End If
                End If
                Try
                    If Not Session Is Nothing Then
                        If Session.Length > 0 Then
                            _cFDFDoc = cFDFDoc(True)
                        End If
                    End If
                Catch exLoadFDFDoc As Exception
                    TimeStampAdd(exLoadFDFDoc, debugMode)
                End Try
                Try
                    If Not String.IsNullOrEmpty(fpath) And Not Session Is Nothing Then
                        If Session.Length > 0 Then
                            If True = True Then
                                Me.StatusToolStrip = "File loaded: " & (fpath & "")
                            End If
                        End If
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            End Try
            Me.StatusToolStrip = "File load: finishing..."
        Catch exMain1 As Exception
            Me.StatusToolStrip = "File load error: " & exMain1.Message.ToString()
            TimeStampAdd(exMain1, debugMode)
        Finally
            ignoreClick = False
            MenuBar_Enabled = True
            computerMemory()
            Try
                cUserRect.pauseDraw = False
                If Not String.IsNullOrEmpty(fpath) And Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        StatusToolStrip("Status: ", True) = "File loaded successfully."
                        Me.ToolStripStatusLabel2.Text = (fpath & "").ToString()
                        A0_LoadPDF_Properties()
                    Else
                        StatusToolStrip("Error: ", True) = "File not loaded."
                    End If
                Else
                    StatusToolStrip("Error: ", True) = "File not loaded."
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                StatusToolStrip("Error: ", True) = "File not loaded."
            End Try
        End Try
    End Sub
    Public Property MenuBar_Enabled() As Boolean
        Get
            Return FlowLayoutPanel1.Enabled
        End Get
        Set(ByVal value As Boolean)
            FlowLayoutPanel1.Enabled = value
            Me.Refresh()
        End Set
    End Property
    Private Sub ComboBox1_DragEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles ComboBox1.DragEnter
        pnlFields_DragEnter(Me, e)
    End Sub
    Private Sub ComboBox1_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles ComboBox1.MouseDown
        pnlFields_MouseDown(Me, e)
    End Sub
    Private Sub ComboBox1_MouseLeave(ByVal sender As Object, ByVal e As System.EventArgs) Handles ComboBox1.MouseLeave
        pnlFields_MouseLeave(Me, e)
    End Sub
    Private Sub ComboBox1_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles ComboBox1.MouseMove
        pnlFields_MouseMove(Me, e)
    End Sub
    Public Sub ComboBox1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox1.SelectedIndexChanged
        lblFieldType.Text = "PROPERTIES"
        PDFField_Tooltip.Multiline = False
        btnField_AddButton.Visible = False
        btnField_AddListBox.Visible = False
        btnField_AddRadioButton.Visible = False
        btnField_AddTextField.Visible = False
        btnField_AddCombobox.Visible = False
        btnField_AddSignatureField.Visible = False
        PDFEdit_Actions.Visible = False
        Dim tabSel As TabPage = TabControl1.SelectedTab
        lblPDFField_Value.Text = "Value"
        TabControl1.TabPages.Remove(TabPage3)
        TabControl1.TabPages.Remove(TabPage4)
        TabControl1.TabPages.Remove(TabPage5)
        TabControl1.TabPages.Remove(TabPage6)
        TabControl1.TabPages.Remove(TabPage7)
        TabControl1.TabPages.Remove(TabPage8)
        TabControl1.TabPages.Remove(TabPage9)
        TabControl1.TabPages.Remove(TabPage10)
        TabControl1.TabPages.Remove(TabPage11)
        TabControl1.TabPages.Remove(TabPage12)
        TabControl1.TabPages.Remove(TabPage13)
        PDFField_Listbox_Value.Visible = False
        Select Case ComboBox1.SelectedItem.ToString.ToLower
            Case "Button".ToLower

                ShowHideOtherPanels(PDFEdit_Options_SubmitButtons)
                btnField_AddButton.Visible = True
                PDFEdit_Actions.Visible = True
                lblPDFField_Value.Text = "Caption"
                lblPDFField_Value.Visible = False
                PDFField_Value.Visible = False
                PDFField_Value_Checked.Visible = False
                TabControl1.TabPages.Add(TabPage3)
                TabControl1.TabPages.Add(TabPage4)
            Case "TextBox".ToLower
                ShowHideOtherPanels(PDFEdit_Options_Textboxes)
                PDFField_Tooltip.Multiline = True
                btnField_AddTextField.Visible = True
                PDFEdit_Actions.Visible = True
                lblPDFField_Value.Visible = True
                PDFField_Value.Visible = True
                PDFField_Value_Checked.Visible = False
                If TabControl1.TabPages.Count > 3 Then
                    TabControl1.TabPages.Insert(3, TabPage3)
                    TabControl1.TabPages.Insert(4, TabPage4)
                    TabControl1.TabPages.Insert(5, TabPage5)
                    TabControl1.TabPages.Insert(6, TabPage6)
                    TabControl1.TabPages.Insert(7, TabPage7)
                Else
                    TabControl1.TabPages.Add(TabPage3)
                    TabControl1.TabPages.Add(TabPage4)
                    TabControl1.TabPages.Add(TabPage5)
                    TabControl1.TabPages.Add(TabPage6)
                    TabControl1.TabPages.Add(TabPage7)
                End If
            Case "ComboBox".ToLower
                ShowHideOtherPanels(PDFEdit_Options_ComboBoxes)
                btnField_AddCombobox.Visible = True
                PDFEdit_Actions.Visible = True
                lblPDFField_Value.Visible = False
                PDFField_Value.Visible = False
                PDFField_Value_Checked.Visible = False
                If TabControl1.TabPages.Count > 3 Then
                    TabControl1.TabPages.Insert(3, TabPage3)
                    TabControl1.TabPages.Insert(4, TabPage4)
                    TabControl1.TabPages.Insert(5, TabPage5)
                    TabControl1.TabPages.Insert(6, TabPage6)
                    TabControl1.TabPages.Insert(7, TabPage7)
                Else
                    TabControl1.TabPages.Add(TabPage3)
                    TabControl1.TabPages.Add(TabPage4)
                    TabControl1.TabPages.Add(TabPage5)
                    TabControl1.TabPages.Add(TabPage6)
                    TabControl1.TabPages.Add(TabPage7)
                End If
            Case "ListBox".ToLower
                PDFField_Listbox_Value.Visible = True
                If TabControl1.TabPages.Count > 3 Then
                    TabControl1.TabPages.Insert(3, TabPage3)
                    TabControl1.TabPages.Insert(4, TabPage9)
                Else
                    TabControl1.TabPages.Add(TabPage3)
                    TabControl1.TabPages.Add(TabPage9)
                End If
                ShowHideOtherPanels(PDFEdit_Options_ComboBoxes)
                btnField_AddListBox.Visible = True
                PDFEdit_Actions.Visible = True
                lblPDFField_Value.Visible = False
                PDFField_Value.Visible = False
                PDFField_Value_Checked.Visible = False
            Case "RadioButton".ToLower
                ShowHideOtherPanels(PDFEdit_Options_RadioButtons)
                btnField_AddRadioButton.Visible = True
                PDFEdit_Actions.Visible = True
                lblPDFField_Value.Visible = True
                PDFField_Value.Visible = False
                TabControl1.TabPages.Add(TabPage3)
                TabControl1.TabPages.Add(TabPage4)
                PDFField_Value_Checked.Visible = True
            Case "CheckBox".ToLower
                ShowHideOtherPanels(PDFEdit_Options_RadioButtons)
                btnField_AddCheckBox.Visible = True
                PDFEdit_Actions.Visible = True
                lblPDFField_Value.Visible = True
                PDFField_Value.Visible = False
                PDFField_Value_Checked.Visible = True
                TabControl1.TabPages.Add(TabPage3)
                TabControl1.TabPages.Add(TabPage4)
            Case "Data".ToLower
                TabControl1.TabPages.Add(TabPage8)
                LoadDataFieldList(btnDataFieldSelection)
                ShowHideOtherPanels(PDFEdit_DataFields)
                If Not String.IsNullOrEmpty(fldNameHighlighted) Then
                    btnDataFieldSelection.SelectedItem = fldNameHighlighted
                End If
                TabControl1.SelectedIndex = TabControl1.TabCount - 1
                PDFEdit_Actions.Visible = True
                lblPDFField_Value.Visible = False
                PDFField_Value.Visible = False
                PDFField_Value_Checked.Visible = False
            Case "Signature".ToLower
                btnField_AddSignatureField.Visible = True
                PDFEdit_Actions.Visible = True
                TabControl1.TabPages.Add(TabPage4)
                TabControl1.TabPages.Add(TabPage10)
                TabControl1.TabPages.Add(TabPage13)
                PDFField_Value_Checked.Visible = False
            Case "Images".ToLower
                TabControl1.TabPages.Clear()
                TabControl1.TabPages.Add(TabPage12)
                ImageRotation_ImageRotation.SelectedIndex = 0
                ImageRotation_ImageFlip.SelectedIndex = 0
            Case Else
                lblFieldType.Text = "Select a field"
                lblPDFField_Value.Visible = False
                PDFField_Value.Visible = False
                ShowHideOtherPanels(Nothing)
                PDFField_Value_Checked.Visible = False
        End Select
        TabControl1.TabPages.Add(TabPage11)
        Try
            If TabControl1.TabPages.Contains(tabSel) Then
                TabControl1.SelectTab(tabSel.Name)
            Else
                TabControl1.SelectedIndex = 0
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        PDFField_FieldNameRandom(False)
        Try
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub LoadPictureBox(ByVal imgImage As System.Drawing.Image)
        Try
            If Not imgImage Is Nothing Then
                imgNewImage = DirectCast(imgImage.Clone, System.Drawing.Image)
                ImageRotation_PictureBox.Image = imgNewImage.Clone
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub LoadPictureBox(ByVal imgData() As Byte)
        Try
            If Not imgData Is Nothing Then
                If imgData.Length > 0 Then
                    imgNewImage = System.Drawing.Image.FromStream(New System.IO.MemoryStream(imgData))
                    ImageRotation_PictureBox.Image = imgNewImage.Clone
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub LoadPictureBox(ByVal imgPath As String)
        Try
            Dim imgData() As Byte = System.IO.File.ReadAllBytes(imgPath & "")
            If Not imgData Is Nothing Then
                If imgData.Length > 0 Then
                    imgNewImage = System.Drawing.Image.FromStream(New System.IO.MemoryStream(imgData))
                    ImageRotation_PictureBox.Image = imgNewImage.Clone
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function getImageRotation() As System.Drawing.RotateFlipType
        Try
            Select Case ImageRotation_ImageRotation.SelectedIndex
                Case 0
                    Select Case ImageRotation_ImageFlip.SelectedIndex
                        Case 0
                            rotType = RotateFlipType.RotateNoneFlipNone
                        Case 1
                            rotType = RotateFlipType.RotateNoneFlipY
                        Case 2
                            rotType = RotateFlipType.RotateNoneFlipX
                        Case 3
                            rotType = RotateFlipType.RotateNoneFlipXY
                    End Select
                Case 1
                    Select Case ImageRotation_ImageFlip.SelectedIndex
                        Case 0
                            rotType = RotateFlipType.Rotate90FlipNone
                        Case 1
                            rotType = RotateFlipType.Rotate90FlipY
                        Case 2
                            rotType = RotateFlipType.Rotate90FlipX
                        Case 3
                            rotType = RotateFlipType.Rotate90FlipXY
                    End Select
                Case 2
                    Select Case ImageRotation_ImageFlip.SelectedIndex
                        Case 0
                            rotType = RotateFlipType.Rotate180FlipNone
                        Case 1
                            rotType = RotateFlipType.Rotate180FlipY
                        Case 2
                            rotType = RotateFlipType.Rotate180FlipX
                        Case 3
                            rotType = RotateFlipType.Rotate180FlipXY
                    End Select
                Case 3
                    Select Case ImageRotation_ImageFlip.SelectedIndex
                        Case 0
                            rotType = RotateFlipType.Rotate270FlipNone
                        Case 1
                            rotType = RotateFlipType.Rotate270FlipY
                        Case 2
                            rotType = RotateFlipType.Rotate270FlipX
                        Case 3
                            rotType = RotateFlipType.Rotate270FlipXY
                    End Select
                Case 4
                    rotType = RotateFlipType.RotateNoneFlipX
                Case Else
                    Select Case ImageRotation_ImageFlip.SelectedIndex
                        Case 0
                            rotType = RotateFlipType.RotateNoneFlipNone
                        Case 1
                            rotType = RotateFlipType.RotateNoneFlipY
                        Case 2
                            rotType = RotateFlipType.RotateNoneFlipX
                        Case 3
                            rotType = RotateFlipType.RotateNoneFlipXY
                    End Select
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return rotType
    End Function
    Private Sub ImageRotation_ImageRotation_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImageRotation_ImageRotation.SelectedIndexChanged
        If ImageRotation_ImageRotation.SelectedIndex = 4 Then
            ImageRotation_ImageFlip.SelectedIndex = 2
            ImageRotation_ImageFlip.Enabled = False
        Else
            ImageRotation_ImageFlip.Enabled = True
        End If
        rotType = getImageRotation()
        If Not imgNewImage Is Nothing Then
            Dim imgTemp As System.Drawing.Image = imgNewImage.Clone()
            imgTemp.RotateFlip(rotType)
            ImageRotation_PictureBox.Image = DirectCast(imgTemp.Clone(), System.Drawing.Image)
        End If
    End Sub
    Private Sub ImageRotation_ImageFlip_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImageRotation_ImageFlip.SelectedIndexChanged
        rotType = getImageRotation()
        If Not imgNewImage Is Nothing Then
            Dim imgTemp As System.Drawing.Image = imgNewImage.Clone()
            imgTemp.RotateFlip(rotType)
            ImageRotation_PictureBox.Image = DirectCast(imgTemp.Clone(), System.Drawing.Image)
        End If
    End Sub
    Public Sub PDFField_FieldNameRandom(Optional ByVal forceNew As Boolean = False)
        Try
RedoFieldName:
            If forceNew Then
                fldNameHighlighted = ""
            End If
            If String.IsNullOrEmpty(fldNameHighlighted & "") Or forceNew Then
                Dim fldName As String = ComboBox1.Items(ComboBox1.SelectedIndex).ToString() & "Field_" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 3).ToUpper().ToString()
                Select Case ComboBox1.SelectedIndex
                    Case 0
                        PDFField_Name.Text = fldName
                    Case 1
                        PDFField_Name.Text = fldName
                    Case 2
                        PDFField_Name.Text = fldName
                    Case 3
                        PDFField_Name.Text = fldName
                    Case 4
                        PDFField_Name.Text = fldName
                    Case 5
                        PDFField_Name.Text = fldName
                    Case 6
                        PDFField_Name.Text = fldName
                    Case Else
                End Select
                If CheckfieldNameExits(fldName) Then
                    GoTo RedoFieldName
                End If
            Else
                Dim fldName As String = fldNameHighlighted
                PDFField_Name.Text = fldName
            End If
            lblFieldType.Text = PDFField_Name.Text & ""
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub ShowHideOtherPanels(ByRef pnlVisible As Panel)
        PDFEdit_Options_Textboxes.Visible = False
        PDFEdit_Options_ComboBoxes.Visible = False
        PDFEdit_Options_RadioButtons.Visible = False
        PDFEdit_Options_SubmitButtons.Visible = False
        PDFEdit_Options_Textboxes.Visible = False
        PDFEdit_DataFields.Visible = False
        If Not pnlVisible Is Nothing Then
            pnlVisible.Visible = True
        End If
    End Sub
    Public Sub pnlFields_DragEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles pnlFields.DragEnter
        e.Effect = DragDropEffects.Move
    End Sub
    Public Sub pnlFields_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles pnlFields.MouseDown
        If e.Button = Windows.Forms.MouseButtons.Left Then
            pnlFields_Dragging = True
            mousex = Windows.Forms.Cursor.Position.X - pnlFields.Left
            mousey = Windows.Forms.Cursor.Position.Y - pnlFields.Top
        End If
    End Sub
    Public Sub pnlFields_MouseLeave(ByVal sender As Object, ByVal e As System.EventArgs) Handles pnlFields.MouseLeave
        pnlFields_Dragging = False
    End Sub
    Public Sub pnlFields_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles pnlFields.MouseMove
        If pnlFields_Dragging Then
            If e.Button = Windows.Forms.MouseButtons.Left Then
                pnlFields_Dragging = True
                pnlFields.Top = Windows.Forms.Cursor.Position.Y - mousey
                pnlFields.Left = Windows.Forms.Cursor.Position.X - mousex
                If pnlFields.Right >= Me.Width Then
                    pnlFields.Left = Me.Width - pnlFields.Width
                ElseIf pnlFields.Left <= 0 Then
                    pnlFields.Left = 0
                End If
                If pnlFields.Top <= 0 Then
                    pnlFields.Top = 0
                ElseIf pnlFields.Bottom >= A0_PictureBox1.Height Then
                    pnlFields.Top = A0_PictureBox1.Height - pnlFields.Height
                End If
            End If
        End If
    End Sub
    Public Sub pnlFields_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles pnlFields.MouseUp
        pnlFields_Dragging = False
    End Sub
    Public Sub refreshPDFImage()
        Dim b As Boolean = cUserRect.pauseDraw
        cUserRect.pauseDraw = False
        A0_LoadPDF(True, False, True, CInt(page), True)
        cUserRect.pauseDraw = b
    End Sub
    Public Sub btnField_AddTextField_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnField_AddTextField.Click
        Dim rectTempScreen As System.Drawing.RectangleF = cUserRect.rectScreen
        Dim rectTempPDF As System.Drawing.RectangleF = cUserRect.rect
        If PDFField_Dimensions_Paste_0_Left_llx.Checked Or PDFField_Dimensions_Paste_2_Right_urx.Checked Then
            btnWidth.Text = CSng(btnRight.Text) - CSng(btnLeft.Text)
        ElseIf PDFField_Dimensions_Paste_4_Width.Checked Then 'And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked Or Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
            btnWidth.Text = _dimensionsList(4) + 0
            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            ElseIf PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                btnLeft.Text = CSng(btnRight.Text) - CSng(btnWidth.Text)
            Else
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            End If
        End If
        If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
            Else
                btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
            End If
        ElseIf PDFField_Dimensions_Paste_5_Height.Checked Then 'And (Not PDFField_Dimensions_Paste_3_Top_ury.Checked Or Not PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
            btnHeight.Text = _dimensionsList(5) + 0
            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                Else
                    btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                End If
            Else
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            End If
        End If
        If Not fldNameHighlighted.IsNullOrEmpty() And CheckfieldNameExits(fldNameHighlighted & "") Then

            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text))
            cUserRect.rect = New System.Drawing.RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            Session("output") = A0_PDFFormField_Modify(Session("output"), fldNameHighlighted, Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r, -1, -1, True)
        ElseIf CheckfieldNameExits(Me.PDFField_Name.Text & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New System.Drawing.RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            Session("output") = A0_PDFFormField_Modify(Session("output"), Me.PDFField_Name.Text & "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r, -1, -1, True)
        Else
            Me.lblFieldType.Text = "PROPERTIES"
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New System.Drawing.RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            Session("output") = A0_PDFFormField_Modify(Session("output"), "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r, -1, -1, True)
        End If
        calculateFields()
        Return
    End Sub
    Private Sub PictureBox1_Invalidated(ByVal sender As Object, ByVal e As System.Windows.Forms.InvalidateEventArgs) Handles A0_PictureBox2.Invalidated
    End Sub
    Private Sub PictureBox2_Paint(ByVal sender As Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles A0_PictureBox2.Paint
        Dim eMouse As Point = A0_PictureBox2.PointToClient(Cursor.Position)
        Try
            pauseBtnTextChanged = True
            If mMove Then
                mMove = mMove
            End If
            If Not lockCursor And Not isDragingImage And Not _dragging Then
                cUserRect.ChangeCursor(eMouse)
            End If
            If cUserRect.mIsClick = False Then
                GoTo GOTO_END
            ElseIf preventDragging = True Then
            ElseIf Not _dragging Then
            End If
            Dim backupRect As RectangleF = cUserRect.rect
            Dim rectScreenTemp As RectangleF = cUserRect.rectScreen()
            If rectScreenTemp.Right > A0_PictureBox1.Width Then
                rectScreenTemp = New System.Drawing.RectangleF(A0_PictureBox1.Width - rectScreenTemp.Width - 1, rectScreenTemp.Top, rectScreenTemp.Width, rectScreenTemp.Height)
                _clickPoints.Clear()
                _clickPoints.Add(New PointF(rectScreenTemp.Left, rectScreenTemp.Bottom))
                _clickPoints.Add(New PointF(rectScreenTemp.Right, rectScreenTemp.Top))
            ElseIf rectScreenTemp.Bottom > A0_PictureBox1.Height Then
                rectScreenTemp = New System.Drawing.RectangleF(rectScreenTemp.Left, A0_PictureBox1.Height - rectScreenTemp.Height - 1, rectScreenTemp.Width, rectScreenTemp.Height)
                _clickPoints.Clear()
                _clickPoints.Add(New PointF(rectScreenTemp.Left, rectScreenTemp.Bottom))
                _clickPoints.Add(New PointF(rectScreenTemp.Right, rectScreenTemp.Top))
            End If
            'Dim drawBox As Boolean = False
            If cUserRect.mIsClick Or _dragging Or mMove Or cUserRect.nodeSelectedTmp <> clsUserRect.PosSizableRect.None Or cUserRect.mPictureBox.Cursor <> Cursors.Default Then
                Dim tmprect As RectangleF = rectScreenTemp
                If preventDragging = False Then
                    cUserRect.rectBackup = cUserRect.rect
                    drawBox = True
                    If cUserRect.nodeSelected <> clsUserRect.PosSizableRect.None Then
                        'If pnlFields.Visible Then pnlFields.Visible = False
                    End If
                    Select Case cUserRect.nodeSelectedTmp
                        Case clsUserRect.PosSizableRect.LeftUp
                            tmprect.X += eMouse.X - cUserRect.oldX
                            tmprect.Width -= eMouse.X - cUserRect.oldX
                            tmprect.Y += eMouse.Y - cUserRect.oldY
                            tmprect.Height -= eMouse.Y - cUserRect.oldY
                            cUserRect.rect = getRectanglePDF(tmprect)
                            lockCursor = True
                            Exit Select
                        Case clsUserRect.PosSizableRect.LeftMiddle
                            tmprect.X += eMouse.X - cUserRect.oldX
                            tmprect.Width -= eMouse.X - cUserRect.oldX
                            cUserRect.rect = getRectanglePDF(tmprect)
                            lockCursor = True
                            Exit Select
                        Case clsUserRect.PosSizableRect.LeftBottom
                            tmprect.Width -= eMouse.X - cUserRect.oldX
                            tmprect.X += eMouse.X - cUserRect.oldX
                            tmprect.Height += eMouse.Y - cUserRect.oldY
                            cUserRect.rect = getRectanglePDF(tmprect)
                            lockCursor = True
                            Exit Select
                        Case clsUserRect.PosSizableRect.BottomMiddle
                            tmprect.Height += eMouse.Y - cUserRect.oldY
                            cUserRect.rect = getRectanglePDF(tmprect)
                            lockCursor = True
                            Exit Select
                        Case clsUserRect.PosSizableRect.RightUp
                            tmprect.Width += eMouse.X - cUserRect.oldX
                            tmprect.Y += eMouse.Y - cUserRect.oldY
                            tmprect.Height -= eMouse.Y - cUserRect.oldY
                            cUserRect.rect = getRectanglePDF(tmprect)
                            lockCursor = True
                            Exit Select
                        Case clsUserRect.PosSizableRect.RightBottom
                            tmprect.Width += eMouse.X - cUserRect.oldX
                            tmprect.Height += eMouse.Y - cUserRect.oldY
                            cUserRect.rect = getRectanglePDF(tmprect)
                            lockCursor = True
                            Exit Select
                        Case clsUserRect.PosSizableRect.RightMiddle
                            tmprect.Width += eMouse.X - cUserRect.oldX
                            cUserRect.rect = getRectanglePDF(tmprect)
                            lockCursor = True
                            Exit Select
                        Case clsUserRect.PosSizableRect.UpMiddle
                            tmprect.Y += eMouse.Y - cUserRect.oldY
                            tmprect.Height -= eMouse.Y - cUserRect.oldY
                            cUserRect.rect = getRectanglePDF(tmprect)
                            lockCursor = True
                            Exit Select
                        Case clsUserRect.PosSizableRect.Middle
                            tmprect.X = tmprect.X + eMouse.X - cUserRect.oldX
                            tmprect.Y = tmprect.Y + eMouse.Y - cUserRect.oldY
                            cUserRect.rect = getRectanglePDF(tmprect)
                            lockCursor = True
                            mMove = True
                            Exit Select
                        Case Else
                            Exit Select
                    End Select
                    cUserRect.oldX = eMouse.X
                    cUserRect.oldY = eMouse.Y
                    'If drawBox Then
                    'cUserRect.DrawPictureBoxImageBox()
                    'End If
                End If
            End If
            Dim moveResize As Boolean = False
            Try
                'Dim eMouse As Point = A0_PictureBox2.PointToClient(Cursor.Position)
                If Not lockCursor Then
                End If
                If cUserRect.nodeSelectedTmp = clsUserRect.PosSizableRect.Middle Then
                    GoTo GOTO_END
                End If
                If mMove Then
                End If
                If preventDragging = True Then
                    GoTo GOTO_END
                End If
                rectScreenTemp = cUserRect.rectScreen()
                If mMove Or cUserRect.mIsClick Then
                    Dim x As Boolean = True
                    If eMouse.X >= A0_PictureBox1.Width Then
                    ElseIf eMouse.Y >= A0_PictureBox1.Height Then
                    ElseIf eMouse.X <= 0 Or eMouse.Y <= 0 Then
                        If preventDragging = True Then
                            GoTo GOTO_END
                        End If
                    End If
                    If _clickPoints.Count = 1 Then
                        _clickPoints.Add(eMouse)
                    ElseIf _clickPoints.Count >= 2 Then
                        Do Until _clickPoints.Count = 2
                            _clickPoints.RemoveAt(0)
                        Loop
                        _clickPoints(_clickPoints.Count - 1) = (eMouse)
                    End If
                Else
                    If Not _dragging And _clickPoints.Count <= 1 Then
                        GoTo GOTO_END
                    End If
                End If
                If (_dragging And _clickPoints.Count > 1) Then
                    Dim ptOrigin As New System.Drawing.Point
                    Dim tempTop As Single = 0.0F, tempBottom As Single = 0.0F, tempLeft As Single = 0.0F, tempRight As Single = 0.0F, tempWidth As Single = 0.0F, tempHeight As Single = 0.0F
                    If _clickPoints(0).Y > _clickPoints(1).Y Then
                        'btnTop.Text = _clickPoints(1).Y.ToString
                        tempTop = _clickPoints(1).Y
                        'btnBottom.Text = _clickPoints(0).Y.ToString
                        tempBottom = _clickPoints(0).Y
                        ptOrigin.Y = CInt(_clickPoints(1).Y)
                    Else
                        'btnTop.Text = _clickPoints(0).Y.ToString
                        tempTop = _clickPoints(0).Y
                        'btnBottom.Text = _clickPoints(1).Y.ToString
                        tempBottom = _clickPoints(1).Y
                        ptOrigin.Y = CInt(_clickPoints(0).Y)
                    End If
                    'btnHeight.Text = Math.Abs(CSng(btnTop.Text) - CSng(btnBottom.Text)).ToString
                    tempHeight = Math.Abs(CSng(tempTop) - CSng(tempBottom))
                    If _clickPoints(0).X > _clickPoints(1).X Then
                        'btnLeft.Text = _clickPoints(1).X.ToString
                        tempLeft = _clickPoints(1).X
                        'btnRight.Text = _clickPoints(0).X.ToString
                        tempRight = _clickPoints(0).X
                        ptOrigin.X = CInt(_clickPoints(1).X)
                    Else
                        'btnLeft.Text = _clickPoints(0).X.ToString
                        tempLeft = _clickPoints(0).X
                        'btnRight.Text = _clickPoints(1).X.ToString
                        tempRight = _clickPoints(1).X
                        ptOrigin.X = CInt(_clickPoints(0).X)
                    End If
                    'btnWidth.Text = Math.Abs(CSng(btnRight.Text) - CSng(btnLeft.Text)).ToString
                    tempWidth = Math.Abs(CSng(tempRight) - CSng(tempLeft))
                    If CSng(tempHeight) > 1 And CSng(tempWidth) > 1 Then
                        If Not _pictureBoxImage Is Nothing Then
                            Dim tmpRect As New RectangleF(ptOrigin.X, ptOrigin.Y, CSng(tempWidth), CSng(tempHeight))
                            cUserRect.rect = getRectanglePDF(tmpRect)
                            btnTop.Text = cUserRect.rect.Top
                            btnBottom.Text = cUserRect.rect.Bottom
                            btnLeft.Text = cUserRect.rect.Left
                            btnRight.Text = cUserRect.rect.Right
                            btnWidth.Text = cUserRect.rect.Width
                            btnHeight.Text = cUserRect.rect.Height
                            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text)) 'New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text))
                        End If
                    End If
                ElseIf (fldNameHighlighted.isNullOrEmpty() And _clickPoints.Count > 1) Then
                    btnTop.Text = cUserRect.rect.Top
                    btnBottom.Text = cUserRect.rect.Bottom
                    btnLeft.Text = cUserRect.rect.Left
                    btnRight.Text = cUserRect.rect.Right
                    btnWidth.Text = cUserRect.rect.Width
                    btnHeight.Text = cUserRect.rect.Height
                Else
                    ToolStripStatusLabel_XY.Text = "" & eMouse.X & "," & eMouse.Y & ""
                End If
            Catch exMain As Exception
                TimeStampAdd(exMain, debugMode) ' NK 2016-06-30exMain Else Err.Clear() ' Err.Clear()  ' NK3 ' 
            Finally
                preventDragging = False
                If Not cUserRect.rect = Nothing Then
                    If cUserRect.rect.Width > 1 And cUserRect.rect.Height > 1 Or drawBox Then
                        If Not cUserRect.rectOld = cUserRect.rect Or Not cUserRect.nodeSelected = clsUserRect.PosSizableRect.None Or drawBox Then
                            'A0_PictureBox2.Invalidate()
                            cUserRect.DrawPictureBoxImageBox()
                            'A0_PictureBox2.Invalidate()
                        End If
                    End If
                End If
            End Try
        Catch ex As Exception
            Err.Clear()
        Finally
            pauseBtnTextChanged = False
            Try
                If Not cUserRect.rect = Nothing Then
                    Dim r As System.Drawing.RectangleF = cUserRect.rect
                    'ToolStripStatusLabel1.Text = "(" & r.Left & "," & (getPDFHeight(Session) - r.Top) & "," & r.Width & "," & r.Height & ")"
                    ToolStripStatusLabel1.Text = "(" & CInt(r.Width) & "," & CInt(r.Height) & ")," & CInt(cUserRect.rectScreen.Width) & "," & CInt(cUserRect.rectScreen.Height) & ""
                    ToolStripStatusLabel1.Visible = True
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End Try
GOTO_END:
        pauseBtnTextChanged = False
        Try
            If PictureBox1_Panel.VerticalScroll.Value > PictureBox1_Panel.VerticalScroll.Maximum Then
                scrollValue = PictureBox1_Panel.VerticalScroll.Maximum
                'PictureBox1_Panel.VerticalScroll.Value = scrollValue
            ElseIf PictureBox1_Panel.VerticalScroll.Value < 0 Then
                scrollValue = 0
                'PictureBox1_Panel.VerticalScroll.Value = scrollValue
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        'If scrollValue > 0 Then
        '    'PictureBox1_Panel.VerticalScroll.Value = scrollValue
        'End If
    End Sub
    Private Sub lblFieldType_DragEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles lblFieldType.DragEnter
        pnlFields_DragEnter(Me, e)
    End Sub
    Private Sub lblFieldType_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles lblFieldType.MouseDown
        pnlFields_MouseDown(Me, e)
    End Sub
    Private Sub lblFieldType_MouseLeave(ByVal sender As Object, ByVal e As System.EventArgs) Handles lblFieldType.MouseLeave
        pnlFields_MouseLeave(Me, e)
    End Sub
    Private Sub lblFieldType_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles lblFieldType.MouseMove
        pnlFields_MouseMove(Me, e)
    End Sub
    Public Sub btnField_AddRadioButton_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnField_AddRadioButton.Click
        Dim rectTempScreen As System.Drawing.RectangleF = cUserRect.rectScreen
        Dim rectTempPDF As System.Drawing.RectangleF = cUserRect.rect
        If PDFField_Dimensions_Paste_0_Left_llx.Checked Or PDFField_Dimensions_Paste_2_Right_urx.Checked Then
            btnWidth.Text = CSng(btnRight.Text) - CSng(btnLeft.Text)
        ElseIf PDFField_Dimensions_Paste_4_Width.Checked Then 'And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked Or Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
            btnWidth.Text = _dimensionsList(4) + 0
            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            ElseIf PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                btnLeft.Text = CSng(btnRight.Text) - CSng(btnWidth.Text)
            Else
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            End If
        End If
        If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
            Else
                btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
            End If
        ElseIf PDFField_Dimensions_Paste_5_Height.Checked Then 'And (Not PDFField_Dimensions_Paste_3_Top_ury.Checked Or Not PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
            btnHeight.Text = _dimensionsList(5) + 0
            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                Else
                    btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                End If
            Else
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            End If
        End If
        Dim r As iTextSharp.text.Rectangle, r2 As System.Drawing.RectangleF = cUserRect.rect
        If Not fldNameHighlighted.IsNullOrEmpty() And CheckfieldNameExits(fldNameHighlighted & "") Then
            r = New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), fldNameHighlighted, Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
            cUserRect.rect = r2
            A0_LoadPDF(True)
        ElseIf CheckfieldNameExits(Me.PDFField_Name.Text & "") Then
            r = New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), Me.PDFField_Name.Text & "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
            cUserRect.rect = r2
            A0_LoadPDF(True)
        Else
            Me.lblFieldType.Text = "PROPERTIES"
            r = New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
            cUserRect.rect = r2
            A0_LoadPDF(True)
        End If
        calculateFields()

        Return
    End Sub
    Private Sub TextField_Name_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Name.TextChanged
        If Not PDFField_Name.Text = "" Then
            RefreshTimerFieldName()
        End If
    End Sub
    Public Sub RefreshTimerFieldName()
        If Not PDFField_Name.Text = "" Then
            Try
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            PdfForm_FieldNames_UpdateButton()
        End If
    End Sub
    Private Sub PDFField_Name_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        If CheckfieldNameExits(PDFField_Name.Text & "") Then
            Me.lblFieldType.Text = "Fieldname exists"
        Else
            Me.lblFieldType.Text = "PROPERTIES"
        End If
    End Sub
    Private Sub btnUndo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnUndo.Click
        Undo()
    End Sub
    Private Sub btnRedo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnRedo.Click
        Redo()
    End Sub
    Private Sub btnPreview_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPreview.Click
        Dim tmpFn As String = ApplicationDataFolder(False, "temp") & "_preview_" & System.IO.Path.GetFileNameWithoutExtension(fpath) & ".pdf"
        If Not String.IsNullOrEmpty(tmpFn) Then
            File.WriteAllBytes(tmpFn, Session("output"))
            Process.Start(tmpFn)
        End If
    End Sub
    Private Sub btnNav_Next_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnNav_Next.Click
        Try
            If ignoreClick = True Then
                If DoEvents_Wait(250) Then
                    Return
                End If
            Else
                If btnPage.Items.Count > 1 And pageIndex < btnPage.Items.Count - 1 Then
                    ignoreClick = False
                    pageIndex += 1
                End If
            End If
            Return
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not PictureBox1_Panel.Focused Then PictureBox1_Panel.Focus()
        End Try
    End Sub
    Private Sub btnNav_Last_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnNav_Last.Click
        Try
            If ignoreClick = True Then
                If DoEvents_Wait(250) Then
                    Return
                End If
            Else
                If btnPage.Items.Count > 1 Then
                    ignoreClick = False
                    pageIndex = btnPage.Items.Count - 1
                End If
            End If
            Return
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not PictureBox1_Panel.Focused Then PictureBox1_Panel.Focus()
        End Try
    End Sub
    Private Sub btnNav_First_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnNav_First.Click
        Try
            If ignoreClick = True Then
                If DoEvents_Wait(250) Then
                    Return
                End If
            Else
                If btnPage.Items.Count > 1 Then
                    ignoreClick = False
                    pageIndex = 0
                End If
            End If
            Return
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not PictureBox1_Panel.Focused Then PictureBox1_Panel.Focus()
        End Try
    End Sub
    Private Sub btnNav_Previous_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnNav_Previous.Click
        Try
            If ignoreClick = True Then
                If DoEvents_Wait(250) Then
                    Return
                End If
            Else
                If btnPage.Items.Count > 1 And pageIndex > 0 Then
                    ignoreClick = False
                    pageIndex -= 1
                End If
            End If
            Return
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not PictureBox1_Panel.Focused Then PictureBox1_Panel.Focus()
        End Try
    End Sub
    Private Sub btnDataFieldSelection_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDataFieldSelection.SelectedIndexChanged
        Try
            cFDFDoc = cFDFApp.PDFOpenFromBuf(Session("output"), True, True)
            Dim fld As String = GetAllFieldsOnPage(Session("output"), pdfOwnerPassword, Me.page).ToArray()(btnDataFieldSelection.SelectedIndex)
            btnDataFieldName.Text = fld & ""
            btnDataFieldValue.Text = cFDFDoc.XDPGetValue(fld, True) & ""
            Dim ft As Integer = Me.GetFormFieldType(Session(), fld)
            For Each k As String In dicFieldTypes.Keys
                If dicFieldTypes(k) = ft Then
                    btnDataFieldType.Text = k.ToString
                    btnDataFieldTypeSelection.SelectedItem = btnDataFieldType.Text
                    Exit For
                End If
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub LoadDataFieldList(ByRef ddl As ComboBox)
        Try
            ddl.Items.Clear()
            For Each f As String In GetAllFieldsOnPage(Session("output"), pdfOwnerPassword, Me.page).ToArray
                ddl.Items.Add(f)
            Next
            If ddl.Items.Count > 0 Then ddl.SelectedIndex = 0
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function IsPasswordProtected(ByVal pdfFullname As String) As Boolean
        Try
            Using PdfReader As New PdfReader(pdfFullname)
                Return PdfReader.IsEncrypted
            End Using
        Catch ex As iTextSharp.text.exceptions.BadPasswordException
            Return True
        End Try
    End Function
    Public Function IsPasswordValid(ByVal pdfFullname As String, ByVal password As Byte()) As Boolean
        Try
            Using PdfReader As New PdfReader(pdfFullname, password)
                Return True
            End Using

        Catch ex As iTextSharp.text.exceptions.BadPasswordException
            Return False
        End Try
    End Function
    Public Function IsPasswordValid(ByVal pdfFullname As String, ByVal password As String) As Boolean
        Try
            Using PdfReader As New PdfReader(pdfFullname, System.Text.Encoding.ASCII.GetBytes(password))
                Return True
            End Using
        Catch ex As iTextSharp.text.exceptions.BadPasswordException
            Return False
        End Try
    End Function
    Public Function IsPasswordProtected(ByVal pdfBytes As Byte()) As Boolean
        Try
            Using PdfReader As New PdfReader(pdfBytes)
                Return PdfReader.IsEncrypted
            End Using

        Catch ex As iTextSharp.text.exceptions.BadPasswordException
            Return True
        End Try
    End Function
    Public Function IsPasswordValid(ByVal pdfBytes As Byte(), ByVal password As Byte()) As Boolean
        Try
            Using PdfReader As New PdfReader(pdfBytes, password)
                If PdfReader.IsOpenedWithFullPermissions Then
                    Return True
                End If
            End Using
        Catch ex As iTextSharp.text.exceptions.BadPasswordException
            Return False
        End Try
        Return False
    End Function
    Public Function IsPasswordValid(ByVal pdfBytes As Byte(), ByVal password As String) As Boolean
        Try
            Using PdfReader As New PdfReader(pdfBytes, System.Text.Encoding.ASCII.GetBytes(password))
                If PdfReader.IsOpenedWithFullPermissions Then
                    Return True
                End If
            End Using
        Catch ex As iTextSharp.text.exceptions.BadPasswordException
            Return False
        End Try
    End Function
    Private Sub btnDataFieldSaveValue_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDataFieldSaveValue.Click
        Try
            If btnDataFieldSelection.Items.Count <= 0 Or btnDataFieldSelection.SelectedIndex < 0 Then
                Return
            End If
            If btnDataFieldType.Text.ToString.ToLower = "FldLiveCycleImage".ToLower And cFDFDoc.Determine_Type(fpath) = FDFApp.FDFDoc_Class.FDFType.XPDF Then
                Return
            End If
            If Not Session("output") Is Nothing Then
                Select Case cFDFDoc.Determine_Type(fpath)
                    Case FDFApp.FDFDoc_Class.FDFType.PDF
                        cFDFDoc = cFDFApp.PDFOpenFromBuf(Session("output"), True, True)
                        cFDFDoc.FDFSetFile(fpath)
                        cFDFDoc.FDFSetValue(btnDataFieldName.Text, btnDataFieldValue.Text, True, True)
                        Session("input") = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.FDF)
                        Session("output") = cFDFDoc.PDFMergeFDF2Buf(fpath, False, "")
                        A0_LoadPDF(True)
                    Case FDFApp.FDFDoc_Class.FDFType.XPDF
                        cFDFDoc = cFDFApp.PDFOpenFromBuf(Session("output"), True, True)
                        cFDFDoc.FDFSetFile(fpath)
                        cFDFDoc.XDPSetValue(btnDataFieldName.Text, btnDataFieldValue.Text, True, True)
                        Session("input") = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XDP)
                        Session("output") = cFDFDoc.PDFMergeXDP2Buf(fpath, False, "")
                        A0_LoadPDF(True)
                    Case Else
                        Return
                End Select
            Else
                Return
            End If
            Select Case cFDFDoc.Determine_Type(fpath)
                Case FDFApp.FDFDoc_Class.FDFType.PDF
                    cFDFDoc.FDFSetValue(btnDataFieldName.Text, btnDataFieldValue.Text, True, True)
                    Session("input") = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.FDF)
                    Session("output") = cFDFDoc.PDFMergeFDF2Buf(fpath, False, "")
                    A0_LoadPDF(True)
                Case FDFApp.FDFDoc_Class.FDFType.XPDF
                    cFDFDoc.XDPSetValue(btnDataFieldName.Text, btnDataFieldValue.Text, True, True)
                    Session("input") = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XDP)
                    Session("output") = cFDFDoc.PDFMergeXDP2Buf(fpath, False, "")
                    A0_LoadPDF(True)
                Case Else
                    Return
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDataField_ImportImage.Click
        If btnDataFieldType.Text.ToString.ToLower = "FldLiveCycleImage".ToLower And cFDFDoc.Determine_Type(fpath) = FDFApp.FDFDoc_Class.FDFType.XPDF Then
            preventClickDialog = True
            OpenFileDialog2.InitialDirectory = ApplicationDataFolder(False, "")
            OpenFileDialog2.Filter = "Images|*.jpg;*.png;*.jpeg;*.gif;*.tif;*.tiff"
            OpenFileDialog2.FilterIndex = 0
            Try
                Select Case OpenFileDialog2.ShowDialog(Me)
                    Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                        If Not String.IsNullOrEmpty(OpenFileDialog2.FileName) Then
                            Dim fn As String = OpenFileDialog2.FileName & ""
                            If Session("output") Is Nothing Then Return
                            cFDFDoc = cFDFApp.PDFOpenFromBuf(Session("output"), True, True, pdfOwnerPassword & "")
                            cFDFDoc.XDPField(Me.btnDataFieldName.Text).SetImageFieldData(Me.btnDataFieldName.Text, fn)
                            cFDFDoc.FDFSetFile(fpath)
                            Session("output") = cFDFDoc.PDFMergeXDP2Buf(fpath, False, "")
                            A0_LoadPDF(True)
                        End If
                    Case Else
                        Return
                End Select
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            Finally
                timerPreventDefaultExpires.Enabled = True
            End Try
        End If
    End Sub
    Private Sub btnDataFieldTypeSelection_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDataFieldTypeSelection.SelectedIndexChanged
        Try
            Select Case btnDataFieldTypeSelection.SelectedItem.ToString.ToLower
                Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT.ToString
                    btnDataFieldValue.Visible = True
                    lblFieldValueCaption.Visible = True
                    btnDataField_ImportImage.Visible = False
                Case Else
                    btnDataFieldValue.Visible = True
                    lblFieldValueCaption.Visible = True
                    btnDataField_ImportImage.Visible = False
            End Select
        Catch ex As Exception
        End Try
    End Sub
    Public Function GetFieldPositions_iTextRectangle(ByVal b() As Byte, ByVal fldname As String) As iTextSharp.text.Rectangle
        Dim r As System.Drawing.RectangleF = GetFieldPositions(b, fldname)
        Return New iTextSharp.text.Rectangle(r.Left, r.Bottom, r.Right, r.Top)
    End Function
    Public Function GetFieldPositionsReverse(ByVal b() As Byte, ByVal fldname As String) As System.Drawing.RectangleF
        Try
            If b Is Nothing Then Return Nothing
            Dim s As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = pdfReaderDoc.AcroFields.GetFieldPositions(fldname)
            Dim ir As iTextSharp.text.Rectangle = pdfReaderDoc.GetPageSizeWithRotation(page)
            Dim r As System.Drawing.RectangleF = System.Drawing.RectangleF.FromLTRB(s(fldKidIndex).position.Left, CSng(ir.Height) - s(fldKidIndex).position.Top, s(fldKidIndex).position.Right, CSng(ir.Height) - s(fldKidIndex).position.Bottom)
            Return r
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPositionsReverse(ByVal b() As Byte, ByVal s() As Single) As System.Drawing.RectangleF
        Try
            If b Is Nothing Then Return Nothing
            Dim ir As iTextSharp.text.Rectangle = pdfReaderDoc.GetPageSizeWithRotation(page)
            Dim r As System.Drawing.RectangleF = System.Drawing.RectangleF.FromLTRB(s(0), CSng(ir.Height) - s(3), s(2), CSng(ir.Height) - s(1))
            Return r
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPositionsReverse(ByVal r As iTextSharp.text.Rectangle, Optional pg As Integer = -1) As System.Drawing.RectangleF
        Try
            Dim b() As Byte = Session()
            If b Is Nothing Then Return Nothing
            If pg < 1 Then
                pg = page
            End If
            Dim ir As iTextSharp.text.Rectangle = pdfReaderDoc.GetPageSizeWithRotation(pg)
            Dim r2 As System.Drawing.RectangleF = System.Drawing.RectangleF.FromLTRB(r.Left, CSng(ir.Height) - r.Top, r.Right, CSng(ir.Height) - r.Bottom)
            Return r2
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPositionsReverse(ByVal r As iTextSharp.text.pdf.PdfRectangle, Optional pg As Integer = -1) As System.Drawing.RectangleF
        Try
            Dim b() As Byte = Session()
            If b Is Nothing Then Return Nothing
            If pg < 1 Then
                pg = page
            End If
            Dim ir As iTextSharp.text.Rectangle = pdfReaderDoc.GetPageSizeWithRotation(pg)
            Dim r2 As System.Drawing.RectangleF = System.Drawing.RectangleF.FromLTRB(r.Left, CSng(ir.Height) - r.Top, r.Right, CSng(ir.Height) - r.Bottom)
            Return r2
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPositionsReverse(ByVal r As System.Drawing.RectangleF) As System.Drawing.RectangleF
        Try
            Dim b() As Byte = Session()
            If b Is Nothing Then Return Nothing
            Dim ir As iTextSharp.text.Rectangle = pdfReaderDoc.GetPageSizeWithRotation(page)
            Dim r2 As System.Drawing.RectangleF = System.Drawing.RectangleF.FromLTRB(r.Left, CSng(ir.Height) - r.Top, r.Right, CSng(ir.Height) - r.Bottom)
            Return r2
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPositionsReverse(ByVal b() As Byte, ByVal r As iTextSharp.text.Rectangle) As iTextSharp.text.Rectangle
        Try
            If b Is Nothing Then Return Nothing
            Dim ir As iTextSharp.text.Rectangle = pdfReaderDoc.GetPageSizeWithRotation(page)
            Dim r2 As New iTextSharp.text.Rectangle(r.Left, CSng(ir.Height) - r.Bottom, r.Right, CSng(ir.Height) - r.Top)
            Return r2
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPositionsReverse2(ByVal b() As Byte, ByVal r As iTextSharp.text.Rectangle) As System.Drawing.RectangleF
        Try
            If b Is Nothing Then Return Nothing
            Dim ir As iTextSharp.text.Rectangle = pdfReaderDoc.GetPageSizeWithRotation(page)
            Dim r2 As New System.Drawing.RectangleF(r.Left, CSng(ir.Height) - r.Top, r.Width, r.Height)
            Return r2
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPositionsReverse2(ByVal b() As Byte, ByVal r As System.Drawing.RectangleF) As System.Drawing.RectangleF
        Try
            If b Is Nothing Then Return Nothing
            Dim ir As iTextSharp.text.Rectangle = pdfReaderDoc.GetPageSizeWithRotation(page)
            Dim r2 As New System.Drawing.RectangleF(r.Left, CSng(ir.Height) - r.Top, r.Width, r.Height)
            Return r2
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPositionsReverse2(ByVal b() As Byte, ByVal r As System.Drawing.Rectangle) As System.Drawing.RectangleF
        Try
            If b Is Nothing Then Return Nothing
            Dim ir As iTextSharp.text.Rectangle = pdfReaderDoc.GetPageSizeWithRotation(page)
            Dim r2 As New System.Drawing.RectangleF(r.Left, CSng(ir.Height) - r.Top, r.Width, r.Height)
            Return r2
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetAllFieldsOnPage(ByVal b() As Byte, strPdfOwnerPassword As String, ByVal pageNumber As Integer, Optional ByVal forceReload As Boolean = False, Optional ByVal useBrackets As Boolean = False) As List(Of String)
        Try
            fieldsOnPageList = New List(Of String)
            If Not b Is Nothing Then
                If b.Length <= 0 Then
                    GoTo GOTO_RETURN_NOTHING
                End If
            Else
                GoTo GOTO_RETURN_NOTHING
            End If
            Dim pdfFormFields As AcroFields = Nothing
            Dim pdfReaderDocTemp As New PdfReader(b, getBytes(strPdfOwnerPassword & ""))
            Try
                pdfFormFields = pdfReaderDocTemp.AcroFields
                If Not pdfFormFields Is Nothing Then
                    If pdfFormFields.Fields.Count <= 0 Then
                        GoTo GOTO_RETURN_NOTHING
                    End If
                Else
                    GoTo GOTO_RETURN_NOTHING
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                GoTo GOTO_RETURN_NOTHING
            End Try
            Dim flds As New List(Of String)
            For Each f As String In pdfFormFields.Fields.Keys
                Dim s = pdfReaderDocTemp.AcroFields
                Dim fld As iTextSharp.text.pdf.AcroFields.Item = pdfReaderDocTemp.AcroFields.GetFieldItem(f)
                For i As Integer = 0 To fld.Size - 1
                    If fld.Size > 1 And Not fld.GetMerged(0).Get(PdfName.T) Is Nothing Then
                        Dim fldNm As String = fld.GetMerged(0).GetAsString(PdfName.T).ToUnicodeString
                        If CInt(fld.GetPage(i)) = pageNumber Then
                            If Not flds.Contains(fldNm & CStr(IIf(useBrackets, "[" & i & "]", ""))) Then
                                flds.Add(fldNm & CStr(IIf(useBrackets, "[" & i & "]", "")))
                            End If
                        End If
                    Else
                        If CInt(fld.GetPage(i)) = pageNumber Then
                            If Not flds.Contains(f & CStr(IIf(useBrackets, "[" & i & "]", ""))) Then
                                flds.Add(f & CStr(IIf(useBrackets, "[" & i & "]", "")))
                            End If
                        End If
                    End If
                Next
            Next
            fieldsOnPageList = IIf(useBrackets, flds, getAllFieldNamesWithoutBrackets(flds))
            Return fieldsOnPageList
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return New List(Of String)
        End Try
GOTO_RETURN_NOTHING:
        Return New List(Of String)
    End Function
    Public Function getAllFieldNamesWithoutBrackets(lstFields As List(Of String)) As List(Of String)
        Dim l As New List(Of String)
        For Each lstField As String In lstFields
            If Not l.Contains(getPdfFieldName2(lstField)) Then
                l.Add(getPdfFieldName2(lstField))
            End If
        Next
        Return l
    End Function
    Public Function GetAllFieldsOnPage(ByVal r As PdfReader, ByVal pageNumber As Integer, Optional ByVal forceReload As Boolean = False, Optional ByVal useBrackets As Boolean = False) As List(Of String)
        Try
            fieldsOnPageList = New List(Of String)
            If r Is Nothing Then
                GoTo GOTO_RETURN_NOTHING
            End If
            Dim pdfFormFields As AcroFields = Nothing
            Dim pdfReaderDocTemp As PdfReader = r.Clone
            Try
                pdfFormFields = pdfReaderDocTemp.AcroFields
                If Not pdfFormFields Is Nothing Then
                    If pdfFormFields.Fields.Count <= 0 Then
                        GoTo GOTO_RETURN_NOTHING
                    End If
                Else
                    GoTo GOTO_RETURN_NOTHING
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                GoTo GOTO_RETURN_NOTHING
            End Try
            Dim flds As New List(Of String)
            For Each f As String In pdfFormFields.Fields.Keys
                Dim s = pdfReaderDocTemp.AcroFields
                Dim fld As iTextSharp.text.pdf.AcroFields.Item = pdfReaderDocTemp.AcroFields.GetFieldItem(f)
                For i As Integer = 0 To fld.Size - 1
                    If fld.Size > 1 And Not fld.GetMerged(0).Get(PdfName.T) Is Nothing Then
                        Dim fldNm As String = fld.GetMerged(0).GetAsString(PdfName.T).ToUnicodeString
                        If CInt(fld.GetPage(i)) = pageNumber Then
                            If Not flds.Contains(fldNm & CStr(IIf(useBrackets, "[" & i & "]", ""))) Then
                                flds.Add(fldNm & CStr(IIf(useBrackets, "[" & i & "]", "")))
                            End If
                        End If
                    Else
                        If CInt(fld.GetPage(i)) = pageNumber Then
                            If Not flds.Contains(f & CStr(IIf(useBrackets, "[" & i & "]", ""))) Then
                                flds.Add(f & CStr(IIf(useBrackets, "[" & i & "]", "")))
                            End If
                        End If
                    End If
                Next
            Next
            fieldsOnPageList = IIf(useBrackets, flds, getAllFieldNamesWithoutBrackets(flds))
            Return fieldsOnPageList
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return New List(Of String)
        End Try
GOTO_RETURN_NOTHING:
        Return New List(Of String)
    End Function
    Public Function GetAllFieldsOnPageiText(ByVal b() As Byte, strPdfOwnerPassword As String, ByVal pageNumber As Integer, Optional ByVal forceReload As Boolean = False, Optional ByVal useBrackets As Boolean = False) As Dictionary(Of String, List(Of fieldInfo))
        Try
            Dim flds As New Dictionary(Of String, List(Of fieldInfo))
            If Not b Is Nothing Then
                If b.Length <= 0 Then
                    GoTo GOTO_RETURN_NOTHING
                End If
            Else
                GoTo GOTO_RETURN_NOTHING
            End If
            Dim pdfFormFields As AcroFields = Nothing
            Dim pdfReaderDocTemp As New PdfReader(b, getBytes(strPdfOwnerPassword & ""))
            Try
                pdfFormFields = pdfReaderDocTemp.AcroFields
                If Not pdfFormFields Is Nothing Then
                    If pdfFormFields.Fields.Count <= 0 Then
                        GoTo GOTO_RETURN_NOTHING
                    End If
                Else
                    GoTo GOTO_RETURN_NOTHING
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                GoTo GOTO_RETURN_NOTHING
            End Try
            If cFDFDoc.Determine_Type(Session.ToArray()) = FDFApp.FDFDoc_Class.FDFType.XPDF Then
            ElseIf cFDFApp.Determine_Type(Session.ToArray()) = FDFApp.FDFDoc_Class.FDFType.PDF Then
            End If
            Dim isXFA As Boolean = cFDFDoc.PDFisXFA(b.ToArray(), strPdfOwnerPassword)
            Dim s As iTextSharp.text.pdf.AcroFields = pdfReaderDocTemp.AcroFields
            For Each f As String In s.Fields.Keys
                Dim fld As iTextSharp.text.pdf.AcroFields.Item = s.GetFieldItem(f)
                For i As Integer = 0 To fld.Size - 1
                    Dim fldNm As String = fld.GetMerged(0).GetAsString(PdfName.T).ToUnicodeString
                    If Not fldNm.Contains("["c) Then
                        fldNm = CStr(IIf(useBrackets, fldNm & ("["c) & i & ("]"c), fldNm))
                    End If
                    If fld.Size > 1 And Not fld.GetMerged(0).Get(PdfName.T) Is Nothing Then
                        If CInt(fld.GetPage(i)) = pageNumber Then
                            If Not flds.Keys.Contains(fldNm) Then
                                Dim fldInfoLst As New List(Of fieldInfo)
                                Dim fldInfo As New fieldInfo()
                                fldInfo.fieldIndex = i
                                fldInfo.fieldName = fldNm
                                If isXFA Then
                                    fldInfo.fieldNameLong = f.ToString().Replace(".", "/")
                                Else
                                    fldInfo.fieldNameLong = fldNm
                                End If
                                fldInfo.fieldPageNumber = pageNumber
                                fldInfo.fieldItem = fld
                                fldInfo.fieldType = GetFormFieldType(b, fldNm)
                                fldInfo.fieldDictionary = fld.GetMerged(i)
                                Dim fldpos As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = s.GetFieldPositions(fldNm)
                                Dim r As New iTextSharp.text.Rectangle(fldpos(i).position.Left, fldpos(i).position.Bottom, fldpos(i).position.Right, fldpos(i).position.Top)
                                fldInfo.fieldPositioniText = fldpos(i).position
                                fldInfo.fieldPositionScreen = GetFieldPositionsReverse(r, pageNumber)
                                If Not fldInfoLst.Contains(fldInfo) Then
                                    fldInfoLst.Add(fldInfo)
                                End If
                                flds.Add(fldNm, fldInfoLst)
                            Else
                                Dim fldInfo As New fieldInfo()
                                fldInfo.fieldIndex = i
                                fldInfo.fieldName = fldNm
                                If isXFA Then
                                    fldInfo.fieldNameLong = f.ToString().Replace(".", "/")
                                Else
                                    fldInfo.fieldNameLong = fldNm
                                End If
                                fldInfo.fieldPageNumber = pageNumber
                                fldInfo.fieldItem = fld
                                fldInfo.fieldType = GetFormFieldType(b, fldNm)
                                fldInfo.fieldDictionary = fld.GetMerged(i)
                                Dim fldpos As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = s.GetFieldPositions(fldNm)
                                Dim r As New iTextSharp.text.Rectangle(fldpos(i).position.Left, fldpos(i).position.Bottom, fldpos(i).position.Right, fldpos(i).position.Top)
                                fldInfo.fieldPositioniText = fldpos(i).position
                                fldInfo.fieldPositionScreen = GetFieldPositionsReverse(r, pageNumber)
                                Dim fldInfoLst As List(Of fieldInfo) = flds(fldNm)
                                If Not fldInfoLst.Contains(fldInfo) Then
                                    fldInfoLst.Add(fldInfo)
                                End If
                                flds(fldNm) = fldInfoLst
                            End If
                        End If
                    Else
                        If CInt(fld.GetPage(i)) = pageNumber Then
                            If Not flds.Keys.Contains(fldNm) Then
                                Dim fldInfoLst As New List(Of fieldInfo)
                                Dim fldInfo As New fieldInfo()
                                fldInfo.fieldIndex = i
                                fldInfo.fieldName = fldNm
                                If isXFA Then
                                    fldInfo.fieldNameLong = f.ToString().Replace(".", "/")
                                Else
                                    fldInfo.fieldNameLong = fldNm
                                End If
                                fldInfo.fieldPageNumber = pageNumber
                                fldInfo.fieldItem = fld
                                fldInfo.fieldType = GetFormFieldType(b, fldNm)
                                fldInfo.fieldDictionary = fld.GetMerged(i)
                                Dim fldpos As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = s.GetFieldPositions(fldNm)
                                Dim r As New iTextSharp.text.Rectangle(fldpos(i).position.Left, fldpos(i).position.Bottom, fldpos(i).position.Right, fldpos(i).position.Top)
                                fldInfo.fieldPositioniText = fldpos(i).position
                                fldInfo.fieldPositionScreen = GetFieldPositionsReverse(r, pageNumber)
                                fldInfoLst.Add(fldInfo)
                                flds.Add(fldNm, fldInfoLst)
                            Else
                                Dim fldInfo As New fieldInfo()
                                fldInfo.fieldIndex = i
                                fldInfo.fieldName = fldNm
                                If isXFA Then
                                    fldInfo.fieldNameLong = f.ToString().Replace(".", "/")
                                Else
                                    fldInfo.fieldNameLong = fldNm
                                End If
                                fldInfo.fieldPageNumber = pageNumber
                                fldInfo.fieldItem = fld
                                fldInfo.fieldType = GetFormFieldType(b, fldNm)
                                fldInfo.fieldDictionary = fld.GetMerged(i)
                                Dim fldpos As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = s.GetFieldPositions(fldNm)
                                Dim r As New iTextSharp.text.Rectangle(fldpos(i).position.Left, fldpos(i).position.Bottom, fldpos(i).position.Right, fldpos(i).position.Top)
                                fldInfo.fieldPositioniText = fldpos(i).position
                                fldInfo.fieldPositionScreen = GetFieldPositionsReverse(r, pageNumber)
                                Dim fldInfoLst As List(Of fieldInfo) = flds(fldNm)
                                fldInfoLst.Add(fldInfo)
                                flds(fldNm) = fldInfoLst
                            End If
                        End If
                    End If
                Next
            Next
            Return flds
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return New Dictionary(Of String, List(Of fieldInfo))
        End Try
GOTO_RETURN_NOTHING:
        Return New Dictionary(Of String, List(Of fieldInfo))
    End Function
    Public Function GetAllFieldsOnPageiText(r As PdfReader, ByVal pageNumber As Integer, Optional ByVal forceReload As Boolean = False, Optional ByVal useBrackets As Boolean = False) As Dictionary(Of String, List(Of fieldInfo))
        Try
            Dim flds As New Dictionary(Of String, List(Of fieldInfo))
            If r Is Nothing Then
                GoTo GOTO_RETURN_NOTHING
            End If
            Dim pdfFormFields As AcroFields = Nothing
            Try
                pdfFormFields = r.AcroFields
                If Not pdfFormFields Is Nothing Then
                    If pdfFormFields.Fields.Count <= 0 Then
                        GoTo GOTO_RETURN_NOTHING
                    End If
                Else
                    GoTo GOTO_RETURN_NOTHING
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                GoTo GOTO_RETURN_NOTHING
            End Try
            For Each f As String In pdfFormFields.Fields.Keys
                Dim s As iTextSharp.text.pdf.AcroFields = r.AcroFields
                Dim fld As iTextSharp.text.pdf.AcroFields.Item = r.AcroFields.GetFieldItem(f)
                For i As Integer = 0 To fld.Size - 1
                    Dim fldNm As String = fld.GetMerged(0).GetAsString(PdfName.T).ToUnicodeString
                    If Not fldNm.Contains("["c) Then
                        fldNm = CStr(IIf(useBrackets, fldNm & ("["c) & i & ("]"c), fldNm))
                    End If
                    If fld.Size > 1 And Not fld.GetMerged(0).Get(PdfName.T) Is Nothing Then
                        If CInt(fld.GetPage(i)) = pageNumber Then
                            If Not flds.Keys.Contains(fldNm) Then
                                Dim fldInfoLst As New List(Of fieldInfo)
                                Dim fldInfo As New fieldInfo()
                                fldInfo.fieldIndex = i
                                fldInfo.fieldName = fldNm
                                fldInfo.fieldPageNumber = pageNumber
                                fldInfo.fieldItem = fld
                                fldInfo.fieldType = GetFormFieldType(r, fldNm)
                                Dim fldpos As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = s.GetFieldPositions(fldNm)
                                Dim rect As New iTextSharp.text.Rectangle(fldpos(i).position.Left, fldpos(i).position.Bottom, fldpos(i).position.Right, fldpos(i).position.Top)
                                fldInfo.fieldPositioniText = fldpos(i).position
                                fldInfo.fieldPositionScreen = GetFieldPositionsReverse(rect, pageNumber)
                                If Not fldInfoLst.Contains(fldInfo) Then
                                    fldInfoLst.Add(fldInfo)
                                End If
                                flds.Add(fldNm, fldInfoLst)
                            Else
                                Dim fldInfo As New fieldInfo()
                                fldInfo.fieldIndex = i
                                fldInfo.fieldName = fldNm
                                fldInfo.fieldPageNumber = pageNumber
                                fldInfo.fieldItem = fld
                                fldInfo.fieldType = GetFormFieldType(r, fldNm)
                                Dim fldpos As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = s.GetFieldPositions(fldNm)
                                Dim rect As New iTextSharp.text.Rectangle(fldpos(i).position.Left, fldpos(i).position.Bottom, fldpos(i).position.Right, fldpos(i).position.Top)
                                fldInfo.fieldPositioniText = fldpos(i).position
                                fldInfo.fieldPositionScreen = GetFieldPositionsReverse(rect, pageNumber)
                                Dim fldInfoLst As List(Of fieldInfo) = flds(fldNm)
                                If Not fldInfoLst.Contains(fldInfo) Then
                                    fldInfoLst.Add(fldInfo)
                                End If
                                flds(fldNm) = fldInfoLst
                            End If
                        End If
                    Else
                        If CInt(fld.GetPage(i)) = pageNumber Then
                            If Not flds.Keys.Contains(fldNm) Then
                                Dim fldInfoLst As New List(Of fieldInfo)
                                Dim fldInfo As New fieldInfo()
                                fldInfo.fieldIndex = i
                                fldInfo.fieldName = fldNm
                                fldInfo.fieldPageNumber = pageNumber
                                fldInfo.fieldItem = fld
                                fldInfo.fieldType = GetFormFieldType(r, fldNm)
                                Dim fldpos As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = s.GetFieldPositions(fldNm)
                                Dim rect As New iTextSharp.text.Rectangle(fldpos(i).position.Left, fldpos(i).position.Bottom, fldpos(i).position.Right, fldpos(i).position.Top)
                                fldInfo.fieldPositioniText = fldpos(i).position
                                fldInfo.fieldPositionScreen = GetFieldPositionsReverse(rect, pageNumber)
                                fldInfoLst.Add(fldInfo)
                                flds.Add(fldNm, fldInfoLst)
                            Else
                                Dim fldInfo As New fieldInfo()
                                fldInfo.fieldIndex = i
                                fldInfo.fieldName = fldNm
                                fldInfo.fieldPageNumber = pageNumber
                                fldInfo.fieldItem = fld
                                fldInfo.fieldType = GetFormFieldType(r, fldNm)
                                Dim fldpos As List(Of iTextSharp.text.pdf.AcroFields.FieldPosition) = s.GetFieldPositions(fldNm)
                                Dim rect As New iTextSharp.text.Rectangle(fldpos(i).position.Left, fldpos(i).position.Bottom, fldpos(i).position.Right, fldpos(i).position.Top)
                                fldInfo.fieldPositioniText = fldpos(i).position
                                fldInfo.fieldPositionScreen = GetFieldPositionsReverse(rect, pageNumber)
                                Dim fldInfoLst As List(Of fieldInfo) = flds(fldNm)
                                fldInfoLst.Add(fldInfo)
                                flds(fldNm) = fldInfoLst
                            End If
                        End If
                    End If
                Next
            Next
            Return flds
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return New Dictionary(Of String, List(Of fieldInfo))
        End Try
GOTO_RETURN_NOTHING:
        Return New Dictionary(Of String, List(Of fieldInfo))
    End Function
    Public Function GetFieldPositions(ByVal b() As Byte, ByVal fldname As String) As System.Drawing.RectangleF
        Try
            Dim s As New List(Of iTextSharp.text.pdf.AcroFields.FieldPosition)
            s.AddRange(pdfReaderDoc.AcroFields.GetFieldPositions(fldname))
            Return New System.Drawing.RectangleF(s(fldKidIndex).position.Left, s(fldKidIndex).position.Top, s(fldKidIndex).position.Width, s(fldKidIndex).position.Height)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPosition(ByVal filename As String, ByVal fldname As String) As System.Drawing.RectangleF
        Dim b() As Byte = Nothing
        Try
            If FileExists(ApplicationDataFolder(False, "") & (filename)) Then
                b = File.ReadAllBytes(ApplicationDataFolder(False, "") & (filename))
            ElseIf FileExists(filename) Then
                b = File.ReadAllBytes((filename))
            ElseIf filename.StartsWith("http://") Then
                Dim w As New System.Net.WebClient
                b = w.DownloadData(filename)
            ElseIf filename.StartsWith("https://") Then
                Dim w As New System.Net.WebClient
                b = w.DownloadData(filename)
            Else
                Return Nothing
            End If
            Dim s() As Single = pdfReaderDoc.AcroFields.GetFieldPositions(fldname)
            Dim r As New System.Drawing.RectangleF(s(1), s(2), s(3) - s(1), s(4) - s(2))
            Return r
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPosition(ByVal fldname As String) As System.Drawing.RectangleF
        Dim b() As Byte = Session()
        Try
            Dim s() As Single = pdfReaderDoc.AcroFields.GetFieldPositions(fldname)
            Dim r As New System.Drawing.RectangleF(s(1), s(2), s(3) - s(1), s(4) - s(2))
            Return r
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Public Function GetFieldPosition(ByVal fldname As String, ByVal index As Integer) As iTextSharp.text.Rectangle
        Dim b() As Byte = Session()
        Try
            Dim s() As Single = pdfReaderDoc.AcroFields.GetFieldPositions(fldname)
            Dim r As New iTextSharp.text.Rectangle(s(index + 1), s(index + 2), s(index + 3) - s(index + 1), s(index + 4) - s(index + 2))
            Return r
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return Nothing
        End Try
    End Function
    Private Sub Button1_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Try
            Session("output") = RemoveFormField(Session("output"), Me.btnDataFieldName.Text, Me.page)
            fldRectangles = getFieldRectangles(True)
            A0_LoadPDF(True)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click
    End Sub
    Private Sub PictureBox1_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles A0_PictureBox2.MouseDown
        cUserRect.mIsClick = True
        Try
            scrollValue = PictureBox1_Panel.VerticalScroll.Value + 0
            _clickPoints.Clear()
            cUserRect._highLightFieldName = ""
            If Not comboBox4Selected = True Then
                'fldNameHighlighted = ""
            Else
                comboBox4Selected = False
                '_clickPoints.Clear()
                'cUserRect._highLightFieldName = ""
                '_clickPoints.Add(New PointF(btnLeft.Text, btnTop.Text))
                '_clickPoints.Add(New PointF(btnRight.Text, btnBottom.Text))
                '_dragging = True
                cUserRect.mIsClick = True
                Return
            End If
            'pnlFields.Visible = False
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        If isDimensionsChecked() Then
            mMove = True
        End If
        'fldRectangles = getFieldRectangles(True)
        cUserRect.nodeSelectedTmp = cUserRect.GetNodeSelectable(e.Location, 4)
        If cUserRect.nodeSelectedTmp = clsUserRect.PosSizableRect.Middle Then
            cUserRect.mIsClick = True
            mMove = True
            _dragging = True
            preventDragging = False
            A0_PictureBox2.Cursor = Cursors.SizeAll ' cUserRect.GetCursor(cUserRect.nodeSelectedTmp)
            lockCursor = True
            If Not fldNameHighlighted.IsNullOrEmpty() And fldKidIndex >= 0 Then
                If fldNameHighlightedCopy = fldNameHighlighted Then
                    Return
                End If
            End If
        ElseIf cUserRect.nodeSelectedTmp <> clsUserRect.PosSizableRect.None Then
            cUserRect.mIsClick = True
            _dragging = False
            A0_PictureBox2.Cursor = cUserRect.GetCursor(cUserRect.nodeSelectedTmp)
            lockCursor = True
            Return
        Else
            A0_PictureBox2.Cursor = Cursors.Default
        End If
        Try
            If comboBox4Selected = True Then
                comboBox4Selected = False
                cUserRect._highLightFieldName = fldNameHighlighted
                PDFField_Name.Text = fldNameHighlighted
                PDFField_Index.Text = fldKidIndex
                _clickPoints.Clear()
                _clickPoints.Add(New PointF(cUserRect.rect.Left, cUserRect.rect.Bottom))
                _clickPoints.Add(New PointF(cUserRect.rect.Right, cUserRect.rect.Top))
                _dragging = True
                cUserRect.mIsClick = True
                'scrollValue = PictureBox1_Panel.VerticalScroll.Value + 0
                _dragging = False
                preventDragging = False
                cUserRect.moveResize = True
                cUserRect.rectBackup = cUserRect.rect
                cUserRect.rectOld = cUserRect.rectBackup
                fldNameHighlightedCopy = fldNameHighlighted
                Return
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        fldNameHighlightedCopy = "" 'fldNameHighlighted
        If Not PDFField_Copy.Checked Then
            If Not comboBox4Selected = True Then
                PDFField_Name.Text = ""
                PDFField_TabOrder.Text = ""
                PDFField_Index.Text = "-1"
                fldKidIndex = -1
            End If
        End If
        If Not Session Is Nothing Then
            If Session.Length <= 0 Then
                GoTo GoTo_RETURN
            End If
        End If

        If pnlFields.Top + pnlFields.Height > Me.Height Or pnlFields.Top <= 0 Then
            If Me.Width >= A0_PictureBox1.Width + 10 Then
                Try
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            End If
        End If
        If preventClickDialog = True Then
            preventClickDialog = False
            GoTo GoTo_RETURN
        End If
        Dim pt As Point = e.Location
        If PDFField_Copy.Checked And fldKidIndex < 0 Then
            _clickPoints.Clear()
            cUserRect._highLightFieldName = IIf(fldNameHighlighted.isNullOrEmpty(), fldNameHighlightedCopy, fldNameHighlighted)
            btnLeft.Text = pt.X
            btnTop.Text = pt.Y
            _clickPoints.Add(pt)
            _dragging = True
            cUserRect.mIsClick = True
            GoTo GoTo_RETURN
        End If
        cUserRect.pauseDraw = False
        If Not PDFField_Copy.Checked Then
            ComboBox_ItemDisplay.Items.Clear()
            ComboBox_ItemValue.Items.Clear()
            ComboBox_ItemDisplayText.Text = ""
            ComboBox_ItemValueText.Text = ""
        End If
        If Not cUserRect.nodeSelected = clsUserRect.PosSizableRect.None Then
        End If
        Dim blnHL As Boolean = False
        PDFField_Index.Text = "-1".ToString
        fldKidIndex = -1
        If PDFField_Copy.Checked = False And Not comboBox4Selected = True Then
            If cUserRect.GetNodeSelectable(pt) <> clsUserRect.PosSizableRect.None And Not (cUserRect._highLightFieldName.isNullOrEmpty()) Then
                fldNameHighlighted = cUserRect._highLightFieldName & "" 'r.ToString
                If fldNameHighlighted = "" Then
                    fldKidIndex = -1
                End If
                blnHL = True
            Else
                Dim rects As Dictionary(Of String, RectangleF) = getFieldRectangles(True)
                If Not rects Is Nothing Then
                    If rects.Count > 0 Then
                        For Each r As KeyValuePair(Of String, RectangleF) In rects.ToArray
                            Dim rect As System.Drawing.RectangleF = r.Value 'getFieldRectangles(True)(r)
                            Try
                                If Not pt = Nothing Then
                                    If getRectangleScreen(rect).Contains(pt) Then
                                        Dim strTempfldNameHighlighted = r.Key.ToString.Trim() 'getFieldRectangles(True)(r).ToString
                                        _clickPoints.Clear()
                                        _clickPoints.Add(e.Location)
                                        If strTempfldNameHighlighted.IndexOf("#") > 0 Then
                                            fldKidIndex = CInt(strTempfldNameHighlighted.ToString.Substring(strTempfldNameHighlighted.LastIndexOf("#") + 1, strTempfldNameHighlighted.Length - strTempfldNameHighlighted.LastIndexOf("#") - 1).Replace(CStr("#"), CStr("")))
                                            If Not strTempfldNameHighlighted = cUserRect._highLightFieldName & "#" & fldKidIndex Then
                                                preventDragging = True
                                            End If
                                            cUserRect._highLightFieldName = strTempfldNameHighlighted.ToString.Substring(0, strTempfldNameHighlighted.LastIndexOf("#"))
                                            fldNameHighlighted = cUserRect._highLightFieldName
                                        ElseIf strTempfldNameHighlighted.IndexOf("."c) > 0 Then
                                            fldKidIndex = CInt(strTempfldNameHighlighted.ToString.Substring(strTempfldNameHighlighted.LastIndexOf("."c) + 1, strTempfldNameHighlighted.Length - strTempfldNameHighlighted.LastIndexOf("."c) - 1).Replace(CStr("."c), CStr("")))
                                            If Not strTempfldNameHighlighted = cUserRect._highLightFieldName & "." & fldKidIndex Then
                                                preventDragging = True
                                            End If
                                            cUserRect._highLightFieldName = strTempfldNameHighlighted.ToString.Substring(0, strTempfldNameHighlighted.LastIndexOf("."c))
                                            fldNameHighlighted = cUserRect._highLightFieldName
                                        Else
                                            fldKidIndex = 0
                                            If Not strTempfldNameHighlighted.isNullOrEmpty() And Not strTempfldNameHighlighted = cUserRect._highLightFieldName Then
                                                preventDragging = True
                                            End If
                                            cUserRect._highLightFieldName = strTempfldNameHighlighted.ToString
                                        End If
                                        blnHL = True
                                        Dim ptOrigin As New System.Drawing.PointF
                                        If _clickPoints.Count <= 1 Then
                                            _clickPoints.Clear()
                                            _clickPoints.Add(New PointF(rect.Left, rect.Bottom))
                                            _clickPoints.Add(New PointF(rect.Right, rect.Top))
                                        End If
                                        If _clickPoints.Count > 1 Then
                                            If _clickPoints(0).Y > _clickPoints(1).Y Then
                                                If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                                                    btnTop.Text = _dimensionsList(3) + 0
                                                Else
                                                    btnTop.Text = _clickPoints(1).Y
                                                End If
                                                If PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                                                    btnBottom.Text = _dimensionsList(1) + 0
                                                Else
                                                    btnBottom.Text = _clickPoints(0).Y
                                                End If
                                                ptOrigin.Y = CSng(btnTop.Text) '_clickPoints(1).Y
                                            Else
                                                If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                                                    btnTop.Text = _dimensionsList(3) + 0
                                                Else
                                                    btnTop.Text = _clickPoints(0).Y
                                                End If
                                                If PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                                                    btnBottom.Text = _dimensionsList(1) + 0
                                                Else
                                                    btnBottom.Text = _clickPoints(1).Y
                                                End If
                                                ptOrigin.Y = CSng(btnTop.Text) '_clickPoints(0).Y
                                            End If
                                            If _clickPoints(0).X > _clickPoints(1).X Then
                                                If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                                                    btnLeft.Text = _dimensionsList(0)
                                                Else
                                                    btnLeft.Text = _clickPoints(1).X
                                                End If
                                                If PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                                                    btnRight.Text = _dimensionsList(2)
                                                Else
                                                    btnRight.Text = _clickPoints(0).X
                                                End If
                                                ptOrigin.X = CSng(btnLeft.Text) '_clickPoints(1).X
                                            Else
                                                If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                                                    btnLeft.Text = _dimensionsList(0)
                                                Else
                                                    btnLeft.Text = _clickPoints(0).X
                                                End If
                                                If PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                                                    btnRight.Text = _dimensionsList(2)
                                                Else
                                                    btnRight.Text = _clickPoints(1).X
                                                End If
                                                ptOrigin.X = CSng(btnLeft.Text) '_clickPoints(0).X
                                            End If
                                            If PDFField_Dimensions_Paste_4_Width.Checked Then
                                                btnWidth.Text = _dimensionsList(4) + 0
                                            Else
                                                btnWidth.Text = Math.Abs(CSng(btnRight.Text) - CSng(btnLeft.Text))
                                            End If
                                            If PDFField_Dimensions_Paste_5_Height.Checked Then
                                                btnHeight.Text = _dimensionsList(5) + 0
                                            Else
                                                btnHeight.Text = Math.Abs(CSng(btnTop.Text) - CSng(btnBottom.Text))
                                            End If
                                        End If
                                        'If isDimensionsChecked() Then
                                        '    If PDFField_Dimensions_Paste_4_Width.Checked And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked And Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
                                        '        btnWidth.Text = _dimensionsList(4) + 0
                                        '    End If
                                        '    If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                                        '        btnLeft.Text = _dimensionsList(0) + 0
                                        '    End If
                                        '    If PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                                        '        btnRight.Text = _dimensionsList(2) + 0
                                        '    End If
                                        '    If PDFField_Dimensions_Paste_0_Left_llx.Checked Or PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                                        '        btnWidth.Text = CSng(btnRight.Text) - CSng(btnLeft.Text)
                                        '    ElseIf PDFField_Dimensions_Paste_4_Width.Checked Then 'And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked Or Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
                                        '        btnWidth.Text = _dimensionsList(4) + 0
                                        '        If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                                        '            btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
                                        '        ElseIf PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                                        '            btnLeft.Text = CSng(btnRight.Text) - CSng(btnWidth.Text)
                                        '        Else
                                        '            btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
                                        '        End If
                                        '    End If
                                        '    If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                                        '        btnTop.Text = _dimensionsList(3) + 0
                                        '    End If
                                        '    If PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                                        '        btnBottom.Text = _dimensionsList(1) + 0
                                        '    End If
                                        '    If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                                        '        If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                        '            btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
                                        '        Else
                                        '            btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
                                        '        End If
                                        '    ElseIf PDFField_Dimensions_Paste_5_Height.Checked Then 'And (Not PDFField_Dimensions_Paste_3_Top_ury.Checked Or Not PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
                                        '        btnHeight.Text = _dimensionsList(5) + 0
                                        '        If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                                        '            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                        '                btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                                        '            Else
                                        '                btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                                        '            End If
                                        '        ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                                        '            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                        '                btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                                        '            Else
                                        '                btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                                        '            End If
                                        '        Else
                                        '            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                        '                btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                                        '            Else
                                        '                btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                                        '            End If
                                        '        End If
                                        '    End If
                                        'End If
                                        'btnBottom.Text = _dimensionsList(1)
                                        'btnTop.Text = _dimensionsList(3)
                                        'btnLeft.Text = _dimensionsList(0)
                                        'btnRight.Text = _dimensionsList(2)
                                        'btnHeight.Text = _dimensionsList(5)
                                        'btnWidth.Text = _dimensionsList(4)

                                        If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                                            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                                btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
                                            Else
                                                btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
                                            End If
                                        End If
                                        If PDFField_Dimensions_Paste_5_Height.Checked Then
                                            btnHeight.Text = _dimensionsList(5) + 0
                                            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                                                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                                                Else
                                                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                                                End If
                                            ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                                                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                                    btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                                                Else
                                                    btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                                                End If
                                            Else
                                                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                                                Else
                                                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                                                End If
                                            End If
                                        End If
                                        'If cUserRect.rect = Nothing Then
                                        '    cUserRect.rect = New System.Drawing.RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
                                        'End If
                                        cUserRect.rect = New System.Drawing.RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
                                        Exit For
                                    End If
                                End If
                            Catch exColor As Exception
                            End Try
                        Next
                    End If
                End If
            End If
        ElseIf PDFField_Copy.Checked And Not comboBox4Selected = True Then
            fldNameHighlighted = fldNameHighlightedCopy
        End If
        If fldNameHighlighted = "" Then
            fldKidIndex = -1
            cUserRect._highLightFieldName = ""
            blnHL = False
        Else
            PDFField_Index.Text = fldKidIndex.ToString & ""
        End If
        If cUserRect.rectScreen.Contains(pt) Then 'And Not fldNameHighlighted = ""
            blnHL = True
        End If
        If blnHL = False And Not comboBox4Selected = True Then
            If Not fldNameHighlightedCopy.isNullOrEmpty() And Not fldNameHighlighted = cUserRect._highLightFieldName Then
            End If
            If Not fldNameHighlighted = "" Then
                If Not pdfReaderDoc.AcroFields.GetFieldType(fldNameHighlighted) = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON Then
                    If PDFField_Copy.Checked Then
                        fldNameHighlightedCopy = cUserRect._highLightFieldName & ""
                    Else
                        fldNameHighlightedCopy = ""
                    End If
                    fldNameHighlighted = ""
                    cUserRect._highLightFieldName = fldNameHighlighted
                    fldKidIndex = -1
                Else
                    fldKidIndex = -1
                    RadioButton_OnValue.Text = ""
                    cUserRect._highLightFieldName = fldNameHighlighted
                    _clickPoints.Clear()
                    cUserRect._highLightFieldName = fldNameHighlighted
                    btnLeft.Text = pt.X
                    btnTop.Text = pt.Y
                    _clickPoints.Add(pt)
                    _dragging = True
                    cUserRect.mIsClick = True
                    GoTo GoTo_RETURN
                End If
            Else
                fldKidIndex = -1
                RadioButton_OnValue.Text = ""
                cUserRect._highLightFieldName = fldNameHighlighted
                _clickPoints.Clear()
                cUserRect._highLightFieldName = fldNameHighlighted
                btnLeft.Text = pt.X
                btnTop.Text = pt.Y
                _clickPoints.Add(pt)
                _dragging = True
                cUserRect.mIsClick = True
            End If
        Else
            cUserRect.mIsClick = True
        End If
        If PDFField_Copy.Checked Or (fldNameHighlighted = "" And _clickPoints.Count >= 0 And cUserRect.GetNodeSelectable(e.Location) = clsUserRect.PosSizableRect.None) Then '_dragging = False Or 
            If Not cUserRect.rectScreen = Nothing Then
                If cUserRect.rectScreen.Contains(pt) Or cUserRect.GetNodeSelectable(pt) <> clsUserRect.PosSizableRect.None Then
                    GoTo GoTo_RETURN
                End If
            End If
            _clickPoints.Clear()
            cUserRect._highLightFieldName = fldNameHighlighted
            btnLeft.Text = pt.X
            btnTop.Text = pt.Y
            _clickPoints.Add(pt)
            _dragging = True
            cUserRect.mIsClick = True
        End If
GoTo_RETURN:
        If fldNameHighlighted.isNullOrEmpty() And cUserRect.rect = Nothing Then
            'If pnlFields.Visible Then pnlFields.Visible = False
        End If
        cUserRect.mIsClick = True
        comboBox4Selected = False
        Return
    End Sub
    Public Property isDragingImage() As Boolean
        Get
            Try
                If mMove Then
                    Return True
                End If
                If _dragging Then
                    If _clickPoints.Count >= 2 Then
                        If Math.Abs(_clickPoints(0).X - _clickPoints(1).X) > 1 Then
                            If Math.Abs(_clickPoints(0).Y - _clickPoints(1).Y) > 1 Then
                                Return True
                            End If
                        End If
                    End If
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Return False
        End Get
        Set(ByVal value As Boolean)
            _dragging = value
        End Set
    End Property
    Private Sub PictureBox1_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles A0_PictureBox2.MouseMove
        Dim eMouse As Point = A0_PictureBox2.PointToClient(Cursor.Position)
        Try
            If Not cUserRect.mIsClick Then
                If cLinks Is Nothing Then
                    cLinks = New clsLinks(pdfReaderDoc, Me)
                    cLinks.LoadLinksOnPage(pageIndex)
                ElseIf cLinks.Links.Count <= 0 Then
                    cLinks = New clsLinks(pdfReaderDoc, Me)
                    cLinks.LoadLinksOnPage(pageIndex)
                    'ElseIf cLinks.Links Is Nothing Then
                    '    cLinks = New clsLinks(pdfReaderDoc, Me)
                    '    cLinks.LoadLinksOnPage(CInt(pageIndex))
                    'ElseIf cLinks.Links.Count <= 0 Then
                    '    cLinks = New clsLinks(pdfReaderDoc, Me)
                    '    cLinks.LoadLinksOnPage(CInt(pageIndex))
                End If
                If cLinks.LinksMouseCursorChange(CInt(pageIndex), eMouse) And cUserRect.rect = Nothing Then
                    A0_PictureBox2.Cursor = cLinks.mouseCursor
                    'Return
                Else
                    cUserRect.ChangeCursor(eMouse)
                End If
            End If
            If (cUserRect._rect.Width > 0 And cUserRect._rect.Height > 0) Or cUserRect.mIsClick Then
                A0_PictureBox2.Invalidate()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try

    End Sub
    Public Sub DrawPictureBoxImageBox(ByRef img As System.Drawing.Image, ByVal x As Single, ByVal y As Single, ByVal w As Single, ByVal h As Single)
        Try
            Dim g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(img)
            Dim r As New System.Drawing.RectangleF(x, y, w, h)
            cUserRect.rect = r
            If cUserRect.mPictureBox Is Nothing Then
                cUserRect.SetPictureBox(A0_PictureBox2, False)
            End If
            cUserRect.SetImagePic(img.Clone)
            cUserRect.DrawPictureBoxImageBoxImage(g, cUserRect.rect)
            If Not cUserRect.pauseDraw Then A0_PictureBox2.Image = DirectCast(img.Clone, System.Drawing.Image)
            A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.Width = A0_PictureBox1.Width
            A0_PictureBox2.Height = A0_PictureBox1.Height
            A0_PictureBox2.Enabled = A0_PictureBox1.Enabled
            A0_PictureBox2.Visible = A0_PictureBox1.Visible
            A0_PictureBox2.Parent = A0_PictureBox1
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub DrawPictureBoxImageBoxScreen(ByRef img As System.Drawing.Image, ByVal x As Single, ByVal y As Single, ByVal w As Single, ByVal h As Single)
        Try
            Dim g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(img)
            Dim r As New System.Drawing.RectangleF(x, y, w, h)
            cUserRect.rect = getRectanglePDF(r)
            If cUserRect.mPictureBox Is Nothing Then
                cUserRect.SetPictureBox(A0_PictureBox2, False)
            End If
            cUserRect.SetImagePic(img)
            cUserRect.DrawPictureBoxImageBoxImageScreen(g, r)
            If Not cUserRect.pauseDraw Then A0_PictureBox2.Image = DirectCast(img.Clone, System.Drawing.Image)
            A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.Width = A0_PictureBox1.Width
            A0_PictureBox2.Height = A0_PictureBox1.Height
            A0_PictureBox2.Enabled = A0_PictureBox1.Enabled
            A0_PictureBox2.Visible = A0_PictureBox1.Visible
            A0_PictureBox2.Parent = A0_PictureBox1
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function getPictureboxRectangle() As System.Drawing.RectangleF
        Return New RectangleF(CSng(btnLeft.Text) * getPercent(), ((getPDFHeight(Session()) - CSng(btnTop.Text)) * getPercent()) + Math.Abs(PictureBox1_Panel.VerticalScroll.Value), CSng(btnWidth.Text) * getPercent(), CSng(btnHeight.Text) * getPercent())
    End Function
    Public Function isDimensionsChecked() As Boolean
        Try
            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then Return True
            If PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then Return True
            If PDFField_Dimensions_Paste_2_Right_urx.Checked Then Return True
            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then Return True
            If PDFField_Dimensions_Paste_4_Width.Checked Then Return True
            If PDFField_Dimensions_Paste_5_Height.Checked Then Return True
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return False
    End Function
    Public Sub setDimensionsChecked(ByVal blnValue As Boolean)
        Try
            PDFField_Dimensions_Paste_0_Left_llx.Checked = blnValue
            PDFField_Dimensions_Paste_1_Bottom_lly.Checked = blnValue
            PDFField_Dimensions_Paste_2_Right_urx.Checked = blnValue
            PDFField_Dimensions_Paste_3_Top_ury.Checked = blnValue
            PDFField_Dimensions_Paste_4_Width.Checked = blnValue
            PDFField_Dimensions_Paste_5_Height.Checked = blnValue
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub PictureBox1_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles A0_PictureBox2.MouseUp
        'Dim scrollPositionY As Integer = A0_PictureBox2
        Try

            lockCursor = False
            If comboBox4Selected Then
                fldNameHighlightedCopy = fldNameHighlighted
                cUserRect.fldKidIndexPrevious = fldKidIndex
            End If

            If _clickPoints.Count = 1 Then
                _clickPoints.Add(e.Location)
            End If
            If _clickPoints.Count = 2 Then
                If Math.Abs(_clickPoints(_clickPoints.Count - 1).X - _clickPoints(_clickPoints.Count - 2).X) < 5 And Math.Abs(_clickPoints(_clickPoints.Count - 1).Y - _clickPoints(_clickPoints.Count - 2).Y) < 5 Then
                    If A0_PictureBox2.Cursor = Cursors.Default Then
                        _clickPoints.Clear()
                        preventDragging = True
                        cUserRect.rect = Nothing
                        cUserRect.rectBackup = Nothing
                        cUserRect.rectOld = Nothing
                        comboBox4Selected = False
                        Exit Sub
                    End If
                End If
            ElseIf _clickPoints.Count > 2 Then
                _clickPoints(_clickPoints.Count - 1) = (e.Location)
                Do Until _clickPoints.Count = 2
                    _clickPoints.RemoveAt(0)
                Loop
            End If
            cUserRect.mPictureBox_MouseUp(sender, e)
            lockCursor = False

            If cUserRect.moveResize Then
                A0_PDFFormField_LoadProperties(Session, fldNameHighlighted, CInt(page), fldKidIndex)
                PnlFields_Position(True, True)
                comboBox4Selected = False
                'refreshPDFImage()
                'DrawImageFieldPositions()
                updatefield()
                Return
            Else
                If comboBox4Selected Then
                    fldNameHighlightedCopy = fldNameHighlighted
                    cUserRect.fldKidIndexPrevious = fldKidIndex
                End If
            End If
            comboBox4Selected = False

            If Not Session Is Nothing Then
                If Session.Length <= 0 Then
                    If pnlFields.Visible Then pnlFields.Visible = False
                    Return
                End If
            End If
            Try
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            If preventClickDialog = True Then
                preventClickDialog = False
                _dragging = False
                GoTo GOTORETURN
            End If
            _dragging = False
            If isDragingImage() Then
                If _clickPoints.Count > 1 Then
                    If Not _clickPoints(_clickPoints.Count - 1) = _clickPoints(_clickPoints.Count - 2) Then
                        If ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1 Then
                            ComboBox1.SelectedIndex = 0
                        End If
                    End If
                End If
            End If
            _dragging = False
            If Not String.IsNullOrEmpty(fldNameHighlighted & "") Then
                If pdfReaderDoc.AcroFields.GetFieldType(fldNameHighlighted) = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON Then
                    If fldKidIndex < 0 Then
                        GoTo STARTHERE
                    End If
                End If
                Dim tmpName As String = fldNameHighlighted
                If Not PDFField_Copy.Checked And fldKidIndex >= 0 Then
                    If cUserRect.nodeSelected = clsUserRect.PosSizableRect.None Then
                        If fldNameHighlighted.ToString.Contains("."c) Then
                            fldKidIndex = 0
                            tmpName = fldNameHighlighted.Substring(0, fldNameHighlighted.LastIndexOf("."c))
                            If IsNumeric(fldNameHighlighted.Split("."c)(fldNameHighlighted.Split("."c).Length - 1)) Then
                                fldKidIndex = CInt(fldNameHighlighted.Split("."c)(fldNameHighlighted.Split("."c).Length - 1)) + 0
                            End If
                            If GetFormFieldType(Session("output"), tmpName) = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON Then
                                fldNameHighlighted = tmpName
                                cUserRect._highLightFieldName = fldNameHighlighted
                            End If
                        ElseIf fldNameHighlighted.ToString.Contains("#") And fldKidIndex <= 0 Then
                            tmpName = fldNameHighlighted.Substring(0, fldNameHighlighted.LastIndexOf("#"))
                            If IsNumeric(fldNameHighlighted.Split("#")(fldNameHighlighted.Split("#").Length - 1)) Then
                                fldKidIndex = CInt(fldNameHighlighted.Split("#")(fldNameHighlighted.Split("#").Length - 1)) + 0
                            End If
                            If GetFormFieldType(Session("output"), tmpName) = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON Then
                                fldNameHighlighted = tmpName
                                cUserRect._highLightFieldName = fldNameHighlighted
                            End If
                        End If
                    End If
                    btnDataFieldSelection.SelectedItem = fldNameHighlighted
                    fldNameHighlighted = tmpName
                    cUserRect._highLightFieldName = fldNameHighlighted
                End If
                If Not PDFField_Copy.Checked And fldKidIndex >= 0 Then

                    Select Case GetFormFieldType(Session("output"), fldNameHighlighted)
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                            ComboBox1.SelectedIndex = 0
                            PDFField_Name.Text = fldNameHighlighted
                            Try
                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                            ComboBox1.SelectedIndex = 1
                            PDFField_Name.Text = fldNameHighlighted
                            PDFField_DefaultText.Text = cFDFDoc.XDPGetValue(fldNameHighlighted)
                            Try
                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                            ComboBox1.SelectedIndex = 2
                            PDFField_Name.Text = fldNameHighlighted
                            Try
                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                            ComboBox1.SelectedIndex = 3
                            PDFField_Name.Text = fldNameHighlighted
                            Try
                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                            ComboBox1.SelectedIndex = 4
                            PDFField_Name.Text = fldNameHighlighted
                            Try
                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                            ComboBox1.SelectedIndex = 5
                            PDFField_Name.Text = fldNameHighlighted
                            Try
                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                            ComboBox1.SelectedIndex = 6
                            PDFField_Name.Text = fldNameHighlighted
                            Try
                                A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, Me.page)
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Case Else
                            If Not ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1 Then
                                ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1 ' = "Data"
                            End If
                    End Select

                End If
            Else
                If PDFField_Copy.Checked Then
                    GoTo STARTHERE
                End If
RedoFieldName:
                PDFField_Dimensions_Paste_0_Left_llx.Checked = False
                PDFField_Dimensions_Paste_2_Right_urx.Checked = False
                PDFField_Dimensions_Paste_4_Width.Checked = False
                PDFField_Dimensions_Paste_5_Height.Checked = False
                PDFField_Dimensions_Paste_1_Bottom_lly.Checked = False
                PDFField_Dimensions_Paste_3_Top_ury.Checked = False
                Dim fldName As String = ComboBox1.Items(ComboBox1.SelectedIndex).ToString() & "Field_" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 3).ToUpper().ToString()
                If PDFField_Copy.Checked And Not String.IsNullOrEmpty(fldNameHighlightedCopy & "") Then
                    fldName = fldNameHighlightedCopy
                    fldNameHighlighted = fldNameHighlightedCopy
                    PDFField_Name.Text = fldNameHighlightedCopy '"ButtonField_" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 3).ToUpper().ToString()
                    GoTo STARTHERE
                Else
                    Select Case ComboBox1.SelectedIndex
                        Case 0
                            PDFField_Name.Text = fldName '"ButtonField_" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 3).ToUpper().ToString()
                            PDFField_Name.Focus()
                        Case 1
                            PDFField_Name.Text = fldName '"TextField_" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 3).ToUpper().ToString()
                            PDFField_Name.Focus()
                        Case 2
                            PDFField_Name.Text = fldName '"ComboBox_" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 3).ToUpper().ToString()
                            PDFField_Name.Focus()
                        Case 3
                            PDFField_Name.Text = fldName '"ListBox_" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 3).ToUpper().ToString()
                            PDFField_Name.Focus()
                        Case 4
                            PDFField_Name.Text = fldName '"RadioButton_" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 3).ToUpper().ToString()
                            PDFField_Name.Focus()
                        Case 5
                            PDFField_Name.Text = fldName
                            PDFField_Name.Focus()
                        Case 6
                            PDFField_Name.Text = fldName '"ListBox_" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 3).ToUpper().ToString()
                            PDFField_Name.Focus()
                        Case 7
                            PDFField_Name.Text = fldName '"ListBox_" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 3).ToUpper().ToString()
                            PDFField_Name.Focus()
                        Case Else
                    End Select
                    If CheckfieldNameExits(fldName) Then
                        GoTo RedoFieldName
                    End If
                    A0_ClearPanelFieldProperties(fldKidIndex, False)
                    PnlFields_Position(True, True)
                End If
            End If
            If _clickPoints.Count = 1 Then
                GoTo GOTORETURN
            End If
STARTHERE:
            Try

                Dim h As Single = getPDFHeight()
                If cUserRect.mIsClick And _clickPoints.Count > 1 Or (_clickPoints.Count > 1 And cUserRect.rect = Nothing) Then
                    If cUserRect.rect = Nothing Then
                        cUserRect.rect = New System.Drawing.RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
                        'cUserRect.rect = GetFieldPositionsReverse2(Session(), cUserRect.rect)
                        A0_PDFFormField_LoadFieldWithRectF(cUserRect.rect, fldNameHighlighted & "", Nothing)
                        'If Not pnlFields.Visible Then pnlFields.Show()
                        GoTo GOTORETURN
                    Else
                        If _clickPoints.Count > 1 Then
                            _clickPoints(0) = New PointF(cUserRect.rect.Left, cUserRect.rect.Top)
                            _clickPoints(1) = New PointF(cUserRect.rect.Right, cUserRect.rect.Bottom)
                        End If
                        Dim ptOrigin As New System.Drawing.Point
                        If _clickPoints(0).Y > _clickPoints(1).Y Then
                            btnTop.Text = _clickPoints(1).Y
                            btnBottom.Text = _clickPoints(0).Y
                            ptOrigin.Y = _clickPoints(1).Y
                        Else
                            btnTop.Text = _clickPoints(0).Y
                            btnBottom.Text = _clickPoints(1).Y
                            ptOrigin.Y = _clickPoints(0).Y
                        End If
                        btnHeight.Text = Math.Abs(CSng(btnBottom.Text) - CSng(btnTop.Text))
                        If _clickPoints(0).X > _clickPoints(1).X Then
                            btnLeft.Text = _clickPoints(1).X
                            btnRight.Text = _clickPoints(0).X
                            ptOrigin.X = _clickPoints(1).X
                        Else
                            btnLeft.Text = _clickPoints(0).X
                            btnRight.Text = _clickPoints(1).X
                            ptOrigin.X = _clickPoints(0).X
                        End If
                        btnWidth.Text = Math.Abs(CSng(btnRight.Text) - CSng(btnLeft.Text))
                        If isDimensionsChecked() Then
                        Else
                            cUserRect.rect = New System.Drawing.RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
                            cUserRect.rect = GetFieldPositionsReverse2(Session(), cUserRect.rect)
                            A0_PDFFormField_LoadFieldWithRectF(cUserRect.rect, fldNameHighlighted & "", Nothing)
                            'If Not pnlFields.Visible Then pnlFields.Show()
                            GoTo GOTORETURN
                        End If
                    End If
                    Try
                        If PDFField_Dimensions_Paste_4_Width.Checked And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked And Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
                            btnWidth.Text = _dimensionsList(4) + 0
                        End If
                        If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                            btnLeft.Text = _dimensionsList(0) + 0
                        End If
                        If PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                            btnRight.Text = _dimensionsList(2) + 0
                        End If
                        If PDFField_Dimensions_Paste_0_Left_llx.Checked Or PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                            btnWidth.Text = CSng(btnRight.Text) - CSng(btnLeft.Text)
                        ElseIf PDFField_Dimensions_Paste_4_Width.Checked Then 'And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked Or Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
                            btnWidth.Text = _dimensionsList(4) + 0
                            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
                            ElseIf PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                                btnLeft.Text = CSng(btnRight.Text) - CSng(btnWidth.Text)
                            Else
                                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
                            End If
                        End If
                        If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                            btnTop.Text = _dimensionsList(3) + 0
                        End If
                        If PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                            btnBottom.Text = _dimensionsList(1) + 0
                        End If
                        If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
                            Else
                                btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
                            End If
                        ElseIf PDFField_Dimensions_Paste_5_Height.Checked Then 'And (Not PDFField_Dimensions_Paste_3_Top_ury.Checked Or Not PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
                            btnHeight.Text = _dimensionsList(5) + 0
                            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                                Else
                                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                                End If
                            ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                    btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                                Else
                                    btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                                End If
                            Else
                                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                                Else
                                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                                End If
                            End If
                        End If
                        Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), h - CSng(btnBottom.Text) + 0, CSng(btnRight.Text), h - CSng(btnTop.Text) + 0)
                        Try
                            If isDimensionsChecked() And Not String.IsNullOrEmpty(fldNameHighlighted) Then
                                Dim r2 As RectangleF = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text) + 0, CSng(btnWidth.Text), CSng(btnHeight.Text))
                                r2 = getRectangleScreen(r2)
                                Dim r3 As RectangleF = cUserRect.rectScreen
                                If (r2.Width > 0 And r2.Height > 0) And (Not Math.Abs(r2.Width - r3.Width) < 0.5F Or Not Math.Abs(r2.Height - r3.Height) < 0.5F Or Not Math.Abs(r2.Left - r3.Left) < 0.5F Or Not Math.Abs(r2.Right - r3.Right) < 0.5F Or Not Math.Abs(r2.Top - r3.Top) < 0.5F Or Not Math.Abs(r2.Bottom - r3.Bottom) < 0.5F) Then
                                    r = New iTextSharp.text.Rectangle(CSng(r2.Left), r2.Bottom, r2.Right, r2.Top)
                                    r = getRectanglePDF(r)
                                    r = GetFieldPositionsReverse(Session(), r)
                                    If Not PDFField_Copy.Checked Then
                                        If Not PDFField_Copy.Checked And Not String.IsNullOrEmpty(fldNameHighlighted & "") And CheckfieldNameExits(fldNameHighlighted & "") Then
                                            mMove = True
                                            _dragging = False
                                            cUserRect.rect = (GetFieldPositionsReverse(r))
                                            _dragging = False
                                            _dragging = False
                                            _dragging = False
                                            Exit Try
                                        ElseIf Not PDFField_Copy.Checked And CheckfieldNameExits(Me.PDFField_Name.Text & "") Then
                                        Else
                                            Me.lblFieldType.Text = "PROPERTIES"
                                        End If
                                        cUserRect.rect = GetFieldPositionsReverse(Session, Me.PDFField_Name.Text)
                                    Else
                                        cUserRect.rect = GetFieldPositionsReverse(Session, Me.PDFField_Name.Text)
                                    End If
                                End If
                            Else
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Catch exDimensions As Exception
                        TimeStampAdd(exDimensions, debugMode) ' NK 2016-06-30exDimensions Else Err.Clear() 'NK DM
                    End Try
                Else
                    If fldKidIndex < 0 And (Not String.IsNullOrEmpty(fldNameHighlighted) And Not cUserRect.rect = Nothing) Then
                        fldKidIndex = getKidFieldIndexByRectanglePDF(cUserRect.rect, fldNameHighlighted)
                    End If
                    If fldKidIndex >= 0 And Not String.IsNullOrEmpty(fldNameHighlighted) Then
                        'A0_PDFFormField_LoadProperties(Session, fldNameHighlighted, Nothing, fldKidIndex)
                    End If
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            Finally
                lblFieldType.Text = PDFField_Name.Text & ""
            End Try
            Try
                If Not cUserRect.rect = Nothing Then
                    Dim r As System.Drawing.RectangleF = cUserRect.rect
                    ToolStripStatusLabel1.Text = "(" & r.Left & "," & (getPDFHeight(Session) - r.Top) & "," & r.Width & "," & r.Height & ")"
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
GOTORETURN:
            Try
                If Not PictureBox1_Panel.Focused Then
                    'PictureBox1_Panel.Focus()
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try

            Return
        Catch exMain As Exception
            TimeStampAdd(exMain, debugMode)
        Finally
            comboBox4Selected = False
            Try
                If Not (cUserRect.rect) = Nothing Then
                    If cUserRect.rect.Width > 1 And cUserRect.rect.Height > 1 Then
                        PnlFields_Position(True, True)
                        'If pnlFields.Visible = False Then pnlFields.Visible = True
                    Else
                        If pnlFields.Visible Then pnlFields.Visible = False
                        If fldNameHighlighted = "" Then
                            fldNameHighlighted = ""
                            fldNameHighlightedCopy = ""
                            PDFField_Copy.Checked = False
                            cUserRect.rect = Nothing
                            cUserRect.pauseDraw = False
                            cUserRect.rectBackup = Nothing
                            cUserRect.rectOld = Nothing
                            refreshPDFImage()
                        End If
                    End If
                ElseIf fldNameHighlighted = "" Then
                    fldNameHighlighted = ""
                    fldNameHighlightedCopy = ""
                    PDFField_Copy.Checked = False
                    cUserRect.rect = Nothing
                    cUserRect.pauseDraw = False
                    cUserRect.rectBackup = Nothing
                    cUserRect.rectOld = Nothing
                    'refreshPDFImage()

                    If pnlFields.Visible Then pnlFields.Visible = False
                Else
                    If pnlFields.Visible Then pnlFields.Visible = False
                End If
            Catch exPosition As Exception
                TimeStampAdd(exPosition, debugMode) ' NK 2016-06-30exPosition Else Err.Clear() 'NK DM
            End Try

            mMove = False
            Try
                If e.Button = Windows.Forms.MouseButtons.Right Then
                    If Not String.IsNullOrEmpty(fldNameHighlighted & "") Then
                        CancelToolStripMenuItem.Visible = False
                        DeleteToolStripMenuItem.Visible = True
                        CopyToolStripMenuItem.Visible = True
                        If PDFField_CopyAppearance.Checked And _copy_Appearance_frmMain.IsCopied Then
                            CancelCopyAppearanceToolStripMenuItem.Visible = True
                            PasteAppearanceToolStripMenuItem.Visible = True
                        Else
                            CancelCopyAppearanceToolStripMenuItem.Visible = False
                            PasteAppearanceToolStripMenuItem.Visible = False
                        End If
                        CopyAppearanceToolStripMenuItem.Visible = True
                        FieldPropertiesToolStripMenuItem.Visible = Not pnlFields.Visible
                        ContextMenuStripRightClick2.Show(A0_PictureBox2, e.Location)
                    ElseIf Not String.IsNullOrEmpty(fldNameHighlightedCopy & "") Then
                        CancelToolStripMenuItem.Visible = True
                        If PDFField_CopyAppearance.Checked And _copy_Appearance_frmMain.IsCopied Then
                            CancelCopyAppearanceToolStripMenuItem.Visible = True
                            PasteAppearanceToolStripMenuItem.Visible = True
                        Else
                            CancelCopyAppearanceToolStripMenuItem.Visible = False
                            PasteAppearanceToolStripMenuItem.Visible = False
                        End If
                        PasteAppearanceToolStripMenuItem.Visible = CancelCopyAppearanceToolStripMenuItem.Visible
                        CopyAppearanceToolStripMenuItem.Visible = False
                        DeleteToolStripMenuItem.Visible = False
                        CopyToolStripMenuItem.Visible = False
                        FieldPropertiesToolStripMenuItem.Visible = Not pnlFields.Visible
                        ContextMenuStripRightClick2.Show(A0_PictureBox2, e.Location)
                    End If
                Else
                    fldNameHighlightedCopy = fldNameHighlighted & ""
                End If

            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                cUserRect.mIsClick = False

            Catch ex As Exception
                Err.Clear()
            End Try
            Try
                Dim pd As Boolean = cUserRect.pauseDraw = True
                If Not fldNameHighlighted = "" Then
                    cUserRect.pauseDraw = True
                    A0_LoadAllFieldsOnPageCombo(fldNameHighlighted & "[" & fldKidIndex & "]")
                Else
                    If cUserRect.mIsClick Then
                        cUserRect.pauseDraw = False
                    Else
                        cUserRect.pauseDraw = True
                    End If
                    A0_LoadAllFieldsOnPageCombo("Select a field")
                End If
                cUserRect.pauseDraw = pd
                comboBox4Selected = False

            Catch ex As Exception
                Err.Clear()
            End Try
            PdfForm_FieldNames_UpdateButton()

        End Try
    End Sub
    Private Sub btnHighLite_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnHighLite.Click
        Try
            fldRectangles = getFieldRectangles(True)
            If Not btnHighLite.BackColor = Drawing.Color.Pink Then
                bgButtonFaceColor = btnHighLite.BackColor
                btnHighLite.BackColor = Drawing.Color.Pink
            Else
                btnHighLite.BackColor = bgButtonFaceColor
            End If
            If cUserRect.rect = Nothing Then
                refreshPDFImage()
            Else
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub PDFEdit_SubmitButtons_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles PDFEdit_Options_SubmitButtons.Paint
    End Sub
    Private Sub PDFEdit_DataFields_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles PDFEdit_DataFields.Paint
    End Sub
    Private Sub PDFEdit_ListBoxes_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs)
    End Sub
    Private Sub PDFEdit_RadioButtons_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles PDFEdit_Options_RadioButtons.Paint
    End Sub
    Private Sub ComboBox_ItemDisplay_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_ItemDisplay.SelectedIndexChanged
        If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
            btnComboBox_ItemDefault.Text = ""
            PDFField_Listbox_Value.SelectionMode = SelectionMode.MultiSimple
            Dim indices As New List(Of Integer)
            For Each i As String In ComboBox_ItemDisplay.SelectedItems
                For idx As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                    If ComboBox_ItemDisplay.Items(idx).ToString = i.ToString Then
                        If String.IsNullOrEmpty(btnComboBox_ItemDefault.Text & "") Then
                            btnComboBox_ItemDefault.Text = idx.ToString & ","
                        Else
                            btnComboBox_ItemDefault.Text &= idx.ToString & ","
                        End If
                        indices.Add(idx)
                    End If
                Next
            Next
            Try
                If PDFField_Listbox_Value.Enabled = True Then
                    PDFField_Listbox_Value.Enabled = False
                    PDFField_Listbox_Value.Items.Clear()
                    For Each itm As String In ComboBox_ItemDisplay.Items
                        PDFField_Listbox_Value.Items.Add(itm)
                    Next
                    Dim itmIdx As Integer = -1
                    For Each itm As String In ComboBox_ItemDisplay.Items
                        itmIdx += 1
                        PDFField_Listbox_Value.Enabled = False
                        PDFField_Listbox_Value.SetSelected(itmIdx, indices.Contains(itmIdx))
                        PDFField_Listbox_Value.Enabled = False
                    Next
                    'PDFField_Listbox_Value.Enabled = False
                End If
                'PDFField_Listbox_Value.SelectedIndex = ComboBox_ItemDisplay.SelectedIndex
            Catch ex As Exception
                Err.Clear()
            Finally
                PDFField_Listbox_Value.Enabled = True
                PDFField_Listbox_Value.Visible = True
                PDFField_Listbox_Value.BringToFront()
            End Try
            btnComboBox_ItemDefault.Text = btnComboBox_ItemDefault.Text.ToString.TrimStart(CStr(","c)).TrimEnd(CStr(","c))
        ElseIf ComboBox_ItemDisplay.SelectedIndex >= 0 Then
            PDFField_Listbox_Value.SelectionMode = SelectionMode.One
            ComboBox_ItemValue.SelectedIndex = ComboBox_ItemDisplay.SelectedIndex + 0
            ComboBox_ItemDisplayText.Text = ComboBox_ItemDisplay.SelectedItem.ToString() & ""
            ComboBox_ItemValueText.Text = ComboBox_ItemValue.SelectedItem.ToString() & ""
            PDFField_DefaultText.Text = ComboBox_ItemDisplay.Text & ""
            btnComboBox_ItemDefault.Text = ComboBox_ItemDisplay.SelectedIndex

            Try
                PDFField_Listbox_Value.Items.Clear()
                For Each itm As String In ComboBox_ItemDisplay.Items
                    PDFField_Listbox_Value.Items.Add(itm)
                Next
                PDFField_Listbox_Value.Enabled = False
                PDFField_Listbox_Value.SelectedIndex = ComboBox_ItemDisplay.SelectedIndex
                PDFField_Listbox_Value.Enabled = True
                PDFField_Listbox_Value.Visible = True
                PDFField_Listbox_Value.BringToFront()
            Catch ex As Exception
                Err.Clear()
            End Try
        End If
        If ComboBox_ItemDisplay.SelectedItems.Count = 1 Then
            btnComboBox_ItemUpdate.Enabled = True
            ComboBox_ItemDelete.Enabled = True
        Else
            btnComboBox_ItemUpdate.Enabled = False
            ComboBox_ItemDelete.Enabled = False
        End If
    End Sub
    Private Sub btnCloseProperties_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCloseProperties.Click
        pnlFields.Visible = False
    End Sub
    Private Sub btnCosEdit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCosEdit.Click
        Dim tmpFn As String = ApplicationDataFolder(False, "temp") & "_cosedit_" & System.IO.Path.GetFileNameWithoutExtension(fpath) & ".pdf"
        If Not String.IsNullOrEmpty(tmpFn) Then
            File.WriteAllBytes(tmpFn, Session("output"))
            If FileExists(appPath & "CosEdit\CosEdit.exe") Then
                Process.Start(appPath & "CosEdit\CosEdit.exe", """" & tmpFn & """")
            Else
                SelectProgramToolStripMenuItem_Click(Me, e)
            End If
        End If
    End Sub
    Private Sub btnViewInAcrobat_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnViewInAcrobat.Click
        Dim tmpFn As String = ApplicationDataFolder(False, "temp") & "_acrobat_" & System.IO.Path.GetFileNameWithoutExtension(fpath) & ".pdf"
        If Not String.IsNullOrEmpty(tmpFn) Then
            File.WriteAllBytes(tmpFn, Session("output"))
            If FileExists("C:\Program Files\Adobe\Acrobat 8.0\Acrobat\Acrobat.exe") Then
                Process.Start("C:\Program Files\Adobe\Acrobat 8.0\Acrobat\Acrobat.exe", """" & tmpFn & """")
            Else
                SelectProgramToolStripMenuItem_Click(Me, e)
            End If
        End If
    End Sub
    Public Sub btnRemoveField_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnRemoveField.Click
        Try
            Dim tmpFieldName As String = PDFField_Name.Text & ""
            Session("output") = RemoveFormField(Session("output"), PDFField_Name.Text & "", Me.page)
            fldNameHighlighted = ""
            cUserRect._highLightFieldName = ""
            cUserRect.rect = Nothing
            cUserRect.mIsClick = False
            mMove = False
            fldRectangles = getFieldRectangles(True)
            fldKidIndex = -1
            PDFField_Index.Text = fldKidIndex.ToString()
            A0_LoadPDF(True)
            If pnlFields.Visible Then
                pnlFields.Visible = False
            End If
            TimeStampAdd("Removed Field: " & tmpFieldName & "")
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub btnField_AddCombobox_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnField_AddCombobox.Click
        Dim rectTempScreen As System.Drawing.RectangleF = cUserRect.rectScreen
        Dim rectTempPDF As System.Drawing.RectangleF = cUserRect.rect
        If PDFField_Dimensions_Paste_0_Left_llx.Checked Or PDFField_Dimensions_Paste_2_Right_urx.Checked Then
            btnWidth.Text = CSng(btnRight.Text) - CSng(btnLeft.Text)
        ElseIf PDFField_Dimensions_Paste_4_Width.Checked Then 'And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked Or Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
            btnWidth.Text = _dimensionsList(4) + 0
            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            ElseIf PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                btnLeft.Text = CSng(btnRight.Text) - CSng(btnWidth.Text)
            Else
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            End If
        End If
        If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
            Else
                btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
            End If
        ElseIf PDFField_Dimensions_Paste_5_Height.Checked Then 'And (Not PDFField_Dimensions_Paste_3_Top_ury.Checked Or Not PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
            btnHeight.Text = _dimensionsList(5) + 0
            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                Else
                    btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                End If
            Else
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            End If
        End If
        If Not fldNameHighlighted.IsNullOrEmpty() And CheckfieldNameExits(fldNameHighlighted & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), fldNameHighlighted, Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        ElseIf CheckfieldNameExits(Me.PDFField_Name.Text & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), Me.PDFField_Name.Text & "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        Else
            Me.lblFieldType.Text = "PROPERTIES"
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        End If
        fldRectangles = getFieldRectangles(True)
        cUserRect.rect = rectTempPDF
        cUserRect._highLightFieldName = fldNameHighlighted
        fldKidIndex = getKidFieldIndexByRectanglePDF(rectTempPDF)
        PDFField_Index.Text = fldKidIndex.ToString()
        A0_LoadPDF(True)
        Try
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    _cFDFDoc = cFDFDoc(True)
                End If
            End If
        Catch exLoadFDFDoc As Exception
            TimeStampAdd(exLoadFDFDoc, debugMode) ' NK 2016-06-30exLoadFDFDoc Else Err.Clear() 'NK DM
        End Try
        If fldKidIndex < 0 Then fldKidIndex = 0
        A0_PDFFormField_LoadProperties(Session(), fldNameHighlighted, Me.page, fldKidIndex)
        calculateFields()
        Return
    End Sub
    Public Sub btnField_AddCheckBox_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnField_AddCheckBox.Click
        Dim rectTempScreen As System.Drawing.RectangleF = cUserRect.rectScreen
        Dim rectTempPDF As System.Drawing.RectangleF = cUserRect.rect
        If PDFField_Dimensions_Paste_0_Left_llx.Checked Or PDFField_Dimensions_Paste_2_Right_urx.Checked Then
            btnWidth.Text = CSng(btnRight.Text) - CSng(btnLeft.Text)
        ElseIf PDFField_Dimensions_Paste_4_Width.Checked Then 'And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked Or Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
            btnWidth.Text = _dimensionsList(4) + 0
            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            ElseIf PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                btnLeft.Text = CSng(btnRight.Text) - CSng(btnWidth.Text)
            Else
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            End If
        End If
        If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
            Else
                btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
            End If
        ElseIf PDFField_Dimensions_Paste_5_Height.Checked Then 'And (Not PDFField_Dimensions_Paste_3_Top_ury.Checked Or Not PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
            btnHeight.Text = _dimensionsList(5) + 0
            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                Else
                    btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                End If
            Else
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            End If
        End If
        If Not fldNameHighlighted.IsNullOrEmpty() And CheckfieldNameExits(fldNameHighlighted & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), fldNameHighlighted, Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        ElseIf CheckfieldNameExits(Me.PDFField_Name.Text & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), Me.PDFField_Name.Text & "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        Else
            Me.lblFieldType.Text = "PROPERTIES"
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        End If
        calculateFields()

        Return
returnSub:
    End Sub
    Public Sub PDFField_Action_Add_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Add.Click
        Dim ndTrigger As New TreeNode, ndAction As New TreeNode
        Select Case PDFField_Action_Select.Items(PDFField_Action_Select.SelectedIndex).ToString.ToLower
            Case "Execute menu item".ToLower
                ndAction = New TreeNode("Named")
                ndAction.Name = "Name"
            Case "Run a JavaScript".ToLower
                ndAction = New TreeNode("JavaScript")
                ndAction.Name = "JavaScript"
                PDFField_Action_Panel_JavaScript_TextBox.Text = ""
            Case "Submit a form".ToLower
                ndAction = New TreeNode("SubmitForm")
                ndAction.Name = "SubmitForm"
            Case Else
                Return
        End Select
        Select Case PDFField_Action_Trigger_Select.Items(PDFField_Action_Trigger_Select.SelectedIndex).ToString.ToLower
            Case "Mouse Down".ToLower
                If PDFField_Actions_TreeView.Nodes("Mouse Down") Is Nothing Then
                    ndTrigger = New TreeNode("Mouse Down")
                    ndTrigger.Name = "Mouse Down"
                    ndAction.Name = ndAction.Name & CStr(1).ToString
                    ndTrigger.Nodes.Add(ndAction)
                    PDFField_Actions_TreeView.Nodes.Add(ndTrigger)
                Else
                    ndAction.Name = ndAction.Name & CStr(PDFField_Actions_TreeView.Nodes("Mouse Down").Nodes.Count + 1).ToString & "_add" & Guid.NewGuid.ToString.Replace("-", "").Substring(0, 10)
                    PDFField_Actions_TreeView.Nodes("Mouse Down").Nodes.Add(ndAction)
                End If
                PDFField_Actions_TreeView_Display_Show()
                PDFField_Actions_TreeView.SelectedNode = PDFField_Actions_TreeView.Nodes("Mouse Down").Nodes(PDFField_Actions_TreeView.Nodes("Mouse Down").Nodes.Count - 1)
            Case "Mouse Up".ToLower
                If PDFField_Actions_TreeView.Nodes("Mouse Up") Is Nothing Then
                    ndTrigger = New TreeNode("Mouse Up")
                    ndTrigger.Name = "Mouse Up"
                    ndAction.Name = ndAction.Name & CStr(1).ToString
                    ndTrigger.Nodes.Add(ndAction)
                    PDFField_Actions_TreeView.Nodes.Add(ndTrigger)
                Else
                    ndAction.Name = ndAction.Name & CStr(PDFField_Actions_TreeView.Nodes("Mouse Up").Nodes.Count + 1).ToString & "_add" & Guid.NewGuid.ToString.Replace("-", "").Substring(0, 10)
                    PDFField_Actions_TreeView.Nodes("Mouse Up").Nodes.Add(ndAction)
                End If
                PDFField_Actions_TreeView_Display_Show()
                PDFField_Actions_TreeView.SelectedNode = PDFField_Actions_TreeView.Nodes("Mouse Up").Nodes(PDFField_Actions_TreeView.Nodes("Mouse Up").Nodes.Count - 1)
            Case "Mouse Enter".ToLower
                If PDFField_Actions_TreeView.Nodes("Mouse Enter") Is Nothing Then
                    ndTrigger = New TreeNode("Mouse Enter")
                    ndTrigger.Name = "Mouse Enter"
                    ndAction.Name = ndAction.Name & CStr(1).ToString
                    ndTrigger.Nodes.Add(ndAction)
                    PDFField_Actions_TreeView.Nodes.Add(ndTrigger)
                Else
                    ndAction.Name = ndAction.Name & CStr(PDFField_Actions_TreeView.Nodes("Mouse Enter").Nodes.Count + 1).ToString & "_add" & Guid.NewGuid.ToString.Replace("-", "").Substring(0, 10)
                    PDFField_Actions_TreeView.Nodes("Mouse Enter").Nodes.Add(ndAction)
                    PDFField_Actions_TreeView.SelectedNode = ndAction
                End If
                PDFField_Actions_TreeView_Display_Show()
                PDFField_Actions_TreeView.SelectedNode = PDFField_Actions_TreeView.Nodes("Mouse Enter").Nodes(PDFField_Actions_TreeView.Nodes("Mouse Enter").Nodes.Count - 1)
            Case "Mouse Exit".ToLower
                If PDFField_Actions_TreeView.Nodes("Mouse Exit") Is Nothing Then
                    ndTrigger = New TreeNode("Mouse Exit")
                    ndTrigger.Name = "Mouse Exit"
                    ndAction.Name = ndAction.Name & CStr(1).ToString
                    ndTrigger.Nodes.Add(ndAction)
                    PDFField_Actions_TreeView.Nodes.Add(ndTrigger)
                Else
                    ndAction.Name = ndAction.Name & CStr(PDFField_Actions_TreeView.Nodes("Mouse Exit").Nodes.Count + 1).ToString & "_add" & Guid.NewGuid.ToString.Replace("-", "").Substring(0, 10)
                    PDFField_Actions_TreeView.Nodes("Mouse Exit").Nodes.Add(ndAction)
                    PDFField_Actions_TreeView.SelectedNode = ndAction
                End If
                PDFField_Actions_TreeView_Display_Show()
                PDFField_Actions_TreeView.SelectedNode = PDFField_Actions_TreeView.Nodes("Mouse Exit").Nodes(PDFField_Actions_TreeView.Nodes("Mouse Exit").Nodes.Count - 1)
            Case "On Focus".ToLower
                If PDFField_Actions_TreeView.Nodes("On Focus") Is Nothing Then
                    ndTrigger = New TreeNode("On Focus")
                    ndTrigger.Name = "On Focus"
                    ndAction.Name = ndAction.Name & CStr(1).ToString
                    ndTrigger.Nodes.Add(ndAction)
                    PDFField_Actions_TreeView.Nodes.Add(ndTrigger)
                Else
                    ndAction.Name = ndAction.Name & CStr(PDFField_Actions_TreeView.Nodes("On Focus").Nodes.Count + 1).ToString & "_add" & Guid.NewGuid.ToString.Replace("-", "").Substring(0, 10)
                    PDFField_Actions_TreeView.Nodes("On Focus").Nodes.Add(ndAction)
                    PDFField_Actions_TreeView.SelectedNode = ndAction
                End If
                PDFField_Actions_TreeView_Display_Show()
                PDFField_Actions_TreeView.SelectedNode = PDFField_Actions_TreeView.Nodes("On Focus").Nodes(PDFField_Actions_TreeView.Nodes("On Focus").Nodes.Count - 1)
            Case "On Blur".ToLower
                If PDFField_Actions_TreeView.Nodes("On Blur") Is Nothing Then
                    ndTrigger = New TreeNode("On Blur")
                    ndTrigger.Name = "On Blur"
                    ndAction.Name = ndAction.Name & CStr(1).ToString
                    ndTrigger.Nodes.Add(ndAction)
                    PDFField_Actions_TreeView.Nodes.Add(ndTrigger)
                Else
                    ndAction.Name = ndAction.Name & CStr(PDFField_Actions_TreeView.Nodes("On Blur").Nodes.Count + 1).ToString & "_add" & Guid.NewGuid.ToString.Replace("-", "").Substring(0, 10)
                    PDFField_Actions_TreeView.Nodes("On Blur").Nodes.Add(ndAction)
                    PDFField_Actions_TreeView.SelectedNode = ndAction
                End If
                PDFField_Actions_TreeView_Display_Show()
            Case Else
                Return
        End Select
        PDFField_Actions_TreeView.SelectedNode = PDFField_Actions_TreeView.Nodes(PDFField_Action_Trigger_Select.Items(PDFField_Action_Trigger_Select.SelectedIndex).ToString).Nodes(PDFField_Actions_TreeView.Nodes(PDFField_Action_Trigger_Select.Items(PDFField_Action_Trigger_Select.SelectedIndex).ToString).Nodes.Count - 1)
        PDFField_Actions_TreeView_Display.SelectedNode = PDFField_Actions_TreeView_Display.Nodes(PDFField_Action_Trigger_Select.Items(PDFField_Action_Trigger_Select.SelectedIndex).ToString).Nodes(PDFField_Actions_TreeView_Display.Nodes(PDFField_Action_Trigger_Select.Items(PDFField_Action_Trigger_Select.SelectedIndex).ToString).Nodes.Count - 1)
        PDFField_Action_EditBtn_Click(Me, New EventArgs())
    End Sub
    Private Sub PDFField_Actions_TreeView_NodeMouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.TreeNodeMouseClickEventArgs) Handles PDFField_Actions_TreeView.NodeMouseClick
        Dim nd As TreeNode = e.Node
        While Not nd Is Nothing
            Select Case nd.Text.ToString.ToLower
                Case "Mouse Down".ToLower
                    PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                Case "Mouse Up".ToLower
                    PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                Case "Mouse Enter".ToLower
                    PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                Case "Mouse Exit".ToLower
                    PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                Case "On Focus".ToLower
                    PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                Case "On Blur".ToLower
                    PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                Case "SubmitForm".ToLower
                    PDFField_Action_Select.SelectedItem = "Submit a form"
                Case "JavaScript".ToLower
                    PDFField_Action_Select.SelectedItem = "Run a JavaScript"
                Case "Named".ToLower
                    PDFField_Action_Select.SelectedItem = "Execute menu item"
            End Select
            Try
                nd = nd.Parent
            Catch ex As Exception
                nd = Nothing
                TimeStampAdd(ex, debugMode)
                Exit While
            End Try
        End While
    End Sub
    Private Sub PDFField_Actions_TreeView_Display_AfterSelect(ByVal sender As System.Object, ByVal e As System.Windows.Forms.TreeViewEventArgs) Handles PDFField_Actions_TreeView_Display.AfterSelect
    End Sub
    Public Function selectNodeTreeview(ByVal nodes As TreeNode, ByVal node_path As String, ByVal node_name As String) As Boolean
        For iNode As Integer = 0 To nodes.Nodes.Count - 1
            Try
                If nodes.Nodes(iNode).FullPath = node_path And nodes.Nodes(iNode).Name = node_name Then
                    PDFField_Actions_TreeView.SelectedNode = nodes.Nodes(iNode)
                    Return True
                ElseIf nodes.Nodes(iNode).Nodes.Count > 0 Then
                    If selectNodeTreeview(nodes.Nodes(iNode), node_path, node_name) Then
                        Return True
                    End If
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        Next
        Return False
    End Function
    Private Sub PDFField_Actions_TreeView_Display_MouseDoubleClick(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles PDFField_Actions_TreeView_Display.MouseDoubleClick
        Try
            If PDFField_Action_Select.SelectedItem Is Nothing Then
                Return
            End If
            Select Case PDFField_Actions_TreeView_Display.SelectedNode.Text.ToString.ToLower
                Case "Mouse Down".ToLower
                    Return
                Case "Mouse Up".ToLower
                    Return
                Case "Mouse Enter".ToLower
                    Return
                Case "Mouse Exit".ToLower
                    Return
                Case "On Focus".ToLower
                    Return
                Case "On Blur".ToLower
                    Return
                Case Else
                    Exit Select
            End Select
            PDFField_Action_EditBtn_Click(Me, New EventArgs())
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Actions_TreeView_Display_NodeMouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.TreeNodeMouseClickEventArgs) Handles PDFField_Actions_TreeView_Display.NodeMouseClick
        Dim nd As TreeNode = e.Node
        Try
            For iNode As Integer = 0 To PDFField_Actions_TreeView.Nodes.Count - 1
                If PDFField_Actions_TreeView.Nodes(iNode).FullPath = e.Node.FullPath And PDFField_Actions_TreeView.Nodes(iNode).Name = e.Node.Name Then
                    PDFField_Actions_TreeView.SelectedNode = PDFField_Actions_TreeView.Nodes(iNode)
                    Exit For
                ElseIf PDFField_Actions_TreeView.Nodes(iNode).Nodes.Count > 0 Then
                    If selectNodeTreeview(PDFField_Actions_TreeView.Nodes(iNode), nd.FullPath, nd.Name) Then
                        Exit For
                    End If
                End If
            Next
            While Not nd Is Nothing
                Select Case nd.Text.ToString.ToLower
                    Case "Mouse Down".ToLower
                        PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                    Case "Mouse Up".ToLower
                        PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                    Case "Mouse Enter".ToLower
                        PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                    Case "Mouse Exit".ToLower
                        PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                    Case "On Focus".ToLower
                        PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                    Case "On Blur".ToLower
                        PDFField_Action_Trigger_Select.SelectedItem = nd.Text
                    Case "SubmitForm".ToLower
                        PDFField_Action_Select.SelectedItem = "Submit a form"
                    Case "JavaScript".ToLower
                        PDFField_Action_Select.SelectedItem = "Run a JavaScript"
                    Case "Named".ToLower
                        PDFField_Action_Select.SelectedItem = "Execute menu item"
                End Select
                Try
                    nd = nd.Parent
                Catch ex2 As Exception
                    nd = Nothing
                    TimeStampAdd(ex2, debugMode)
                    Exit While
                End Try
            End While
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Action_UpBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_UpBtn.Click
        Dim nd As TreeNode = PDFField_Actions_TreeView.SelectedNode.Clone
        Dim iNode As Integer = PDFField_Actions_TreeView.SelectedNode.Index
        Select Case nd.Text.ToString.ToLower
            Case "Mouse Down".ToLower
            Case "Mouse Up".ToLower
            Case "Mouse Enter".ToLower
            Case "Mouse Exit".ToLower
            Case "On Focus".ToLower
            Case "On Blur".ToLower
            Case "SubmitForm".ToLower
                If iNode > 0 Then
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.Insert(iNode - 1, nd)
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.RemoveAt(iNode + 1)
                    PDFField_Actions_TreeView.SelectedNode = nd
                    PDFField_Actions_TreeView_Display_Show()
                End If
            Case "JavaScript".ToLower
                If iNode > 0 Then
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.Insert(iNode - 1, nd)
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.RemoveAt(iNode + 1)
                    PDFField_Actions_TreeView.SelectedNode = nd
                    PDFField_Actions_TreeView_Display_Show()
                End If
            Case "Named".ToLower
                If iNode > 0 Then
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.Insert(iNode - 1, nd)
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.RemoveAt(iNode + 1)
                    PDFField_Actions_TreeView.SelectedNode = nd
                    PDFField_Actions_TreeView_Display_Show()
                End If
        End Select
    End Sub
    Private Sub PDFField_Action_DownBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_DownBtn.Click
        Dim nd As TreeNode = PDFField_Actions_TreeView.SelectedNode.Clone
        Dim iNode As Integer = PDFField_Actions_TreeView.SelectedNode.Index
        Select Case nd.Text.ToString.ToLower
            Case "Mouse Down".ToLower
            Case "Mouse Up".ToLower
            Case "Mouse Enter".ToLower
            Case "Mouse Exit".ToLower
            Case "On Focus".ToLower
            Case "On Blur".ToLower
            Case "SubmitForm".ToLower
                If iNode < PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.Count - 1 Then
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.Insert(iNode + 2, nd)
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.RemoveAt(iNode)
                    PDFField_Actions_TreeView.SelectedNode = nd
                    PDFField_Actions_TreeView_Display_Show()
                End If
            Case "JavaScript".ToLower
                If iNode < PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.Count - 1 Then
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.Insert(iNode + 2, nd)
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.RemoveAt(iNode)
                    PDFField_Actions_TreeView.SelectedNode = nd
                    PDFField_Actions_TreeView_Display_Show()
                End If
            Case "Named".ToLower
                If iNode < PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.Count - 1 Then
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.Insert(iNode + 2, nd)
                    PDFField_Actions_TreeView.SelectedNode.Parent.Nodes.RemoveAt(iNode)
                    PDFField_Actions_TreeView.SelectedNode = nd
                    PDFField_Actions_TreeView_Display_Show()
                End If
        End Select
    End Sub
    Public Sub ShowHidePDFField_Action_Panels(ByVal pnlShow As Panel)
        Try
            PDFField_Action_Panel_List.Visible = False
            PDFField_Action_Panel_Named.Visible = False
            PDFField_Action_Panel_SubmitForm.Visible = False
            PDFField_Action_Panel_JavaScript.Visible = False
            PDFField_Action_Panel_SubmitForm_FieldsList_Panel.Visible = False
            PDFField_Action_Panel_List.Visible = False
            If pnlShow Is Nothing Then
                PDFField_Action_Panel_List.Visible = True
            Else
                pnlShow.Visible = True
            End If
        Catch ex As Exception
            PDFField_Action_Panel_List.Visible = True
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub ShowHidePDFField_Action_Panels(ByVal GroupBox1 As GroupBox)
        Try
            PDFField_Action_Panel_List.Visible = False
            PDFField_Action_Panel_Named.Visible = False
            PDFField_Action_Panel_SubmitForm.Visible = False
            PDFField_Action_Panel_JavaScript.Visible = False
            PDFField_Action_Panel_SubmitForm_FieldsList_Panel.Visible = False
            If GroupBox1 Is Nothing Then
                PDFField_Action_Panel_List.Visible = True
            Else
                GroupBox1.Visible = True
            End If
        Catch ex As Exception
            PDFField_Action_Panel_List.Visible = True
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Action_EditBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_EditBtn.Click
        Dim blnHasFields As Boolean = False
        If PDFField_Action_Select.SelectedItem Is Nothing Then
            Return
        End If
        Select Case PDFField_Actions_TreeView_Display.SelectedNode.Text.ToString.ToLower
            Case "Mouse Down".ToLower
                Return
            Case "Mouse Up".ToLower
                Return
            Case "Mouse Enter".ToLower
                Return
            Case "Mouse Exit".ToLower
                Return
            Case "On Focus".ToLower
                Return
            Case "On Blur".ToLower
                Return
            Case Else
                Exit Select
        End Select
        Select Case CStr(PDFField_Action_Select.SelectedItem.ToString.ToLower)
            Case "Execute menu item".ToLower
                Try
                    If PDFField_Actions_TreeView.SelectedNode.Nodes.Count > 0 Then
                        If PDFField_Actions_TreeView.SelectedNode.Nodes(0).Nodes.Count > 0 Then
                            PDFField_Action_Panel_Named_List.SelectedItem = PDFField_Actions_TreeView.SelectedNode.Nodes(0).Nodes(0).Text
                        Else
                            PDFField_Action_Panel_Named_List.SelectedIndex = 0
                        End If
                    Else
                        PDFField_Action_Panel_Named_List.SelectedIndex = 0
                    End If
                Catch ex As Exception
                    PDFField_Action_Panel_Named_List.SelectedIndex = -1
                    TimeStampAdd(ex, debugMode)
                End Try
                ShowHidePDFField_Action_Panels(PDFField_Action_Panel_Named)
            Case "Run a JavaScript".ToLower
                For Each nd As TreeNode In PDFField_Actions_TreeView.SelectedNode.Nodes
                    Try
                        If nd.Text.ToLower = "js".ToLower Then
                            PDFField_Action_Panel_JavaScript_TextBox.Text = nd.Nodes(0).Text & ""
                            Exit For
                        End If
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                Next
                ShowHidePDFField_Action_Panels(PDFField_Action_Panel_JavaScript)
            Case "Submit a form".ToLower
                Dim intFF As Integer = 0
                Dim submitPDF As Boolean = False
                For nd As Integer = 0 To PDFField_Actions_TreeView.SelectedNode.Nodes.Count - 1
                    If PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Text.ToLower = "url".ToLower Then
                    ElseIf PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Text.ToLower = "flags".ToLower Then
                        intFF = CInt(PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Nodes(0).Text)
                        Exit For
                    End If
                Next
                PDFField_Action_Panel_SubmitForm_Format.SelectedItem = "FDF"
                If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_PDF Then
                    PDFField_Action_Panel_SubmitForm_Format.SelectedItem = "PDF"
                    intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_PDF
                    submitPDF = True
                Else
                    submitPDF = False
                End If
                If intFF >= 0 Then
                    If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_EMBED_FORM Then
                        intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_EMBED_FORM
                    Else
                    End If
                    If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_EXCL_F_KEY Then
                        intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_EXCL_F_KEY
                    Else
                    End If
                    If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_EXCL_NON_USER_ANNOTS Then
                        intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_EXCL_NON_USER_ANNOTS
                    Else
                    End If
                    If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_CANONICAL_FORMAT Then
                        intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_CANONICAL_FORMAT
                    Else
                    End If
                    If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_ANNOTATIONS Then
                        intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_ANNOTATIONS
                        PDFField_Action_Panel_SubmitForm_Comments.Checked = True
                    Else
                        PDFField_Action_Panel_SubmitForm_Comments.Checked = False
                    End If
                    If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_APPEND_SAVES Then
                        intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_APPEND_SAVES
                        PDFField_Action_Panel_SubmitForm_IncrementalChangesToPDF.Checked = True
                    Else
                        PDFField_Action_Panel_SubmitForm_IncrementalChangesToPDF.Checked = False
                    End If
                    If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_XFDF Then
                        intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_XFDF
                        PDFField_Action_Panel_SubmitForm_Format.SelectedItem = "XFDF"
                    Else
                        If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_COORDINATES Then
                            intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_COORDINATES
                        Else
                        End If
                        If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_HTML_GET Then
                            intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_HTML_GET
                            PDFField_Action_Panel_SubmitForm_Format.SelectedItem = "HTML"
                        Else
                        End If
                        If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_HTML_FORMAT Then
                            intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_HTML_FORMAT
                            PDFField_Action_Panel_SubmitForm_Format.SelectedItem = "HTML"
                        End If
                        If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_NO_VALUE_FIELDS Then
                            intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_NO_VALUE_FIELDS
                            PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked = True
                        Else
                            PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked = False
                        End If
                        If intFF >= iTextSharp.text.pdf.PdfAction.SUBMIT_EXCLUDE Then
                            intFF -= iTextSharp.text.pdf.PdfAction.SUBMIT_EXCLUDE
                            PDFField_Action_Panel_SubmitForm_OnlyTheseFields.Checked = True
                            PDFField_Action_Panel_SubmitForm_FieldsIncludeSelected.Checked = False
                            PDFField_Action_Panel_SubmitForm_FieldsExcludeSelected.Checked = True
                        Else
                            PDFField_Action_Panel_SubmitForm_OnlyTheseFields.Checked = True
                            PDFField_Action_Panel_SubmitForm_FieldsIncludeSelected.Checked = True
                            PDFField_Action_Panel_SubmitForm_FieldsExcludeSelected.Checked = False
                        End If
                    End If
                End If
                Dim blnFound As Boolean = False
                Dim blnFoundFields As Boolean = False
                Dim blnFoundURL As Boolean = False
                Dim lstFieldNames As New List(Of String)
                For Each xField As FDFField In cFDFDoc.FDFGetAllFields()
                    Try
                        If Not lstFieldNames.Contains(xField.FieldName) Then
                            lstFieldNames.Add(xField.FieldName)
                        End If
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                Next
                For nd As Integer = 0 To PDFField_Actions_TreeView.SelectedNode.Nodes.Count - 1
                    If PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Text.ToLower = "url".ToLower Then
                        PDFField_Action_Panel_SubmitForm_URL.Text = PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Nodes(0).Text
                        blnFoundURL = True
                    ElseIf PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Text.ToLower = "flags".ToLower Then
                        blnFound = True
                        intFF = CInt(PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Nodes(0).Text)
                    ElseIf PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Text.ToLower = "fields".ToLower Then
                        blnFoundFields = True
                        blnHasFields = True
                        If PDFField_Action_Panel_SubmitForm_AllFields.Checked Then
                            PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Clear()
                        Else
                            PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Clear()
                            For Each fldNode As TreeNode In PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Nodes
                                Dim fieldsNode As New TreeNode(fldNode.Text & "")
                                fieldsNode.Name = fldNode.Text & ""
                                fieldsNode.Text = fldNode.Text & ""
                                fieldsNode.Checked = True
                                If lstFieldNames.Contains(fldNode.Text) Then
                                    lstFieldNames.Remove(fldNode.Text)
                                End If
                                PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Add(fieldsNode)
                            Next
                        End If
                    End If
                Next
                If blnFoundFields Or PDFField_Action_Panel_SubmitForm_FieldsExcludeSelected.Checked = True Then
                    For Each fldCheck As String In lstFieldNames.ToArray
                        PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Add(fldCheck & "")
                    Next
                    PDFField_Action_Panel_SubmitForm_OnlyTheseFields.Checked = True
                Else
                    If Not PDFField_Action_Panel_SubmitForm_FieldsExcludeSelected.Checked = True Then
                        PDFField_Action_Panel_SubmitForm_AllFields.Checked = True
                    End If
                End If
                If Not blnFound = True Then
                    If intFF > 0 Then
                        Dim flagsNode As New TreeNode("FLAGS")
                        flagsNode.Name = "FLAGS"
                        flagsNode.Text = "FLAGS"
                        flagsNode.Nodes.Add(CStr(intFF))
                        PDFField_Actions_TreeView.SelectedNode.Nodes.Add(flagsNode)
                    End If
                End If
                If Not blnFoundURL = True Then
                    Dim urlNode As New TreeNode("URL")
                    urlNode.Name = "URL"
                    urlNode.Text = "URL"
                    urlNode.Nodes.Add(PDFField_Action_Panel_SubmitForm_URL.Text & "")
                    PDFField_Actions_TreeView.SelectedNode.Nodes.Add(urlNode)
                End If
                ShowHidePDFField_Action_Panels(PDFField_Action_Panel_SubmitForm)
        End Select
        If blnHasFields = False Then
            PDFField_Action_Panel_SubmitForm_AllFields.Checked = True
        End If
    End Sub
    Private Sub PDFField_Action_DeleteBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_DeleteBtn.Click
        Dim blnHasFields As Boolean = False
        If PDFField_Actions_TreeView_Display.SelectedNode Is Nothing Then Return
        If PDFField_Actions_TreeView.SelectedNode Is Nothing Then Return
        If PDFField_Action_Select.SelectedItem Is Nothing Then Return
        Select Case PDFField_Actions_TreeView_Display.SelectedNode.Text.ToString.ToLower
            Case "Mouse Down".ToLower
                Return
            Case "Mouse Up".ToLower
                Return
            Case "Mouse Enter".ToLower
                Return
            Case "Mouse Exit".ToLower
                Return
            Case "On Focus".ToLower
                Return
            Case "On Blur".ToLower
                Return
            Case Else
                PDFField_Actions_TreeView.SelectedNode.Remove()
                PDFField_Actions_TreeView_Display.SelectedNode.Remove()
        End Select
    End Sub
    Private Sub PDFField_Action_Panel_SubmitForm_Ok_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_SubmitForm_Ok.Click
        Dim intFF As Integer = 0
        Dim submitPDF As Boolean = False
        If PDFField_Action_Panel_SubmitForm_Format.SelectedItem = "PDF" Then
            intFF += iTextSharp.text.pdf.PdfAction.SUBMIT_PDF
            submitPDF = True
        Else
            submitPDF = False
        End If
        If Not submitPDF Then
            If PDFField_Action_Panel_SubmitForm_Format.SelectedItem = "HTML" Then
                intFF += iTextSharp.text.pdf.PdfAction.SUBMIT_HTML_FORMAT
            Else
                If PDFField_Action_Panel_SubmitForm_Comments.Checked Then
                    intFF += iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_ANNOTATIONS
                Else
                End If
                If PDFField_Action_Panel_SubmitForm_Format.SelectedItem = "XFDF" Then
                    intFF += iTextSharp.text.pdf.PdfAction.SUBMIT_XFDF
                Else
                    If PDFField_Action_Panel_SubmitForm_IncrementalChangesToPDF.Checked Then
                        intFF += iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_APPEND_SAVES
                    Else
                    End If
                End If
                If PDFField_Action_Panel_SubmitForm_AllFields.Checked Then
                    intFF += iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_NO_VALUE_FIELDS
                ElseIf PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked Then
                    intFF += iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_NO_VALUE_FIELDS
                ElseIf PDFField_Action_Panel_SubmitForm_FieldsExcludeSelected.Checked Then
                    intFF += iTextSharp.text.pdf.PdfAction.SUBMIT_EXCLUDE
                ElseIf PDFField_Action_Panel_SubmitForm_OnlyTheseFields.Checked Then
                End If
            End If
        End If
        Dim blnFound As Boolean = False
        Dim blnFoundFields As Boolean = False
        Dim blnFoundURL As Boolean = False
        For nd As Integer = 0 To PDFField_Actions_TreeView.SelectedNode.Nodes.Count - 1
            If PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Text.ToLower = "url".ToLower Then
                PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Nodes(0).Text = PDFField_Action_Panel_SubmitForm_URL.Text
                blnFoundURL = True
            ElseIf PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Text.ToLower = "flags".ToLower Then
                blnFound = True
                PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Nodes(0).Text = CStr(intFF)
            ElseIf PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Text.ToLower = "fields".ToLower Then
                blnFoundFields = True
                If PDFField_Action_Panel_SubmitForm_AllFields.Checked Then
                    PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Remove()
                Else
                    PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Remove()
                    Dim fieldsNode As New TreeNode("FIELDS")
                    fieldsNode.Name = "FIELDS"
                    fieldsNode.Text = "FIELDS"
                    For Each fldCheck As TreeNode In PDFField_Action_Panel_SubmitForm_FieldsList.Nodes
                        If fldCheck.Checked Then
                            fieldsNode.Nodes.Add(fldCheck.Text & "")
                        End If
                    Next
                    PDFField_Actions_TreeView.SelectedNode.Nodes.Add(fieldsNode)
                End If
            End If
        Next
        If Not PDFField_Action_Panel_SubmitForm_AllFields.Checked Then
            If Not blnFoundFields = True Then
                Dim fieldsNode As New TreeNode("FIELDS")
                fieldsNode.Name = "FIELDS"
                fieldsNode.Text = "FIELDS"
                For Each fldCheck As TreeNode In PDFField_Action_Panel_SubmitForm_FieldsList.Nodes
                    If fldCheck.Checked Then
                        fieldsNode.Nodes.Add(fldCheck.Text & "")
                    End If
                Next
                PDFField_Actions_TreeView.SelectedNode.Nodes.Add(fieldsNode)
            End If
        End If
        If Not blnFound = True Then
            If intFF > 0 Then
                Dim flagsNode As New TreeNode("FLAGS")
                flagsNode.Name = "FLAGS"
                flagsNode.Text = "FLAGS"
                flagsNode.Nodes.Add(CStr(intFF))
                PDFField_Actions_TreeView.SelectedNode.Nodes.Add(flagsNode)
            End If
        End If
        If Not blnFoundURL = True Then
            Dim urlNode As New TreeNode("URL")
            urlNode.Name = "URL"
            urlNode.Text = "URL"
            urlNode.Nodes.Add(PDFField_Action_Panel_SubmitForm_URL.Text & "")
            PDFField_Actions_TreeView.SelectedNode.Nodes.Add(urlNode)
        End If
        PDFField_Actions_TreeView_Display_Show()
        ShowHidePDFField_Action_Panels(PDFField_Action_Panel_List)
    End Sub
    Private Sub Button4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button4.Click
        ShowHidePDFField_Action_Panels(PDFField_Action_Panel_List)
    End Sub
    Private Sub PDFField_Action_Panel_SubmitForm_Format_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_SubmitForm_Format.SelectedIndexChanged
        If PDFField_Action_Panel_SubmitForm_Format.SelectedItem = Nothing Then
            Return
        End If
        Select Case CStr(PDFField_Action_Panel_SubmitForm_Format.SelectedItem.ToString).ToLower
            Case "FDF".ToLower
                PDFField_Action_Panel_SubmitForm_FieldData.Enabled = False
                PDFField_Action_Panel_SubmitForm_Comments.Enabled = True
                PDFField_Action_Panel_SubmitForm_IncrementalChangesToPDF.Enabled = True
                PDFField_Action_Panel_SubmitForm_FieldSelectionPanel.Enabled = True
                PDFField_Action_Panel_SubmitForm_DataSelectionPanel.Enabled = True
            Case "XFDF".ToLower
                PDFField_Action_Panel_SubmitForm_FieldData.Enabled = False
                PDFField_Action_Panel_SubmitForm_Comments.Enabled = True
                PDFField_Action_Panel_SubmitForm_IncrementalChangesToPDF.Enabled = False
                PDFField_Action_Panel_SubmitForm_FieldSelectionPanel.Enabled = True
                PDFField_Action_Panel_SubmitForm_DataSelectionPanel.Enabled = True
            Case "HTML".ToLower
                PDFField_Action_Panel_SubmitForm_FieldData.Enabled = False
                PDFField_Action_Panel_SubmitForm_Comments.Enabled = False
                PDFField_Action_Panel_SubmitForm_IncrementalChangesToPDF.Enabled = False
                PDFField_Action_Panel_SubmitForm_FieldSelectionPanel.Enabled = True
                PDFField_Action_Panel_SubmitForm_DataSelectionPanel.Enabled = False
            Case "PDF".ToLower
                PDFField_Action_Panel_SubmitForm_FieldData.Enabled = False
                PDFField_Action_Panel_SubmitForm_Comments.Enabled = False
                PDFField_Action_Panel_SubmitForm_IncrementalChangesToPDF.Enabled = False
                PDFField_Action_Panel_SubmitForm_FieldSelectionPanel.Enabled = False
                PDFField_Action_Panel_SubmitForm_DataSelectionPanel.Enabled = False
            Case Else
                PDFField_Action_Panel_SubmitForm_FieldData.Enabled = True
                PDFField_Action_Panel_SubmitForm_Comments.Enabled = True
                PDFField_Action_Panel_SubmitForm_IncrementalChangesToPDF.Enabled = True
                PDFField_Action_Panel_SubmitForm_FieldSelectionPanel.Enabled = True
                PDFField_Action_Panel_SubmitForm_DataSelectionPanel.Enabled = True
        End Select
    End Sub
    Private Sub PDFField_Action_Panel_SubmitForm_SelectFieldsInclude_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_SubmitForm_SelectFieldsInclude.Click
        Try
            ShowHidePDFField_Action_Panels(PDFField_Action_Panel_SubmitForm_FieldsList_Panel)
            PDFField_Action_Panel_SubmitForm.Visible = False
            PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Clear()
            PDFField_Action_Panel_SubmitForm_FieldsList.CheckBoxes = True
            Dim lstFieldNames As New List(Of String)
            _cFDFDoc = cFDFDoc(True)
            For Each flds As FDFField In cFDFDoc.XDPGetAllFields
                Try
                    If Not lstFieldNames.Contains(flds.FieldName) Then
                        lstFieldNames.Add(flds.FieldName & "")
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            Next
            PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Clear()
            For i As Integer = 0 To PDFField_Actions_TreeView.SelectedNode.Nodes.Count - 1
                If PDFField_Actions_TreeView.SelectedNode.Nodes(i).Name.ToString.ToLower = "fields".ToLower Then
                    Dim newNode As TreeNode
                    For Each fldName As TreeNode In PDFField_Actions_TreeView.SelectedNode.Nodes(i).Nodes
                        newNode = New TreeNode(fldName.Text.ToString & "")
                        newNode.Name = fldName.Text.ToString & ""
                        newNode.Checked = True
                        PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Add(newNode)
                        lstFieldNames.Remove(fldName.Text)
                    Next
                End If
            Next
            For Each strFieldName As String In lstFieldNames.ToArray
                Dim newNode As New TreeNode(strFieldName & "")
                newNode.Name = strFieldName & ""
                PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Add(newNode)
            Next
            PDFField_Action_Panel_SubmitForm_FieldsList.Scrollable = True
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Exit Sub
        End Try
    End Sub
    Private Sub PDFField_Action_Panel_SubmitForm_AllFields_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_SubmitForm_AllFields.CheckedChanged
        PDFField_Action_Panel_SubmitForm_SelectFieldsInclude.Enabled = PDFField_Action_Panel_SubmitForm_OnlyTheseFields.Checked
    End Sub
    Private Sub PDFField_Action_Panel_SubmitForm_OnlyTheseFields_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_SubmitForm_OnlyTheseFields.CheckedChanged
        PDFField_Action_Panel_SubmitForm_SelectFieldsInclude.Enabled = PDFField_Action_Panel_SubmitForm_OnlyTheseFields.Checked
    End Sub
    Private Sub PDFField_Action_Panel_SubmitForm_FieldsClose_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_SubmitForm_FieldsClose.Click
        ShowHidePDFField_Action_Panels(PDFField_Action_Panel_SubmitForm)
    End Sub
    Private Sub PDFField_Action_Panel_SubmitForm_FieldsUpdate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_SubmitForm_FieldsUpdate.Click
        ShowHidePDFField_Action_Panels(PDFField_Action_Panel_SubmitForm)
    End Sub
    Private Sub PDFField_Action_Panel_SubmitForm_FieldsSelectAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_SubmitForm_FieldsSelectAll.Click
        For i As Integer = 0 To PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Count - 1
            PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Checked = True
        Next
    End Sub
    Private Sub PDFField_Action_Panel_SubmitForm_FieldsSelectNone_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_SubmitForm_FieldsSelectNone.Click
        For i As Integer = 0 To PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Count - 1
            PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Checked = False
        Next
    End Sub
    Private Sub PDFField_Action_Panel_JavaScript_UpdateBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_JavaScript_UpdateBtn.Click
        Try
            For nd As Integer = 0 To PDFField_Actions_TreeView.SelectedNode.Nodes.Count - 1
                Try
                    If PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Text.ToLower = "js".ToLower Then
                        PDFField_Actions_TreeView.SelectedNode.Nodes(nd).Nodes(0).Text = PDFField_Action_Panel_JavaScript_TextBox.Text & ""
                        ShowHidePDFField_Action_Panels(PDFField_Action_Panel_List)
                        Exit Sub
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Dim newNode As New TreeNode("JS")
        newNode.Nodes.Add(PDFField_Action_Panel_JavaScript_TextBox.Text & "")
        PDFField_Actions_TreeView.SelectedNode.Nodes.Add(newNode)
        ShowHidePDFField_Action_Panels(PDFField_Action_Panel_List)
    End Sub
    Private Sub PDFField_Action_Panel_JavaScript_CloseBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_JavaScript_CloseBtn.Click
        ShowHidePDFField_Action_Panels(PDFField_Action_Panel_List)
    End Sub
    Private Sub PDFField_Action_Panel_Named_Close_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_Named_Close.Click
        ShowHidePDFField_Action_Panels(PDFField_Action_Panel_List)
    End Sub
    Private Sub Button5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button5.Click
        Try
            Dim s As New System.Text.StringBuilder
            Dim a As New List(Of String)
            For Each n As TreeNode In PDFField_Actions_TreeView.Nodes
                For Each n2 As TreeNode In n.Nodes
                    If n2.Text.ToString.ToLower = "named" Then
                        If Not n2.Nodes(0).Nodes(0) Is Nothing Then
                            If Not a.Contains(n2.Nodes(0).Nodes(0).Text & "") Then
                                a.Add(n2.Nodes(0).Nodes(0).Text & "")
                            End If
                        End If
                    End If
                Next
            Next
            For Each strA As String In a.ToArray
                s.AppendLine(strA)
            Next
            File.WriteAllText(ApplicationDataFolder(False, "") & "named.txt", s.ToString)
            Process.Start(ApplicationDataFolder(False, "") & "named.txt")
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Action_Panel_Named_Ok_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_Named_Ok.Click
        If PDFField_Actions_TreeView.SelectedNode Is Nothing Then
        End If
        Dim newNode As New Windows.Forms.TreeNode("Named")
        newNode.Name = "Named>>" & PDFField_Action_Panel_Named_List.SelectedItem.ToString & ">>" & Guid.NewGuid.ToString.Replace("-", "").Substring(0, 6)
        Dim actionNode As New Windows.Forms.TreeNode("N")
        actionNode.Name = newNode.Name & ">>/N>>" & PDFField_Action_Panel_Named_List.SelectedItem.ToString & ">>" & Guid.NewGuid.ToString.Replace("-", "").Substring(0, 6)
        actionNode.Nodes.Add(PDFField_Action_Panel_Named_List.SelectedItem.ToString & "")
        newNode.Nodes.Add(actionNode)
        Select Case PDFField_Actions_TreeView.SelectedNode.Text.ToString.ToLower
            Case "Named".ToLower
                PDFField_Actions_TreeView.SelectedNode.Nodes.Clear()
                PDFField_Actions_TreeView.SelectedNode.Nodes.Add(actionNode)
            Case "Mouse Up".ToLower, "Mouse Down".ToLower, "Mouse Down".ToLower, "Mouse Up".ToLower, "Mouse Enter".ToLower, "Mouse Exit".ToLower, "On Focus".ToLower, "On Blur".ToLower
                PDFField_Actions_TreeView.SelectedNode.Nodes.Add(newNode)
            Case Else
                Return
        End Select
        PDFField_Actions_TreeView.SelectedNode.Nodes.Add(newNode)
        PDFField_Actions_TreeView_Display_Show()
        ShowHidePDFField_Action_Panels(PDFField_Action_Panel_List)
    End Sub
    Private Sub PDFField_Action_Panel_Named_List_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_Named_List.DoubleClick
        PDFField_Action_Panel_Named_Ok_Click(Me, New EventArgs())
    End Sub
    Private Sub PDFField_Action_Panel_Named_List_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_Named_List.SelectedIndexChanged
    End Sub
    Private Sub ComboBox_ItemDelete_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_ItemDelete.Click
        Dim i As Integer = ComboBox_ItemDisplay.SelectedIndex + 0
        If i >= 0 And i < ComboBox_ItemDisplay.Items.Count Then
            ComboBox_ItemDisplay.Items.RemoveAt(i)
            ComboBox_ItemValue.Items.RemoveAt(i)
        End If
    End Sub
    Private Sub ComboBox_ItemMoveUp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_ItemMoveUp.Click
        If ComboBox_ItemDisplay.SelectedIndex > 0 Then
            Dim i As Integer = ComboBox_ItemDisplay.SelectedIndex + 0
            Dim itm As String = ComboBox_ItemDisplay.Items(i).ToString
            ComboBox_ItemDisplay.Items.RemoveAt(i)
            ComboBox_ItemDisplay.Items.Insert(i - 1, itm)
            itm = ComboBox_ItemValue.Items(i)
            ComboBox_ItemValue.Items.RemoveAt(i)
            ComboBox_ItemValue.Items.Insert(i - 1, itm)
            ComboBox_ItemDisplay.SelectedIndex = i - 1
        End If
    End Sub
    Private Sub ComboBox_ItemMoveDown_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_ItemMoveDown.Click
        If ComboBox_ItemDisplay.SelectedIndex < ComboBox_ItemDisplay.Items.Count - 1 Then
            Dim i As String = ComboBox_ItemDisplay.SelectedIndex + 0
            Dim itm As String = ComboBox_ItemDisplay.Items(i).ToString
            ComboBox_ItemDisplay.Items.RemoveAt(i)
            ComboBox_ItemDisplay.Items.Insert(i + 1, itm)
            itm = ComboBox_ItemValue.Items(i)
            ComboBox_ItemValue.Items.RemoveAt(i)
            ComboBox_ItemValue.Items.Insert(i + 1, itm)
            ComboBox_ItemDisplay.SelectedIndex = i + 1
        End If
    End Sub
    Private Sub ComboBox_ItemAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_ItemAdd.Click
        ComboBox_ItemDisplay.Items.Add(ComboBox_ItemDisplayText.Text & "")
        If Not String.IsNullOrEmpty(ComboBox_ItemValueText.Text & "") Then
            ComboBox_ItemValue.Items.Add(ComboBox_ItemValueText.Text & "")
        Else
            ComboBox_ItemValue.Items.Add("")
        End If
        ComboBox_ItemDisplayText.Text = ""
        ComboBox_ItemValueText.Text = ""
    End Sub
    Private Sub btnJSRef_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnJSRef.Click
        Process.Start("https://www.google.com/search?q=Adobe+Acrobat+PDF+JS+Reference+js_api_reference.pdf")
    End Sub
    Private Sub btnPDFRef_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPDFRef.Click
        Process.Start("https://www.google.com/search?q=Adobe+Acrobat+PDF+Refernce+PDFReference16.pdf")
    End Sub
    Public Function MergePDF(ByVal fileNames()() As Byte, ByVal targetPdf() As Byte) As Byte()
        Dim merged As Boolean = True
        Dim stream As New MemoryStream(targetPdf)
        Dim document As New Document()
        Dim pdf As New PdfCopy(document, stream)
        Dim reader As PdfReader = Nothing
        Try
            document.Open()
            For Each file As Byte() In fileNames
                reader = New PdfReader(file)
                pdf.Add(reader)
                reader.Close()
            Next
        Catch generatedExceptionName As Exception
            merged = False
            If reader IsNot Nothing Then
                reader.Close()
            End If
        Finally
            If document IsNot Nothing Then
                document.Close()
            End If
        End Try
        Return stream.ToArray
    End Function
    Public Function MergeFiles(ByVal sourceFiles()() As Byte) As Byte()
        Try
            Dim f As Integer = 0
            Dim reader As New PdfReader(sourceFiles(f))
            Dim n As Integer = reader.NumberOfPages
            Dim document As New Document(PageSize.LETTER)
            Dim mPDF As New MemoryStream
            Dim writer As PdfWriter = PdfWriter.GetInstance(document, mPDF)
            document.Open()
            Dim cb As PdfContentByte = writer.DirectContent
            Dim page1 As PdfImportedPage
            Dim rotation As Integer
            While f < sourceFiles.Length
                Dim i As Integer = 0
                While i < n
                    i += 1
                    document.SetPageSize(PageSize.A4)
                    document.NewPage()
                    page1 = writer.GetImportedPage(reader, i)
                    rotation = reader.GetPageRotation(i)
                    If rotation = 90 OrElse rotation = 270 Then
                        cb.AddTemplate(page1, 0, -1.0F, 1.0F, 0, 0, reader.GetPageSizeWithRotation(i).Height)
                    Else
                        cb.AddTemplate(page1, 1.0F, 0, 0, 1.0F, 0, 0)
                    End If
                End While
                f += 1
                If f < sourceFiles.Length Then
                    reader = New PdfReader(sourceFiles(f))
                    n = reader.NumberOfPages
                End If
            End While
            writer.CloseStream = False
            document.Close()
            writer.Close()
            Return mPDF.ToArray
        Catch e As Exception
        End Try
        Return Nothing
    End Function
    ''' <summary>
    ''' Combines PDF Forms and then outputs to a byte array
    ''' </summary>
    ''' <param name="PDFFiles">PDF Files (Array of Bytes Array)</param>
    ''' <returns>returns true</returns>
    ''' <remarks></remarks>
    Public Function PDFConcatenateForms2Buf(ByVal PDFFiles As Byte()(), ByVal ownerPasswords() As String, Optional ByVal keepPages As Dictionary(Of Integer, Integer()) = Nothing) As Byte()
        Dim reader As iTextSharp.text.pdf.PdfReader = Nothing
        Dim pageCount As Integer = 0
        Dim currentPage As Integer = 0
        Dim pdfDoc As iTextSharp.text.Document = Nothing
        Dim writer As iTextSharp.text.pdf.PdfSmartCopy = Nothing
        Dim page As iTextSharp.text.pdf.PdfImportedPage = Nothing
        Dim currentPDF As Integer = 0
        Dim MemStream As New MemoryStream()
        Dim MemStreamStamper As New MemoryStream
        Try
            If PDFFiles.Length > 0 Then
                reader = New iTextSharp.text.pdf.PdfReader(PDFFiles(currentPDF), getBytes(ownerPasswords(currentPDF)))
                pdfDoc = New iTextSharp.text.Document(reader.GetPageSizeWithRotation(1))
                writer = New iTextSharp.text.pdf.PdfSmartCopy(pdfDoc, MemStream) ', stamp) ', True)
                writer.SetMergeFields()
                writer.CloseStream = False
                pageCount = reader.NumberOfPages
                Dim excludeThisPage As Boolean = False
                pdfDoc.Open()
                Do Until currentPDF = PDFFiles.Length
                    If currentPDF < PDFFiles.Length Then
                        If Not excludeThisPage Then
                            If keepPages Is Nothing Then
                                writer.AddDocument(reader)
                            Else
                                If keepPages.Count > currentPage Then
                                    If Not keepPages(currentPDF) Is Nothing Then
                                        If (keepPages(currentPDF)).Length > 0 Then
                                            writer.AddDocument(reader, keepPages(currentPDF).ToList())
                                        Else
                                            writer.AddDocument(reader)
                                        End If
                                    Else
                                        writer.AddDocument(reader)
                                    End If
                                Else
                                    writer.AddDocument(reader)
                                End If
                            End If
                        End If
                        currentPDF += 1
                        If currentPDF < PDFFiles.Length Then
                            reader = New iTextSharp.text.pdf.PdfReader(PDFFiles(currentPDF), getBytes(ownerPasswords(currentPDF)))
                            pageCount = reader.NumberOfPages
                        End If
                    End If
                Loop
                pdfDoc.Close()
            Else
                'Throw New Exception("The input file array is empty. Processing terminated.")
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not MemStream Is Nothing Then
                Return MemStream.ToArray()
            Else
                Return Nothing
            End If
        Catch ex As Exception
            Throw ex
            Return Nothing
        Finally
            writer.Close()
            writer = Nothing
            MemStream.Close()
            MemStream.Dispose()
            MemStream = Nothing
        End Try
    End Function
    Public Property iTextFieldsPdfDictionary(ByVal pdfReader1 As PdfReader) As PdfArray
        Get
            Dim acroForm As PdfDictionary = DirectCast(pdfReader1.Catalog.Get(PdfName.ACROFORM), PdfDictionary)
            If Not (acroForm Is Nothing) Then
                Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                Return fields
            End If
            Return Nothing
        End Get
        Set(ByVal value As PdfArray)
            Dim acroForm As PdfDictionary = DirectCast(pdfReader1.Catalog.Get(PdfName.ACROFORM), PdfDictionary)
            If Not (acroForm Is Nothing) Then
                acroForm.Put(PdfName.FIELDS, value)
            End If
        End Set
    End Property
    Public Sub iTextSharp_ReplacePage(ByRef formFields_PdfReader As PdfReader, ByRef currentForm_PdfStamper As PdfStamper, ByVal pageImported_withFields As Integer, ByVal pageReplaced_currentPDF As Integer)
        currentForm_PdfStamper.ReplacePage(formFields_PdfReader, pageImported_withFields, pageReplaced_currentPDF)
    End Sub
    Public Function A0_PDFConcatenateForms2Buf_UsageRights_Good(ByVal PDFFiles As Byte()(), ByVal ownerPasswords() As String, ByVal keepPages As Dictionary(Of Integer, Integer()), ByVal enable_usage_rights As Boolean) As Byte()
        Dim reader As iTextSharp.text.pdf.PdfReader = Nothing
        Dim stamp As iTextSharp.text.pdf.PdfStamper = Nothing
        Dim pdfDoc As iTextSharp.text.Document = Nothing
        Dim MemStream As New MemoryStream(File.ReadAllBytes(ApplicationDataFolder(False, "") & "blank-usage-rights.pdf"))
        Dim MemStreamStamper As New MemoryStream
        Dim page As iTextSharp.text.pdf.PdfImportedPage = Nothing
        Dim currentPDF As Integer = 0
        Dim currentPage As Integer = 0
        Dim pageCount As Integer = 0
        Try
            If PDFFiles.Length > 0 Then
                reader = New PdfReader(MemStream.ToArray())
                stamp = New PdfStamper(reader, MemStreamStamper, Nothing, True)
                stamp.Writer.CloseStream = False
                Dim excludeThisPage As Boolean = False
                Dim canvas As PdfContentByte = stamp.GetOverContent(1)
                Dim TotalPages As Integer = stamp.Reader.NumberOfPages
                Dim arrStamper As New List(Of PdfObject)
                Dim fields As New PdfArray
                While currentPDF < PDFFiles.Length
                    reader = New PdfReader(GetUsedBytesOnly(PDFFiles(currentPDF).ToArray()), getBytes(ownerPasswords(currentPDF)))
                    pageCount = reader.NumberOfPages
                    currentPage = 0
                    While currentPage < pageCount
                        currentPage += 1
                        excludeThisPage = False
                        If Not excludeThisPage Then
                            page = stamp.Writer.GetImportedPage(reader, currentPage)
                            TotalPages += 1
                            stamp.InsertPage(TotalPages, reader.GetPageSizeWithRotation(currentPage))
                            stamp.GetOverContent(TotalPages - 1).AddTemplate(page, 1.0F, 0, 0, 1.0F, 0, 0)
                        End If
                    End While
                    currentPDF += 1
                    If currentPDF < PDFFiles.Length Then
                        reader = New iTextSharp.text.pdf.PdfReader(PDFFiles(currentPDF), getBytes(ownerPasswords(currentPDF)))
                        pageCount = reader.NumberOfPages
                        currentPage = 0
                    End If
                End While
                currentPDF = 0
                currentPage = 0
                TotalPages = 0
                stamp.Close()
                MemStream = New System.IO.MemoryStream(MemStreamStamper.ToArray())
                reader = New iTextSharp.text.pdf.PdfReader(MemStream.ToArray())
            Else
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not MemStream Is Nothing Then
                Return MemStream.ToArray()
            Else
                Return Nothing
            End If
        Catch ex As Exception
            Throw ex
            Return Nothing
        Finally
            MemStream.Close()
            MemStream.Dispose()
            MemStream = Nothing
        End Try
    End Function
    Public Function A0_PDFConcatenateForms2Buf_UsageRights(ByVal PDFFiles As Byte()(), ByVal ownerPasswords() As String, ByVal keepPages As Dictionary(Of Integer, Integer()), ByVal enable_usage_rights As Boolean) As Byte()
        Dim reader As iTextSharp.text.pdf.PdfReader = Nothing
        Dim pdfDoc As iTextSharp.text.Document = Nothing
        Dim MemStream As New MemoryStream()
        Dim page As iTextSharp.text.pdf.PdfImportedPage = Nothing
        Dim fp As String = ApplicationDataFolder(False, "temp") & "concatenate.pdf"
        Dim MemStreamStamper As New FileStream(fp, FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite)
        Try
            If PDFFiles.Length > 0 Then
                Dim currentPDF As Integer = 0
                PdfReader.unethicalreading = True
                MemStream = New MemoryStream(PDFFiles(currentPDF).ToArray())
                Dim readerX As New List(Of PdfReader)
                readerX.Add(New PdfReader(GetUsedBytesOnly(MemStream.ToArray())))
                Using stamp As New PdfStamper(readerX(readerX.Count - 1), MemStreamStamper, Nothing, True)
                    Dim TotalPages As Integer = CInt(stamp.Reader.NumberOfPages) + 0
                    Dim currentPage As Integer = 0
                    Dim pageCount As Integer = CInt(readerX(readerX.Count - 1).NumberOfPages + 0) + 0
                    currentPDF += 1
                    While currentPDF < PDFFiles.Length
                        If currentPDF < PDFFiles.Length Then
                            If String.IsNullOrEmpty(ownerPasswords(currentPDF) & "") Then
                                readerX.Add(New PdfReader(PDFFiles(currentPDF).ToArray()))
                            Else
                                readerX.Add(New PdfReader(PDFFiles(currentPDF).ToArray(), getBytes(ownerPasswords(currentPDF))))
                            End If
                            pageCount = readerX(readerX.Count - 1).NumberOfPages
                            currentPage = 0
                            While currentPage < pageCount
                                currentPage += 1
                                page = stamp.Writer.GetImportedPage(readerX(readerX.Count - 1), currentPage)
                                TotalPages += 1
                                stamp.InsertPage(TotalPages, readerX(readerX.Count - 1).GetPageSizeWithRotation(currentPage))
                                stamp.GetOverContent(TotalPages).AddTemplate(page, 1.0F, 0, 0, 1.0F, 0, 0)
                            End While
                        End If
                        currentPDF += 1
                    End While
                    currentPDF = 0
                    currentPage = 0
                    TotalPages = 0
                    Try
                        stamp.Close()
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    For pr As Integer = 0 To readerX.Count - 1
                        Try
                            For i As Integer = 1 To readerX(pr).NumberOfPages
                                Try
                                    readerX(pr).ReleasePage(i)
                                Catch exRelease As Exception
                                    TimeStampAdd(exRelease, debugMode)
                                End Try
                            Next
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            readerX(pr).Close()
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            readerX(pr).Dispose()
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            readerX(pr) = Nothing
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Next
                    Try
                        stamp.Dispose()
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                    Return (File.ReadAllBytes(fp))
                End Using
            Else
            End If
        Catch ex As Exception
            Throw ex
        Finally
            Try
                If FileExists(fp) Then
                    File.Delete(fp)
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                MemStreamStamper.Close()
                MemStreamStamper.Dispose()
                MemStreamStamper = Nothing
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                PdfReader.unethicalreading = False
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End Try
        Return Nothing
    End Function
    Public Function GetUsedBytesOnly(ByRef b() As Byte) As Byte()
        Dim bytes As Byte() = b
        Dim i As Integer = 0
        For i = bytes.Length - 1 To 1 Step -1
            If bytes(i) <> 0 Then
                Exit For
            End If
        Next
        Dim newBytes As Byte() = New Byte(i) {}
        Array.Copy(bytes, newBytes, i + 1)
        ReDim bytes(0)
        bytes = Nothing
        Return newBytes
    End Function
    Public Function GetUsedBytesOnly(ByRef s As Stream, Optional ByVal closeStream As Boolean = False) As Byte()
        Dim bytes(s.Length) As Byte
        If s.CanSeek Then
            s.Seek(0, SeekOrigin.Begin)
        End If
        s.Read(bytes, 0, bytes.Length)
        If closeStream Then
            s.Close()
        End If
        Return GetUsedBytesOnly(bytes)
    End Function
    Public Function GetUsedBytesOnly(ByRef s As System.IO.MemoryStream, Optional ByVal closeStream As Boolean = False) As Byte()
        Dim bytes(s.Length) As Byte
        If s.CanSeek Then
            s.Seek(0, SeekOrigin.Begin)
        End If
        s.Read(bytes, 0, bytes.Length)
        If closeStream Then
            s.Close()
        End If
        Return GetUsedBytesOnly(bytes)
    End Function
    Public Function GetUsedBytesOnly(ByRef s As String) As Byte()
        If IsValidUrl(s.ToString & "") Then
            Dim w As New System.Net.WebClient()
            Dim bytes() As Byte = w.DownloadData(s.ToString)
            Return GetUsedBytesOnly(bytes)
        ElseIf FileExists(s & "") Then
            Dim bytes() As Byte = File.ReadAllBytes(s)
            Return GetUsedBytesOnly(bytes)
        ElseIf Not String.IsNullOrEmpty(s & "") Then
            Dim bytes() As Byte = cFDFDoc.DefaultEncoding.GetBytes(s & "")
            Return GetUsedBytesOnly(bytes)
        Else
            Return Nothing
        End If
    End Function
    Private Sub btnImportImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnImportImage.Click
        ImportImage()
    End Sub
    Public Function convertPng24toPng16(ByRef image As Bitmap, Optional ByVal transParent As Boolean = False) As Byte()
        Dim m As MemoryStream = Nothing
        Dim imageBitmap As System.Drawing.Bitmap = Nothing
        Try
            m = New MemoryStream
            imageBitmap = New System.Drawing.Bitmap(image.Width, image.Height, PixelFormat.Format16bppArgb1555)
            For x As Integer = 0 To image.Width - 1
                For y As Integer = 0 To image.Height - 1
                    imageBitmap.SetPixel(x, y, image.GetPixel(x, y))
                Next
            Next
            If transParent Then
                imageBitmap.MakeTransparent()
            End If
            imageBitmap.Save(m, System.Drawing.Imaging.ImageFormat.Png)
            Return m.ToArray
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not imageBitmap Is Nothing And Not m Is Nothing Then
                If m.CanSeek Then
                    m.Seek(0, SeekOrigin.Begin)
                End If
                image = System.Drawing.Image.FromStream(m)
                m.Dispose()
                imageBitmap.Dispose()
            End If
        End Try
        Return Nothing
    End Function
    '    Public Sub ImportImage(Optional ByVal fn As String = "", Optional ByVal ShowDialogs As Boolean = True, Optional ByVal loadDoc As Boolean = True, Optional closeDoc As Boolean = False)
    '        preventClickDialog = True
    '        Try
    '            OpenFileDialog2.Filter = "Image Formats|*.jpg;*.jpeg;*.bmp;*.gif;*.png;*.tif;*.tiff|JPG|*.jpg|JPEG|*.jpeg|BMP|*.bmp|GIF|*.gif|PNG|*.png|Tif|*.tif|TIFF|*.tiff|All Files|*.*"
    '            OpenFileDialog2.FilterIndex = 0
    '            OpenFileDialog2.FileName = ""
    '            If Not fn.isNullOrEmpty() Then
    '                If FileExists(fn & "") Then GoTo OPENFILE_KNOWN_FILENAME
    '            End If
    '            OpenFileDialog2.InitialDirectory = defaulFilePath()
    '            Select Case OpenFileDialog2.ShowDialog(Me)
    '                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
    '                    If Not OpenFileDialog2.FileName.isNullOrEmpty() Then
    '                        fn = OpenFileDialog2.FileName & ""
    'OPENFILE_KNOWN_FILENAME:
    '                        Dim jpg As System.Drawing.Image = System.Drawing.Image.FromFile(fn)
    '                        Dim jpgStream As New MemoryStream
    '                        Dim frmImgRot As New frmImageRotation
    '                        frmImgRot.imgRect = New RectangleF(0, 0, jpg.Width, jpg.Height)
    '                        frmImgRot.LoadPictureBox(jpg)
    '                        Dim rotType As System.Drawing.RotateFlipType = RotateFlipType.RotateNoneFlipNone
    '                        If ShowDialogs Then
    '                            'Me.Hide()
    '                            Select Case frmImgRot.ShowDialog(Me)
    '                                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
    '                                    If frmImgRot.cancelled Then
    '                                        Me.Show()
    '                                        Me.BringToFront()
    '                                        Return
    '                                    End If
    '                                    rotType = frmImgRot.rotType
    '                                Case Else
    '                                    Return
    '                            End Select
    '                            Me.Show()
    '                            Me.BringToFront()
    '                        End If
    '                        jpg = frmImgRot.ImageRotation_PictureBox.Image.Clone
    '                        Dim bitmap As New Bitmap(jpg)
    '                        Dim mPDF As New MemoryStream()
    '                        jpg.Save(jpgStream, System.Drawing.Imaging.ImageFormat.Png)
    '                        If jpgStream.CanSeek Then
    '                            jpgStream.Seek(0, SeekOrigin.Begin)
    '                        End If
    '                        jpg.Dispose()
    '                        jpg = Nothing
    '                        Dim bmp As New Bitmap(jpgStream)
    '                        Dim page_width As String, page_height As String
    '                        Try
    '                            page_width = bmp.Width
    '                            page_height = bmp.Height
    '                            Dim rectImage As New iTextSharp.text.Rectangle(page_width, page_height)
    '                            blnModelPopupClose = MsgBoxResult.Ignore
    '                            pnlPageSize_MaintainAspectRatio.Checked = False
    '                            Load_PageSizePanel(rectImage)
    '                            pnlPageSizeApsectRation_Update()
    '                            If ShowDialogs Then
    '                                pnlPageSize.Show()
    '                                pnlPageSize.BringToFront()
    '                                If modelPopup_DoEvents(blnModelPopupClose) Then
    '                                    pnlPageSize.Hide()
    '                                End If
    '                                If blnModelPopupClose <> MsgBoxResult.Ok Then Return
    '                            End If
    '                            page_width = pageSizes("CUSTOM").Width
    '                            page_height = pageSizes("CUSTOM").Height
    '                        Catch ex As Exception
    '                            page_width = bmp.Width
    '                            page_height = bmp.Height
    '                            TimeStampAdd(ex, debugMode)
    '                        End Try
    '                        Dim r As New iTextSharp.text.Rectangle(CInt(page_width), CInt(page_height))
    '                        Dim doc As New Document(r, CSng(pnlPageSize_MarginLeft.Text & "") + 0, CSng(pnlPageSize_MarginRight.Text & "") + 0, CSng(pnlPageSize_MarginTop.Text & "") + 0, CSng(pnlPageSize_MarginBottom.Text & "") + 0)
    '                        Dim writer As PdfWriter = PdfWriter.GetInstance(doc, mPDF)
    '                        Dim pages As Integer = bmp.GetFrameCount(Imaging.FrameDimension.Page)
    '                        doc.Open()
    '                        Dim cb As PdfContentByte = writer.DirectContent
    '                        doc.Add(New Paragraph(" "))
    '                        For i As Integer = 0 To pages - 1
    '                            Dim Image As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Png)
    '                            Image.SetAbsolutePosition(0, 0)
    '                            Image.ScaleAbsoluteHeight(doc.PageSize.Height)
    '                            Image.ScaleAbsoluteWidth(doc.PageSize.Width)
    '                            writer.DirectContent.AddImage(Image)
    '                            doc.NewPage()
    '                            Image = Nothing
    '                        Next i
    '                        writer.CloseStream = False
    '                        doc.Close()

    '                        If Not Session Is Nothing And Not closeDoc Then
    '                            If Session.Length > 0 Then
    '                                cFDFDoc = New FDFApp.FDFDoc_Class
    '                                Session("output") = PDFConcatenateForms2Buf(New Byte()() {Session, mPDF.ToArray}, New String() {pdfOwnerPassword, ""})
    '                            Else
    '                                Session("output") = mPDF.ToArray
    '                            End If
    '                        Else
    '                            Session("output") = mPDF.ToArray
    '                        End If
    '                        writer.Close()
    '                        writer.Dispose()
    '                        writer = Nothing
    '                        doc.Dispose()
    '                        doc = Nothing
    '                        jpg.Dispose()
    '                        bitmap.Dispose()
    '                        If loadDoc Then
    '                            A0_LoadPDF(True)
    '                            LoadPageList(Me.btnPage)
    '                            If pnlFields.Visible Then pnlFields.Visible = False
    '                            ComboBox1_SelectedIndexChanged(Me, New EventArgs())
    '                            A0_PictureBox1.Enabled = True
    '                            A0_PictureBox2.Enabled = True
    '                            pageIndex = Me.btnPage.Items.Count - 1
    '                            btnPage_SelectedIndexChanged(Me, New EventArgs())
    '                        End If
    '                    End If
    '                Case Else
    '                    Return
    '            End Select
    '        Catch ex As Exception
    '            TimeStampAdd(ex, debugMode)
    '        Finally
    '            timerPreventDefaultExpires.Enabled = True
    '        End Try
    '    End Sub
    '    Public Sub ImportImage(ByVal img As System.Drawing.Image, Optional ByVal ShowDialogs As Boolean = True, Optional ByVal loadDoc As Boolean = True, Optional closeDoc As Boolean = False)
    '        If img Is Nothing Then Return
    '        preventClickDialog = True
    '        Try

    '            Dim jpg As System.Drawing.Image = img.Clone
    '            Dim jpgStream As New MemoryStream
    '            Dim frmImgRot As New frmImageRotation
    '            frmImgRot.imgRect = New RectangleF(0, 0, jpg.Width, jpg.Height)
    '            frmImgRot.LoadPictureBox(jpg)
    '            Dim rotType As System.Drawing.RotateFlipType = RotateFlipType.RotateNoneFlipNone
    '            If ShowDialogs Then
    '                'Me.Hide()
    '                Select Case frmImgRot.ShowDialog(Me)
    '                    Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
    '                        If frmImgRot.cancelled Then
    '                            Me.Show()
    '                            Me.BringToFront()
    '                            Return
    '                        End If
    '                        rotType = frmImgRot.rotType
    '                    Case Else
    '                        Return
    '                End Select
    '                Me.Show()
    '                Me.BringToFront()
    '            End If

    '            jpg = frmImgRot.ImageRotation_PictureBox.Image.Clone
    '            Dim bitmap As New Bitmap(jpg)
    '            Dim mPDF As New MemoryStream()
    '            jpg.Save(jpgStream, System.Drawing.Imaging.ImageFormat.Png)
    '            If jpgStream.CanSeek Then
    '                jpgStream.Seek(0, SeekOrigin.Begin)
    '            End If
    '            jpg.Dispose()
    '            jpg = Nothing
    '            Dim bmp As New Bitmap(jpgStream)
    '            Dim page_width As String, page_height As String
    '            Try
    '                page_width = bmp.Width
    '                page_height = bmp.Height
    '                Dim rectImage As New iTextSharp.text.Rectangle(page_width, page_height)
    '                blnModelPopupClose = MsgBoxResult.Ignore
    '                pnlPageSize_MaintainAspectRatio.Checked = False
    '                Load_PageSizePanel(rectImage)
    '                pnlPageSizeApsectRation_Update()
    '                If ShowDialogs Then
    '                    pnlPageSize.Show()
    '                    pnlPageSize.BringToFront()
    '                    If modelPopup_DoEvents(blnModelPopupClose) Then
    '                        pnlPageSize.Hide()
    '                    End If
    '                    If blnModelPopupClose <> MsgBoxResult.Ok Then Return
    '                End If
    '                page_width = pageSizes("CUSTOM").Width
    '                page_height = pageSizes("CUSTOM").Height
    '            Catch ex As Exception
    '                page_width = bmp.Width
    '                page_height = bmp.Height
    '                TimeStampAdd(ex, debugMode)
    '            End Try
    '            Dim r As New iTextSharp.text.Rectangle(CInt(page_width), CInt(page_height))
    '            Dim doc As New Document(r, CSng(pnlPageSize_MarginLeft.Text & "") + 0, CSng(pnlPageSize_MarginRight.Text & "") + 0, CSng(pnlPageSize_MarginTop.Text & "") + 0, CSng(pnlPageSize_MarginBottom.Text & "") + 0)
    '            Dim writer As PdfWriter = PdfWriter.GetInstance(doc, mPDF)
    '            Dim pages As Integer = bmp.GetFrameCount(Imaging.FrameDimension.Page)
    '            doc.Open()
    '            Dim cb As PdfContentByte = writer.DirectContent
    '            doc.Add(New Paragraph(" "))
    '            For i As Integer = 0 To pages - 1
    '                Dim image As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Png)
    '                image.SetAbsolutePosition(0, 0)
    '                image.ScaleAbsoluteHeight(doc.PageSize.Height)
    '                image.ScaleAbsoluteWidth(doc.PageSize.Width)
    '                writer.DirectContent.AddImage(image)
    '                doc.NewPage()
    '            Next i
    '            writer.CloseStream = False
    '            doc.Close()
    '            If Not Session Is Nothing And Not closeDoc Then
    '                If Session.Length > 0 Then
    '                    cFDFDoc = New FDFApp.FDFDoc_Class
    '                    Session("output") = PDFConcatenateForms2Buf(New Byte()() {Session, mPDF.ToArray}, New String() {pdfOwnerPassword, ""})
    '                Else
    '                    Session("output") = mPDF.ToArray
    '                End If
    '            Else
    '                Session("output") = mPDF.ToArray
    '            End If
    '            writer.Close()
    '            writer = Nothing
    '            If loadDoc Then
    '                A0_LoadPDF(True)
    '                LoadPageList(Me.btnPage)
    '                If pnlFields.Visible Then pnlFields.Visible = False
    '                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
    '                A0_PictureBox1.Enabled = True
    '                A0_PictureBox2.Enabled = True
    '                pageIndex = Me.btnPage.Items.Count - 1
    '                btnPage_SelectedIndexChanged(Me, New EventArgs())
    '            End If
    '        Catch ex As Exception
    '            TimeStampAdd(ex, debugMode)
    '        Finally
    '            timerPreventDefaultExpires.Enabled = True
    '        End Try
    '    End Sub
    Public Function optimizeImage(img As System.Drawing.Image) As System.Drawing.Image
        Dim jpg As System.Drawing.Image = img.Clone
        Try
            Dim cOptimize As New clsPDFOptimization()
            clsPDFOptimization.cancelOptimize_Shared = False
            Dim imgBytes() As Byte = cOptimize.optimizeBitmap(img.Clone(), img.Width, img.Height, img.RawFormat, InterpolationMode.HighQualityBicubic, SmoothingMode.AntiAlias, CompositingQuality.HighQuality)
            If Not imgBytes Is Nothing Then
                If imgBytes.Length > 0 Then
                    Dim mImg As New MemoryStream(imgBytes)
                    If mImg.CanSeek Then
                        mImg.Position = 0
                    End If
                    jpg = System.Drawing.Image.FromStream(mImg).Clone
                End If
            End If
        Catch ex As Exception
            Err.Clear()
            jpg = img.Clone
        End Try
        Return jpg.Clone
    End Function
    Public Sub ImportImage(Optional ByVal fn As String = "", Optional ByVal ShowDialogs As Boolean = True, Optional ByVal loadDoc As Boolean = True, Optional closeDoc As Boolean = False)
        preventClickDialog = True
        Try
            OpenFileDialog2.Filter = "Image Formats|*.jpg;*.jpeg;*.bmp;*.gif;*.png;*.tif;*.tiff|JPG|*.jpg|JPEG|*.jpeg|BMP|*.bmp|GIF|*.gif|PNG|*.png|Tif|*.tif|TIFF|*.tiff|All Files|*.*"
            OpenFileDialog2.FilterIndex = 0
            OpenFileDialog2.FileName = ""
            If Not fn.isNullOrEmpty() Then
                If FileExists(fn & "") Then GoTo OPENFILE_KNOWN_FILENAME
            End If
            OpenFileDialog2.InitialDirectory = defaulFilePath()
            Select Case OpenFileDialog2.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    If Not OpenFileDialog2.FileName.isNullOrEmpty() Then
                        fn = OpenFileDialog2.FileName & ""
OPENFILE_KNOWN_FILENAME:
                        Dim jpg As System.Drawing.Image = System.Drawing.Image.FromFile(fn)
                        Dim img As System.Drawing.Image = jpg.Clone
                        Try
                            jpg = optimizeImage(img.Clone)
                            If jpg Is Nothing Then
                                jpg = img.Clone
                            End If
                        Catch ex As Exception
                            Err.Clear()
                            jpg = img.Clone
                        End Try
                        Dim jpgStream As New MemoryStream
                        Dim frmImgRot As New frmImageRotation
                        frmImgRot.imgRect = New RectangleF(0, 0, jpg.Width, jpg.Height)
                        frmImgRot.LoadPictureBox(jpg)
                        Dim rotType As System.Drawing.RotateFlipType = RotateFlipType.RotateNoneFlipNone
                        If ShowDialogs Then
                            'Me.Hide()
                            Select Case frmImgRot.ShowDialog(Me)
                                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                                    If frmImgRot.cancelled Then
                                        Me.Show()
                                        Me.BringToFront()
                                        Return
                                    End If
                                    rotType = frmImgRot.rotType
                                Case Else
                                    Return
                            End Select
                            Me.Show()
                            Me.BringToFront()
                        End If
                        jpg = frmImgRot.ImageRotation_PictureBox.Image.Clone
                        Dim bitmap As New Bitmap(jpg)
                        Dim mPDF As New MemoryStream()
                        jpg.Save(jpgStream, System.Drawing.Imaging.ImageFormat.Png)
                        If jpgStream.CanSeek Then
                            jpgStream.Seek(0, SeekOrigin.Begin)
                        End If
                        jpg.Dispose()
                        jpg = Nothing
                        Dim bmp As New Bitmap(jpgStream)
                        Dim page_width As String, page_height As String
                        Try
                            page_width = bmp.Width
                            page_height = bmp.Height
                            Dim rectImage As New iTextSharp.text.Rectangle(page_width, page_height)
                            blnModelPopupClose = MsgBoxResult.Ignore
                            pnlPageSize_MaintainAspectRatio.Checked = False
                            Load_PageSizePanel(rectImage)
                            pnlPageSizeApsectRation_Update()
                            If ShowDialogs Then
                                pnlPageSize.Show()
                                pnlPageSize.BringToFront()
                                If modelPopup_DoEvents(blnModelPopupClose) Then
                                    pnlPageSize.Hide()
                                End If
                                If blnModelPopupClose <> MsgBoxResult.Ok Then Return
                            End If
                            page_width = pageSizes("CUSTOM").Width
                            page_height = pageSizes("CUSTOM").Height
                        Catch ex As Exception
                            page_width = bmp.Width
                            page_height = bmp.Height
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Dim r As New iTextSharp.text.Rectangle(CInt(page_width), CInt(page_height))
                        Dim doc As New Document(r, CSng(pnlPageSize_MarginLeft.Text & "") + 0, CSng(pnlPageSize_MarginRight.Text & "") + 0, CSng(pnlPageSize_MarginTop.Text & "") + 0, CSng(pnlPageSize_MarginBottom.Text & "") + 0)
                        Dim writer As PdfWriter = PdfWriter.GetInstance(doc, mPDF)
                        Dim pages As Integer = bmp.GetFrameCount(Imaging.FrameDimension.Page)
                        doc.Open()
                        Dim cb As PdfContentByte = writer.DirectContent
                        doc.Add(New Paragraph(" "))
                        For i As Integer = 0 To pages - 1
                            Dim Image As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Png)
                            Image.SetAbsolutePosition(0, 0)
                            Image.ScaleAbsoluteHeight(doc.PageSize.Height)
                            Image.ScaleAbsoluteWidth(doc.PageSize.Width)
                            writer.DirectContent.AddImage(Image)
                            doc.NewPage()
                            Image = Nothing
                        Next i
                        writer.CloseStream = False
                        doc.Close()

                        If Not Session Is Nothing And Not closeDoc Then
                            If Session.Length > 0 Then
                                cFDFDoc = New FDFApp.FDFDoc_Class
                                Session("output") = PDFConcatenateForms2Buf(New Byte()() {Session, mPDF.ToArray}, New String() {pdfOwnerPassword, ""})
                            Else
                                Session("output") = mPDF.ToArray
                            End If
                        Else
                            Session("output") = mPDF.ToArray
                        End If
                        writer.Close()
                        writer.Dispose()
                        writer = Nothing
                        doc.Dispose()
                        doc = Nothing
                        Try
                            jpg.Dispose()
                        Catch ex2 As Exception
                            Err.Clear()
                        End Try
                        Try
                            bitmap.Dispose()
                        Catch ex2 As Exception
                            Err.Clear()
                        End Try
                        If loadDoc Then
                            A0_LoadPDF(True)
                            LoadPageList(Me.btnPage)
                            If pnlFields.Visible Then pnlFields.Visible = False
                            ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                            A0_PictureBox1.Enabled = True
                            A0_PictureBox2.Enabled = True
                            pageIndex = Me.btnPage.Items.Count - 1
                            btnPage_SelectedIndexChanged(Me, New EventArgs())
                        End If
                    End If
                Case Else
                    Return
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            timerPreventDefaultExpires.Enabled = True
        End Try
    End Sub
    Public Sub ImportImage(ByVal img As System.Drawing.Image, Optional ByVal ShowDialogs As Boolean = True, Optional ByVal loadDoc As Boolean = True, Optional closeDoc As Boolean = False)
        If img Is Nothing Then Return
        preventClickDialog = True
        Dim jpg As System.Drawing.Image = img.Clone
        Try
            jpg = optimizeImage(img.Clone)
            If jpg Is Nothing Then
                jpg = img.Clone
            End If
        Catch ex As Exception
            Err.Clear()
            jpg = img.Clone
        End Try
        Try
            Dim clsOptimizeImage1 As New clsPDFOptimization

            Dim jpgStream As New MemoryStream
            Dim frmImgRot As New frmImageRotation
            frmImgRot.imgRect = New RectangleF(0, 0, jpg.Width, jpg.Height)
            frmImgRot.LoadPictureBox(jpg)
            Dim rotType As System.Drawing.RotateFlipType = RotateFlipType.RotateNoneFlipNone
            If ShowDialogs Then
                'Me.Hide()
                Select Case frmImgRot.ShowDialog(Me)
                    Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                        If frmImgRot.cancelled Then
                            Me.Show()
                            Me.BringToFront()
                            Return
                        End If
                        rotType = frmImgRot.rotType
                    Case Else
                        Return
                End Select
                Me.Show()
                Me.BringToFront()
            End If

            jpg = frmImgRot.ImageRotation_PictureBox.Image.Clone
            Dim bitmap As New Bitmap(jpg)
            Dim mPDF As New MemoryStream()
            jpg.Save(jpgStream, System.Drawing.Imaging.ImageFormat.Png)
            If jpgStream.CanSeek Then
                jpgStream.Seek(0, SeekOrigin.Begin)
            End If
            jpg.Dispose()
            jpg = Nothing
            Dim bmp As New Bitmap(jpgStream)
            Dim page_width As String, page_height As String
            Try
                page_width = bmp.Width
                page_height = bmp.Height
                Dim rectImage As New iTextSharp.text.Rectangle(page_width, page_height)
                blnModelPopupClose = MsgBoxResult.Ignore
                pnlPageSize_MaintainAspectRatio.Checked = False
                Load_PageSizePanel(rectImage)
                pnlPageSizeApsectRation_Update()
                'If ShowDialogs Then
                '    pnlPageSize.Show()
                '    pnlPageSize.BringToFront()
                '    If modelPopup_DoEvents(blnModelPopupClose) Then
                '        pnlPageSize.Hide()
                '    End If
                '    If blnModelPopupClose <> MsgBoxResult.Ok Then Return
                'End If
                'page_width = pageSizes("CUSTOM").Width
                'page_height = pageSizes("CUSTOM").Height
            Catch ex As Exception
                page_width = bmp.Width
                page_height = bmp.Height
                TimeStampAdd(ex, debugMode)
            End Try
            Dim r As New iTextSharp.text.Rectangle(CInt(page_width), CInt(page_height))
            Dim doc As New Document(r, CSng(pnlPageSize_MarginLeft.Text & "") + 0, CSng(pnlPageSize_MarginRight.Text & "") + 0, CSng(pnlPageSize_MarginTop.Text & "") + 0, CSng(pnlPageSize_MarginBottom.Text & "") + 0)
            Dim writer As PdfWriter = PdfWriter.GetInstance(doc, mPDF)
            Dim pages As Integer = bmp.GetFrameCount(Imaging.FrameDimension.Page)
            doc.Open()
            Dim cb As PdfContentByte = writer.DirectContent
            doc.Add(New Paragraph(" "))
            For i As Integer = 0 To pages - 1
                Dim image As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Png)
                image.SetAbsolutePosition(0, 0)
                image.ScaleAbsoluteHeight(doc.PageSize.Height)
                image.ScaleAbsoluteWidth(doc.PageSize.Width)
                writer.DirectContent.AddImage(image)
                doc.NewPage()
            Next i
            writer.CloseStream = False
            doc.Close()
            If Not Session Is Nothing And Not closeDoc Then
                If Session.Length > 0 Then
                    cFDFDoc = New FDFApp.FDFDoc_Class
                    Session("output") = PDFConcatenateForms2Buf(New Byte()() {Session, mPDF.ToArray}, New String() {pdfOwnerPassword, ""})
                Else
                    Session("output") = mPDF.ToArray
                End If
            Else
                Session("output") = mPDF.ToArray
            End If
            writer.Close()
            writer = Nothing
            If loadDoc Then
                A0_LoadPDF(True)
                LoadPageList(Me.btnPage)
                If pnlFields.Visible Then pnlFields.Visible = False
                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                A0_PictureBox1.Enabled = True
                A0_PictureBox2.Enabled = True
                pageIndex = Me.btnPage.Items.Count - 1
                btnPage_SelectedIndexChanged(Me, New EventArgs())
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            timerPreventDefaultExpires.Enabled = True
        End Try
    End Sub
    ''' <summary>
    ''' https://stackoverflow.com/questions/6383280/net-remove-strip-javascript-and-css-code-blocks-from-html-page
    ''' https://forums.asp.net/t/1983665.aspx?Remove+style+attribute+of+elements+by+regular+expression
    ''' </summary>
    ''' <param name="strHTML">HTML code String</param>
    ''' <param name="matchString">RegEx match string</param>
    ''' <returns>stripped code</returns>
    Public Function stripHtml(strHtml As String, Optional matchString As String = "(\<script(.+?)\</script\>)|(\<style(.+?)\</style\>)|(style=[""'](.+?)[""'])") As String
        Try
            Dim regex1 As New System.Text.RegularExpressions.Regex(matchString, System.Text.RegularExpressions.RegexOptions.Singleline + System.Text.RegularExpressions.RegexOptions.IgnoreCase)
            Return regex1.Replace(strHtml, "").ToString()
        Catch ex As Exception
            Err.Clear()
        End Try
        Return CStr(strHtml & "")
    End Function
    Public Sub ImportImageFromImage(ByVal img As System.Drawing.Image, Optional closeDoc As Boolean = False)
        If img Is Nothing Then
            Return
        ElseIf img.Width <= 0 And img.Height <= 0 Then
            Return
        End If
        preventClickDialog = True
        Try
            Dim jpg As System.Drawing.Image = img.Clone
            Try
                jpg = optimizeImage(img.Clone)
                If jpg Is Nothing Then
                    jpg = DirectCast(img.Clone(), System.Drawing.Image)
                End If
            Catch ex As Exception
                Err.Clear()
                jpg = DirectCast(img.Clone(), System.Drawing.Image)
            End Try
            'Dim jpg As System.Drawing.Image = DirectCast(img.Clone(), System.Drawing.Image) 'System.Drawing.Image.FromFile(fn)
            Dim jpgStream As New MemoryStream
            'Me.Hide()
            Dim frmImgRot As New frmImageRotation
            frmImgRot.imgRect = New RectangleF(0, 0, jpg.Width, jpg.Height)
            frmImgRot.LoadPictureBox(jpg)
            Select Case frmImgRot.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    If frmImgRot.cancelled Then
                        Me.Show()
                        Me.BringToFront()
                        Return
                    End If
                    rotType = frmImgRot.rotType
                Case Else
                    Return
            End Select
            Me.Show()
            Me.BringToFront()
            If frmImgRot.cancelled Then
                Return
            End If
            jpg = frmImgRot.ImageRotation_PictureBox.Image.Clone
            Dim bitmap As New Bitmap(jpg)
            Dim mPDF As New MemoryStream()
            jpg.Save(jpgStream, System.Drawing.Imaging.ImageFormat.Png)
            If jpgStream.CanSeek Then
                jpgStream.Seek(0, SeekOrigin.Begin)
            End If
            jpg.Dispose()
            jpg = Nothing
            Dim bmp As New Bitmap(jpgStream)
            Dim page_width As String, page_height As String
            Try
                page_width = bmp.Width
                page_height = bmp.Height
                Dim rectImage As New iTextSharp.text.Rectangle(page_width, page_height)
                blnModelPopupClose = MsgBoxResult.Ignore
                pnlPageSize_MaintainAspectRatio.Checked = False
                Load_PageSizePanel(rectImage)
                pnlPageSizeApsectRation_Update()
                pnlPageSize.Show()
                pnlPageSize.BringToFront()
                If modelPopup_DoEvents(blnModelPopupClose) Then
                    pnlPageSize.Hide()
                End If
                If blnModelPopupClose <> MsgBoxResult.Ok Then Return
                page_width = pageSizes("CUSTOM").Width
                page_height = pageSizes("CUSTOM").Height
            Catch ex As Exception
                page_width = bmp.Width
                page_height = bmp.Height
                TimeStampAdd(ex, debugMode)
            End Try
            Dim r As New iTextSharp.text.Rectangle(CInt(page_width), CInt(page_height))
            Dim doc As New Document(r, CSng(pnlPageSize_MarginLeft.Text & "") + 0, CSng(pnlPageSize_MarginRight.Text & "") + 0, CSng(pnlPageSize_MarginTop.Text & "") + 0, CSng(pnlPageSize_MarginBottom.Text & "") + 0)
            Dim writer As PdfWriter = PdfWriter.GetInstance(doc, mPDF)
            Dim pages As Integer = bmp.GetFrameCount(Imaging.FrameDimension.Page)
            doc.Open()
            doc.Add(New Paragraph(" "))
            For i As Integer = 0 To pages - 1
                Dim image As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Png)
                image.SetAbsolutePosition(0, 0)
                image.ScaleAbsoluteHeight(doc.PageSize.Height)
                image.ScaleAbsoluteWidth(doc.PageSize.Width)
                writer.DirectContent.AddImage(image)
                doc.NewPage()
            Next i
            writer.CloseStream = False
            doc.Close()
            If Not Session Is Nothing And Not closeDoc Then
                If Session.Length > 0 Then
                    cFDFDoc = New FDFApp.FDFDoc_Class
                    Session("output") = PDFConcatenateForms2Buf(New Byte()() {Session, mPDF.ToArray}, New String() {pdfOwnerPassword, ""})
                Else
                    Session("output") = mPDF.ToArray
                End If
            Else
                Session("output") = mPDF.ToArray
            End If
            writer.Close()
            writer = Nothing
            A0_LoadPDF(True)
            LoadPageList(Me.btnPage)
            ComboBox1_SelectedIndexChanged(Me, New EventArgs())
            A0_PictureBox1.Enabled = True
            A0_PictureBox2.Enabled = True
            pageIndex = Me.btnPage.Items.Count - 1
            btnPage_SelectedIndexChanged(Me, New EventArgs())

        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            timerPreventDefaultExpires.Enabled = True
        End Try
    End Sub
    Public Sub AddImageToPage(ByVal img As System.Drawing.Image, Optional ByVal GetOverContent As Boolean = True)
        If img Is Nothing Then
            Return
        ElseIf img.Width <= 0 And img.Height <= 0 Then
            Return
        End If
        preventClickDialog = True
        Try
            Dim jpg As System.Drawing.Image = img.Clone
            Dim jpgStream As New MemoryStream
            Dim frmImgRot As New frmImageRotation
            frmImgRot.imgRect = New RectangleF(0.0F, 0.0F, cUserRect.rect.Width, cUserRect.rect.Height)
            frmImgRot.LoadPictureBox(jpg)
            frmImgRot.showImageResizeOptions = True
            Dim rotType As System.Drawing.RotateFlipType = RotateFlipType.RotateNoneFlipNone
            Select Case frmImgRot.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    If frmImgRot.cancelled Then
                        Me.Show()
                        Me.BringToFront()
                        Return
                    End If
                    rotType = frmImgRot.rotType
                Case Else
                    Return
            End Select
            Try
                jpg = frmImgRot.ImageRotation_PictureBox.Image.Clone
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            Finally
                frmImgRot.CloseForm = True
                frmImgRot.Close()
                frmImgRot.Dispose()
            End Try
            Me.Show()
            Me.BringToFront()
            Dim rPDF As System.Drawing.RectangleF = cUserRect.rect
            jpg.Save(jpgStream, System.Drawing.Imaging.ImageFormat.Png)
            If jpgStream.CanSeek Then
                jpgStream.Seek(0, SeekOrigin.Begin)
            End If
            jpg.Dispose()
            jpg = Nothing
            Dim bmp As New Bitmap(jpgStream)
            Dim page_width As String, page_height As String
            Dim rectImage As iTextSharp.text.Rectangle = Nothing
            Dim mPDF As New MemoryStream()
            Try
                page_width = getPDFWidth(Session)
                page_height = getPDFHeight(Session)
                If Not rPDF = Nothing Then
                    rPDF = GetFieldPositionsReverse2(Session, rPDF)
                End If
                If Not rPDF = Nothing Then
                    If rPDF.Width <= 5 Or rPDF.Height <= 5 Then
                        rectImage = New iTextSharp.text.Rectangle(page_width, page_height)
                    Else
                        rectImage = New iTextSharp.text.Rectangle(rPDF.Width, rPDF.Height)
                    End If
                Else
                    rectImage = New iTextSharp.text.Rectangle(page_width, page_height)
                End If
                If rPDF = Nothing Then
                    blnModelPopupClose = MsgBoxResult.Ignore
                    pnlPageSize_MaintainAspectRatio.Checked = False
                    Load_PageSizePanel(rectImage)
                    pnlPageSizeApsectRation_Update()
                    pnlPageSize.Show()
                    pnlPageSize.BringToFront()
                    If modelPopup_DoEvents(blnModelPopupClose) Then
                        pnlPageSize.Hide()
                    End If
                    If blnModelPopupClose <> MsgBoxResult.Ok Then Return
                    page_width = pageSizes("CUSTOM").Width
                    page_height = pageSizes("CUSTOM").Height
                Else
                    page_width = rPDF.Width
                    page_height = rPDF.Height
                End If
            Catch ex As Exception
                page_width = bmp.Width
                page_height = bmp.Height
                TimeStampAdd(ex, debugMode)
            End Try
            Dim r As New iTextSharp.text.Rectangle(CInt(page_width), CInt(page_height))
            cUserRect.pauseDraw = False
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Dim bytes() As Byte = getPDFBytes(pdfReaderDoc)
            pdfReaderDoc = New PdfReader(bytes, getBytes(pdfOwnerPassword & ""))
            Dim stamp As New PdfStamper(pdfReaderDoc, mPDF)
            Dim pages As Integer = bmp.GetFrameCount(Imaging.FrameDimension.Page)
            Dim image As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Png)
            If Not rPDF = Nothing Then
                If rPDF.Width <= 5 Or rPDF.Height <= 5 Then
                    image.SetAbsolutePosition(0, 0)
                    image.ScaleAbsoluteHeight(stamp.Reader.GetPageSizeWithRotation(CInt(page)).Height)
                    image.ScaleAbsoluteWidth(stamp.Reader.GetPageSizeWithRotation(CInt(page)).Width)
                Else
                    image.SetAbsolutePosition(rPDF.Left, rPDF.Top - rPDF.Height)
                    image.ScaleAbsoluteHeight(rPDF.Height)
                    image.ScaleAbsoluteWidth(rPDF.Width)
                End If
            Else
                image.SetAbsolutePosition(0, 0)
                image.ScaleAbsoluteHeight(stamp.Reader.GetPageSizeWithRotation(CInt(page)).Height)
                image.ScaleAbsoluteWidth(stamp.Reader.GetPageSizeWithRotation(CInt(page)).Width)
            End If
            If GetOverContent Then
                stamp.GetOverContent(CInt(Me.page)).AddImage(image)
            Else
                stamp.GetUnderContent(CInt(Me.page)).AddImage(image)
            End If
            stamp.Writer.CloseStream = False
            stamp.Close()
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    Session("output") = mPDF.ToArray
                Else
                    Session("output") = mPDF.ToArray
                End If
            Else
                Session("output") = mPDF.ToArray
            End If
            stamp.Close()
            stamp.Dispose()
            stamp = Nothing
            A0_LoadPDF(True)
            LoadPageList(Me.btnPage)
            ComboBox1_SelectedIndexChanged(Me, New EventArgs())
            A0_PictureBox1.Enabled = True
            A0_PictureBox2.Enabled = True
            pageIndex = pageIndex + 0
            btnPage_SelectedIndexChanged(Me, New EventArgs())
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Throw ex
        Finally
            timerPreventDefaultExpires.Enabled = True
        End Try
    End Sub
    Private Sub OpenToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenToolStripMenuItem.Click
        Try
            ContextMenuStrip1.Hide()
            OpenFile()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub MenuItemEventHanderMouseHover(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try
            Dim obj As ToolStripMenuItem = TryCast(sender, ToolStripMenuItem)
            If Not obj Is Nothing Then
                obj.Owner.ShowItemToolTips = False
                obj.AutoToolTip = False
                ToolStripStatusLabel2.Text = obj.ToolTipText.ToString
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub MenuItemEventHanderMouseLeave(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try
            StatusToolStrip = ""
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub MenuItemEventHandler(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try
            FromClipboardToolStripMenuItem.Visible = False
            If Clipboard_HasContent() Then
                If Not Session Is Nothing Then
                    If Session.Length <= 0 Then
                        ImportImageToolStripMenuItem.Visible = False
                        ImportImageFromClipboardToolStripMenuItem.Visible = False
                        AppendPageFromScannerToolStripMenuItem.Visible = False
                        AppendPageFromTWAINScannerToolStripMenuItem.Visible = False
                        ImportFileToolStripMenuItem.Visible = False
                        ImportBlankPageToolStripMenuItem.Visible = False
                        ImportDataToolStripMenuItem.Visible = False
                        ToolStripSeparator5.Visible = False
                    Else
                        ImportImageToolStripMenuItem.Visible = True
                        ImportImageFromClipboardToolStripMenuItem.Visible = True
                        AppendPageFromScannerToolStripMenuItem.Visible = True
                        AppendPageFromTWAINScannerToolStripMenuItem.Visible = False
                        ImportFileToolStripMenuItem.Visible = True
                        ImportBlankPageToolStripMenuItem.Visible = True
                        ImportDataToolStripMenuItem.Visible = True
                        ToolStripSeparator5.Visible = True
                    End If
                Else
                    ImportImageToolStripMenuItem.Visible = False
                    ImportImageFromClipboardToolStripMenuItem.Visible = False
                    AppendPageFromScannerToolStripMenuItem.Visible = False
                    AppendPageFromTWAINScannerToolStripMenuItem.Visible = False
                    ImportFileToolStripMenuItem.Visible = False
                    ImportBlankPageToolStripMenuItem.Visible = False
                    ImportDataToolStripMenuItem.Visible = False
                    ToolStripSeparator5.Visible = False
                End If
                Dim extensions As New List(Of String)
                extensions.AddRange(New String() {".fdf", ".xfdf", ".xdp", ".xml", ".pdf", ".xpdf"})
                Dim imageExtensions As New List(Of String)
                imageExtensions.AddRange(New String() {".jpg", ".gif", ".png", ".jpeg", ".tif", ".tiff"})
                If Clipboard.ContainsImage() Then
                    FromClipboardToolStripMenuItem.Visible = True
                ElseIf Clipboard.ContainsData(System.Windows.Forms.DataFormats.Bitmap) Then
                    FromClipboardToolStripMenuItem.Visible = True
                ElseIf Clipboard.ContainsText(System.Windows.Forms.TextDataFormat.Text) Then
                    Dim oDataString As String = System.Windows.Forms.Clipboard.GetText(TextDataFormat.Text)
                    Try
                        If FileExists(oDataString & "") Then
                            If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                FromClipboardToolStripMenuItem.Visible = True
                            ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                FromClipboardToolStripMenuItem.Visible = True
                            End If
                        End If
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                    End Try
                ElseIf Clipboard.ContainsText(System.Windows.Forms.TextDataFormat.UnicodeText) Then
                    Dim oDataString As String = System.Windows.Forms.Clipboard.GetText(TextDataFormat.UnicodeText)
                    Try
                        If FileExists(oDataString & "") Then
                            If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                FromClipboardToolStripMenuItem.Visible = True
                            ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                FromClipboardToolStripMenuItem.Visible = True
                            End If
                        End If
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                    End Try
                ElseIf Clipboard.GetFileDropList.Count > 0 Then
                    Dim oDataString As String = Clipboard.GetFileDropList(0).ToString()
                    Try
                        If FileExists(oDataString & "") Then
                            If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                FromClipboardToolStripMenuItem.Visible = True
                            ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                FromClipboardToolStripMenuItem.Visible = True
                            End If
                        End If
                    Catch ex2 As Exception
                        TimeStampAdd(ex2, debugMode)
                    End Try
                End If
            Else
                If Not Session Is Nothing Then
                    If Session.Length <= 0 Then
                        ImportImageToolStripMenuItem.Visible = False
                        ImportImageFromClipboardToolStripMenuItem.Visible = False
                        AppendPageFromScannerToolStripMenuItem.Visible = False
                        AppendPageFromTWAINScannerToolStripMenuItem.Visible = False
                        ImportFileToolStripMenuItem.Visible = False
                        ImportBlankPageToolStripMenuItem.Visible = False
                        ImportDataToolStripMenuItem.Visible = False
                        ToolStripSeparator5.Visible = False
                    Else
                        ImportImageToolStripMenuItem.Visible = True
                        ImportImageFromClipboardToolStripMenuItem.Visible = False
                        AppendPageFromScannerToolStripMenuItem.Visible = True
                        AppendPageFromTWAINScannerToolStripMenuItem.Visible = False
                        ImportFileToolStripMenuItem.Visible = True
                        ImportBlankPageToolStripMenuItem.Visible = True
                        ImportDataToolStripMenuItem.Visible = True
                        FromClipboardToolStripMenuItem.Visible = False
                        ToolStripSeparator5.Visible = True
                    End If
                Else
                    ImportImageToolStripMenuItem.Visible = False
                    ImportImageFromClipboardToolStripMenuItem.Visible = False
                    AppendPageFromScannerToolStripMenuItem.Visible = False
                    AppendPageFromTWAINScannerToolStripMenuItem.Visible = False
                    ImportFileToolStripMenuItem.Visible = False
                    ImportBlankPageToolStripMenuItem.Visible = False
                    ImportDataToolStripMenuItem.Visible = False
                    ToolStripSeparator5.Visible = False
                End If
            End If
        Catch ex As Exception
            ImportImageFromClipboardToolStripMenuItem.Visible = False
            FromClipboardToolStripMenuItem.Visible = False
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            Dim mi As ToolStripMenuItem = sender
            Dim sStr As String = mi.Name.ToString() & ""
            Dim fp As String = ""
            Dim i As Integer = 0
            If sStr.Contains("historyItem_") Then
                i = CInt(sStr.ToString().Replace("historyItem_", ""))
                fp = OpenHistoryList(True)(i)
                If Not String.IsNullOrEmpty(fp & "") Then
                    ContextMenuStrip1.Hide()
                    OpenFile(fp, False)
                End If
                ContextMenuStrip1.Hide()
                Return
            ElseIf sStr.Contains("openwithNotepad_") Then
                i = CInt(sStr.ToString().Replace("openwithNotepad_", ""))
                fp = OpenHistoryList(True)(i)
                If Not String.IsNullOrEmpty(fp & "") Then
                    ContextMenuStrip1.Hide()
                    Process.Start("notepad.exe", """" & fp & """")
                End If
                ContextMenuStrip1.Hide()
                Return
            ElseIf sStr.Contains("openwithDefault_") Then
                i = CInt(sStr.ToString().Replace("openwithDefault_", ""))
                fp = OpenHistoryList(True)(i)
                If Not String.IsNullOrEmpty(fp & "") Then
                    ContextMenuStrip1.Hide()
                    Process.Start(fp)
                End If
                ContextMenuStrip1.Hide()
                Return
            ElseIf sStr.Contains("openwithExplorer_") Then
                i = CInt(sStr.ToString().Replace("openwithExplorer_", ""))
                fp = OpenHistoryList(True)(i)
                If Not String.IsNullOrEmpty(fp & "") Then
                    ContextMenuStrip1.Hide()
                    Process.Start("explorer.exe", "/select,""" & (fp) & """")
                End If
                ContextMenuStrip1.Hide()
                Return
            ElseIf sStr.Contains("openwithProgram_") Then
                i = CInt(sStr.ToString().Replace("openwithProgram_", ""))
                fp = OpenHistoryList(True)(i)
                If Not String.IsNullOrEmpty(fp & "") Then
                    ContextMenuStrip1.Hide()
                    'Process.Start(fp)
                    clsOpenAs.OpenAs(fp)
                End If
                ContextMenuStrip1.Hide()
                Return
            ElseIf sStr.Contains("openwithSelect_historyItem_") Then
                i = CInt(sStr.ToString().Replace("openwithSelect_historyItem_", ""))
                fp = OpenHistoryList(True)(i)
                If Not String.IsNullOrEmpty(fp & "") Then
                    ContextMenuStrip1.Hide()
                    OpenFile(fp, False)
                End If
                ContextMenuStrip1.Hide()
                Return
            ElseIf sStr.Contains("clearItemX_") Then
                i = CInt(sStr.ToString().Replace("clearItemX_", ""))
                Select Case MsgBox("Clear item?", MsgBoxStyle.Question + MsgBoxStyle.YesNo, "Confirm")
                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                        Dim lstHistoryList As New List(Of String)
                        lstHistoryList.AddRange(OpenHistoryList(True))
                        lstHistoryList.RemoveAt(i)
                        SaveOpenHistoryList = lstHistoryList.ToArray
                        loadToolStripMenu_OpenHistoryList()
                    Case Else
                End Select
                If Not btnMainLocation = Nothing Then
                    ContextMenuStrip1.Show(btnMain, btnMainLocation)
                    ContextMenuStrip1.Focus()
                    ContextMenuStrip1.BringToFront()
                    OpenToolStripMenuItem.Select()
                    If OpenToolStripMenuItem.DropDown.Items.Count > 1 Then
                        OpenToolStripMenuItem.DropDown.Show()
                        OpenToolStripMenuItem.DropDown.BringToFront()
                    End If
                End If
                Return
            ElseIf sStr.Contains("clearItems") Then
                Select Case MsgBox("Clear all items?", MsgBoxStyle.Question + MsgBoxStyle.YesNo, "Confirm")
                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                        OpenHistoryList_ClearItems()
                        loadToolStripMenu_OpenHistoryList()
                    Case Else
                End Select
                If Not btnMainLocation = Nothing Then
                    ContextMenuStrip1.Show(btnMain, btnMainLocation)
                    ContextMenuStrip1.Focus()
                    ContextMenuStrip1.BringToFront()
                    OpenToolStripMenuItem.Select()
                    If OpenToolStripMenuItem.DropDown.Items.Count > 1 Then
                        OpenToolStripMenuItem.DropDown.Show()
                        OpenToolStripMenuItem.DropDown.BringToFront()
                    End If
                End If
                Return
            End If
            Return
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
        End Try
    End Sub
    Public Sub loadToolStripMenu_OpenHistoryList()
        Try
            Dim lst As New List(Of String)
            lst.AddRange(OpenHistoryList(False))
            If lst.Count <= 0 Then
                lst.Add(appPath & "acro.pdf")
                SaveOpenHistoryList = lst.ToArray()
            End If
            If Not OpenToolStripMenuItem.Enabled Then OpenToolStripMenuItem.Enabled = True
            If OpenToolStripMenuItem.DropDownItems.Count > 2 Then
                For i As Integer = OpenToolStripMenuItem.DropDownItems.Count - 1 To 2 Step -1
                    RemoveHandler OpenToolStripMenuItem.DropDownItems(i).Click, AddressOf MenuItemEventHandler
                    OpenToolStripMenuItem.DropDownItems.RemoveAt(i)
                Next
            Else
                Try
                    Dim tm As New ToolStripMenuItem("Clear History List")
                    tm.Name = "clearItems"
                    tm.Text = "Clear History List"
                    tm.ToolTipText = ""
                    AddHandler tm.Click, AddressOf MenuItemEventHandler
                    OpenToolStripMenuItem.DropDownItems.Add(tm)
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            End If
            For idx As Integer = 0 To lst.Count - 1
                Try
                    Dim fp As String = lst(idx) & ""
                    If CStr(fp & "").StartsWith("http: //") Or CStr(fp & "").StartsWith("https://") Or CStr(fp & "").StartsWith("ftp://") Then
                        Dim tm As New ToolStripMenuItem(fp & "")
                        tm.Name = "historyItem_" & idx.ToString
                        tm.Text = System.IO.Path.GetFileName(fp & "")
                        tm.ToolTipText = fp
                        AddHandler tm.MouseHover, AddressOf MenuItemEventHanderMouseHover
                        AddHandler tm.Click, AddressOf MenuItemEventHandler
                        AddHandler tm.MouseLeave, AddressOf MenuItemEventHanderMouseLeave
                        Dim tmX As New ToolStripMenuItem("Remove")
                        tmX.TextAlign = ContentAlignment.MiddleLeft
                        tmX.ForeColor = Color.DarkRed
                        tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                        tmX.Alignment = ToolStripItemAlignment.Left
                        tmX.Width = 10
                        tmX.Padding = New System.Windows.Forms.Padding(0)
                        tmX.Margin = New System.Windows.Forms.Padding(0)
                        tmX.Name = "clearItemX_" & idx.ToString
                        tmX.Text = "X"
                        tmX.ToolTipText = ""
                        tm.DropDown.ShowItemToolTips = False
                        AddHandler tmX.Click, AddressOf MenuItemEventHandler
                        tm.DropDownItems.Add(tmX)
                        OpenToolStripMenuItem.AutoToolTip = False
                        OpenToolStripMenuItem.DropDownItems.Add(tm)
                        OpenToolStripMenuItem.DropDown.ShowItemToolTips = False
                        AddHandler OpenToolStripMenuItem.DropDownClosed, AddressOf MenuItemEventHanderMouseLeave

                    ElseIf FileExists(fp & "") Then
                        Dim tm As New ToolStripMenuItem(fp & "")
                        tm.Name = "historyItem_" & idx.ToString
                        tm.Text = System.IO.Path.GetFileName(fp & "")
                        tm.ToolTipText = fp
                        AddHandler tm.MouseHover, AddressOf MenuItemEventHanderMouseHover
                        AddHandler tm.Click, AddressOf MenuItemEventHandler
                        AddHandler tm.MouseLeave, AddressOf MenuItemEventHanderMouseLeave
                        Dim tmX As ToolStripMenuItem
                        'tmX = New ToolStripMenuItem("Open With Default")
                        Select Case System.IO.Path.GetExtension(fp).ToString().TrimStart("."c)
                            Case "pdf"
                                tmX = New ToolStripMenuItem("Open With Default")
                                tmX.TextAlign = ContentAlignment.MiddleLeft
                                tmX.ForeColor = Color.DarkRed
                                tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                tmX.Alignment = ToolStripItemAlignment.Left
                                tmX.Width = 10
                                tmX.Padding = New System.Windows.Forms.Padding(0)
                                tmX.Margin = New System.Windows.Forms.Padding(0)
                                tmX.Name = "openwithDefault_" & idx.ToString
                                tmX.Text = "Open with default viewer"
                                tmX.ToolTipText = ""
                                tm.DropDown.ShowItemToolTips = False
                                AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                tm.DropDownItems.Add(tmX)
                                If Not IsValidUrl(fp) Then
                                    tmX = New ToolStripMenuItem("Open Directory With Windows Explorer")
                                    tmX.TextAlign = ContentAlignment.MiddleLeft
                                    tmX.ForeColor = Color.DarkRed
                                    tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                    tmX.Alignment = ToolStripItemAlignment.Left
                                    tmX.Width = 10
                                    tmX.Padding = New System.Windows.Forms.Padding(0)
                                    tmX.Margin = New System.Windows.Forms.Padding(0)
                                    tmX.Name = "openwithExplorer_" & idx.ToString
                                    tmX.Text = "Open with Windows Explorer"
                                    tmX.ToolTipText = ""
                                    tm.DropDown.ShowItemToolTips = False
                                    AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                    tm.DropDownItems.Add(tmX)


                                    tmX = New ToolStripMenuItem("Open With Program")
                                    tmX.TextAlign = ContentAlignment.MiddleLeft
                                    tmX.ForeColor = Color.DarkRed
                                    tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                    tmX.Alignment = ToolStripItemAlignment.Left
                                    tmX.Width = 10
                                    tmX.Padding = New System.Windows.Forms.Padding(0)
                                    tmX.Margin = New System.Windows.Forms.Padding(0)
                                    tmX.Name = "openwithProgram_" & idx.ToString
                                    tmX.Text = "Open with Program"
                                    tmX.ToolTipText = ""
                                    tm.DropDown.ShowItemToolTips = False
                                    AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                    tm.DropDownItems.Add(tmX)
                                End If
                            Case "fdf", "xfdf", "xdp", "xml", "json", "html", "htm", "xhtml", "aspx"
                                tmX = New ToolStripMenuItem("Open With Default")
                                tmX.TextAlign = ContentAlignment.MiddleLeft
                                tmX.ForeColor = Color.DarkRed
                                tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                tmX.Alignment = ToolStripItemAlignment.Left
                                tmX.Width = 10
                                tmX.Padding = New System.Windows.Forms.Padding(0)
                                tmX.Margin = New System.Windows.Forms.Padding(0)
                                tmX.Name = "openwithDefault_" & idx.ToString
                                tmX.Text = "Open with default viewer"
                                tmX.ToolTipText = ""
                                tm.DropDown.ShowItemToolTips = False
                                AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                tm.DropDownItems.Add(tmX)
                                tmX = New ToolStripMenuItem("Open With Notepad")
                                tmX.TextAlign = ContentAlignment.MiddleLeft
                                tmX.ForeColor = Color.DarkRed
                                tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                tmX.Alignment = ToolStripItemAlignment.Left
                                tmX.Width = 10
                                tmX.Padding = New System.Windows.Forms.Padding(0)
                                tmX.Margin = New System.Windows.Forms.Padding(0)
                                tmX.Name = "openwithNotepad_" & idx.ToString
                                tmX.Text = "Open with Notepad"
                                tmX.ToolTipText = ""
                                tm.DropDown.ShowItemToolTips = False
                                AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                tm.DropDownItems.Add(tmX)
                                If Not IsValidUrl(fp) Then
                                    tmX = New ToolStripMenuItem("Open Directory With Windows Explorer")
                                    tmX.TextAlign = ContentAlignment.MiddleLeft
                                    tmX.ForeColor = Color.DarkRed
                                    tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                    tmX.Alignment = ToolStripItemAlignment.Left
                                    tmX.Width = 10
                                    tmX.Padding = New System.Windows.Forms.Padding(0)
                                    tmX.Margin = New System.Windows.Forms.Padding(0)
                                    tmX.Name = "openwithExplorer_" & idx.ToString
                                    tmX.Text = "Open with Windows Explorer"
                                    tmX.ToolTipText = ""
                                    tm.DropDown.ShowItemToolTips = False
                                    AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                    tm.DropDownItems.Add(tmX)

                                    tmX = New ToolStripMenuItem("Open With Program")
                                    tmX.TextAlign = ContentAlignment.MiddleLeft
                                    tmX.ForeColor = Color.DarkRed
                                    tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                    tmX.Alignment = ToolStripItemAlignment.Left
                                    tmX.Width = 10
                                    tmX.Padding = New System.Windows.Forms.Padding(0)
                                    tmX.Margin = New System.Windows.Forms.Padding(0)
                                    tmX.Name = "openwithProgram_" & idx.ToString
                                    tmX.Text = "Open with Program"
                                    tmX.ToolTipText = ""
                                    tm.DropDown.ShowItemToolTips = False
                                    AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                    tm.DropDownItems.Add(tmX)
                                End If
                            Case Else
                                tmX = New ToolStripMenuItem("Open With Default")
                                tmX.TextAlign = ContentAlignment.MiddleLeft
                                tmX.ForeColor = Color.DarkRed
                                tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                tmX.Alignment = ToolStripItemAlignment.Left
                                tmX.Width = 10
                                tmX.Padding = New System.Windows.Forms.Padding(0)
                                tmX.Margin = New System.Windows.Forms.Padding(0)
                                tmX.Name = "openwithDefault_" & idx.ToString
                                tmX.Text = "Open with default viewer"
                                tmX.ToolTipText = ""
                                tm.DropDown.ShowItemToolTips = False
                                AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                tm.DropDownItems.Add(tmX)
                                tmX = New ToolStripMenuItem("Open With Notepad")
                                tmX.TextAlign = ContentAlignment.MiddleLeft
                                tmX.ForeColor = Color.DarkRed
                                tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                tmX.Alignment = ToolStripItemAlignment.Left
                                tmX.Width = 10
                                tmX.Padding = New System.Windows.Forms.Padding(0)
                                tmX.Margin = New System.Windows.Forms.Padding(0)
                                tmX.Name = "openwithNotepad_" & idx.ToString
                                tmX.Text = "Open with Notepad"
                                tmX.ToolTipText = ""
                                tm.DropDown.ShowItemToolTips = False
                                AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                tm.DropDownItems.Add(tmX)
                                If Not IsValidUrl(fp) Then
                                    tmX = New ToolStripMenuItem("Open Directory With Windows Explorer")
                                    tmX.TextAlign = ContentAlignment.MiddleLeft
                                    tmX.ForeColor = Color.DarkRed
                                    tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                    tmX.Alignment = ToolStripItemAlignment.Left
                                    tmX.Width = 10
                                    tmX.Padding = New System.Windows.Forms.Padding(0)
                                    tmX.Margin = New System.Windows.Forms.Padding(0)
                                    tmX.Name = "openwithExplorer_" & idx.ToString
                                    tmX.Text = "Open with Windows Explorer"
                                    tmX.ToolTipText = ""
                                    tm.DropDown.ShowItemToolTips = False
                                    AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                    tm.DropDownItems.Add(tmX)


                                    tmX = New ToolStripMenuItem("Open With Program")
                                    tmX.TextAlign = ContentAlignment.MiddleLeft
                                    tmX.ForeColor = Color.DarkRed
                                    tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                                    tmX.Alignment = ToolStripItemAlignment.Left
                                    tmX.Width = 10
                                    tmX.Padding = New System.Windows.Forms.Padding(0)
                                    tmX.Margin = New System.Windows.Forms.Padding(0)
                                    tmX.Name = "openwithProgram_" & idx.ToString
                                    tmX.Text = "Open with Program"
                                    tmX.ToolTipText = ""
                                    tm.DropDown.ShowItemToolTips = False
                                    AddHandler tmX.Click, AddressOf MenuItemEventHandler
                                    tm.DropDownItems.Add(tmX)
                                End If
                        End Select
                        tmX = New ToolStripMenuItem("Remove")
                        tmX.TextAlign = ContentAlignment.MiddleLeft
                        tmX.ForeColor = Color.DarkRed
                        tmX.DisplayStyle = ToolStripItemDisplayStyle.Text
                        tmX.Alignment = ToolStripItemAlignment.Left
                        tmX.Width = 10
                        tmX.Padding = New System.Windows.Forms.Padding(0)
                        tmX.Margin = New System.Windows.Forms.Padding(0)
                        tmX.Name = "clearItemX_" & idx.ToString
                        tmX.Text = "X"
                        tmX.ToolTipText = ""
                        tm.DropDown.ShowItemToolTips = False
                        AddHandler tmX.Click, AddressOf MenuItemEventHandler
                        tm.DropDownItems.Add(tmX)
                        OpenToolStripMenuItem.AutoToolTip = False
                        OpenToolStripMenuItem.DropDownItems.Add(tm)
                        OpenToolStripMenuItem.DropDown.ShowItemToolTips = False
                        AddHandler OpenToolStripMenuItem.DropDownClosed, AddressOf MenuItemEventHanderMouseLeave
                    End If
                Catch exItems As Exception
                    Err.Clear()
                End Try
            Next
            ContextMenuStrip1.ShowItemToolTips = False
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub addOpenHistoryListItem(ByVal path As String)
        If String.IsNullOrEmpty(path & "") Then Return
        Dim lstH As New List(Of String)
        Try
            Dim strLst() As String = OpenHistoryList(True).ToArray()
            If strLst.Length > 0 Then
                lstH.AddRange(strLst)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If lstH.Contains(path) Then
                lstH.Remove(path)
            End If
            lstH.Insert(0, path)
        Catch e As Exception
            TimeStampAdd(e, debugMode)
        End Try
        SaveOpenHistoryList = lstH.ToArray
    End Sub
    Public Sub OpenHistoryList_ClearItems()
        Try
            SaveOpenHistoryList = Nothing
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Enum compression_Level
        DEFAULT_COMPRESSION = PdfStream.DEFAULT_COMPRESSION
        NO_COMPRESSION = PdfStream.NO_COMPRESSION
        BEST_SPEED = PdfStream.BEST_SPEED
        COMPRESS_2 = 2
        COMPRESS_3 = 3
        COMPRESS_4 = 4
        COMPRESS_5 = 5
        COMPRESS_6 = 6
        COMPRESS_7 = 7
        COMPRESS_8 = 8
        BEST_COMPRESSION = PdfStream.BEST_COMPRESSION
        FULL_COMPRESSION = 10
    End Enum
    Public WriteOnly Property SaveOpenHistoryList() As String()
        Set(ByVal value As String())
            Try
                If String.IsNullOrEmpty(openHistoryListFile & "") Then
                    Return
                End If
                If Not value Is Nothing Then
                    If value.Length > 0 Then
                        Dim lstH As New List(Of String)
                        For Each fp As String In value.ToArray().Reverse()
                            Try
                                If Not String.IsNullOrEmpty(fp & "") Then
                                    If Not lstH.Contains(fp & "") Then
                                        If CStr(fp & "").StartsWith("http://") Or CStr(fp & "").StartsWith("https://") Or CStr(fp & "").StartsWith("ftp://") Or FileExists(fp & "") Then
                                            lstH.Add(fp)
                                        End If
                                    End If
                                End If
                            Catch e As Exception
                                TimeStampAdd(e, debugMode)
                            End Try
                        Next
                        If lstH.Count > 0 Then
                            System.IO.File.WriteAllLines(openHistoryListFile & "", lstH.ToArray())
                        Else
                            System.IO.File.WriteAllText(openHistoryListFile & "", "")
                        End If
                        Return
                    Else
                        System.IO.File.WriteAllLines(openHistoryListFile & "", New String() {""})
                        Return
                    End If
                Else
                    System.IO.File.WriteAllLines(openHistoryListFile & "", New String() {""})
                    Return
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                System.IO.File.WriteAllLines(openHistoryListFile & "", value.ToArray())
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End Set
    End Property
    Public ReadOnly Property OpenHistoryList(Optional ByVal Retrieve_Complete_List As Boolean = True) As String()
        Get
            Try
                If openHistoryListFile Is Nothing Or openHistoryListFile = "" Then Return New String() {}
                If Not FileExists(openHistoryListFile & "") Then
                    System.IO.File.WriteAllText(openHistoryListFile, "")
                    Return New String() {}
                Else
                    Dim lstH As New List(Of String)
                    Dim MaxHistoryShow As Integer = 0
                    Dim arr As New List(Of String)
                    Dim lns() As String = System.IO.File.ReadAllLines(CStr(openHistoryListFile & ""))
                    If lns.Length <= 0 Then
                        Return New String() {}
                    End If
                    arr.AddRange(lns.ToArray)
                    For Each fp As String In arr.ToArray().Reverse()
                        Try
                            If (MaxHistoryShow >= _showMaxHistoryMaxShow And _showMaxHistoryMaxShow > 0) And (Retrieve_Complete_List = False) Then
                                Exit For
                            End If
                            If Not String.IsNullOrEmpty(fp & "") Then
                                If Not lstH.Contains(fp & "") Then
                                    If CStr(fp & "").StartsWith("http://") Or CStr(fp & "").StartsWith("https://") Or CStr(fp & "").StartsWith("ftp://") Then
                                        lstH.Add(fp)
                                        MaxHistoryShow += 1
                                    ElseIf FileExists(fp & "") Then
                                        lstH.Add(fp)
                                        MaxHistoryShow += 1
                                    End If
                                End If
                            End If
                        Catch e As Exception
                            TimeStampAdd(e, debugMode)
                        End Try
                    Next
                    If lstH.Count > 0 Then
                        Return lstH.ToArray
                    Else
                        Return New String() {}
                    End If
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Return New String() {}
        End Get
    End Property
    Private Sub SaveToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SaveToolStripMenuItem.Click
        btnSave_Click(Me, New EventArgs())
    End Sub
    Private Sub SaveAsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SaveAsToolStripMenuItem.Click
        btnSaveAs_Click(Me, New EventArgs())
    End Sub
    Private Sub ViewInAcrobatToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        btnViewInAcrobat_Click(Me, New EventArgs())
    End Sub
    Private Sub PreviewToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        btnPreview_Click(Me, New EventArgs())
    End Sub
    Private Sub PDFReferenceToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        btnPDFRef_Click(Me, New EventArgs())
    End Sub
    Private Sub JSReferenceToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        btnJSRef_Click(Me, New EventArgs())
    End Sub
    Private Sub CosEditToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        btnCosEdit_Click(Me, New EventArgs())
    End Sub
    Private Sub ImportImageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportImageToolStripMenuItem.Click
        btnImportImage_Click(Me, New EventArgs())
    End Sub
    Private Sub btnMain_MouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btnMain.MouseClick
        Try
            If ignoreClick = True Then
                If DoUntil_Boolean(ignoreClick, False) Then
                End If
            End If
            If Clipboard_HasContent() Then
                OpenFileToolStripMenuItem.Visible = True
            Else
                OpenFileToolStripMenuItem.Visible = False
            End If
            btnMainLocation = e.Location
            UploadFileToolStripMenuItem.Visible = False
            If Not Session Is Nothing Then
                If Session.Length <= 0 Then
                    ImportImageToolStripMenuItem.Visible = False
                    ImportImageFromClipboardToolStripMenuItem.Visible = False
                    AppendPageFromScannerToolStripMenuItem.Visible = False
                    AppendPageFromTWAINScannerToolStripMenuItem.Visible = False
                    ImportFileToolStripMenuItem.Visible = False
                    ImportBlankPageToolStripMenuItem.Visible = False
                    ImportDataToolStripMenuItem.Visible = False
                    ToolStripSeparator5.Visible = False
                    CopyBytesToolStripMenuItem.Visible = False
                    CopyFileToolStripMenuItem.Visible = False
                Else
                    ImportImageToolStripMenuItem.Visible = True
                    ImportImageFromClipboardToolStripMenuItem.Visible = False
                    AppendPageFromScannerToolStripMenuItem.Visible = True
                    AppendPageFromTWAINScannerToolStripMenuItem.Visible = False
                    ImportFileToolStripMenuItem.Visible = True
                    ImportBlankPageToolStripMenuItem.Visible = True
                    ImportDataToolStripMenuItem.Visible = True
                    FromClipboardToolStripMenuItem.Visible = False
                    ToolStripSeparator5.Visible = True
                    If dlgValues.Count >= 6 Then
                        UploadFileToolStripMenuItem.Visible = True
                    Else
                        UploadFileToolStripMenuItem.Visible = False
                    End If
                    CopyBytesToolStripMenuItem.Visible = True
                    CopyFileToolStripMenuItem.Visible = True
                End If
            Else
                ImportImageToolStripMenuItem.Visible = False
                ImportImageFromClipboardToolStripMenuItem.Visible = False
                AppendPageFromScannerToolStripMenuItem.Visible = False
                AppendPageFromTWAINScannerToolStripMenuItem.Visible = False
                ImportFileToolStripMenuItem.Visible = False
                ImportBlankPageToolStripMenuItem.Visible = False
                ImportDataToolStripMenuItem.Visible = False
                ToolStripSeparator5.Visible = False
                CopyBytesToolStripMenuItem.Visible = False
                CopyFileToolStripMenuItem.Visible = False
            End If
        Catch ex As Exception
            ImportImageFromClipboardToolStripMenuItem.Visible = False
            FromClipboardToolStripMenuItem.Visible = False
            Err.Clear()
        End Try
        ContextMenuStrip1.Show(btnMain, e.Location)
    End Sub
    Private Sub XFAJSReferenceToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Process.Start("https://www.google.com/search?q=AcroFormJS_to_XFAJS.pdf")
    End Sub
    Private Sub OpenFileDialog2_FileOk(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles OpenFileDialog2.FileOk
    End Sub
    Private Sub ListBox_Options_MultipleSelection_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox_Options_MultipleSelection.CheckedChanged
        If ListBox_Options_MultipleSelection.Checked Then
            ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple
            ListBox_Options_Commit.Checked = False
        Else
            ComboBox_ItemDisplay.SelectionMode = SelectionMode.One
        End If
    End Sub
    Private Sub ListBox_Options_Commit_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox_Options_Commit.CheckedChanged
        If ListBox_Options_Commit.Checked Then
            ListBox_Options_MultipleSelection.Checked = False
        ElseIf ListBox_Options_MultipleSelection.Checked Then
            ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple
            ListBox_Options_Commit.Checked = False
        Else
            ComboBox_ItemDisplay.SelectionMode = SelectionMode.One
        End If
    End Sub
    Private Sub ComboBox_ItemDisplayText_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_ItemDisplayText.TextChanged
        btnComboBox_ItemUpdate.Enabled = False
        If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
            btnComboBox_ItemDefault.Text = ""
            If ComboBox_ItemDisplay.SelectedItems.Count = 1 Then
                If Not ((ComboBox_ItemDisplay.Items(ComboBox_ItemDisplay.SelectedIndex).ToString = ComboBox_ItemDisplayText.Text) And (ComboBox_ItemValue.Items(ComboBox_ItemDisplay.SelectedIndex).ToString = ComboBox_ItemValueText.Text)) Then
                    btnComboBox_ItemUpdate.Enabled = True
                End If
            End If
        ElseIf ComboBox_ItemDisplay.SelectedIndex >= 0 Then
            If ComboBox_ItemDisplay.SelectedItems.Count = 1 Then
                If Not ((ComboBox_ItemDisplay.Items(ComboBox_ItemDisplay.SelectedIndex).ToString = ComboBox_ItemDisplayText.Text) And (ComboBox_ItemValue.Items(ComboBox_ItemDisplay.SelectedIndex).ToString = ComboBox_ItemValueText.Text)) Then
                    btnComboBox_ItemUpdate.Enabled = True
                End If
            End If
        End If
    End Sub
    Private Sub ComboBox_ItemValueText_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_ItemValueText.TextChanged
        btnComboBox_ItemUpdate.Enabled = False
        If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
            btnComboBox_ItemDefault.Text = ""
            If ComboBox_ItemDisplay.SelectedItems.Count = 1 Then
                If Not ((ComboBox_ItemDisplay.Items(ComboBox_ItemDisplay.SelectedIndex).ToString = ComboBox_ItemDisplayText.Text) And (ComboBox_ItemValue.Items(ComboBox_ItemDisplay.SelectedIndex).ToString = ComboBox_ItemValueText.Text)) Then
                    btnComboBox_ItemUpdate.Enabled = True
                End If
            End If
        ElseIf ComboBox_ItemDisplay.SelectedIndex >= 0 Then
            If ComboBox_ItemDisplay.SelectedItems.Count = 1 Then
                If Not ((ComboBox_ItemDisplay.Items(ComboBox_ItemDisplay.SelectedIndex).ToString = ComboBox_ItemDisplayText.Text) And (ComboBox_ItemValue.Items(ComboBox_ItemDisplay.SelectedIndex).ToString = ComboBox_ItemValueText.Text)) Then
                    btnComboBox_ItemUpdate.Enabled = True
                End If
            End If
        End If
    End Sub
    Private Sub btnComboBox_ItemUpdate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnComboBox_ItemUpdate.Click
        If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
            If ComboBox_ItemDisplay.SelectedItems.Count = 1 Then
                Dim i As Integer = ComboBox_ItemDisplay.SelectedIndex
                ComboBox_ItemValue.Items(i) = ComboBox_ItemValueText.Text
                ComboBox_ItemDisplay.Items(i) = ComboBox_ItemDisplayText.Text
            End If
        ElseIf ComboBox_ItemDisplay.SelectedIndex >= 0 Then
            If ComboBox_ItemDisplay.SelectedItems.Count = 1 Then
                Dim i As Integer = ComboBox_ItemDisplay.SelectedIndex
                ComboBox_ItemValue.Items(i) = ComboBox_ItemValueText.Text
                ComboBox_ItemDisplay.Items(i) = ComboBox_ItemDisplayText.Text
            End If
        End If
    End Sub
    Private Sub PictureBox1_MouseLeave(ByVal sender As Object, ByVal e As System.EventArgs) Handles A0_PictureBox2.MouseLeave
    End Sub
    Private Sub PuchButton_Options_Behavior_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_Behavior.SelectedIndexChanged
        Dim selIndx As Integer = PuchButton_Options_State.SelectedIndex
        PuchButton_Options_State.Items.Clear()
        Select Case PuchButton_Options_Behavior.SelectedIndex
            Case 0
                PuchButton_Options_State.Items.Add("Up")
            Case 1
                PuchButton_Options_State.Items.Add("Up")
                PuchButton_Options_State.Items.Add("Down")
                PuchButton_Options_State.Items.Add("Rollover")
            Case 2
                PuchButton_Options_State.Items.Add("Up")
            Case 3
                PuchButton_Options_State.Items.Add("Up")
        End Select
        PuchButton_Options_State.SelectedIndex = IIf(selIndx < PuchButton_Options_State.Items.Count, selIndx, 0)
    End Sub
    Private Sub PuchButton_Options_State_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_State.SelectedIndexChanged
        If PuchButton_Options_State.SelectedIndex < 0 Then Return
        If PuchButton_Options_StateImageList.Count > PuchButton_Options_State.SelectedIndex Then
            Try
                PuchButton_Options_PictureBox.Image = Nothing
                Select Case PuchButton_Options_State.SelectedIndex
                    Case 0
                        If Not PuchButton_Options_StateImageList(PuchButton_Options_State.SelectedIndex) Is Nothing Then
                            PuchButton_Options_PictureBox.Image = PuchButton_Options_StateImageList(PuchButton_Options_State.SelectedIndex)
                            PuchButton_Options_Label.Text = PuchButton_Options_StateLabelList(PuchButton_Options_State.SelectedIndex) & ""
                        End If
                    Case 1
                        If Not PuchButton_Options_StateImageList(PuchButton_Options_State.SelectedIndex) Is Nothing Then
                            PuchButton_Options_PictureBox.Image = PuchButton_Options_StateImageList(PuchButton_Options_State.SelectedIndex)
                            PuchButton_Options_Label.Text = PuchButton_Options_StateLabelList(PuchButton_Options_State.SelectedIndex) & ""
                        End If
                    Case 2
                        If Not PuchButton_Options_StateImageList(PuchButton_Options_State.SelectedIndex) Is Nothing Then
                            PuchButton_Options_PictureBox.Image = PuchButton_Options_StateImageList(PuchButton_Options_State.SelectedIndex)
                            PuchButton_Options_Label.Text = PuchButton_Options_StateLabelList(PuchButton_Options_State.SelectedIndex) & ""
                        End If
                End Select
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        Else
            Try
                PuchButton_Options_PictureBox.Image = Nothing
                If PuchButton_Options_StateLabelList.Count > 0 Then
                    PuchButton_Options_Label.Text = PuchButton_Options_StateLabelList(PuchButton_Options_State.SelectedIndex) & ""
                Else
                    PuchButton_Options_Label.Text = ""
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End If
    End Sub
    Private Sub PuchButton_Options_Label_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_Label.TextChanged
        If PuchButton_Options_State.SelectedIndex >= 0 Then
            If PuchButton_Options_StateLabelList.Count - 1 >= PuchButton_Options_State.SelectedIndex Then
                PuchButton_Options_StateLabelList(PuchButton_Options_State.SelectedIndex) = PuchButton_Options_Label.Text & ""
            Else
                For i As Integer = 0 To PuchButton_Options_State.Items.Count - 1
                    If i > PuchButton_Options_StateLabelList.Count - 1 Then
                        PuchButton_Options_StateLabelList.Add(IIf(i = PuchButton_Options_State.SelectedIndex, PuchButton_Options_Label.Text, ""))
                    End If
                Next
            End If
        End If
    End Sub
    Private Sub PuchButton_Options_ClearIconBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_ClearIconBtn.Click
        Try
            PuchButton_Options_PictureBox.Image = Nothing
            If PuchButton_Options_StateImageList.Count > PuchButton_Options_State.SelectedIndex Then
                PuchButton_Options_StateImageList(PuchButton_Options_State.SelectedIndex) = Nothing
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PuchButton_Options_ChooseIconBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_ChooseIconBtn.Click
        Dim pauseDrawTemp As Boolean = cUserRect.pauseDraw + 0
        Try
            cUserRect.pauseDraw = True
            preventClickDialog = True
            OpenFileDialog3.Filter = "Image Formats|*.jpg;*.jpeg;*.bmp;*.gif;*.png;*.tif;*.tiff|JPG|*.jpg|JPEG|*.jpeg|BMP|*.bmp|GIF|*.gif|PNG|*.png|Tif|*.tif|TIFF|*.tiff|PDF|*.pdf|All Files|*.*"
            OpenFileDialog3.FilterIndex = 0
            OpenFileDialog3.FileName = Nothing
            OpenFileDialog3.InitialDirectory = ApplicationDataFolder(False, "")
            OpenFileDialog3.AutoUpgradeEnabled = True
            If OpenFileDialog3.ShowDialog = Windows.Forms.DialogResult.OK Then
                If Not String.IsNullOrEmpty(OpenFileDialog3.FileName & "") Then
                    Dim f As String = OpenFileDialog3.FileName & ""
                    If FileExists(f) Then
                        If PuchButton_Options_State.SelectedIndex >= 0 Then
                            Dim bytes() As Byte = File.ReadAllBytes(f)
                            If PuchButton_Options_StateImageListByte.Count > PuchButton_Options_State.SelectedIndex Then
                                PuchButton_Options_StateImageListByte(PuchButton_Options_State.SelectedIndex) = bytes
                            Else
                                For i As Integer = 0 To PuchButton_Options_State.Items.Count - 1 Step 1
                                    If PuchButton_Options_StateImageListByte.Count - 1 <= i Then
                                        PuchButton_Options_StateImageListByte.Add(Nothing)
                                    End If
                                Next
                                PuchButton_Options_StateImageListByte(PuchButton_Options_State.SelectedIndex) = bytes
                            End If
                            If PuchButton_Options_StateImageList.Count > PuchButton_Options_State.SelectedIndex Then
                                PuchButton_Options_StateImageList(PuchButton_Options_State.SelectedIndex) = System.Drawing.Image.FromStream(New MemoryStream(bytes))
                            Else
                                For i As Integer = 0 To PuchButton_Options_State.Items.Count - 1 Step 1
                                    If PuchButton_Options_StateImageListByte.Count - 1 <= i Then
                                        PuchButton_Options_StateImageList.Add(Nothing)
                                    End If
                                Next
                                PuchButton_Options_StateImageList(PuchButton_Options_State.SelectedIndex) = System.Drawing.Image.FromStream(New MemoryStream(bytes))
                            End If
                            PuchButton_Options_PictureBox.Image = PuchButton_Options_StateImageList(PuchButton_Options_State.SelectedIndex)
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            Throw ex
        Finally
            cUserRect.pauseDraw = pauseDrawTemp
            timerPreventDefaultExpires.Enabled = True
        End Try
    End Sub
    Private Sub btnTestListBox_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnTestListBox.Click
        Dim cList As New listboxTest()
        Dim b() As Byte = cList.addListBox(Session, New iTextSharp.text.Rectangle(231.67, 108.0, 395.67, 197.0), "ListBox1", "ListBox1", 1)
        Dim fn As String = Application.StartupPath.ToString.TrimEnd("\"c) & "\listbox-Error.pdf"
        File.WriteAllBytes(fn, b)
        Process.Start(fn)
    End Sub
    Private Sub PDFField_BorderStyle_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BorderStyle.SelectedIndexChanged
    End Sub
    Private Sub PDFField_TextAlign_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles PDFField_TextAlign.Click
    End Sub
    Private Sub Form1_MaximumSizeChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.MaximumSizeChanged
    End Sub
    Public Sub clearImageCacheHistory()
        Try
            For i As Integer = 0 To mem.Count - 1
                Try
                    If mem.Keys(i).ToString.ToLower().StartsWith("image_cache_history_".ToLower()) Then
                        mem.Remove(mem.Keys(i))
                    End If
                Catch ex2 As Exception
                    Err.Clear()
                End Try
            Next
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub Form1_Resize(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Resize

    End Sub

    Private Sub Form1_ResizeEnd(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.ResizeEnd
        Try
            clearImageCacheHistory()
        Catch ex As Exception
            Err.Clear()
        End Try
        ResizePictureBox1()
    End Sub
    Public Sub ResizePictureBox1()
        Try
            If Not Session("output") Is Nothing Then
                If Session("output").Length > 0 Then
                    Me.A0_PictureBox1.Width = CInt(getPDFWidth() * getPercent())
                    Me.A0_PictureBox1.Height = CInt(getPDFHeight() * getPercent())
                    PictureBox1_Panel.Top = 33
                    PictureBox1_Panel.Height = Me.Height - FlowLayoutPanel1.Height - StatusStrip1.Height - 38
                    PictureBox1_Panel.Left = 0
                    PictureBox1_Panel.Width = Me.Width - 15
                    A0_PictureBox1.Top = 0
                    A0_PictureBox1.Left = 0
                    A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage
                    If Session Is Nothing Then Return
                    If Session.Length <= 0 Then Return
                    Try
                        PictureBox1_Panel.Focus()
                        tmpPercent = Nothing
                        tmpPercent = getPercent()
                    Catch ex As Exception
                        cmbPercent.Text = "100%"
                        tmpPercent = 1.0F
                        TimeStampAdd(ex, debugMode)
                    End Try
                End If
            End If
            PictureBox1_Panel.Top = 33
            PictureBox1_Panel.Height = Me.Height - FlowLayoutPanel1.Height - StatusStrip1.Height - 38
            PictureBox1_Panel.Left = 0
            PictureBox1_Panel.Width = Me.Width - 15
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub Form1_Scroll(ByVal sender As Object, ByVal e As System.Windows.Forms.ScrollEventArgs) Handles Me.Scroll
    End Sub
    Private Sub Form1_SizeChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.SizeChanged
        If Me.WindowState = FormWindowState.Maximized Then
            Form1_ResizeEnd(Me, New EventArgs())
        End If
    End Sub
    Private Sub ImportFileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportFileToolStripMenuItem.Click
        OpenFileDialog2.InitialDirectory = ApplicationDataFolder(False, "")
        OpenFileDialog2.Filter = "All Files|*.*"
        OpenFileDialog2.FilterIndex = 0
        OpenFileDialog2.FileName = ""
        preventClickDialog = True
        Try
            Select Case OpenFileDialog2.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    If Not String.IsNullOrEmpty(OpenFileDialog2.FileName) Then
                        Dim fn As String = OpenFileDialog2.FileName & ""
                        Dim jpg As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(LoadFileGhostScript(System.IO.File.ReadAllBytes(fn), GetFileExtension(fn).ToString.Trim("."c))))
                        Dim jpgStream As New MemoryStream
                        Dim frmImgRot As New frmImageRotation
                        frmImgRot.imgRect = New RectangleF(0, 0, jpg.Width, jpg.Height)
                        frmImgRot.LoadPictureBox(jpg)
                        Dim rotType As System.Drawing.RotateFlipType = RotateFlipType.RotateNoneFlipNone
                        Select Case frmImgRot.ShowDialog(Me)
                            Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                                If frmImgRot.cancelled Then
                                    Me.Show()
                                    Me.BringToFront()
                                    Return
                                End If
                                rotType = frmImgRot.rotType
                            Case Else
                                Return
                        End Select
                        Me.Show()
                        Me.BringToFront()
                        If frmImgRot.cancelled Then
                            Return
                        End If
                        jpg = frmImgRot.ImageRotation_PictureBox.Image.Clone
                        Dim bitmap As New Bitmap(jpg)
                        Dim mPDF As New MemoryStream()
                        jpg.Save(jpgStream, System.Drawing.Imaging.ImageFormat.Png)
                        If jpgStream.CanSeek Then
                            jpgStream.Seek(0, SeekOrigin.Begin)
                        End If
                        jpg.Dispose()
                        jpg = Nothing
                        Dim bmp As New Bitmap(jpgStream)
                        Dim r As New iTextSharp.text.Rectangle(bmp.Width, bmp.Height)
                        Dim doc As New Document(r, 0, 0, 0, 0)
                        Dim writer As PdfWriter = PdfWriter.GetInstance(doc, mPDF)
                        Dim pages As Integer = bmp.GetFrameCount(Imaging.FrameDimension.Page)
                        doc.Open()
                        Dim cb As PdfContentByte = writer.DirectContent
                        For i As Integer = 0 To pages - 1
                            Dim image As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Png)
                            image.SetAbsolutePosition(0, 0)
                            image.ScaleAbsoluteHeight(doc.PageSize.Height)
                            image.ScaleAbsoluteWidth(doc.PageSize.Width)
                            writer.DirectContent.AddImage(image)
                            doc.NewPage()
                        Next i
                        writer.CloseStream = False
                        doc.Close()
                        If Not Session Is Nothing Then
                            If Session.Length > 0 Then
                                Session("output") = PDFConcatenateForms2Buf(New Byte()() {Session, mPDF.ToArray}, New String() {pdfOwnerPassword, ""})
                            Else
                                Session("output") = mPDF.ToArray
                            End If
                        Else
                            Session("output") = mPDF.ToArray
                        End If
                        writer.Close()
                        writer = Nothing
                        A0_LoadPDF(True)
                        LoadPageList(Me.btnPage)
                        ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                        A0_PictureBox1.Enabled = True
                        A0_PictureBox2.Enabled = True
                        pageIndex = Me.btnPage.Items.Count - 1
                        btnPage_SelectedIndexChanged(Me, New EventArgs())
                    End If
                Case Else
                    Return
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            timerPreventDefaultExpires.Enabled = True
        End Try
    End Sub
    Public Sub showHideGroupBoxPDFField_Format(ByVal pnlShow As GroupBox)
        Try
            pnlPDFField_Format_Number.Visible = False
            pnlPDFField_Format_Percentage.Visible = False
            pnlPDFField_Format_Date.Visible = False
            pnlPDFField_Format_Time.Visible = False
            pnlPDFField_Format_Special.Visible = False
            pnlPDFField_Format_Custom.Visible = False
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        If Not pnlShow Is Nothing Then
            pnlShow.Visible = True
        End If
    End Sub
    Private Sub PDFField_Format_Category_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Category.SelectedIndexChanged
        Select Case PDFField_Format_Category.SelectedIndex
            Case 0
                showHideGroupBoxPDFField_Format(Nothing)
                If customFormatScripts.Count = 2 Then
                    customFormatScripts(0) = (Me.PDFField_Format_Custom_Format_Script.Text & "")
                    customFormatScripts(1) = (Me.PDFField_Format_Custom_Keystroke_Script.Text & "")
                End If
                Me.PDFField_Format_Custom_Format_Script.Text = ""
                Me.PDFField_Format_Custom_Keystroke_Script.Text = ""
            Case 1
                showHideGroupBoxPDFField_Format(pnlPDFField_Format_Number)
                If customFormatScripts.Count = 2 Then
                    Me.PDFField_Format_Custom_Format_Script.Text = customFormatScripts(0) & ""
                    Me.PDFField_Format_Custom_Keystroke_Script.Text = customFormatScripts(1) & ""
                End If
                If PDFField_Format_Number_CurrencySymbol.SelectedIndex >= 0 And PDFField_Format_Number_DecimalPlaces.SelectedIndex >= 0 And PDFField_Format_Number_SeparatorStyle.SelectedIndex >= 0 Then
                    PDFField_Format_Number_DecimalPlaces_SelectedIndexChanged(Me, New EventArgs())
                End If
            Case 2
                showHideGroupBoxPDFField_Format(pnlPDFField_Format_Percentage)
                If customFormatScripts.Count = 2 Then
                    Me.PDFField_Format_Custom_Format_Script.Text = customFormatScripts(0) & ""
                    Me.PDFField_Format_Custom_Keystroke_Script.Text = customFormatScripts(1) & ""
                End If
                If PDFField_Format_Percentage_DecimalPlaces.SelectedIndex >= 0 And PDFField_Format_Percentage_SeparatorStyle.SelectedIndex >= 0 Then
                    PDFField_Format_Percentage_DecimalPlaces_SelectedIndexChanged(Me, New EventArgs())
                End If
            Case 3
                showHideGroupBoxPDFField_Format(pnlPDFField_Format_Date)
                If customFormatScripts.Count = 2 Then
                    Me.PDFField_Format_Custom_Format_Script.Text = customFormatScripts(0) & ""
                    Me.PDFField_Format_Custom_Keystroke_Script.Text = customFormatScripts(1) & ""
                End If
                If PDFField_Format_Dates.SelectedIndex >= 0 Then
                    PDFField_Format_Dates_SelectedIndexChanged(Me, New EventArgs())
                End If
            Case 4
                showHideGroupBoxPDFField_Format(pnlPDFField_Format_Time)
                If customFormatScripts.Count = 2 Then
                    Me.PDFField_Format_Custom_Format_Script.Text = customFormatScripts(0) & ""
                    Me.PDFField_Format_Custom_Keystroke_Script.Text = customFormatScripts(1) & ""
                End If
                If PDFField_Format_Times.SelectedIndex >= 0 Then
                    PDFField_Format_Times_SelectedIndexChanged(Me, New EventArgs())
                End If
            Case 5
                showHideGroupBoxPDFField_Format(pnlPDFField_Format_Special)
                If customFormatScripts.Count = 2 Then
                    Me.PDFField_Format_Custom_Format_Script.Text = customFormatScripts(0) & ""
                    Me.PDFField_Format_Custom_Keystroke_Script.Text = customFormatScripts(1) & ""
                End If
                If PDFField_Format_Specials.SelectedIndex >= 0 Then
                    PDFField_Format_Specials_SelectedIndexChanged(Me, New EventArgs())
                End If
            Case 6
                showHideGroupBoxPDFField_Format(pnlPDFField_Format_Custom)
            Case Else
                showHideGroupBoxPDFField_Format(Nothing)
        End Select
    End Sub
    Private Sub PDFField_Format_Number_CurrencySymbol_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Number_CurrencySymbol.SelectedIndexChanged
        Select Case PDFField_Format_Number_CurrencySymbol.SelectedIndex
            Case 2, 5, 6, 8
                PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
            Case Else
                PDFField_Format_Number_CurrencySymbol_Prepend.Checked = True
        End Select
        If PDFField_Format_Number_CurrencySymbol.SelectedIndex = PDFField_Format_Number_CurrencySymbol.Items.Count - 1 Then
            PDFField_Format_Number_CurrencySymbol_Custom.Visible = True
        Else
            PDFField_Format_Number_CurrencySymbol_Custom.Visible = False
        End If
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Dates_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Dates.SelectedIndexChanged
        If PDFField_Format_Dates.SelectedIndex = PDFField_Format_Dates.Items.Count - 1 Then
            PDFField_Format_Date_Custom.Visible = True
        Else
            PDFField_Format_Date_Custom.Visible = False
            PDFField_Format_Date_Custom.Text = PDFField_Format_Dates.Items(PDFField_Format_Dates.SelectedIndex).ToString
        End If
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Times_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Times.SelectedIndexChanged
        If PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1 Then
            PDFField_Format_Time_Custom.Visible = True
        Else
            PDFField_Format_Time_Custom.Visible = False
            PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(PDFField_Format_Times.SelectedIndex).ToString
        End If
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Specials_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Specials.SelectedIndexChanged
        If PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1 Then
            PDFField_Format_Special_Custom.Visible = True
        Else
            PDFField_Format_Special_Custom.Visible = False
        End If
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Shared Function HexToChar(hex As String) As String
        hex = hex.Replace("""", "").Trim().Replace("\u", "")
        Dim returnString As String = ""
        returnString &= Char.ConvertFromUtf32(Int32.Parse(hex, System.Globalization.NumberStyles.HexNumber))
        Return returnString
    End Function
    Public Shared Function CharToHex(c As Char) As String
        Return "\u" & CUShort(AscW(c)).ToString("X4")
    End Function
    Public Sub UpdateFormatKeystroke()
        Dim strJS As String = "", strJSName As String = ""
        Try
            If pnlPDFField_Format_Number.Visible Then
                strJSName = "AFNumber_Format"
                strJS &= "("
                Try
                    strJS &= PDFField_Format_Number_DecimalPlaces.SelectedIndex
                Catch exF As Exception
                    TimeStampAdd(exF, debugMode)
                End Try
                Try
                    strJS &= ", " & PDFField_Format_Number_SeparatorStyle.SelectedIndex
                Catch exF As Exception
                    TimeStampAdd(exF, debugMode)
                End Try
                Try
                    If PDFField_Format_Number_Negative_UseRedText.Checked = False And PDFField_Format_Number_Negative_ShowParantheses.Checked = False Then
                        strJS &= ", " & "0"
                    ElseIf PDFField_Format_Number_Negative_UseRedText.Checked = True And PDFField_Format_Number_Negative_ShowParantheses.Checked = False Then
                        strJS &= ", " & "1"
                    ElseIf PDFField_Format_Number_Negative_UseRedText.Checked = False And PDFField_Format_Number_Negative_ShowParantheses.Checked = True Then
                        strJS &= ", " & "2"
                    ElseIf PDFField_Format_Number_Negative_ShowParantheses.Checked = True And PDFField_Format_Number_Negative_UseRedText.Checked = True Then
                        strJS &= ", " & "3"
                    Else
                        strJS &= ", " & "0"
                    End If
                Catch exF As Exception
                    TimeStampAdd(exF, debugMode)
                End Try
                strJS &= ", 0"
                Try
                    Select Case PDFField_Format_Number_CurrencySymbol.SelectedIndex
                        Case 0
                            strJS &= ", " & """" & """"
                        Case 1
                            strJS &= ", " & " ""\u0024"""
                        Case 2
                            strJS &= ", " & " ""\u0020\u0044\u004d"""
                        Case 3
                            strJS &= ", " & " ""\u20ac"""
                        Case 4
                            strJS &= ", " & " ""\u0066\u006c"""
                        Case 5
                            strJS &= ", " & " ""\u0020\u0046"""
                        Case 6
                            strJS &= ", " & " ""\u0020\u006b\u0072"""
                        Case 7
                            strJS &= ", " & " ""\u004c\u002e\u0020"""
                        Case 8
                            strJS &= ", " & " ""\u0020\u0050\u0074\u0073"""
                        Case 9
                            strJS &= ", " & " ""\u00a3"""
                        Case 10
                            strJS &= ", " & " ""\u00a5"""
                        Case Else
                            strJS &= ", " & """"
                            strJS &= CharToHex(HttpUtility.HtmlDecode(PDFField_Format_Number_CurrencySymbol_Custom.Text.ToString))
                            strJS &= """"
                    End Select
                Catch exF As Exception
                    PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                    TimeStampAdd(exF, debugMode)
                End Try
                Try
                    If PDFField_Format_Number_CurrencySymbol_Prepend.Checked Then
                        strJS &= ", " & "True"
                    Else
                        strJS &= ", " & "False"
                    End If
                Catch exF As Exception
                    TimeStampAdd(exF, debugMode)
                End Try
                strJS &= ");"
                Me.PDFField_Format_Custom_Format_Script.Text = strJSName & strJS
                Me.PDFField_Format_Custom_Keystroke_Script.Text = strJSName.ToString.Replace("Format", "Keystroke") & strJS
            ElseIf pnlPDFField_Format_Percentage.Visible Then
                strJSName = "AFPercent_Format"
                strJS &= "("
                Dim selIndex As Integer = PDFField_Format_Dates.SelectedIndex + 0
                strJS &= PDFField_Format_Percentage_DecimalPlaces.SelectedIndex
                strJS &= ", " & PDFField_Format_Percentage_SeparatorStyle.SelectedIndex
                strJS &= ");"
                Me.PDFField_Format_Custom_Format_Script.Text = strJSName & strJS
                Me.PDFField_Format_Custom_Keystroke_Script.Text = strJSName.ToString.Replace("Format", "Keystroke") & strJS
            ElseIf pnlPDFField_Format_Date.Visible Then
                strJSName = "AFDate_FormatEx"
                strJS &= "("
                Dim selIndex As Integer = PDFField_Format_Dates.SelectedIndex + 0
                strJS &= """" & PDFField_Format_Dates.Items(selIndex).ToString & """"
                strJS &= ");"
                Me.PDFField_Format_Custom_Format_Script.Text = strJSName & strJS
                Me.PDFField_Format_Custom_Keystroke_Script.Text = strJSName.ToString.Replace("Format", "Keystroke") & strJS
            ElseIf pnlPDFField_Format_Time.Visible Then
                strJSName = "AFTime_Format"
                strJS &= "("
                Dim selIndex As Integer = PDFField_Format_Times.SelectedIndex + 0
                If selIndex = PDFField_Format_Times.Items.Count - 1 Then
                    strJSName &= "Ex"
                    strJS &= """" & PDFField_Format_Time_Custom.Text.ToString & """"
                Else
                    strJS &= "" & PDFField_Format_Times.SelectedIndex.ToString & ""
                End If
                strJS &= ");"
                Me.PDFField_Format_Custom_Format_Script.Text = strJSName & strJS
                Me.PDFField_Format_Custom_Keystroke_Script.Text = strJSName.ToString.Replace("Format", "Keystroke") & strJS
            ElseIf pnlPDFField_Format_Special.Visible Then
                strJSName = "AFSpecial_Format"
                strJS &= "("
                Dim selIndex As Integer = PDFField_Format_Specials.SelectedIndex + 0
                If selIndex = PDFField_Format_Times.Items.Count - 1 Then
                    strJSName &= "Ex"
                    strJS &= """" & PDFField_Format_Special_Custom.Text.ToString & """"
                Else
                    strJS &= "" & PDFField_Format_Specials.SelectedIndex.ToString & ""
                End If
                strJS &= ");"
                Me.PDFField_Format_Custom_Format_Script.Text = strJSName & strJS
                Me.PDFField_Format_Custom_Keystroke_Script.Text = strJSName.ToString.Replace("Format", "Keystroke") & strJS
            ElseIf pnlPDFField_Format_Custom.Visible Then
            Else
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Number_DecimalPlaces_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Number_DecimalPlaces.SelectedIndexChanged
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Number_SeparatorStyle_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Number_SeparatorStyle.SelectedIndexChanged
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Number_CurrencySymbol_Prepend_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Number_CurrencySymbol_Prepend.CheckedChanged
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Number_Negative_ShowParantheses_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Number_Negative_ShowParantheses.CheckedChanged
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Number_Negative_UseRedText_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Number_Negative_UseRedText.CheckedChanged
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Special_Custom_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Special_Custom.TextChanged
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Time_Custom_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Time_Custom.TextChanged
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Date_Custom_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Date_Custom.TextChanged
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Percentage_DecimalPlaces_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Percentage_DecimalPlaces.SelectedIndexChanged
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Percentage_SeparatorStyle_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Format_Percentage_SeparatorStyle.SelectedIndexChanged
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub RemoveUnusedObjectsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RemoveUnusedObjectsToolStripMenuItem.Click
        Dim m As New MemoryStream()
        If pdfReaderDoc Is Nothing Then Return
        If Session Is Nothing Then Return
        If Session.Count <= 0 Then Return
        Dim r As PdfReader = pdfReaderDoc.Clone
        Try
            Using stamper As PdfStamper = getStamper(r, m)
                Using writer As PdfWriter = stamper.Writer
                    pdfReaderDoc.RemoveUnusedObjects()
                    stamper.Reader.RemoveUnusedObjects()
                    stamper.Writer.CloseStream = False
                    stamper.Close()
                End Using
            End Using
            If m.CanSeek Then
                m.Seek(0, SeekOrigin.Begin)
            End If
            If m.Length > 0 Then
                Session("output") = m.ToArray
            End If
            m.Dispose()
            Return
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return
        End Try
    End Sub
    Private Sub Label55_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Label55.Click
    End Sub
    Private Sub PDFField_Validation_Range_From_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Validation_Range_From.TextChanged
        If Not String.IsNullOrEmpty(PDFField_Validation_Range_From.Text & "") And Not String.IsNullOrEmpty(PDFField_Validation_Range_To.Text & "") Then
            If IsNumeric(PDFField_Validation_Range_From.Text & "") And IsNumeric(PDFField_Validation_Range_To.Text & "") Then
                Me.PDFField_Validation_Range_Custom.Text = "AFRange_Validate(True, " & PDFField_Validation_Range_From.Text & "" & ", True, " & PDFField_Validation_Range_To.Text & "" & ");"
            End If
        End If
    End Sub
    Private Sub PDFField_Validation_Range_To_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Validation_Range_To.TextChanged
        If Not String.IsNullOrEmpty(PDFField_Validation_Range_From.Text & "") And Not String.IsNullOrEmpty(PDFField_Validation_Range_To.Text & "") Then
            If IsNumeric(PDFField_Validation_Range_From.Text & "") And IsNumeric(PDFField_Validation_Range_To.Text & "") Then
                Me.PDFField_Validation_Range_Custom.Text = "AFRange_Validate(True, " & PDFField_Validation_Range_From.Text & "" & ", True, " & PDFField_Validation_Range_To.Text & "" & ");"
            End If
        End If
    End Sub
    Private Sub PDFField_Validations_None_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Validations_None.CheckedChanged
        If Not PDFField_Validations_None.Checked Then Return
        Me.PDFField_Validation_Range_Custom.Text = ""
    End Sub
    Private Sub PDFField_Validations_Range_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Validations_Range.CheckedChanged
        If Not String.IsNullOrEmpty(PDFField_Validation_Range_From.Text & "") And Not String.IsNullOrEmpty(PDFField_Validation_Range_To.Text & "") Then
            If IsNumeric(PDFField_Validation_Range_From.Text & "") And IsNumeric(PDFField_Validation_Range_To.Text & "") Then
                Me.PDFField_Validation_Range_Custom.Text = "AFRange_Validate(True, " & PDFField_Validation_Range_From.Text & "" & ", True, " & PDFField_Validation_Range_To.Text & "" & ");"
            End If
        End If
    End Sub
    Private Sub OpenContainingFolderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenContainingFolderToolStripMenuItem.Click
        Try
            If Not String.IsNullOrEmpty(fpath & "") Then
                Process.Start("explorer.exe", "/Select,""" & (fpath) & """")
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_Fields_FieldsListBoxPick_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_Fields_FieldsListBoxPick.Click
        Try
            PDFField_Calculations_Fields_List.Visible = False
            PDFField_Calculations_Fields_FieldsListBox.Visible = True
            PDFField_Calculations_Fields_FieldsListBoxPickOk.Visible = True
            PDFField_Calculations_Fields_FieldsListBoxPickSelectAll.Visible = True
            PDFField_Calculations_Fields_FieldsListBoxPickClear.Visible = True
            PDFField_Calculations_Fields_FieldsListBoxPick.Visible = False
            Dim SelList As New List(Of String)
            Dim strSelArr As New List(Of String)
            strSelArr.AddRange(PDFField_Calculations_Fields_FieldsListBox.SelectedItems())
            For Each strSel As String In strSelArr.ToArray
                If Not String.IsNullOrEmpty(strSel.ToString.Trim()) Then
                    SelList.Add(strSel.ToString.Trim())
                End If
            Next
            For Each strC As String In SelList.ToArray()
                PDFField_Calculations_Fields_List.Text = strC & ","
            Next
            PDFField_Calculations_Fields_List.Text = PDFField_Calculations_Fields_List.Text.ToString.TrimEnd(","c).Trim()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_Fields_FieldsListBoxPickOk_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_Fields_FieldsListBoxPickOk.Click
        Try
            PDFField_Calculations_Fields_List.Visible = True
            PDFField_Calculations_Fields_FieldsListBox.Visible = False
            PDFField_Calculations_Fields_FieldsListBoxPickOk.Visible = False
            PDFField_Calculations_Fields_FieldsListBoxPick.Visible = True
            PDFField_Calculations_Fields_FieldsListBoxPickSelectAll.Visible = False
            PDFField_Calculations_Fields_FieldsListBoxPickClear.Visible = False
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_Fields_FieldsListBox_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_Fields_FieldsListBox.SelectedIndexChanged
        Try
            PDFField_Calculations_Fields_List.Text = ""
            For Each strSel As String In PDFField_Calculations_Fields_FieldsListBox.SelectedItems()
                If String.IsNullOrEmpty(PDFField_Calculations_Fields_List.Text & "") Then
                    PDFField_Calculations_Fields_List.Text &= strSel
                Else
                    PDFField_Calculations_Fields_List.Text &= ", " & strSel
                End If
            Next
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub PDFField_Calculations_Fields_FieldsListBoxPickSelectAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_Fields_FieldsListBoxPickSelectAll.Click
        Try
            For i As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                PDFField_Calculations_Fields_FieldsListBox.SetSelected(i, True)
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_Fields_FieldsListBoxPickClear_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_Fields_FieldsListBoxPickClear.Click
        Try
            For i As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                PDFField_Calculations_Fields_FieldsListBox.SetSelected(i, False)
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_Fields_List_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_Fields_List.TextChanged
        Try
            If (Me.PDFField_Calculations_Fields_FieldsListBox.SelectedIndices().Count) <= 0 And PDFField_Calculations_Fields_FieldsListBox.Items.Count <> pdfReaderDoc.AcroFields.Fields.Keys.Count Then
                PDFField_Calculations_Fields_FieldsListBox.Items.Clear()
                For Each fdfFld As String In pdfReaderDoc.AcroFields.Fields.Keys.ToArray
                    If Not PDFField_Calculations_Fields_FieldsListBox.Items.Contains(fdfFld.Trim() & "") Then
                        PDFField_Calculations_Fields_FieldsListBox.Items.Add(fdfFld.Trim() & "")
                    End If
                Next
            ElseIf String.IsNullOrEmpty(Me.PDFField_Calculations_Fields_List.Text & "") Then
                PDFField_Calculations_CustomCalcScript_Text.Text = ""
                Return
            End If
            Select Case PDFField_Calculations_Fields_Type.SelectedIndex + 0
                Case 0
                    PDFField_Calculations_CustomCalcScript_Text.Text = "AFSimple_Calculate(""SUM"", New Array ("
                Case 1
                    PDFField_Calculations_CustomCalcScript_Text.Text = "AFSimple_Calculate(""PRD"", New Array ("
                Case 2
                    PDFField_Calculations_CustomCalcScript_Text.Text = "AFSimple_Calculate(""AVG"", New Array ("
                Case 3
                    PDFField_Calculations_CustomCalcScript_Text.Text = "AFSimple_Calculate(""MIN"", New Array ("
                Case 4
                    PDFField_Calculations_CustomCalcScript_Text.Text = "AFSimple_Calculate(""MAX"", New Array ("
                Case Else
                    Return
            End Select
            Dim strFields As String = ""
            Dim SelFldList As New List(Of String)
            For Each fldStr As String In PDFField_Calculations_Fields_List.Text.ToString.Trim().Split(","c)
                If String.IsNullOrEmpty(strFields & "") Then
                    strFields = """" & fldStr.ToString.Trim() & """"
                Else
                    strFields &= ", """ & fldStr.ToString.Trim() & """"
                End If
                SelFldList.Add(fldStr.ToString.Trim() & "")
            Next
            PDFField_Calculations_CustomCalcScript_Text.Text &= strFields & "));"
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_Fields_Type_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_Fields_Type.SelectedIndexChanged
        Try
            PDFField_Calculations_Fields_List_TextChanged(Me, New EventArgs())
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_Fields_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_Fields.CheckedChanged
        Try
            btnCalculateOrder.Visible = PDFField_Calculations_Fields.Checked
            If Not PDFField_Calculations_Fields.Checked Then Return
            PDFField_Calculations_Fields_List_TextChanged(Me, New EventArgs())
            PDFField_Calculations_CustomCalcScript_Text.Enabled = False
            PDFField_Calculations_SimpleFieldNotationText.Enabled = False
            If PDFField_Calculations_Fields_Type.SelectedIndex < 0 Then
                PDFField_Calculations_Fields_Type.SelectedIndex = 0
            End If
            If PDFField_Calculations_Fields.Checked Then
                PDFField_Calculations_Fields_FieldsListBox.Visible = True
                PDFField_Calculations_Fields_List.Visible = False
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_SimpleFieldNotation_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_SimpleFieldNotation.CheckedChanged
        Try
            btnCalculateOrder.Visible = PDFField_Calculations_Fields.Checked
            If Not PDFField_Calculations_SimpleFieldNotation.Checked Then Return
            PDFField_Calculations_SimpleFieldNotationText_TextChanged(Me, New EventArgs())
            PDFField_Calculations_CustomCalcScript_Text.Enabled = False
            PDFField_Calculations_SimpleFieldNotationText.Enabled = True
            addAutoCompleteFields(Session, pdfOwnerPassword, PDFField_Calculations_SimpleFieldNotationText)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_CustomCalcScript_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_CustomCalcScript.CheckedChanged
        Try
            btnCalculateOrder.Visible = PDFField_Calculations_Fields.Checked
            If Not PDFField_Calculations_CustomCalcScript.Checked Then Return
            PDFField_Calculations_CustomCalcScript_Text.Enabled = True
            PDFField_Calculations_SimpleFieldNotationText.Enabled = False
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_None_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_None.CheckedChanged
        Try
            btnCalculateOrder.Visible = PDFField_Calculations_Fields.Checked
            If Not PDFField_Calculations_None.Checked Then Return
            PDFField_Calculations_CustomCalcScript_Text.Text = ""
            PDFField_Calculations_CustomCalcScript_Text.Enabled = False
            PDFField_Calculations_SimpleFieldNotationText.Enabled = False
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function getAllFieldNames() As String()
        Try
            fieldNames = New List(Of String)
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    Dim MySource As New List(Of String)
                    Dim cfdf As New FDFApp.FDFDoc_Class
                    Dim cpdf As New FDFApp.FDFApp_Class
                    cfdf = cpdf.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
                    For Each fld As FDFApp.FDFDoc_Class.FDFField In cfdf.XDPGetAllFields()
                        If Not fld Is Nothing Then
                            If Not String.IsNullOrEmpty(fld.FieldName.ToString.Trim() & "") Then
                                MySource.Add("" & fld.FieldName & "")
                                fieldNames.Add("" & fld.FieldName & "")
                            End If
                        End If
                    Next
                    Return MySource.ToArray
                End If
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
        Return Nothing
    End Function
    Public Function getAllFieldNames(ByVal intPageNum As Integer) As String()
        Try
            fieldNames = New List(Of String)
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    Dim MySource As New List(Of String)
                    Dim cfdf As New FDFApp.FDFDoc_Class
                    Dim cpdf As New FDFApp.FDFApp_Class
                    Dim sessionBytes1() As Byte = Session
                    For Each fldName As String In fieldsOnPageList(CInt(pageIndex))
                    Next
                    cfdf = cpdf.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
                    For Each fld As FDFApp.FDFDoc_Class.FDFField In cfdf.XDPGetAllFields()
                        If Not fld Is Nothing Then
                            If Not String.IsNullOrEmpty(fld.FieldName.ToString.Trim() & "") Then
                                MySource.Add("" & fld.FieldName & "")
                                fieldNames.Add("" & fld.FieldName & "")
                            End If
                        End If
                    Next
                    Return MySource.ToArray
                End If
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
        Return Nothing
    End Function
    Public Sub addAutoCompleteFields(ByVal sessionBytesTemp() As Byte, ByVal pdfownerPasswordTemp As String, ByRef textBox1 As TextBox)
        Try
            pdfOwnerPassword = pdfownerPasswordTemp
            cfdf = cpdf.PDFOpenFromBuf(sessionBytesTemp, True, True, pdfOwnerPassword)
            Dim MySource As New AutoCompleteStringCollection()
            For Each fld As String In getAllFieldNames()
                If Not String.IsNullOrEmpty(fld.ToString.Trim() & "") Then
                    MySource.Add("" & fld.ToString.Trim() & "")
                End If
            Next
            lv.Add(New clsAutocomplete(textBox1, fieldNames.ToArray(), False, "", ""))
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub PDFField_Calculations_SimpleFieldNotationText_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Calculations_SimpleFieldNotationText.TextChanged
        Try
            If String.IsNullOrEmpty(PDFField_Calculations_SimpleFieldNotationText.Text & "") Then
                PDFField_Calculations_CustomCalcScript_Text.Text = ""
                Return
            End If
            Dim strSimpleScriptNotation As String = "/** BVCALC " & PDFField_Calculations_SimpleFieldNotationText.Text & " EVCALC **/ "
            Dim strSimpleScriptNotationStr As String = PDFField_Calculations_SimpleFieldNotationText.Text & ""
            For Each fldStr As String In pdfReaderDoc.AcroFields.Fields.Keys.ToArray
                strSimpleScriptNotationStr = strSimpleScriptNotationStr.Replace(fldStr.ToString.Trim(), "AFMakeNumber(getField(""" & fldStr.ToString.Trim() & """).value)")
            Next
            PDFField_Calculations_CustomCalcScript_Text.Text = strSimpleScriptNotation.ToString & "Event.value = " & strSimpleScriptNotationStr & ""
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub AdobeAcrobatToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AdobeAcrobatToolStripMenuItem1.Click
        Dim tmpFn As String = ApplicationDataFolder(False, "temp") & "_acrobat_" & System.IO.Path.GetFileNameWithoutExtension(fpath) & ".pdf"
        If Not String.IsNullOrEmpty(tmpFn) Then
            File.WriteAllBytes(tmpFn, Session("output"))
            If My.Computer.FileSystem.FileExists(tmpFn) Then
                Try
                    Process.Start("acrobat", """" & tmpFn & """")
                Catch ex As Exception
                    Try
                        Dim processX As New Process()
                        processX.StartInfo = New ProcessStartInfo("AcroRd32")
                        processX.StartInfo.CreateNoWindow = False
                        processX.StartInfo.UseShellExecute = True
                        processX.StartInfo.Arguments = """" & tmpFn & """"
                        processX.Start()
                    Catch ex2 As Exception
                        Try
                            Process.Start(tmpFn)
                        Catch ex3 As Exception
                            MsgBox("Instal Acrobat Reader")
                        End Try
                    End Try
                End Try
            Else
                MsgBox("File Not found.")
            End If
        End If
    End Sub
    Private Sub AdobeReaderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AdobeReaderToolStripMenuItem.Click
        Dim tmpFn As String = ApplicationDataFolder(False, "temp") & "_preview_" & System.IO.Path.GetFileNameWithoutExtension(fpath) & ".pdf"
        If Not String.IsNullOrEmpty(tmpFn) Then
            File.WriteAllBytes(tmpFn, Session("output"))
            If My.Computer.FileSystem.FileExists(tmpFn) Then
                Try
                    Dim processX As New Process()
                    processX.StartInfo = New ProcessStartInfo("AcroRd32")
                    processX.StartInfo.CreateNoWindow = False
                    processX.StartInfo.UseShellExecute = True
                    processX.StartInfo.Arguments = """" & tmpFn & """"
                    processX.Start()
                Catch ex2 As Exception
                    Try
                        Process.Start(tmpFn)
                    Catch ex3 As Exception
                        MsgBox("Instal Acrobat Reader")
                    End Try
                End Try
            Else
                MsgBox("File not found.")
            End If
        End If
    End Sub
    Private Sub PDFReferenceToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFReferenceToolStripMenuItem1.Click
        Process.Start("https://www.google.com/search?q=Adobe+Acrobat+PDF+Refernce+PDFReference16.pdf")
    End Sub
    Private Sub PDFJavaScriptReferenceToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFJavaScriptReferenceToolStripMenuItem.Click
        Process.Start("https://www.google.com/search?q=Adobe+Acrobat+PDF+JS+Reference+js_api_reference.pdf")
    End Sub
    Private Sub XFAJSReferenceToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles XFAJSReferenceToolStripMenuItem1.Click
        Process.Start("https://www.google.com/search?q=Adobe+Acrobat+PDF+Form+JS+to+XFAJS+AcroFormJS_to_XFAJS.pdf")
    End Sub
    Private Sub CosEditToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CosEditToolStripMenuItem1.Click
        If Directory.Exists(appPath & "\CosEdit\") Then
            If File.Exists(appPath & "\CosEdit\CosEdit.exe") Then
                Dim tmpFn As String = ApplicationDataFolder(False, "temp") & "_cosedit_" & System.IO.Path.GetFileNameWithoutExtension(fpath) & ".pdf"
                If Not String.IsNullOrEmpty(tmpFn) Then
                    File.WriteAllBytes(tmpFn, Session("output"))
                    If FileExists(appPath & "CosEdit\CosEdit.exe") Then
                        Process.Start(appPath & "CosEdit\CosEdit.exe", """" & tmpFn & """")
                    Else
                        SelectProgramToolStripMenuItem_Click(Me, e)
                    End If
                End If
                Return
            End If
        Else
            Directory.CreateDirectory(appPath & "\CosEdit\")
        End If
        System.IO.File.WriteAllText(appPath & "\CosEdit\cosedit-readme.txt", "You will need CosEdit.exe to view the structure of the PDF." & Environment.NewLine & "1) Download CosEdit - https://www.google.com/search?q=CosEdit.exe+PDFTron" & Environment.NewLine & "2) Then copy the CosEdit.exe into the following directory:" & Environment.NewLine & appPath & "\CosEdit\")
        Process.Start(appPath & "\CosEdit\cosedit-readme.txt")
    End Sub
    Private Sub RefreshreopenToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RefreshreopenToolStripMenuItem.Click
        Try
            Dim fnameTemp As String = fpath
            If A0_CloseDocument() Then
                If String.IsNullOrEmpty(fnameTemp) Then
                    Return
                ElseIf Not FileExists(fnameTemp) Then
                    If Not IsValidUrl(fnameTemp) Then
                        Return
                    End If
                End If
                OpenFile(fnameTemp & "")
            End If
            Return
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_SelectionChanged_ExecuteJavaScript_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_SelectionChanged_ExecuteJavaScript.CheckedChanged
        If PDFField_SelectionChanged_ExecuteJavaScript.Checked Then
            PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Enabled = True
        Else
            PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Enabled = False
        End If
    End Sub
    Private Sub PDFField_SelectionChanged_None_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_SelectionChanged_None.CheckedChanged
        If PDFField_SelectionChanged_ExecuteJavaScript.Checked Then
            PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Enabled = True
        Else
            PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Enabled = False
        End If
    End Sub
    Private Sub PDFField_Signed_ReadOnly_Fields_Pick_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Signed_ReadOnly_Fields_Pick.Click
        Try
            PDFField_Signed_ReadOnly_Textbox.Visible = False
            PDFField_Signed_ReadOnly_SelectionListbox.Visible = True
            PDFField_Signed_ReadOnly_Fields_Ok.Visible = True
            PDFField_Signed_ReadOnly_Fields_SelectAll.Visible = True
            PDFField_Signed_ReadOnly_Fields_Clear.Visible = True
            PDFField_Signed_ReadOnly_Fields_Pick.Visible = False
            Dim SelList As New List(Of String)
            Dim strSelArr() As String = PDFField_Signed_ReadOnly_Textbox.Text.ToString.Split(","c)
            For Each strSel As String In strSelArr.ToArray
                If Not String.IsNullOrEmpty(strSel.ToString.Trim()) Then
                    SelList.Add(strSel.ToString.Trim())
                End If
            Next
            For i As Integer = 0 To PDFField_Signed_ReadOnly_SelectionListbox.Items.Count - 1
                If SelList.Count > 0 Then
                    If SelList.Contains(PDFField_Signed_ReadOnly_SelectionListbox.Items(i)) Then
                        PDFField_Signed_ReadOnly_SelectionListbox.SetSelected(i, True)
                    Else
                        PDFField_Signed_ReadOnly_SelectionListbox.SetSelected(i, False)
                    End If
                End If
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Signed_ReadOnly_Fields_SelectAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Signed_ReadOnly_Fields_SelectAll.Click
        Try
            For i As Integer = 0 To PDFField_Signed_ReadOnly_SelectionListbox.Items.Count - 1
                PDFField_Signed_ReadOnly_SelectionListbox.SetSelected(i, True)
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Signed_ReadOnly_Fields_Clear_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Signed_ReadOnly_Fields_Clear.Click
        Try
            For i As Integer = 0 To PDFField_Signed_ReadOnly_SelectionListbox.Items.Count - 1
                PDFField_Signed_ReadOnly_SelectionListbox.SetSelected(i, False)
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Signed_ReadOnly_Fields_Ok_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Signed_ReadOnly_Fields_Ok.Click
        Try
            PDFField_Signed_ReadOnly_Textbox.Visible = True
            PDFField_Signed_ReadOnly_SelectionListbox.Visible = False
            PDFField_Signed_ReadOnly_Fields_Ok.Visible = False
            PDFField_Signed_ReadOnly_Fields_SelectAll.Visible = False
            PDFField_Signed_ReadOnly_Fields_Clear.Visible = False
            PDFField_Signed_ReadOnly_Fields_Pick.Visible = True
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Signed_ReadOnly_SelectionListbox_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Signed_ReadOnly_SelectionListbox.SelectedIndexChanged
        Try
            PDFField_Signed_ReadOnly_Textbox.Text = ""
            For Each strSel As String In PDFField_Signed_ReadOnly_SelectionListbox.SelectedItems()
                If String.IsNullOrEmpty(PDFField_Signed_ReadOnly_Textbox.Text & "") Then
                    PDFField_Signed_ReadOnly_Textbox.Text &= strSel
                Else
                    PDFField_Signed_ReadOnly_Textbox.Text &= ", " & strSel
                End If
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub btnPDFField_Dimensions_Copy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPDFField_Dimensions_Copy.Click
        Try
            If Session Is Nothing Then Return
            If Session.Length <= 0 Then Return
            _dimensionsList.Clear()
            _dimensionsList = New List(Of Single)
            _dimensionsList.Add(CSng(btnLeft.Text) + 0)
            _dimensionsList.Add(CSng(btnRight.Text) + 0)
            _dimensionsList.Add(CSng(btnWidth.Text) + 0)
            _dimensionsList.Add(CSng(btnHeight.Text) + 0)
            _dimensionsList.Add(CSng(btnBottom.Text) + 0)
            _dimensionsList.Add(CSng(btnTop.Text) + 0)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub btnPDFField_Dimensions_Paste_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPDFField_Dimensions_Paste.Click
        Try
            If _dimensionsList Is Nothing Then Exit Sub
            If _dimensionsList.Count = 0 Then Exit Sub
            If PDFField_Dimensions_Paste_4_Width.Checked Then
                btnLeft.Text = _dimensionsList(0) + 0
                btnWidth.Text = _dimensionsList(4) + 0
                btnRight.Text = _dimensionsList(2) + 0
            Else
                If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                    btnLeft.Text = _dimensionsList(0) + 0
                End If
                If PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                    btnRight.Text = _dimensionsList(2) + 0
                End If
            End If
            If PDFField_Dimensions_Paste_5_Height.Checked Then
                btnBottom.Text = _dimensionsList(1) + 0
                btnTop.Text = _dimensionsList(3) + 0
                btnHeight.Text = _dimensionsList(5) + 0
            Else
                If PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                    btnBottom.Text = _dimensionsList(1) + 0
                End If
                If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                    btnTop.Text = _dimensionsList(3) + 0
                End If
            End If
            Try
                Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text))
                cUserRect.rect = GetFieldPositionsReverse2(Session(), r)
                ToolStripStatusLabel1.Text = "(" & r.Left & ", " & (getPDFHeight(Session) - r.Top) & ", " & r.Width & ", " & r.Height & ")"
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BorderColorPicker_BackColorChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles PDFField_BorderColorPicker.BackColorChanged
        Try
            If Session Is Nothing Then Return
            If Session.Length <= 0 Then Return
            Dim blnPause As Boolean = cUserRect.pauseDraw
            If PDFField_BorderColorPicker.BackColor.A > 0 Then
                PDFField_BorderColorPicker_Transparent.Visible = True
            Else
                PDFField_BorderColorPicker_Transparent.Visible = False
            End If
            cUserRect.pauseDraw = True
            PDFField_BorderColorPicker_R.Text = PDFField_BorderColorPicker.BackColor.R
            PDFField_BorderColorPicker_G.Text = PDFField_BorderColorPicker.BackColor.G
            PDFField_BorderColorPicker_B.Text = PDFField_BorderColorPicker.BackColor.B
            PDFField_BorderColorPicker_A.Text = PDFField_BorderColorPicker.BackColor.A
            cUserRect.pauseDraw = blnPause
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BorderColorPicker_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BorderColorPicker.Click
        Try
            If Session Is Nothing Then Return
            If Session.Length <= 0 Then Return
            cUserRect.pauseDraw = True
            ColorDialog1.SolidColorOnly = False
            ColorDialog1.Color = PDFField_BorderColorPicker.BackColor
            ColorDialog1.CustomColors = iMyCustomColors
            ColorDialog1.FullOpen = True
            Select Case ColorDialog1.ShowDialog(TabControl1)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    PDFField_BorderColorPicker.BackColor = System.Drawing.Color.FromArgb(255, ColorDialog1.Color.R, ColorDialog1.Color.G, ColorDialog1.Color.B)
                    cUserRect.pauseDraw = True
                    PDFField_BorderColorPicker_R.Text = PDFField_BorderColorPicker.BackColor.R
                    PDFField_BorderColorPicker_G.Text = PDFField_BorderColorPicker.BackColor.G
                    PDFField_BorderColorPicker_B.Text = PDFField_BorderColorPicker.BackColor.B
                    PDFField_BorderColorPicker_A.Text = PDFField_BorderColorPicker.BackColor.A
                Case Else
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            cUserRect.pauseDraw = False
        End Try
    End Sub
    Private Sub PDFField_BackgroundColorPicker_BackColorChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles PDFField_BackgroundColorPicker.BackColorChanged
        Try
            If Session Is Nothing Then Return
            If Session.Length <= 0 Then Return
            Dim blnPause As Boolean = cUserRect.pauseDraw
            If PDFField_BackgroundColorPicker.BackColor.A > 0 Then
                PDFField_BackgroundColorPicker_Transparent.Visible = True
            Else
                PDFField_BackgroundColorPicker_Transparent.Visible = False
            End If
            cUserRect.pauseDraw = True
            PDFField_BackgroundColorPicker_R.Text = PDFField_BackgroundColorPicker.BackColor.R
            PDFField_BackgroundColorPicker_G.Text = PDFField_BackgroundColorPicker.BackColor.G
            PDFField_BackgroundColorPicker_B.Text = PDFField_BackgroundColorPicker.BackColor.B
            PDFField_BackgroundColorPicker_A.Text = PDFField_BackgroundColorPicker.BackColor.A
            cUserRect.pauseDraw = blnPause
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BackgroundColorPicker_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BackgroundColorPicker.Click
        Try
            If Session Is Nothing Then Return
            If Session.Length <= 0 Then Return
            cUserRect.pauseDraw = True
            ColorDialog1.SolidColorOnly = False
            ColorDialog1.Color = PDFField_BackgroundColorPicker.BackColor
            ColorDialog1.CustomColors = iMyCustomColors
            ColorDialog1.FullOpen = True
            Select Case ColorDialog1.ShowDialog(TabControl1)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    PDFField_BackgroundColorPicker.BackColor = System.Drawing.Color.FromArgb(255, ColorDialog1.Color.R, ColorDialog1.Color.G, ColorDialog1.Color.B)
                    cUserRect.pauseDraw = True
                    PDFField_BackgroundColorPicker_R.Text = PDFField_BackgroundColorPicker.BackColor.R
                    PDFField_BackgroundColorPicker_G.Text = PDFField_BackgroundColorPicker.BackColor.G
                    PDFField_BackgroundColorPicker_B.Text = PDFField_BackgroundColorPicker.BackColor.B
                    PDFField_BackgroundColorPicker_A.Text = PDFField_BackgroundColorPicker.BackColor.A
                Case Else
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            cUserRect.pauseDraw = False
        End Try
    End Sub
    Private Sub PDFField_TextColorPicker_BackColorChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles PDFField_TextColorPicker.BackColorChanged
        Try
            If Session Is Nothing Then Return
            If Session.Length <= 0 Then Return
            cUserRect.pauseDraw = True
            PDFField_TextColorPicker_R.Text = PDFField_TextColorPicker.BackColor.R
            PDFField_TextColorPicker_G.Text = PDFField_TextColorPicker.BackColor.G
            PDFField_TextColorPicker_B.Text = PDFField_TextColorPicker.BackColor.B
            PDFField_TextColorPicker_A.Text = PDFField_TextColorPicker.BackColor.A
            cUserRect.pauseDraw = False
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_TextColorPicker_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_TextColorPicker.Click
        Try
            If Session Is Nothing Then Return
            If Session.Length <= 0 Then Return
            cUserRect.pauseDraw = True
            ColorDialog1.SolidColorOnly = False
            ColorDialog1.Color = PDFField_TextColorPicker.BackColor
            ColorDialog1.CustomColors = iMyCustomColors
            ColorDialog1.FullOpen = True
            Select Case ColorDialog1.ShowDialog(TabControl1)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    PDFField_TextColorPicker.BackColor = ColorDialog1.Color
                Case Else
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        cUserRect.pauseDraw = False
    End Sub
    Private Sub PDFField_BorderColorPicker_Transparent_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BorderColorPicker_Transparent.Click
        Try
            PDFField_BorderColorPicker.BackColor = Color.Transparent
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BackgroundColorPicker_Transparent_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BackgroundColorPicker_Transparent.Click
        Try
            PDFField_BackgroundColorPicker.BackColor = Color.Transparent
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub Label63_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    End Sub
    Private Sub PDFField_BorderColorPicker_R_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BorderColorPicker_R.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_BorderColorPicker_R.Text & "") And IsNumeric(PDFField_BorderColorPicker_G.Text & "") And IsNumeric(PDFField_BorderColorPicker_B.Text & "") And IsNumeric(PDFField_BorderColorPicker_A.Text & "") Then
                If CInt(PDFField_BorderColorPicker_R.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_G.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_B.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_BorderColorPicker_R.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_G.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_B.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_A.Text & "") <= 255 Then
                        PDFField_BorderColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_BorderColorPicker_A.Text & ""), CInt(PDFField_BorderColorPicker_R.Text & ""), CInt(PDFField_BorderColorPicker_G.Text & ""), CInt(PDFField_BorderColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_BorderColorPicker_R.Text & "") < 0 Then
                    PDFField_BorderColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_G.Text & "") < 0 Then
                    PDFField_BorderColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_B.Text & "") < 0 Then
                    PDFField_BorderColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_A.Text & "") < 0 Then
                    PDFField_BorderColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_R.Text & "") > 255 Then
                    PDFField_BorderColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_G.Text & "") > 255 Then
                    PDFField_BorderColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_B.Text & "") > 255 Then
                    PDFField_BorderColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_A.Text & "") > 255 Then
                    PDFField_BorderColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BorderColorPicker_G_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BorderColorPicker_G.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_BorderColorPicker_R.Text & "") And IsNumeric(PDFField_BorderColorPicker_G.Text & "") And IsNumeric(PDFField_BorderColorPicker_B.Text & "") And IsNumeric(PDFField_BorderColorPicker_A.Text & "") Then
                If CInt(PDFField_BorderColorPicker_R.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_G.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_B.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_BorderColorPicker_R.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_G.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_B.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_A.Text & "") <= 255 Then
                        PDFField_BorderColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_BorderColorPicker_A.Text & ""), CInt(PDFField_BorderColorPicker_R.Text & ""), CInt(PDFField_BorderColorPicker_G.Text & ""), CInt(PDFField_BorderColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_BorderColorPicker_R.Text & "") < 0 Then
                    PDFField_BorderColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_G.Text & "") < 0 Then
                    PDFField_BorderColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_B.Text & "") < 0 Then
                    PDFField_BorderColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_A.Text & "") < 0 Then
                    PDFField_BorderColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_R.Text & "") > 255 Then
                    PDFField_BorderColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_G.Text & "") > 255 Then
                    PDFField_BorderColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_B.Text & "") > 255 Then
                    PDFField_BorderColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_A.Text & "") > 255 Then
                    PDFField_BorderColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BorderColorPicker_B_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BorderColorPicker_B.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_BorderColorPicker_R.Text & "") And IsNumeric(PDFField_BorderColorPicker_G.Text & "") And IsNumeric(PDFField_BorderColorPicker_B.Text & "") And IsNumeric(PDFField_BorderColorPicker_A.Text & "") Then
                If CInt(PDFField_BorderColorPicker_R.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_G.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_B.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_BorderColorPicker_R.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_G.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_B.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_A.Text & "") <= 255 Then
                        PDFField_BorderColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_BorderColorPicker_A.Text & ""), CInt(PDFField_BorderColorPicker_R.Text & ""), CInt(PDFField_BorderColorPicker_G.Text & ""), CInt(PDFField_BorderColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_BorderColorPicker_R.Text & "") < 0 Then
                    PDFField_BorderColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_G.Text & "") < 0 Then
                    PDFField_BorderColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_B.Text & "") < 0 Then
                    PDFField_BorderColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_A.Text & "") < 0 Then
                    PDFField_BorderColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_R.Text & "") > 255 Then
                    PDFField_BorderColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_G.Text & "") > 255 Then
                    PDFField_BorderColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_B.Text & "") > 255 Then
                    PDFField_BorderColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_A.Text & "") > 255 Then
                    PDFField_BorderColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BorderColorPicker_A_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BorderColorPicker_A.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_BorderColorPicker_R.Text & "") And IsNumeric(PDFField_BorderColorPicker_G.Text & "") And IsNumeric(PDFField_BorderColorPicker_B.Text & "") And IsNumeric(PDFField_BorderColorPicker_A.Text & "") Then
                If CInt(PDFField_BorderColorPicker_R.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_G.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_B.Text & "") >= 0 And CInt(PDFField_BorderColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_BorderColorPicker_R.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_G.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_B.Text & "") <= 255 And CInt(PDFField_BorderColorPicker_A.Text & "") <= 255 Then
                        PDFField_BorderColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_BorderColorPicker_A.Text & ""), CInt(PDFField_BorderColorPicker_R.Text & ""), CInt(PDFField_BorderColorPicker_G.Text & ""), CInt(PDFField_BorderColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_BorderColorPicker_R.Text & "") < 0 Then
                    PDFField_BorderColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_G.Text & "") < 0 Then
                    PDFField_BorderColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_B.Text & "") < 0 Then
                    PDFField_BorderColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_A.Text & "") < 0 Then
                    PDFField_BorderColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_BorderColorPicker_R.Text & "") > 255 Then
                    PDFField_BorderColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_G.Text & "") > 255 Then
                    PDFField_BorderColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_B.Text & "") > 255 Then
                    PDFField_BorderColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_BorderColorPicker_A.Text & "") > 255 Then
                    PDFField_BorderColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BackgroundColorPicker_R_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BackgroundColorPicker_R.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_BackgroundColorPicker_R.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_G.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_B.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_A.Text & "") Then
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_G.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_B.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_BackgroundColorPicker_R.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_G.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_B.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_A.Text & "") <= 255 Then
                        PDFField_BackgroundColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_BackgroundColorPicker_A.Text & ""), CInt(PDFField_BackgroundColorPicker_R.Text & ""), CInt(PDFField_BackgroundColorPicker_G.Text & ""), CInt(PDFField_BackgroundColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_G.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_B.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_A.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_G.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_B.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_A.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BackgroundColorPicker_G_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BackgroundColorPicker_G.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_BackgroundColorPicker_R.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_G.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_B.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_A.Text & "") Then
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_G.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_B.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_BackgroundColorPicker_R.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_G.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_B.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_A.Text & "") <= 255 Then
                        PDFField_BackgroundColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_BackgroundColorPicker_A.Text & ""), CInt(PDFField_BackgroundColorPicker_R.Text & ""), CInt(PDFField_BackgroundColorPicker_G.Text & ""), CInt(PDFField_BackgroundColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_G.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_B.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_A.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_G.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_B.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_A.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BackgroundColorPicker_B_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BackgroundColorPicker_B.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_BackgroundColorPicker_R.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_G.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_B.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_A.Text & "") Then
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_G.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_B.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_BackgroundColorPicker_R.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_G.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_B.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_A.Text & "") <= 255 Then
                        PDFField_BackgroundColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_BackgroundColorPicker_A.Text & ""), CInt(PDFField_BackgroundColorPicker_R.Text & ""), CInt(PDFField_BackgroundColorPicker_G.Text & ""), CInt(PDFField_BackgroundColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_G.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_B.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_A.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_G.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_B.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_A.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_BackgroundColorPicker_A_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_BackgroundColorPicker_A.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_BackgroundColorPicker_R.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_G.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_B.Text & "") And IsNumeric(PDFField_BackgroundColorPicker_A.Text & "") Then
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_G.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_B.Text & "") >= 0 And CInt(PDFField_BackgroundColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_BackgroundColorPicker_R.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_G.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_B.Text & "") <= 255 And CInt(PDFField_BackgroundColorPicker_A.Text & "") <= 255 Then
                        PDFField_BackgroundColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_BackgroundColorPicker_A.Text & ""), CInt(PDFField_BackgroundColorPicker_R.Text & ""), CInt(PDFField_BackgroundColorPicker_G.Text & ""), CInt(PDFField_BackgroundColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_G.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_B.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_A.Text & "") < 0 Then
                    PDFField_BackgroundColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_BackgroundColorPicker_R.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_G.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_B.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_BackgroundColorPicker_A.Text & "") > 255 Then
                    PDFField_BackgroundColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_TextColorPicker_R_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_TextColorPicker_R.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_TextColorPicker_R.Text & "") And IsNumeric(PDFField_TextColorPicker_G.Text & "") And IsNumeric(PDFField_TextColorPicker_B.Text & "") And IsNumeric(PDFField_TextColorPicker_A.Text & "") Then
                If CInt(PDFField_TextColorPicker_R.Text & "") >= 0 And CInt(PDFField_TextColorPicker_G.Text & "") >= 0 And CInt(PDFField_TextColorPicker_B.Text & "") >= 0 And CInt(PDFField_TextColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_TextColorPicker_R.Text & "") <= 255 And CInt(PDFField_TextColorPicker_G.Text & "") <= 255 And CInt(PDFField_TextColorPicker_B.Text & "") <= 255 And CInt(PDFField_TextColorPicker_A.Text & "") <= 255 Then
                        PDFField_TextColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_TextColorPicker_A.Text & ""), CInt(PDFField_TextColorPicker_R.Text & ""), CInt(PDFField_TextColorPicker_G.Text & ""), CInt(PDFField_TextColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_TextColorPicker_R.Text & "") < 0 Then
                    PDFField_TextColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_G.Text & "") < 0 Then
                    PDFField_TextColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_B.Text & "") < 0 Then
                    PDFField_TextColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_A.Text & "") < 0 Then
                    PDFField_TextColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_R.Text & "") > 255 Then
                    PDFField_TextColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_G.Text & "") > 255 Then
                    PDFField_TextColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_B.Text & "") > 255 Then
                    PDFField_TextColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_A.Text & "") > 255 Then
                    PDFField_TextColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_TextColorPicker_G_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_TextColorPicker_G.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_TextColorPicker_R.Text & "") And IsNumeric(PDFField_TextColorPicker_G.Text & "") And IsNumeric(PDFField_TextColorPicker_B.Text & "") And IsNumeric(PDFField_TextColorPicker_A.Text & "") Then
                If CInt(PDFField_TextColorPicker_R.Text & "") >= 0 And CInt(PDFField_TextColorPicker_G.Text & "") >= 0 And CInt(PDFField_TextColorPicker_B.Text & "") >= 0 And CInt(PDFField_TextColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_TextColorPicker_R.Text & "") <= 255 And CInt(PDFField_TextColorPicker_G.Text & "") <= 255 And CInt(PDFField_TextColorPicker_B.Text & "") <= 255 And CInt(PDFField_TextColorPicker_A.Text & "") <= 255 Then
                        PDFField_TextColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_TextColorPicker_A.Text & ""), CInt(PDFField_TextColorPicker_R.Text & ""), CInt(PDFField_TextColorPicker_G.Text & ""), CInt(PDFField_TextColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_TextColorPicker_R.Text & "") < 0 Then
                    PDFField_TextColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_G.Text & "") < 0 Then
                    PDFField_TextColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_B.Text & "") < 0 Then
                    PDFField_TextColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_A.Text & "") < 0 Then
                    PDFField_TextColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_R.Text & "") > 255 Then
                    PDFField_TextColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_G.Text & "") > 255 Then
                    PDFField_TextColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_B.Text & "") > 255 Then
                    PDFField_TextColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_A.Text & "") > 255 Then
                    PDFField_TextColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_TextColorPicker_B_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_TextColorPicker_B.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_TextColorPicker_R.Text & "") And IsNumeric(PDFField_TextColorPicker_G.Text & "") And IsNumeric(PDFField_TextColorPicker_B.Text & "") And IsNumeric(PDFField_TextColorPicker_A.Text & "") Then
                If CInt(PDFField_TextColorPicker_R.Text & "") >= 0 And CInt(PDFField_TextColorPicker_G.Text & "") >= 0 And CInt(PDFField_TextColorPicker_B.Text & "") >= 0 And CInt(PDFField_TextColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_TextColorPicker_R.Text & "") <= 255 And CInt(PDFField_TextColorPicker_G.Text & "") <= 255 And CInt(PDFField_TextColorPicker_B.Text & "") <= 255 And CInt(PDFField_TextColorPicker_A.Text & "") <= 255 Then
                        PDFField_TextColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_TextColorPicker_A.Text & ""), CInt(PDFField_TextColorPicker_R.Text & ""), CInt(PDFField_TextColorPicker_G.Text & ""), CInt(PDFField_TextColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_TextColorPicker_R.Text & "") < 0 Then
                    PDFField_TextColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_G.Text & "") < 0 Then
                    PDFField_TextColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_B.Text & "") < 0 Then
                    PDFField_TextColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_A.Text & "") < 0 Then
                    PDFField_TextColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_R.Text & "") > 255 Then
                    PDFField_TextColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_G.Text & "") > 255 Then
                    PDFField_TextColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_B.Text & "") > 255 Then
                    PDFField_TextColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_A.Text & "") > 255 Then
                    PDFField_TextColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_TextColorPicker_A_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_TextColorPicker_A.TextChanged
        Try
            If isSessionNull() Then Return
            If cUserRect.pauseDraw Then Return
            If IsNumeric(PDFField_TextColorPicker_R.Text & "") And IsNumeric(PDFField_TextColorPicker_G.Text & "") And IsNumeric(PDFField_TextColorPicker_B.Text & "") And IsNumeric(PDFField_TextColorPicker_A.Text & "") Then
                If CInt(PDFField_TextColorPicker_R.Text & "") >= 0 And CInt(PDFField_TextColorPicker_G.Text & "") >= 0 And CInt(PDFField_TextColorPicker_B.Text & "") >= 0 And CInt(PDFField_TextColorPicker_A.Text & "") >= 0 Then
                    If CInt(PDFField_TextColorPicker_R.Text & "") <= 255 And CInt(PDFField_TextColorPicker_G.Text & "") <= 255 And CInt(PDFField_TextColorPicker_B.Text & "") <= 255 And CInt(PDFField_TextColorPicker_A.Text & "") <= 255 Then
                        PDFField_TextColorPicker.BackColor = System.Drawing.Color.FromArgb(CInt(PDFField_TextColorPicker_A.Text & ""), CInt(PDFField_TextColorPicker_R.Text & ""), CInt(PDFField_TextColorPicker_G.Text & ""), CInt(PDFField_TextColorPicker_B.Text & ""))
                        Return
                    End If
                End If
                If CInt(PDFField_TextColorPicker_R.Text & "") < 0 Then
                    PDFField_TextColorPicker_R.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_G.Text & "") < 0 Then
                    PDFField_TextColorPicker_G.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_B.Text & "") < 0 Then
                    PDFField_TextColorPicker_B.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_A.Text & "") < 0 Then
                    PDFField_TextColorPicker_A.Text = "0"
                End If
                If CInt(PDFField_TextColorPicker_R.Text & "") > 255 Then
                    PDFField_TextColorPicker_R.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_G.Text & "") > 255 Then
                    PDFField_TextColorPicker_G.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_B.Text & "") > 255 Then
                    PDFField_TextColorPicker_B.Text = "255"
                End If
                If CInt(PDFField_TextColorPicker_A.Text & "") > 255 Then
                    PDFField_TextColorPicker_A.Text = "255"
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub btnPDFField_Dimensions_Lock_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPDFField_Dimensions_Lock.Click
        Try
            PDFField_Dimensions_Paste_0_Left_llx.Checked = False
            PDFField_Dimensions_Paste_2_Right_urx.Checked = False
            PDFField_Dimensions_Paste_4_Width.Checked = False
            PDFField_Dimensions_Paste_5_Height.Checked = False
            PDFField_Dimensions_Paste_1_Bottom_lly.Checked = False
            PDFField_Dimensions_Paste_3_Top_ury.Checked = False
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub StoreDimensions(Optional ByVal idx As Integer = -1)
        Try
            _dimensionsList = New List(Of Single)
            If (PDFField_Dimensions_Paste_0_Left_llx.Checked) Then
                _dimensionsList.Add(CSng(btnLeft.Text) + 0)
            Else
                _dimensionsList.Add(-1 + 0)
            End If
            If (PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
                _dimensionsList.Add(CSng(btnBottom.Text) + 0)
            Else
                _dimensionsList.Add(-1 + 0)
            End If
            If (PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
                _dimensionsList.Add(CSng(btnRight.Text) + 0)
            Else
                _dimensionsList.Add(-1 + 0)
            End If
            If (PDFField_Dimensions_Paste_3_Top_ury.Checked) Then
                _dimensionsList.Add(CSng(btnTop.Text) + 0)
            Else
                _dimensionsList.Add(-1 + 0)
            End If
            If (PDFField_Dimensions_Paste_4_Width.Checked) Then
                _dimensionsList.Add(CSng(btnWidth.Text) + 0)
            Else
                _dimensionsList.Add(-1 + 0)
            End If
            If (PDFField_Dimensions_Paste_5_Height.Checked) Then
                _dimensionsList.Add(CSng(btnHeight.Text) + 0)
            Else
                _dimensionsList.Add(-1 + 0)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function GetDimensions(ByVal idxRequired As Single) As Single
        Try
            Select Case idxRequired
                Case 0
                    _dimensionsList(idxRequired) = (CSng(btnLeft.Text) + 0)
                Case 1
                    _dimensionsList(idxRequired) = (CSng(btnRight.Text) + 0)
                Case 2
                    _dimensionsList(idxRequired) = (CSng(btnWidth.Text) + 0)
                Case 3
                    _dimensionsList(idxRequired) = (CSng(btnHeight.Text) + 0)
                Case 4
                    _dimensionsList(idxRequired) = (CSng(btnBottom.Text) + 0)
                Case 5
                    _dimensionsList(idxRequired) = (CSng(btnTop.Text) + 0)
                Case Else
                    _dimensionsList.Clear()
                    _dimensionsList = New List(Of Single)
                    _dimensionsList.Add(-1 + 0)
                    _dimensionsList.Add(-1 + 0)
                    _dimensionsList.Add(-1 + 0)
                    _dimensionsList.Add(-1 + 0)
                    _dimensionsList.Add(-1 + 0)
                    _dimensionsList.Add(-1 + 0)
                    If (PDFField_Dimensions_Paste_0_Left_llx.Checked) Then
                        _dimensionsList.Add(CSng(btnLeft.Text) + 0)
                    End If
                    If (PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
                        _dimensionsList.Add(CSng(btnBottom.Text) + 0)
                    End If
                    If (PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
                        _dimensionsList.Add(CSng(btnRight.Text) + 0)
                    End If
                    If (PDFField_Dimensions_Paste_3_Top_ury.Checked) Then
                        _dimensionsList.Add(CSng(btnTop.Text) + 0)
                    End If
                    If (PDFField_Dimensions_Paste_4_Width.Checked) Then
                        _dimensionsList.Add(CSng(btnWidth.Text) + 0)
                    End If
                    If (PDFField_Dimensions_Paste_5_Height.Checked) Then
                        _dimensionsList.Add(CSng(btnHeight.Text) + 0)
                    End If
            End Select
            Return _dimensionsList(idxRequired)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return _dimensionsList(idxRequired)
    End Function
    Private Sub PDFField_Dimensions_Paste_0_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Dimensions_Paste_0_Left_llx.CheckedChanged
        StoreDimensions(-1)
    End Sub
    Private Sub PDFField_Dimensions_Paste_1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Dimensions_Paste_2_Right_urx.CheckedChanged
        StoreDimensions(-1)
    End Sub
    Private Sub PDFField_Dimensions_Paste_4_Width_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Dimensions_Paste_4_Width.CheckedChanged
        StoreDimensions(-1)
    End Sub
    Private Sub PDFField_Dimensions_Paste_5_Height_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Dimensions_Paste_5_Height.CheckedChanged
        StoreDimensions(-1)
    End Sub
    Private Sub PDFField_Dimensions_Paste_4_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Dimensions_Paste_1_Bottom_lly.CheckedChanged
        StoreDimensions(-1)
    End Sub
    Private Sub PDFField_Dimensions_Paste_5_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Dimensions_Paste_3_Top_ury.CheckedChanged
        StoreDimensions(-1)
    End Sub
    Private Sub btnField_AddSignatureField_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnField_AddSignatureField.Click
        Dim rectTempScreen As System.Drawing.RectangleF = cUserRect.rectScreen
        Dim rectTempPDF As System.Drawing.RectangleF = cUserRect.rect
        If PDFField_Dimensions_Paste_0_Left_llx.Checked Or PDFField_Dimensions_Paste_2_Right_urx.Checked Then
            btnWidth.Text = CSng(btnRight.Text) - CSng(btnLeft.Text)
        ElseIf PDFField_Dimensions_Paste_4_Width.Checked Then 'And (Not PDFField_Dimensions_Paste_0_Left_llx.Checked Or Not PDFField_Dimensions_Paste_2_Right_urx.Checked) Then
            btnWidth.Text = _dimensionsList(4) + 0
            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            ElseIf PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                btnLeft.Text = CSng(btnRight.Text) - CSng(btnWidth.Text)
            Else
                btnRight.Text = CSng(btnLeft.Text) + CSng(btnWidth.Text)
            End If
        End If
        If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
            If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
            Else
                btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
            End If
        ElseIf PDFField_Dimensions_Paste_5_Height.Checked Then 'And (Not PDFField_Dimensions_Paste_3_Top_ury.Checked Or Not PDFField_Dimensions_Paste_1_Bottom_lly.Checked) Then
            btnHeight.Text = _dimensionsList(5) + 0
            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                Else
                    btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                End If
            Else
                If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                    btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                Else
                    btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                End If
            End If
        End If
        If Not fldNameHighlighted.IsNullOrEmpty() And CheckfieldNameExits(fldNameHighlighted & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), fldNameHighlighted, Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        ElseIf CheckfieldNameExits(Me.PDFField_Name.Text & "") Then
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), Me.PDFField_Name.Text & "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        Else
            Me.lblFieldType.Text = "PROPERTIES"
            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text)) 'Dim r As New iTextSharp.text.Rectangle(CSng(cUserRect.rect.Left), CSng(cUserRect.rect.Bottom), CSng(cUserRect.rect.Right), CSng(cUserRect.rect.Top))
            cUserRect.rect = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text), CSng(btnWidth.Text), CSng(btnHeight.Text))
            r = GetFieldPositionsReverse(Session(), r)
            Session("output") = A0_PDFFormField_Modify(Session("output"), "", Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
        End If
        calculateFields()

        Return
    End Sub
    Private Sub PuchButton_Options_PictureBox_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_PictureBox.Click
        Try
            PuchButton_Options_ChooseIconBtn_Click(sender, e)
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub timerPreventDefaultExpires_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles timerPreventDefaultExpires.Tick
        preventClickDialog = False
        timerPreventDefaultExpires.Enabled = False
    End Sub
    Private Sub SelectProgramToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SelectProgramToolStripMenuItem.Click
        Try
            OpenFileDialog4.CheckFileExists = True
            OpenFileDialog4.CheckPathExists = True
            OpenFileDialog4.DefaultExt = ".exe"
            OpenFileDialog4.Filter = "EXE|*.exe|COM|*.com|All files|*.*"
            OpenFileDialog4.FilterIndex = 0
            OpenFileDialog4.InitialDirectory = Application.StartupPath
            OpenFileDialog4.FileName = ""
            OpenFileDialog4.Multiselect = False
            OpenFileDialog4.Title = "SELECT A PROGRAM"
            Select Case OpenFileDialog4.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    Dim appSel As String = OpenFileDialog4.FileName.ToString & ""
                    If FileExists(appSel) Then
                        Dim tmpFn As String = ApplicationDataFolder(False, "temp") & "_cosedit_" & System.IO.Path.GetFileNameWithoutExtension(fpath) & ".pdf"
                        If Not String.IsNullOrEmpty(tmpFn) Then
                            File.WriteAllBytes(tmpFn, Session("output"))
                            Process.Start("" & appSel & "", """" & tmpFn & """")
                            Return
                        End If
                    End If
                Case Else
                    Return
            End Select
            Return
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return
        End Try
    End Sub
    Private Sub ImportDataToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportDataToolStripMenuItem.Click
        preventClickDialog = True
        OpenFileDialog2.InitialDirectory = ApplicationDataFolder(False, "")
        OpenFileDialog2.Filter = "FDF|*.fdf|XFDF|*.xfdf|XDP|*.xdp|XML|*.xml|Json|*.json"
        OpenFileDialog2.FilterIndex = 0
        OpenFileDialog2.FileName = ""
        OpenFileDialog2.Multiselect = False
        OpenFileDialog2.DefaultExt = ".fdf"
        OpenFileDialog2.FileName = ""
        Try
            Select Case OpenFileDialog2.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    If Not String.IsNullOrEmpty(OpenFileDialog2.FileName) Then
                        Dim fn As String = OpenFileDialog2.FileName & ""
                        If Session("output") Is Nothing Then Return
                        Dim dataFile() As Byte = System.IO.File.ReadAllBytes(fn)
                        Select Case cFDFDoc.Determine_Type(dataFile)
                            Case FDFApp.FDFDoc_Class.FDFType.FDF, FDFApp.FDFDoc_Class.FDFType.xFDF
                                cFDFDoc = cFDFApp.FDFOpenWithiText(dataFile, True, True)
                                cFDFDoc.FDFSetFile(fpath)
                                Session("output") = cFDFDoc.PDFMergeFDF2Buf(fpath, False, pdfOwnerPassword & "")
                            Case FDFApp.FDFDoc_Class.FDFType.XDP
                                cFDFDoc = cFDFApp.FDFOpenFromBuf(dataFile, True, True)
                                cFDFDoc.FDFSetFile(fpath)
                                Session("output") = cFDFDoc.PDFMergeXDP2Buf(fpath, False, pdfOwnerPassword & "")
                            Case FDFApp.FDFDoc_Class.FDFType.XML
                                cFDFDoc = cFDFApp.FDFOpenFromBuf(dataFile, True, True)
                                cFDFDoc.FDFSetFile(fpath)
                                Session("output") = cFDFDoc.PDFMergeXDP2Buf(fpath, False, pdfOwnerPassword & "")
                            Case FDFApp.FDFDoc_Class.FDFType.Json
                                Dim doc As System.Xml.XmlDocument = DirectCast(JsonConvert.DeserializeXmlNode(System.IO.File.ReadAllText(fn)), System.Xml.XmlDocument)
                                If Not doc.OuterXml.ToString().StartsWith("<?xml ") Then
                                    cFDFDoc = cFDFApp.FDFOpenFromBuf(cFDFDoc.DefaultEncoding.GetBytes("<?xml version=""1.0"" encoding=""UTF-8""?>" & doc.OuterXml), True, True)
                                Else
                                    cFDFDoc = cFDFApp.FDFOpenFromBuf(cFDFDoc.DefaultEncoding.GetBytes(doc.OuterXml), True, True)
                                End If
                                cFDFDoc.FDFSetFile(fpath)
                                If cFDFDoc.PDFisXFA(System.IO.File.ReadAllBytes(fpath)) Then
                                    Session("output") = cFDFDoc.PDFMergeXDP2Buf(fpath, False, pdfOwnerPassword & "")
                                Else
                                    Session("output") = cFDFDoc.PDFMergeFDF2Buf(fpath, False, pdfOwnerPassword & "")
                                End If
                            Case Else
                                Return
                        End Select
                        LoadPDFReaderDoc(pdfOwnerPassword.ToString, True)
                        fldRectangles = getFieldRectangles(True)
                        LoadPageList(Me.btnPage, cFDFDoc)
                        A0_LoadPDF(True)
                        ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                        A0_PictureBox1.Enabled = True
                        A0_PictureBox2.Enabled = True
                        addOpenHistoryListItem(fn)
                    End If
                Case Else
                    Return
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            timerPreventDefaultExpires.Enabled = True
        End Try
    End Sub
    Public Sub ImportData(dataFile() As Byte)
        preventClickDialog = True
        Try
            Select Case cFDFDoc.Determine_Type(dataFile)
                Case FDFApp.FDFDoc_Class.FDFType.FDF, FDFApp.FDFDoc_Class.FDFType.xFDF
                    cFDFDoc = cFDFApp.FDFOpenWithiText(dataFile, True, True)
                    cFDFDoc.FDFSetFile(fpath)
                    Session("output") = cFDFDoc.PDFMergeFDF2Buf(fpath, False, pdfOwnerPassword & "")
                Case FDFApp.FDFDoc_Class.FDFType.XDP
                    cFDFDoc = cFDFApp.FDFOpenFromBuf(dataFile, True, True)
                    cFDFDoc.FDFSetFile(fpath)
                    Session("output") = cFDFDoc.PDFMergeXDP2Buf(fpath, False, pdfOwnerPassword & "")
                Case FDFApp.FDFDoc_Class.FDFType.XML
                    cFDFDoc = cFDFApp.FDFOpenFromBuf(dataFile, True, True)
                    cFDFDoc.FDFSetFile(fpath)
                    Session("output") = cFDFDoc.PDFMergeXDP2Buf(fpath, False, pdfOwnerPassword & "")
                Case FDFApp.FDFDoc_Class.FDFType.Json
                    Dim doc As System.Xml.XmlDocument = DirectCast(JsonConvert.DeserializeXmlNode(System.Text.Encoding.UTF8.GetString(dataFile)), System.Xml.XmlDocument)
                    If Not doc.OuterXml.ToString().StartsWith("<?xml ") Then
                        cFDFDoc = cFDFApp.FDFOpenFromBuf(cFDFDoc.DefaultEncoding.GetBytes("<?xml version=""1.0"" encoding=""UTF-8""?>" & doc.OuterXml), True, True)
                    Else
                        cFDFDoc = cFDFApp.FDFOpenFromBuf(cFDFDoc.DefaultEncoding.GetBytes(doc.OuterXml), True, True)
                    End If
                    cFDFDoc.FDFSetFile(fpath)
                    If cFDFDoc.PDFisXFA(System.IO.File.ReadAllBytes(fpath)) Then
                        Session("output") = cFDFDoc.PDFMergeXDP2Buf(fpath, False, pdfOwnerPassword & "")
                    Else
                        Session("output") = cFDFDoc.PDFMergeFDF2Buf(fpath, False, pdfOwnerPassword & "")
                    End If
                Case Else
                    Return
            End Select
            LoadPDFReaderDoc(pdfOwnerPassword.ToString, True)
            fldRectangles = getFieldRectangles(True)
            LoadPageList(Me.btnPage, cFDFDoc)
            A0_LoadPDF(True)
            ComboBox1_SelectedIndexChanged(Me, New EventArgs())
            A0_PictureBox1.Enabled = True
            A0_PictureBox2.Enabled = True
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            timerPreventDefaultExpires.Enabled = True
        End Try
    End Sub
    Private Sub OpenWithPasswordToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenWithPasswordToolStripMenuItem.Click
        OpenFile_WithPassword()
    End Sub
    Public Property StatusToolStrip(Optional ByVal prependString As String = "", Optional ByVal blnDoEvents As Boolean = False) As String
        Get
            Return Me.ToolStripStatusLabel5.Text & ""
        End Get
        Set(ByVal value As String)
            Try
                If String.IsNullOrEmpty(prependString) Then
                    Me.ToolStripStatusLabel5.Text = value.ToString() & ""
                Else
                    Me.ToolStripStatusLabel5.Text = prependString & "" & value.ToString().Replace(CStr(prependString & "").ToString(), "") & ""
                End If
                If blnDoEvents Then
                    Application.DoEvents()
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End Set
    End Property
    Public Sub OpenFile_WithPassword(Optional ByVal fileName As String = "", Optional ByVal blnDeleteTempFiles As Boolean = True, Optional ByVal showPrompts As Boolean = True, Optional pw As String = "")
        Try
            Try
                If Not clsFF Is Nothing Then
                    If clsFF.Visible Then
                        showPrompts = False
                    End If
                End If
            Catch exShowDialog As Exception
                TimeStampAdd(exShowDialog, debugMode)
            End Try
            cUserRect.pauseDraw = True
            MenuBar_Enabled = False
            Try
                StatusToolStrip("Status:  ", True) = "Loading, please wait..."
                computerMemory()
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            preventClickDialog = True
            OpenFileDialog1.InitialDirectory = ApplicationDataFolder(False, "")
            OpenFileDialog1.Filter = "PDF|*.pdf|FDF|*.fdf|XFDF|*.xfdf|XDP|*.xdp|All Files|*.*"
            OpenFileDialog1.AutoUpgradeEnabled = True
            OpenFileDialog1.DefaultExt = ".pdf"
            OpenFileDialog1.FilterIndex = 1
            OpenFileDialog1.Title = "Open Document"
            OpenFileDialog1.ValidateNames = True
            If Not String.IsNullOrEmpty(fileName & "") Then
                OpenFileDialog1.FileName = fileName
                If FileExists(fileName) Then
                    OpenFileDialog1.InitialDirectory = Path.GetDirectoryName(fileName & "")
                    OpenFileDialog1.FileName = Path.GetFileName(fileName & "")
                    fpath = fileName
                End If
            ElseIf Not String.IsNullOrEmpty(fpath) Then
                If FileExists(fpath) Then
                    OpenFileDialog1.InitialDirectory = Path.GetDirectoryName(fpath & "")
                    OpenFileDialog1.FileName = Path.GetFileName(fpath & "")
                End If
            End If
            Dim fn As String = ""
            Try
GOTO_NEWPASSWORD:
                pdfOwnerPassword = New clsPromptDialog().ShowDialog("Type the owner password in the textbox:", "Owner password?", Me, pw & "")
                GoTo GOTO_PROMPT_BAD_PASSWORD_SKIP
GOTO_PROMPT_BAD_PASSWORD:
                Try
                    Select Case MsgBox("Click ""Yes"" to unlock this document's security?" & Environment.NewLine &
                                       "Click ""No"" to retype the password." & Environment.NewLine &
                                       "Click ""Cancel"" to cancel opening this document.", MsgBoxStyle.YesNoCancel + MsgBoxStyle.ApplicationModal, "Error: Bad Password!")
                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                            fn = fpath
                            Dim pdfBytes() As Byte = File.ReadAllBytes(fn)
                            If cfdf.HasUsageRights_PDF(pdfBytes) Then
                                pdfBytes = UnlockSecurePDF(pdfBytes)
                            Else
                                pdfBytes = UnlockSecurePDF(pdfBytes)
                            End If
                            Try
                                If cFDFDoc.PDFisXFA(pdfBytes.ToArray()) Then
                                    Dim strModified As New MemoryStream(pdfBytes.ToArray)
                                    SaveFileDialog1.FileName = Path.GetFileName(fn)
                                    SaveFileDialog1.InitialDirectory = Path.GetDirectoryName(fn)
                                    SaveFileDialog1.Filter = "PDF|*.pdf|All files|*.*"
                                    SaveFileDialog1.FilterIndex = 0
                                    Select Case SaveFileDialog1.ShowDialog(Me)
                                        Case DialogResult.Yes, DialogResult.OK
                                            File.WriteAllBytes(SaveFileDialog1.FileName, strModified.ToArray())
                                            MsgBox("The PDF security was successfully reset!" & Environment.NewLine & "This is an XFA Form, please use Adobe LiveCycle to Edit the form", MsgBoxStyle.OkOnly + MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal, "Password Reset")
                                            Process.Start("explorer.exe", "/select,""" & (SaveFileDialog1.FileName) & """")
                                            Return
                                        Case Else
                                            Return
                                    End Select
                                    Return
                                End If
                            Catch ex As Exception
                                Err.Clear()
                                Dim strModified As New MemoryStream(pdfBytes.ToArray)
                                SaveFileDialog1.FileName = Path.GetFileName(fn)
                                SaveFileDialog1.InitialDirectory = Path.GetDirectoryName(fn)
                                SaveFileDialog1.Filter = "PDF|*.pdf|All files|*.*"
                                SaveFileDialog1.FilterIndex = 0
                                Select Case SaveFileDialog1.ShowDialog(Me)
                                    Case DialogResult.Yes, DialogResult.OK
                                        File.WriteAllBytes(SaveFileDialog1.FileName, strModified.ToArray())
                                        MsgBox("The PDF security was successfully reset!" & Environment.NewLine & "This appears to be an XFA Form, please use Adobe LiveCycle to Edit the form.", MsgBoxStyle.OkOnly + MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal, "Password Reset")
                                        Process.Start("explorer.exe", "/select,""" & (SaveFileDialog1.FileName) & """")
                                        Return
                                    Case Else
                                        Return
                                End Select
                                Return
                            End Try
                            pdfOwnerPassword = ""
                            Session("saved") = pdfBytes
                            Session("image_undo_history_0") = pdfBytes
                            Session("output") = pdfBytes
                            LoadPDFReaderDoc(pdfOwnerPassword, True)
                            If Not pdfReaderDoc.IsOpenedWithFullPermissions Or pdfReaderDoc Is Nothing Then
                                Session("saved") = Nothing
                                Session("image_undo_history_0") = Nothing
                                Session("output") = Nothing
                                pdfReaderDoc.Close()
                                GoTo GOTO_PROMPT_BAD_PASSWORD
                            End If
                            _cFDFDoc = cFDFDoc
                            LoadPageList(Me.btnPage, cFDFDoc)
                            pageIndex = 0
                            cmbPercent.SelectedIndex = 3
                            ClearPDFEncryptionPanel(True, False)
                            LoadPDFEncryptionPanel(pdfBytes, False)
                            addOpenHistoryListItem(fpath)
                            loadToolStripMenu_OpenHistoryList()
                            GoTo GOTO_ENDSELECT
                        Case MsgBoxResult.No
                            GoTo GOTO_NEWPASSWORD
                        Case Else
                            Select Case MsgBox("Click ""Yes"" to unlock this document's security using brute force?" & Environment.NewLine &
                                       "Click ""No"" to cancel opening this document.", MsgBoxStyle.YesNo + MsgBoxStyle.ApplicationModal, "Try brute force?")
                                Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                    fn = fpath
                                    Dim pdfBytes() As Byte = File.ReadAllBytes(fn)
                                    Dim dialogCrack As New dialogBruteForcePassword(Me, pdfBytes)
                                    pwCrack = New clsBruteForcePw(Me, pdfBytes)
                                    Try
                                        Me.Hide()
                                        Select Case dialogCrack.ShowDialog(Me)
                                            Case DialogResult.OK, DialogResult.Yes
                                                clsBruteForcePw.InUse = False
                                                If Not pwCrack Is Nothing Then
                                                    pwCrack.forcePause = True
                                                End If
                                                MsgBox(dialogCrack.TextBox2.Text, MsgBoxStyle.OkOnly, "PASSWORD CRACKED: see log")
                                                pdfOwnerPassword = dialogCrack.TextBox2.Text
                                                fileName = fn
                                                GoTo GOTO_KNOWN_FILENAME
                                            Case Else
                                                If Not pwCrack Is Nothing Then
                                                    pwCrack.forcePause = True
                                                End If
                                                clsBruteForcePw.InUse = False
                                                Return
                                        End Select
                                    Catch ex As Exception
                                        Err.Clear()
                                    Finally
                                        Me.Show()
                                        Me.BringToFront()
                                    End Try

                                Case Else
                                    Return
                            End Select
                            Return
                    End Select
                Catch ex As Exception
                    Throw ex
                    Return
                Finally
                    PdfReader.unethicalreading = False
                End Try
GOTO_PROMPT_BAD_PASSWORD_SKIP:
                If String.IsNullOrEmpty(pdfOwnerPassword & "") Then
                    GoTo GOTO_PROMPT_BAD_PASSWORD
                End If
                If Not String.IsNullOrEmpty(fileName & "") Then GoTo GOTO_KNOWN_FILENAME
                Select Case OpenFileDialog1.ShowDialog(Me)
                    Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                        fileName = OpenFileDialog1.FileName & ""
GOTO_KNOWN_FILENAME:
                        If Not String.IsNullOrEmpty(fileName) Then
                            fn = fileName
                            Try
                                If A0_CloseDocument(blnDeleteTempFiles, showPrompts) = False Then
                                    StatusToolStrip("Aborting Open File:", True) = "File Not saved"
                                    Return
                                End If
                                cUserRect.rect = Nothing
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                            fpath = fn
                            Dim b() As Byte = Nothing
                            _outputIndex = 0
                            mem.Clear()
                            Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                                Case "pdf"
                                    Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                                    Dim pdfBytes() As Byte = File.ReadAllBytes(fn)
                                    Session("saved") = pdfBytes
                                    Session("image_undo_history_0") = pdfBytes
                                    Session("output") = pdfBytes
                                    LoadPDFReaderDoc(pdfOwnerPassword, True)
                                    If pdfReaderDoc Is Nothing Then
                                        Session("saved") = Nothing
                                        Session("image_undo_history_0") = Nothing
                                        Session("output") = Nothing
                                        GoTo GOTO_NEWPASSWORD
                                    ElseIf Not pdfReaderDoc.IsOpenedWithFullPermissions Then
                                        Session("saved") = Nothing
                                        Session("image_undo_history_0") = Nothing
                                        Session("output") = Nothing
                                        pdfReaderDoc.Close()
                                        GoTo GOTO_NEWPASSWORD
                                    End If
                                    cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
                                    LoadPageList(Me.btnPage, cFDFDoc)
                                    cUserRect.pauseDraw = True
                                    pageIndex = 0
                                    cmbPercent.SelectedIndex = 3
                                    ClearPDFEncryptionPanel(True, False)
                                    LoadPDFEncryptionPanel(pdfBytes, False)
                                    addOpenHistoryListItem(fpath)
                                    loadToolStripMenu_OpenHistoryList()
                                    cUserRect.pauseDraw = False
                                Case "fdf"
                                    cFDFDoc = cFDFApp.FDFOpenFromFileiText(fn, True, True)
                                    If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                        fpath = cFDFDoc.FDFGetFile & ""
                                    Else
                                        fpath = ""
                                    End If
                                    Dim cls As New clsPromptDialog
                                    fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                                    If Not String.IsNullOrEmpty(fpath & "") Then
                                        cFDFDoc.FDFSetFile(fpath & "")
                                        Select Case cFDFDoc.Determine_Type(fpath)
                                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                                addOpenHistoryListItem(fn)
                                                Try
                                                    Using mMerged As New MemoryStream
                                                        Dim fdfReaderDoc As New FdfReader(fn)
                                                        pdfReaderDoc = New PdfReader(fpath, getBytes(pdfOwnerPassword & ""))
                                                        Using stamp As New PdfStamper(pdfReaderDoc, mMerged)
                                                            stamp.AcroFields.SetFields(fdfReaderDoc)
                                                            For Each fldName As String In fdfReaderDoc.Fields.Keys
                                                                Select Case stamp.AcroFields.GetFieldType(fldName)
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName))
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                            If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                                Dim vs As New List(Of String)
                                                                                If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                                    For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                                        stamp.AcroFields.SetField(fldName, vs(0))
                                                                                        Exit For
                                                                                    Next
                                                                                ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                                    For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                                        stamp.AcroFields.SetField(fldName, vs(0))
                                                                                        Exit For
                                                                                    Next
                                                                                End If
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c))
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString())
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                            If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                                Dim v As PdfName, vs As New List(Of String)
                                                                                If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                                    For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                                    Next
                                                                                ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                                    For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                                    Next
                                                                                End If
                                                                                stamp.AcroFields.SetListSelection(fldName, vs.ToArray())
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                                stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c)})
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                                stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString()})
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.A) Is Nothing Then
                                                                            Dim a As New PdfAction
                                                                            If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A) Is Nothing Then
                                                                                If stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                                    PdfReader.KillIndirect(stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsIndirectObject(PdfName.A))
                                                                                End If
                                                                                stamp.AcroFields.Fields(fldName).GetMerged(0).Remove(PdfName.A)
                                                                            End If
                                                                            Dim aDic As PdfDictionary = fdfReaderDoc.Fields(fldName).GetAsDict(PdfName.A)
                                                                            For Each n As PdfName In aDic.Keys
                                                                                If aDic.Get(n).IsName Then
                                                                                    a.Put(n, aDic.GetAsName(n))
                                                                                ElseIf aDic.Get(n).IsString Then
                                                                                    a.Put(n, aDic.GetAsString(n))
                                                                                ElseIf aDic.Get(n).IsArray Then
                                                                                    a.Put(n, aDic.GetAsArray(n))
                                                                                ElseIf aDic.Get(n).IsStream Then
                                                                                    a.Put(n, aDic.GetAsStream(n))
                                                                                Else
                                                                                    a.Put(n, aDic.Get(n))
                                                                                End If
                                                                            Next
                                                                            If aDic.Get(PdfName.FS) Is Nothing Then
                                                                                a.Put(PdfName.FS, PdfName.URL)
                                                                            End If
                                                                            Dim pb As PushbuttonField = stamp.AcroFields.GetNewPushbuttonFromField(fldName)
                                                                            Dim fld As PdfFormField = pb.Field
                                                                            fld.Action = a
                                                                            stamp.AcroFields.ReplacePushbuttonField(fldName, fld)
                                                                            If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                                Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsDict(PdfName.A)
                                                                                stamp.AcroFields.Fields(fldName).GetMerged(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                            End If
                                                                            If Not stamp.AcroFields.Fields(fldName).GetWidget(0).Get(PdfName.A).IsIndirect Then
                                                                                Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetWidget(0).GetAsDict(PdfName.A)
                                                                                stamp.AcroFields.Fields(fldName).GetWidget(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE
                                                                    Case Else
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                                End Select
                                                            Next
                                                            stamp.Writer.CloseStream = False
                                                            fdfReaderDoc.Close()
                                                            stamp.Close()
                                                            pdfReaderDoc.Close()
                                                        End Using
                                                        Session("saved") = mMerged.ToArray()
                                                    End Using
                                                Catch exMerged As Exception
                                                    TimeStampAdd(exMerged, debugMode)
                                                    Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                End Try
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                pageIndex = 0
                                                cmbPercent.SelectedIndex = 3
                                            Case FDFApp.FDFDoc_Class.FDFType.XPDF, FDFApp.FDFDoc_Class.FDFType.XFA
                                                addOpenHistoryListItem(fn)
                                                Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                pageIndex = 0
                                                cmbPercent.SelectedIndex = 3
                                            Case Else
                                                Session("output") = Nothing
                                        End Select
                                    End If
                                Case "xfdf"
                                    cFDFDoc = cFDFApp.FDFOpenFromFile(fn, True, True)
                                    If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                        fpath = cFDFDoc.FDFGetFile & ""
                                    Else
                                        fpath = ""
                                    End If
                                    Dim cls As New clsPromptDialog
                                    fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                                    If Not String.IsNullOrEmpty(fpath & "") Then
                                        cFDFDoc.FDFSetFile(fpath & "")
                                        Select Case cFDFDoc.Determine_Type(fpath)
                                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                                addOpenHistoryListItem(fn)
                                                Try
                                                    Using mMerged As New MemoryStream
                                                        Dim fdfReaderDoc As New FdfReader(fn)
                                                        pdfReaderDoc = New PdfReader(fpath, getBytes(pdfOwnerPassword & ""))
                                                        Using stamp As New PdfStamper(pdfReaderDoc, mMerged)
                                                            stamp.AcroFields.SetFields(fdfReaderDoc)
                                                            For Each fldName As String In fdfReaderDoc.Fields.Keys
                                                                Select Case stamp.AcroFields.GetFieldType(fldName)
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT, iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName))
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                            If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                                Dim vs As New List(Of String)
                                                                                If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                                    For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                                        stamp.AcroFields.SetField(fldName, vs(0))
                                                                                        Exit For
                                                                                    Next
                                                                                ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                                    For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                                        stamp.AcroFields.SetField(fldName, vs(0))
                                                                                        Exit For
                                                                                    Next
                                                                                End If
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c))
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                                stamp.AcroFields.SetField(fldName, fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString())
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.V) Is Nothing Then
                                                                            If fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsArray Then
                                                                                Dim v As PdfName, vs As New List(Of String)
                                                                                If fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsName Then
                                                                                    For Each v1 As PdfName In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v1.ToString().TrimStart("/"c).TrimStart("\"c))
                                                                                    Next
                                                                                ElseIf fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V)(0).IsString Then
                                                                                    For Each v2 As PdfString In (fdfReaderDoc.Fields(fldName).GetAsArray(PdfName.V))
                                                                                        vs.Add(v2.ToUnicodeString().ToString.TrimStart("/"c).TrimStart("\"c))
                                                                                    Next
                                                                                End If
                                                                                stamp.AcroFields.SetListSelection(fldName, vs.ToArray())
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsName Then
                                                                                stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsName(PdfName.V).ToString().TrimStart("/"c).TrimStart("\"c)})
                                                                            ElseIf fdfReaderDoc.Fields(fldName).Get(PdfName.V).IsString Then
                                                                                stamp.AcroFields.SetListSelection(fldName, New String() {fdfReaderDoc.Fields(fldName).GetAsString(PdfName.V).ToUnicodeString()})
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                                                        If Not fdfReaderDoc.Fields(fldName).Get(PdfName.A) Is Nothing Then
                                                                            Dim a As New PdfAction
                                                                            If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A) Is Nothing Then
                                                                                If stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                                    PdfReader.KillIndirect(stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsIndirectObject(PdfName.A))
                                                                                End If
                                                                                stamp.AcroFields.Fields(fldName).GetMerged(0).Remove(PdfName.A)
                                                                            End If
                                                                            Dim aDic As PdfDictionary = fdfReaderDoc.Fields(fldName).GetAsDict(PdfName.A)
                                                                            For Each n As PdfName In aDic.Keys
                                                                                If aDic.Get(n).IsName Then
                                                                                    a.Put(n, aDic.GetAsName(n))
                                                                                ElseIf aDic.Get(n).IsString Then
                                                                                    a.Put(n, aDic.GetAsString(n))
                                                                                ElseIf aDic.Get(n).IsArray Then
                                                                                    a.Put(n, aDic.GetAsArray(n))
                                                                                ElseIf aDic.Get(n).IsStream Then
                                                                                    a.Put(n, aDic.GetAsStream(n))
                                                                                Else
                                                                                    a.Put(n, aDic.Get(n))
                                                                                End If
                                                                            Next
                                                                            If aDic.Get(PdfName.FS) Is Nothing Then
                                                                                a.Put(PdfName.FS, PdfName.URL)
                                                                            End If
                                                                            Dim pb As PushbuttonField = stamp.AcroFields.GetNewPushbuttonFromField(fldName)
                                                                            Dim fld As PdfFormField = pb.Field
                                                                            fld.Action = a
                                                                            stamp.AcroFields.ReplacePushbuttonField(fldName, fld)
                                                                            If Not stamp.AcroFields.Fields(fldName).GetMerged(0).Get(PdfName.A).IsIndirect Then
                                                                                Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetMerged(0).GetAsDict(PdfName.A)
                                                                                stamp.AcroFields.Fields(fldName).GetMerged(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                            End If
                                                                            If Not stamp.AcroFields.Fields(fldName).GetWidget(0).Get(PdfName.A).IsIndirect Then
                                                                                Dim aDic2 As PdfDictionary = stamp.AcroFields.Fields(fldName).GetWidget(0).GetAsDict(PdfName.A)
                                                                                stamp.AcroFields.Fields(fldName).GetWidget(0).Put(PdfName.A, pdfReaderDoc.AddPdfObject(aDic2))
                                                                            End If
                                                                        End If
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE
                                                                    Case Else
                                                                        stamp.AcroFields.SetField(fldName, fdfReaderDoc.GetFieldValue(fldName), True)
                                                                End Select
                                                            Next
                                                            stamp.Writer.CloseStream = False
                                                            fdfReaderDoc.Close()
                                                            stamp.Close()
                                                            pdfReaderDoc.Close()
                                                        End Using
                                                        Session("saved") = mMerged.ToArray()
                                                    End Using
                                                Catch exMerged As Exception
                                                    TimeStampAdd(exMerged, debugMode)
                                                    Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                End Try
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                pageIndex = 0
                                                cmbPercent.SelectedIndex = 3
                                            Case FDFApp.FDFDoc_Class.FDFType.XPDF
                                                addOpenHistoryListItem(fn)
                                                Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                pageIndex = 0
                                                cmbPercent.SelectedIndex = 3
                                            Case Else
                                                Session("output") = Nothing
                                        End Select
                                    End If
                                Case "xdp"
                                    cFDFDoc = cFDFApp.FDFOpenFromFile(fn, True, True)
                                    If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                        fpath = cFDFDoc.FDFGetFile & ""
                                    Else
                                        fpath = ""
                                    End If
                                    Dim cls As New clsPromptDialog
                                    fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                                    If Not String.IsNullOrEmpty(fpath & "") Then
                                        cFDFDoc.FDFSetFile(fpath & "")
                                        Select Case cFDFDoc.Determine_Type(fpath)
                                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                                addOpenHistoryListItem(fn)
                                                Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                pageIndex = 0
                                                cmbPercent.SelectedIndex = 3
                                            Case FDFApp.FDFDoc_Class.FDFType.XPDF
                                                addOpenHistoryListItem(fn)
                                                Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                pageIndex = 0
                                                cmbPercent.SelectedIndex = 3
                                            Case Else
                                                Session("output") = Nothing
                                        End Select
                                    End If
                                Case "xml"
                                    cFDFDoc = cFDFApp.FDFOpenFromFile(fn, True, True)
                                    If Not String.IsNullOrEmpty(cFDFDoc.FDFGetFile & "") Then
                                        fpath = cFDFDoc.FDFGetFile & ""
                                    Else
                                        fpath = ""
                                    End If
                                    Dim cls As New clsPromptDialog
                                    fpath = cls.ShowDialogFileSelection("Path or URL for the PDF?", fpath & "", "PDF path?", Me)
                                    If Not String.IsNullOrEmpty(fpath & "") Then
                                        cFDFDoc.FDFSetFile(fpath & "")
                                        Select Case cFDFDoc.Determine_Type(fpath)
                                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                                addOpenHistoryListItem(fn)
                                                Session("saved") = cFDFDoc.PDFMergeFDF2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                pageIndex = 0
                                                cmbPercent.SelectedIndex = 3
                                            Case FDFApp.FDFDoc_Class.FDFType.XPDF
                                                addOpenHistoryListItem(fn)
                                                Session("saved") = cFDFDoc.PDFMergeXDP2Buf(fpath & "", False, pdfOwnerPassword & "")
                                                Session("image_undo_history_0") = Session("saved")
                                                Session("output") = Session("saved")
                                                LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                                _cFDFDoc = cFDFDoc
                                                LoadPageList(Me.btnPage, cFDFDoc)
                                                pageIndex = 0
                                                cmbPercent.SelectedIndex = 3
                                            Case Else
                                                Session("output") = Nothing
                                        End Select
                                    End If
                                Case "jpg", "jpeg", "bmp", "gif", "png", "tif", "tiff"
                                    ImportImage(fn, showPrompts)
                                    LoadPDFReaderDoc(pdfOwnerPassword & "", True)
                                Case Else
                                    b = Session("output")
                                    File.WriteAllBytes(fn, b)
                            End Select
GOTO_ENDSELECT:
                            Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                            fldRectangles = getFieldRectangles(True)
                            ignoreClick = True
                            A0_PictureBox2.Visible = True
                            If pnlFields.Visible Then pnlFields.Visible = False
                            A0_PictureBox1.Enabled = True
                            A0_PictureBox2.Enabled = True
                            pageIndex = 0
                        End If
                    Case Else
                        Return
                End Select
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                TimeStampAdd(ex, debugMode)
            Finally
                timerPreventDefaultExpires.Enabled = True
                tm = New System.Text.StringBuilder
                CheckfieldNameExits("", True)
                If Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        If UseIntellegentCaching_Thumnails_ToolStripMenuItem.Checked Then
                            Load_Thumbnails1_Panel(False, True)
                        End If
                    End If
                End If
                Try
                    If Not Session Is Nothing Then
                        If Session.Length > 0 Then
                            _cFDFDoc = cFDFDoc(True)
                        End If
                    End If
                Catch exLoadFDFDoc As Exception
                    TimeStampAdd(exLoadFDFDoc, debugMode)
                End Try
                Try
                    If Not String.IsNullOrEmpty(fpath) And Not Session Is Nothing Then
                        If Session.Length > 0 Then
                            If True = True Then
                                StatusToolStrip("Status: ", True) = "File loaded successfully."
                            End If
                        End If
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            End Try
            StatusToolStrip("Status: ", True) = "Finishing, please wait..."
        Catch exMain1 As Exception
            Me.StatusToolStrip = "File load error: " & exMain1.Message.ToString()
            TimeStampAdd(exMain1, debugMode)
        Finally
            ignoreClick = False
            MenuBar_Enabled = True
            computerMemory()
            Try
                cUserRect.pauseDraw = False
                If Not String.IsNullOrEmpty(fpath) And Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        cUserRect.pauseDraw = False
                        StatusToolStrip("Status: ", True) = "File loaded successfully."
                        Me.ToolStripStatusLabel2.Text = (fpath & "").ToString()
                        A0_LoadPDF_Properties()
                    Else
                        StatusToolStrip("Error: ", True) = "File not loaded."
                    End If
                Else
                    StatusToolStrip("Error: ", True) = "File not loaded."
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
                StatusToolStrip("Error: ", True) = "File not loaded."
            End Try
        End Try
    End Sub
    Private Sub btnPDFField_Dimensions_Vertical_Alignment_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPDFField_Dimensions_Vertical_Alignment.Click
        Try
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If PDFField_Dimensions_Paste_0_Left_llx.Checked And PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                PDFField_Dimensions_Paste_0_Left_llx.Checked = False
                PDFField_Dimensions_Paste_2_Right_urx.Checked = False
            Else
                PDFField_Dimensions_Paste_0_Left_llx.Checked = True
                PDFField_Dimensions_Paste_2_Right_urx.Checked = True
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub btnPDFField_Dimensions_Horizontal_Alignment_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPDFField_Dimensions_Horizontal_Alignment.Click
        Try
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If PDFField_Dimensions_Paste_1_Bottom_lly.Checked And PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                PDFField_Dimensions_Paste_1_Bottom_lly.Checked = False
                PDFField_Dimensions_Paste_3_Top_ury.Checked = False
            Else
                PDFField_Dimensions_Paste_1_Bottom_lly.Checked = True
                PDFField_Dimensions_Paste_3_Top_ury.Checked = True
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub ComboBox_SortItems_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_SortItems.CheckedChanged
        Try
            If (ComboBox_Original_Items.Count <= 0 Or ComboBox_Original_Items Is Nothing) And ComboBox_ItemDisplay.Items.Count > 0 Then
                If ComboBox_ItemDisplay.Items.Count = ComboBox_ItemValue.Items.Count Then
                    For itm As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                        ComboBox_Original_Items.Add(ComboBox_ItemDisplay.Items(itm) & "", ComboBox_ItemValue.Items(itm) & "")
                    Next
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            btnComboBox_ItemDefault.Text = ""
            Dim selItems As New Dictionary(Of String, String)
            If ComboBox_SortItems.Checked Then
                If ComboBox_ItemDisplay.Items.Count > 0 Then
                    If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
                        btnComboBox_ItemDefault.Text = ""
                        For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                            If ComboBox_ItemDisplay.SelectedItems.Contains(ComboBox_ItemDisplay.Items(i).ToString & "") Then
                                selItems.Add(ComboBox_ItemDisplay.Items(i).ToString, ComboBox_ItemValue.Items(i).ToString)
                                Exit For
                            End If
                        Next
                    Else
                        btnComboBox_ItemDefault.Text = ""
                        If Not String.IsNullOrEmpty(ComboBox_ItemDisplay.SelectedItem.ToString & "") And Not String.IsNullOrEmpty(ComboBox_ItemValue.SelectedItem.ToString & "") Then
                            selItems.Add(ComboBox_ItemDisplay.SelectedItem.ToString, ComboBox_ItemValue.SelectedItem.ToString)
                        End If
                    End If
                    Dim lstDisplayValDic As New SortedDictionary(Of String, String)
                    Dim lstDisplayValDicNew As New Dictionary(Of String, String)
                    For strItemIdx As Integer = 0 To ComboBox_Original_Items.Count - 1
                        lstDisplayValDic.Add(ComboBox_Original_Items.Keys(strItemIdx).ToString & "", ComboBox_Original_Items.Values(strItemIdx).ToString & "")
                    Next
                    ComboBox_ItemDisplay.Items.Clear()
                    ComboBox_ItemValue.Items.Clear()
                    For Each kvp As KeyValuePair(Of String, String) In lstDisplayValDic
                        lstDisplayValDicNew.Add(kvp.Key, kvp.Value)
                        ComboBox_ItemDisplay.Items.Add(kvp.Key & "")
                        ComboBox_ItemValue.Items.Add(kvp.Value & "")
                    Next kvp
                    If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
                        btnComboBox_ItemDefault.Text = ""
                        ComboBox_ItemDisplay.SelectedItems.Clear()
                        For item As Integer = 0 To selItems.Count - 1
                            If Not ComboBox_ItemDisplay.SelectedItems.Contains(selItems.Keys(item).ToString & "") Then
                                ComboBox_ItemDisplay.SelectedItems.Add(selItems.Keys(item).ToString & "")
                            End If
                            If Not ComboBox_ItemValue.SelectedItems.Contains(selItems.Keys(item).ToString & "") Then
                                ComboBox_ItemValue.SelectedItems.Add(selItems.Values(item).ToString & "")
                            End If
                            If String.IsNullOrEmpty(btnComboBox_ItemDefault.Text & "") Then
                                btnComboBox_ItemDefault.Text = item.ToString & "" & ","
                            Else
                                btnComboBox_ItemDefault.Text &= item.ToString & ","
                            End If
                        Next
                    Else
                        btnComboBox_ItemDefault.Text = ""
                        ComboBox_ItemDisplay.SelectedItems.Clear()
                        If selItems.Count = 1 Then
                            ComboBox_ItemDisplay.SelectedItem = selItems.Keys(0).ToString & ""
                            btnComboBox_ItemDefault.Text = selItems.Keys(0).ToString & ""
                        End If
                    End If
                End If
            Else
                If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
                    btnComboBox_ItemDefault.Text = ""
                    For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                        If ComboBox_ItemDisplay.SelectedItems.Contains(ComboBox_ItemDisplay.Items(i).ToString & "") Then
                            selItems.Add(ComboBox_ItemDisplay.Items(i).ToString, ComboBox_ItemValue.Items(i).ToString)
                            Exit For
                        End If
                    Next
                Else
                    btnComboBox_ItemDefault.Text = ""
                    If Not String.IsNullOrEmpty(ComboBox_ItemDisplay.SelectedItem.ToString & "") And Not String.IsNullOrEmpty(ComboBox_ItemValue.SelectedItem.ToString & "") Then
                        selItems.Add(ComboBox_ItemDisplay.SelectedItem.ToString, ComboBox_ItemValue.SelectedItem.ToString)
                    End If
                End If
                ComboBox_ItemDisplay.Items.Clear()
                ComboBox_ItemValue.Items.Clear()
                For itmIdx As Integer = 0 To ComboBox_Original_Items.Count - 1
                    ComboBox_ItemDisplay.Items.Add(ComboBox_Original_Items.Keys(itmIdx) & "")
                    ComboBox_ItemValue.Items.Add(ComboBox_Original_Items.Values(itmIdx) & "")
                Next
            End If
            If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
                ComboBox_ItemDisplay.SelectedItems.Clear()
                For item As Integer = 0 To selItems.Count - 1
                    If Not ComboBox_ItemDisplay.SelectedItems.Contains(selItems.Keys(item).ToString & "") Then
                        ComboBox_ItemDisplay.SelectedItems.Add(selItems.Keys(item).ToString & "")
                    End If
                    If Not ComboBox_ItemValue.SelectedItems.Contains(selItems.Keys(item).ToString & "") Then
                        ComboBox_ItemValue.SelectedItems.Add(selItems.Values(item).ToString & "")
                    End If
                Next
            Else
                ComboBox_ItemDisplay.SelectedItems.Clear()
                For item As Integer = 0 To selItems.Count - 1
                    If Not ComboBox_ItemDisplay.SelectedItems.Contains(selItems.Keys(item).ToString & "") Then
                        ComboBox_ItemDisplay.SelectedItems.Add(selItems.Keys(item).ToString & "")
                    End If
                    If Not ComboBox_ItemValue.SelectedItems.Contains(selItems.Keys(item).ToString & "") Then
                        ComboBox_ItemValue.SelectedItems.Add(selItems.Values(item).ToString & "")
                    End If
                Next
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub ListBox_Options_Sort_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox_Options_Sort.CheckedChanged
        Try
            If (ComboBox_Original_Items.Count <= 0 Or ComboBox_Original_Items Is Nothing) And ComboBox_ItemDisplay.Items.Count > 0 Then
                If ComboBox_ItemDisplay.Items.Count = ComboBox_ItemValue.Items.Count Then
                    For itm As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                        ComboBox_Original_Items.Add(ComboBox_ItemDisplay.Items(itm) & "", ComboBox_ItemValue.Items(itm) & "")
                    Next
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            btnComboBox_ItemDefault.Text = ""
            Dim selItems As New Dictionary(Of String, String)
            If ListBox_Options_Sort.Checked Then
                If ComboBox_ItemDisplay.Items.Count > 0 Then
                    If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
                        btnComboBox_ItemDefault.Text = ""
                        For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                            If ComboBox_ItemDisplay.SelectedItems.Contains(ComboBox_ItemDisplay.Items(i).ToString & "") Then
                                selItems.Add(ComboBox_ItemDisplay.Items(i).ToString, ComboBox_ItemValue.Items(i).ToString)
                            End If
                        Next
                    Else
                        btnComboBox_ItemDefault.Text = ""
                        If Not String.IsNullOrEmpty(ComboBox_ItemDisplay.SelectedItem.ToString & "") And Not String.IsNullOrEmpty(ComboBox_ItemValue.SelectedItem.ToString & "") Then
                            selItems.Add(ComboBox_ItemDisplay.SelectedItem.ToString, ComboBox_ItemValue.SelectedItem.ToString)
                        End If
                    End If
                    Dim lstDisplayValDic As New SortedDictionary(Of String, String)
                    Dim lstDisplayValDicNew As New Dictionary(Of String, String)
                    For strItemIdx As Integer = 0 To ComboBox_Original_Items.Count - 1
                        lstDisplayValDic.Add(ComboBox_Original_Items.Keys(strItemIdx).ToString & "", ComboBox_Original_Items.Values(strItemIdx).ToString & "")
                    Next
                    ComboBox_ItemDisplay.Items.Clear()
                    ComboBox_ItemValue.Items.Clear()
                    For Each kvp As KeyValuePair(Of String, String) In lstDisplayValDic
                        lstDisplayValDicNew.Add(kvp.Key, kvp.Value)
                        ComboBox_ItemDisplay.Items.Add(kvp.Key & "")
                        ComboBox_ItemValue.Items.Add(kvp.Value & "")
                    Next kvp
                    If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
                        btnComboBox_ItemDefault.Text = ""
                        ComboBox_ItemDisplay.SelectedItems.Clear()
                        For item As Integer = 0 To selItems.Count - 1
                            If Not ComboBox_ItemDisplay.SelectedItems.Contains(selItems.Keys(item).ToString & "") Then
                                ComboBox_ItemDisplay.SelectedItems.Add(selItems.Keys(item).ToString & "")
                            End If
                            If Not ComboBox_ItemValue.SelectedItems.Contains(selItems.Keys(item).ToString & "") Then
                                ComboBox_ItemValue.SelectedItems.Add(selItems.Values(item).ToString & "")
                            End If
                            If String.IsNullOrEmpty(btnComboBox_ItemDefault.Text & "") Then
                                btnComboBox_ItemDefault.Text = item.ToString & "" & ","
                            Else
                                btnComboBox_ItemDefault.Text &= item.ToString & ","
                            End If
                        Next
                    Else
                        btnComboBox_ItemDefault.Text = ""
                        ComboBox_ItemDisplay.SelectedItems.Clear()
                        If selItems.Count = 1 Then
                            ComboBox_ItemDisplay.SelectedItem = selItems.Keys(0).ToString & ""
                            btnComboBox_ItemDefault.Text = selItems.Keys(0).ToString & ""
                        End If
                    End If
                End If
            Else
                If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
                    btnComboBox_ItemDefault.Text = ""
                    For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                        If ComboBox_ItemDisplay.SelectedItems.Contains(ComboBox_ItemDisplay.Items(i).ToString & "") Then
                            selItems.Add(ComboBox_ItemDisplay.Items(i).ToString, ComboBox_ItemValue.Items(i).ToString)
                        End If
                    Next
                Else
                    btnComboBox_ItemDefault.Text = ""
                    If Not String.IsNullOrEmpty(ComboBox_ItemDisplay.SelectedItem.ToString & "") And Not String.IsNullOrEmpty(ComboBox_ItemValue.SelectedItem.ToString & "") Then
                        selItems.Add(ComboBox_ItemDisplay.SelectedItem.ToString, ComboBox_ItemValue.SelectedItem.ToString)
                    End If
                End If
                ComboBox_ItemDisplay.Items.Clear()
                ComboBox_ItemValue.Items.Clear()
                For itmIdx As Integer = 0 To ComboBox_Original_Items.Count - 1
                    ComboBox_ItemDisplay.Items.Add(ComboBox_Original_Items.Keys(itmIdx) & "")
                    ComboBox_ItemValue.Items.Add(ComboBox_Original_Items.Values(itmIdx) & "")
                Next
            End If
            If ComboBox_ItemDisplay.SelectionMode = SelectionMode.MultiSimple Then
                btnComboBox_ItemDefault.Text = ""
                ComboBox_ItemDisplay.SelectedItems.Clear()
                For item As Integer = 0 To selItems.Count - 1
                    If Not ComboBox_ItemDisplay.SelectedItems.Contains(selItems.Keys(item).ToString & "") Then
                        ComboBox_ItemDisplay.SelectedItems.Add(selItems.Keys(item).ToString & "")
                    End If
                    If Not ComboBox_ItemValue.SelectedItems.Contains(selItems.Keys(item).ToString & "") Then
                        ComboBox_ItemValue.SelectedItems.Add(selItems.Values(item).ToString & "")
                    End If
                    If String.IsNullOrEmpty(btnComboBox_ItemDefault.Text & "") Then
                        btnComboBox_ItemDefault.Text = item.ToString & "" & ","
                    Else
                        btnComboBox_ItemDefault.Text &= item.ToString & ","
                    End If
                Next
            Else
                btnComboBox_ItemDefault.Text = ""
                ComboBox_ItemDisplay.SelectedItems.Clear()
                If selItems.Count = 1 Then
                    ComboBox_ItemDisplay.SelectedItem = selItems.Keys(0).ToString & ""
                    btnComboBox_ItemDefault.Text = selItems.Keys(0).ToString & ""
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub cmbPercent_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbPercent.SelectedIndexChanged
        'If Session Is Nothing Then Return
        'If Session.Length <= 0 Then Return
        'Try
        '    clearImageCacheHistory()
        '    PictureBox1_Panel.Focus()
        '    tmpPercent = Nothing
        '    tmpPercent = getPercent()
        'Catch ex As Exception
        '    cmbPercent.Text = "100%"
        '    tmpPercent = 1.0F
        '    TimeStampAdd(ex, debugMode)
        'End Try
        'If Not cUserRect.pauseDraw Then
        '    A0_FireRefresh(Me, New EventArgs())
        'End If
        If Session Is Nothing Then Return
        If Session.Length <= 0 Then Return
        'If cUserRect.pauseDraw Then Return
        Try
            clearImageCacheHistory()
            PictureBox1_Panel.Focus()
            tmpPercent = Nothing
            tmpPercent = getPercent()
        Catch ex As Exception
            cmbPercent.Text = "100%"
            tmpPercent = 1.0F
            TimeStampAdd(ex, debugMode)
        End Try
        If Not cUserRect.pauseDraw Then
            A0_FireRefresh(Me, New EventArgs())
        End If
    End Sub
    Private Sub cmbPercent_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmbPercent.TextChanged
    End Sub
    Private Sub PictureBox1_Panel_MouseWheel(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles PictureBox1_Panel.MouseWheel
        Try
            If pnlFields.Visible Then
                PnlFields_Position(False, True)
            End If
            Try
                A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage
                A0_PictureBox2.SizeMode = PictureBoxSizeMode.CenterImage
                A0_PictureBox2.Width = A0_PictureBox1.Width
                A0_PictureBox2.Height = A0_PictureBox1.Height
                A0_PictureBox2.Enabled = A0_PictureBox1.Enabled
                A0_PictureBox2.Visible = A0_PictureBox1.Visible
                A0_PictureBox2.Parent = A0_PictureBox1
                PictureBox1_Panel.Focus()
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        Catch exPosition As Exception
            TimeStampAdd(exPosition, debugMode)
        End Try
        Try
            If AutoScrollPages = False Then
                scrollValue = scrollValue - e.Delta
                If scrollValue < 0 Then
                    scrollValue = 0
                ElseIf PictureBox1_Panel.VerticalScroll.Value > PictureBox1_Panel.VerticalScroll.Maximum Then
                    scrollValue = PictureBox1_Panel.VerticalScroll.Maximum
                End If
                If PictureBox1_Panel.VerticalScroll.Value < 0 Then 'And e.Delta > 0 
                    'PictureBox1_Panel.VerticalScroll.Value = 0
                    scrollValue = 0
                ElseIf PictureBox1_Panel.VerticalScroll.Value > PictureBox1_Panel.VerticalScroll.Maximum Then 'And e.Delta < 0 
                    'PictureBox1_Panel.VerticalScroll.Value = PictureBox1_Panel.VerticalScroll.Maximum
                    scrollValue = PictureBox1_Panel.VerticalScroll.Maximum
                Else
                    ''PictureBox1_Panel.VerticalScroll.Value = scrollValue
                End If
                Return
            Else

            End If
            If PictureBox1_Panel.VerticalScroll.Value + PictureBox1_Panel.Height >= (A0_PictureBox1.Height) And e.Delta < 0 Then
                If pageIndex <= btnPage.Items.Count - 2 Then
                    'PictureBox1_Panel.VerticalScroll.Value = 0
                    pageIndex = page
                End If
            ElseIf PictureBox1_Panel.VerticalScroll.Value <= 0 And e.Delta > 0 Then
                If pageIndex > 0 Then
                    'PictureBox1_Panel.VerticalScroll.Value = 0
                    pageIndex = pageIndex - 1
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub PnlFields_Position(Optional ByVal forceUpdate As Boolean = False, Optional ByVal pnlVisible As Boolean = Nothing)
        Try
            ToolStripStatusLabel2.Visible = True
            If chkLockPnlFields.Checked = False And Not forceUpdate Then
                Return
            End If
            Dim rectScreen As System.Drawing.RectangleF = cUserRect.rectScreen
            Dim rectPnlFields As New System.Drawing.RectangleF(pnlFields.Left, pnlFields.Top + PictureBox1_Panel.VerticalScroll.Value, pnlFields.Width, pnlFields.Height)
            Dim continuePnlFieldsVisible As Boolean = False
            If Not pnlVisible = Nothing Then
                If pnlVisible = True Then
                    continuePnlFieldsVisible = True
                ElseIf pnlFields.Visible Then
                    continuePnlFieldsVisible = True
                End If
            ElseIf pnlFields.Visible Then
                continuePnlFieldsVisible = True
            End If
            If continuePnlFieldsVisible = True Then
                If Me.Width >= A0_PictureBox1.Width + pnlFields.Width + 10 Then
                    pnlFields.Top = 10
                    pnlFields.Left = A0_PictureBox1.Width + 10
                Else
                    pnlFields.Top = 10
                    pnlFields.Left = 10
                    rectPnlFields = New System.Drawing.RectangleF(pnlFields.Left, pnlFields.Top + PictureBox1_Panel.VerticalScroll.Value, pnlFields.Width, pnlFields.Height)
                    If rectPnlFields.IntersectsWith(rectScreen) Or rectScreen.IntersectsWith(rectPnlFields) And chkLockPnlFields.Checked Then
                        If Me.Height >= rectScreen.Bottom + rectPnlFields.Height + 10 - PictureBox1_Panel.VerticalScroll.Value Then
                            pnlFields.Top = rectScreen.Bottom + 10 - PictureBox1_Panel.VerticalScroll.Value
                            If Me.Width >= rectScreen.Right - pnlFields.Width And rectScreen.Right - pnlFields.Width >= 0 Then
                                pnlFields.Left = rectScreen.Right - pnlFields.Width
                            End If
                        ElseIf rectScreen.Top - 10 - rectPnlFields.Height - PictureBox1_Panel.VerticalScroll.Value >= 0 Then
                            pnlFields.Top = rectScreen.Top - 10 - rectPnlFields.Height - PictureBox1_Panel.VerticalScroll.Value
                            Dim lpb As Integer = A0_PictureBox1.Left
                            If Me.Width >= rectScreen.Right - pnlFields.Width And rectScreen.Right - pnlFields.Width >= 0 Then
                                pnlFields.Left = rectScreen.Right - pnlFields.Width
                            End If
                        End If
                    End If
                    rectPnlFields = New System.Drawing.RectangleF(pnlFields.Left, pnlFields.Top + PictureBox1_Panel.VerticalScroll.Value, pnlFields.Width, pnlFields.Height)
                    If rectPnlFields.IntersectsWith(rectScreen) Or rectScreen.IntersectsWith(rectPnlFields) And chkLockPnlFields.Checked Then
                        If Me.Width >= rectScreen.Right - pnlFields.Width And rectScreen.Right - pnlFields.Width >= 0 Then
                            pnlFields.Left = rectScreen.Right - pnlFields.Width
                        ElseIf rectScreen.Left - rectPnlFields.Width - 10 >= 0 Then
                            pnlFields.Left = rectScreen.Left - rectPnlFields.Width - 10
                        ElseIf Me.Width >= rectScreen.Right + rectPnlFields.Width + 10 Then
                            pnlFields.Left = rectScreen.Right + 10
                        End If
                    End If
                    rectPnlFields = New System.Drawing.RectangleF(pnlFields.Left, pnlFields.Top + PictureBox1_Panel.VerticalScroll.Value, pnlFields.Width, pnlFields.Height)
                    If rectPnlFields.IntersectsWith(rectScreen) Or rectScreen.IntersectsWith(rectPnlFields) Then
                    End If
                    rectPnlFields = New System.Drawing.RectangleF(pnlFields.Left, pnlFields.Top + PictureBox1_Panel.VerticalScroll.Value, pnlFields.Width, pnlFields.Height)
                End If
                rectScreen = New System.Drawing.RectangleF((cUserRect.rect.Left) * getPercent(), ((cUserRect.rect.Top) * getPercent()), (cUserRect.rect.Width) * getPercent(), (cUserRect.rect.Height) * getPercent())
                rectPnlFields = New System.Drawing.RectangleF(pnlFields.Left, pnlFields.Top + PictureBox1_Panel.VerticalScroll.Value, pnlFields.Width, pnlFields.Height)
GOTO_SHOWPNL:
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not pnlVisible = Nothing Then
                If cUserRect.rect = Nothing Then
                    pnlFields.Visible = False
                Else
                    pnlFields.Visible = pnlVisible
                End If
            Else
            End If

        End Try
    End Sub
    Private Sub PictureBox1_Panel_Scroll(ByVal sender As Object, ByVal e As System.Windows.Forms.ScrollEventArgs) Handles PictureBox1_Panel.Scroll
        PnlFields_Position(False, True)
        Try
            A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.Width = A0_PictureBox1.Width
            A0_PictureBox2.Height = A0_PictureBox1.Height
            A0_PictureBox2.Enabled = A0_PictureBox1.Enabled
            A0_PictureBox2.Visible = A0_PictureBox1.Visible
            A0_PictureBox2.Parent = A0_PictureBox1
            PictureBox1_Panel.Focus()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            'scrollValue = PictureBox1_Panel.VerticalScroll.Value
        End Try
    End Sub
    Public Function getBytes(ByVal str As String) As Byte()
        If String.IsNullOrEmpty(str & "") Then Return Nothing
        Return System.Text.Encoding.ASCII.GetBytes(str)
    End Function
    Public Function getBytes(ByVal str As Stream) As Byte()
        If str Is Nothing Then Return Nothing
        If str.Length <= 0 Then Return Nothing
        If str.CanSeek Then
            str.Seek(0, SeekOrigin.Begin)
        End If
        Dim b(str.Length) As Byte
        str.Read(b, 0, b.Length)
        If str.CanSeek Then
            str.Seek(0, SeekOrigin.Begin)
        End If
        Return b
    End Function
    Public Function EncryptPDFDocument(ByVal PDFData() As Byte, Optional ByVal pdfVersion As String = Nothing) As Byte()
        Try
            If frmSecurityPassword Is Nothing Then
                frmSecurityPassword = New dialogSecurityPassword(Me)
            End If
            Return frmSecurityPassword.EncryptPDFDocument(PDFData, pdfVersion)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Sub LoadPDFEncryptionPanel(ByVal pdfBytes As Byte(), Optional ByVal Panel_Visibility As Boolean = True)
        Try
            If frmSecurityPassword Is Nothing Then
                frmSecurityPassword = New dialogSecurityPassword(Me)
            End If
            frmSecurityPassword.LoadPDFEncryptionPanel(pdfBytes, Panel_Visibility)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub ClearPDFEncryptionPanel(Optional ByVal blnClearOwnerPw As Boolean = True, Optional ByVal blnClearOwnerPwVariable As Boolean = False)
        Try
            If frmSecurityPassword Is Nothing Then
                frmSecurityPassword = New dialogSecurityPassword(Me)
            End If
            frmSecurityPassword.ClearPDFEncryptionPanel(blnClearOwnerPw, blnClearOwnerPwVariable)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function UnlockSecurePDF(ByVal pdfBytes() As Byte) As Byte()
        Dim reader As PdfReader = Nothing
        Dim stamper As PdfStamper = Nothing
        Dim strModified As New System.IO.MemoryStream
        Try
            If pdfBytes Is Nothing Then
                Return Nothing
            ElseIf pdfBytes.Length <= 0 Then
                Return pdfBytes
            End If
            Try
                If Not String.IsNullOrEmpty(pdfOwnerPassword & "") Then
                    PdfReader.unethicalreading = True
                    reader = New PdfReader(pdfBytes, getBytes(pdfOwnerPassword & ""))
                    reader.encrypted = False
                Else
                    PdfReader.unethicalreading = True
                    reader = New PdfReader(pdfBytes)
                    reader.encrypted = False
                End If
            Catch badPassword As iTextSharp.text.exceptions.BadPasswordException
TRYAGAIN:
                Dim userOrOwnerPw As String = New clsPromptDialog().ShowDialog("The document appears to be double-encrypted with an open AND a modify password." & Environment.NewLine & Environment.NewLine & "Please type either the ""Open"" OR the ""Modify"" password in the textbox:", "Double Encryption: Error", Me, "", "FORCE UNLOCK")
                Try
                    If String.IsNullOrEmpty(userOrOwnerPw & "") Then
                        Return Nothing
                    End If
                    PdfReader.unethicalreading = True
                    reader = New PdfReader(pdfBytes, getBytes(userOrOwnerPw & ""))
                    reader.encrypted = False
                Catch ex2 As iTextSharp.text.exceptions.BadPasswordException
                    Return Nothing
                Finally
                End Try
            End Try
            If Not reader Is Nothing Then
                If reader.HasUsageRights Then
                    reader.RemoveUsageRights()
                End If
            End If
            stamper = getStamper(reader, strModified)
            stamper.CreateXmpMetadata()
            stamper.Writer.CloseStream = False
            stamper.Close()
            reader.Close()
            reader.Dispose()
            Return strModified.ToArray()
        Catch ex As Exception
            If Not stamper Is Nothing Then
                stamper.Writer.CloseStream = False
                stamper.Close()
            End If
            Throw ex
        Finally
            PdfReader.unethicalreading = False
        End Try
        Return pdfBytes
    End Function
    Public Function GetDecryptedPDFBytes(ByVal pdfBytes() As Byte) As Byte()
        Dim reader As PdfReader = Nothing
        Try
            PdfReader.unethicalreading = True
            If Not String.IsNullOrEmpty(pdfOwnerPassword & "") Then
                reader = New PdfReader(Session, getBytes(pdfOwnerPassword & ""))
            Else
                reader = New PdfReader(Session)
            End If
            reader.encrypted = False
            Dim strModified As New System.IO.MemoryStream
            Dim stamper As PdfStamper = getStamper(reader, strModified)
            stamper.CreateXmpMetadata()
            stamper.Writer.CloseStream = False
            stamper.Close()
            Return strModified.ToArray()
        Catch ex As Exception
            Throw ex
        Finally
            PdfReader.unethicalreading = False
        End Try
        Return pdfBytes
    End Function
    Private Sub PictureBox1_Panel_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles PictureBox1_Panel.Paint
    End Sub
    Private Sub ITEXTInActionToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ITEXTInActionToolStripMenuItem.Click
        Process.Start("https://www.google.com/search?q=iText+in+Action-2nd-Edition")
    End Sub
    Private Sub btnOpenPDF_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnOpenPDF.Click
    End Sub
    Private Sub UnlockPDFToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    End Sub
    Private Sub NewDocumentToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        preventClickDialog = True
        OpenFileDialog1.InitialDirectory = ApplicationDataFolder(False, "")
        OpenFileDialog1.Filter = "PDF|*.pdf|All Files|*.*"
        OpenFileDialog1.AutoUpgradeEnabled = True
        OpenFileDialog1.DefaultExt = ".pdf"
        OpenFileDialog1.FilterIndex = 1
        OpenFileDialog1.Title = "Open Document"
        OpenFileDialog1.ValidateNames = True
        Dim fn As String = ""
        Try
            If Not String.IsNullOrEmpty(fpath) Then
                If FileExists(fpath) Then
                    OpenFileDialog1.InitialDirectory = Path.GetDirectoryName(fpath & "")
                    OpenFileDialog1.FileName = Path.GetFileName(fpath & "")
                End If
            End If
            Select Case OpenFileDialog1.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    fn = OpenFileDialog1.FileName & ""
GOTO_KNOWN_FILENAME:
                    If Not String.IsNullOrEmpty(fn) Then
                        Dim b() As Byte = Nothing
                        _outputIndex = 0
                        mem.Clear()
                        Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                            Case "pdf"
                                Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                                Try
                                    Select Case MsgBox("Unlock this PDF security?" & Environment.NewLine & "Note:  This will not unlock forms with a user AND an owner password.", MsgBoxStyle.Question + MsgBoxStyle.YesNoCancel + MsgBoxStyle.ApplicationModal, "Info: Unlock PDF Security?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            ClearPDFEncryptionPanel(True, True)
                                            Dim strModified As New System.IO.MemoryStream(UnlockSecurePDF(File.ReadAllBytes(fn)))
                                            Session = strModified.ToArray()
                                            LoadPDFEncryptionPanel(Session, False)
                                            MsgBox("The PDF security was successfully reset!", MsgBoxStyle.OkOnly + MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal, "Password Reset")
                                            Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                                            LoadPDFReaderDoc(pdfOwnerPassword.ToString, True)
                                            fldRectangles = getFieldRectangles(True)
                                            LoadPageList(Me.btnPage, cFDFDoc)
                                            pageIndex = 0
                                            A0_LoadPDF(True)
                                            ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                            A0_PictureBox1.Enabled = True
                                            A0_PictureBox2.Enabled = True
                                            Return
                                        Case Else
                                            Return
                                    End Select
                                Catch ex As Exception
                                    Throw ex
                                    Return
                                Finally
                                    PdfReader.unethicalreading = False
                                End Try
                            Case Else
                                Return
                        End Select
                    End If
                Case Else
                    Return
            End Select
        Catch ex As Exception
            Throw ex
        Finally
            timerPreventDefaultExpires.Enabled = True
        End Try
    End Sub
    Private Sub ContextMenuStrip1_Closing(ByVal sender As Object, ByVal e As System.Windows.Forms.ToolStripDropDownClosingEventArgs) Handles ContextMenuStrip1.Closing
        Try
            ToolStripStatusLabel2.Text = ""
            If fpath = "" Then Return
            If FileExists(fpath & "") Then ToolStripStatusLabel2.Text = fpath & ""
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub ContextMenuStrip1_MouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles ContextMenuStrip1.MouseClick
    End Sub
    Private Sub ContextMenuStrip1_Opened(ByVal sender As Object, ByVal e As System.EventArgs) Handles ContextMenuStrip1.Opened
        Try
            If ContextMenuStrip1.Visible = False Then Return
            FieldsBrowserToolStripMenuItem.Visible = False
            DataSourceBrowserToolStripMenuItem.Visible = False
            ThisDocumentToolStripMenuItem1.Visible = False
            If Session Is Nothing Then
                PDFDocumentToolStripMenuItem.Visible = False
                SplitIntoMultiplePDFFilesToolStripMenuItem.Visible = False
                AppendPagesFromDirectoryToolStripMenuItem.Visible = False
                SelectPageRangeToolStripMenuItem.Visible = False
                ExtractImagesToolStripMenuItem.Visible = False
                RotatePageToolStripMenuItem.Visible = False
                FlattenFormFieldsToolStripMenuItem.Visible = False
                CleanUpFormFieldsToolStripMenuItem.Visible = False
                OptimizeImagesToolStripMenuItem.Visible = False
                MassPopulateToolStripMenuItem.Visible = False
                ViewToolStripMenuItem.Visible = False
                OpenContainingFolderToolStripMenuItem.Visible = False
                RefreshreopenToolStripMenuItem.Visible = False
                SaveToolStripMenuItem.Visible = False
                SaveRawSessionToolStripMenuItem.Visible = False
                SaveAsToolStripMenuItem.Visible = False
                CloseToolStripMenuItem.Visible = False
                PDFEncryptionToolStripMenuItem.Visible = False
                OpenWithToolStripMenuItem.Visible = False
                ImportDataToolStripMenuItem.Visible = False
                RemoveUnusedObjectsToolStripMenuItem.Visible = False
                ImportDataToolStripMenuItem.Visible = False
                CompressDocumentToolStripMenuItem.Visible = False
                PreviewWithToolStripMenuItem.Visible = False
                PageSizeToolStripMenuItem.Visible = False
                FieldTabOrderToolStripMenuItem.Visible = False
                FieldCalculationOrderToolStripMenuItem.Visible = False
                RemovePDFUsageRightsToolStripMenuItem.Visible = False
                EmailDocumentToolStripMenuItem.Visible = False
                CreateHTMLFormToolStripMenuItem.Visible = False
                ToolStripSeparator1.Visible = False
                ToolStripSeparator3.Visible = False
                ToolStripSeparator4.Visible = False
                InsertImageOverPageToolStripMenuItem.Visible = False
                InsertImageUnderPageToolStripMenuItem.Visible = False
                ReplaceCurrentPageToolStripMenuItem.Visible = False
                RemoveCurrentPageToolStripMenuItem.Visible = False
                RemoveAllPagesExceptThisOneToolStripMenuItem.Visible = False
                PrintDocumentToolStripMenuItem.Visible = False
                PropertiesToolStripMenuItem.Visible = False
                RemoveSignatureFlagsToolStripMenuItem.Visible = False
            ElseIf Session.Length <= 0 Then
                PDFDocumentToolStripMenuItem.Visible = False
                SplitIntoMultiplePDFFilesToolStripMenuItem.Visible = False
                AppendPagesFromDirectoryToolStripMenuItem.Visible = False
                SelectPageRangeToolStripMenuItem.Visible = False
                ExtractImagesToolStripMenuItem.Visible = False
                RotatePageToolStripMenuItem.Visible = False
                FlattenFormFieldsToolStripMenuItem.Visible = False
                CleanUpFormFieldsToolStripMenuItem.Visible = False
                OptimizeImagesToolStripMenuItem.Visible = False
                MassPopulateToolStripMenuItem.Visible = False
                ViewToolStripMenuItem.Visible = False
                OpenContainingFolderToolStripMenuItem.Visible = False
                RefreshreopenToolStripMenuItem.Visible = False
                SaveToolStripMenuItem.Visible = False
                SaveRawSessionToolStripMenuItem.Visible = False
                SaveAsToolStripMenuItem.Visible = False
                CloseToolStripMenuItem.Visible = False
                PDFEncryptionToolStripMenuItem.Visible = False
                OpenWithToolStripMenuItem.Visible = False
                ImportDataToolStripMenuItem.Visible = False
                RemoveUnusedObjectsToolStripMenuItem.Visible = False
                ImportDataToolStripMenuItem.Visible = False
                CompressDocumentToolStripMenuItem.Visible = False
                PreviewWithToolStripMenuItem.Visible = False
                PageSizeToolStripMenuItem.Visible = False
                FieldTabOrderToolStripMenuItem.Visible = False
                FieldCalculationOrderToolStripMenuItem.Visible = False
                RemovePDFUsageRightsToolStripMenuItem.Visible = False
                EmailDocumentToolStripMenuItem.Visible = False
                CreateHTMLFormToolStripMenuItem.Visible = False
                ToolStripSeparator1.Visible = False
                ToolStripSeparator3.Visible = False
                ToolStripSeparator4.Visible = False
                InsertImageOverPageToolStripMenuItem.Visible = False
                InsertImageUnderPageToolStripMenuItem.Visible = False
                ReplaceCurrentPageToolStripMenuItem.Visible = False
                RemoveCurrentPageToolStripMenuItem.Visible = False
                RemoveAllPagesExceptThisOneToolStripMenuItem.Visible = False
                PrintDocumentToolStripMenuItem.Visible = False
                PropertiesToolStripMenuItem.Visible = False
                RemoveSignatureFlagsToolStripMenuItem.Visible = False
            Else
                PDFDocumentToolStripMenuItem.Visible = True
                SplitIntoMultiplePDFFilesToolStripMenuItem.Visible = True
                AppendPagesFromDirectoryToolStripMenuItem.Visible = True
                SelectPageRangeToolStripMenuItem.Visible = True
                ExtractImagesToolStripMenuItem.Visible = True
                RotatePageToolStripMenuItem.Visible = True
                FlattenFormFieldsToolStripMenuItem.Visible = True
                CleanUpFormFieldsToolStripMenuItem.Visible = True
                OptimizeImagesToolStripMenuItem.Visible = True
                MassPopulateToolStripMenuItem.Visible = True
                ViewToolStripMenuItem.Visible = True
                OpenContainingFolderToolStripMenuItem.Visible = True
                RefreshreopenToolStripMenuItem.Visible = True
                SaveToolStripMenuItem.Visible = True
                SaveRawSessionToolStripMenuItem.Visible = True
                SaveAsToolStripMenuItem.Visible = True
                CloseToolStripMenuItem.Visible = True
                PDFEncryptionToolStripMenuItem.Visible = True
                OpenWithToolStripMenuItem.Visible = True
                ImportDataToolStripMenuItem.Visible = True
                RemoveUnusedObjectsToolStripMenuItem.Visible = True
                ImportDataToolStripMenuItem.Visible = True
                EmailDocumentToolStripMenuItem.Visible = True
                CompressDocumentToolStripMenuItem.Visible = True
                PreviewWithToolStripMenuItem.Visible = True
                PageSizeToolStripMenuItem.Visible = True
                FieldTabOrderToolStripMenuItem.Visible = True
                FieldCalculationOrderToolStripMenuItem.Visible = True
                If HasUsageRights_PDF() Then
                    RemovePDFUsageRightsToolStripMenuItem.Visible = True
                Else
                    RemovePDFUsageRightsToolStripMenuItem.Visible = False
                End If
                CreateHTMLFormToolStripMenuItem.Visible = True
                ToolStripSeparator1.Visible = True
                ToolStripSeparator3.Visible = True
                ToolStripSeparator4.Visible = True
                InsertImageOverPageToolStripMenuItem.Visible = True
                InsertImageUnderPageToolStripMenuItem.Visible = True
                ReplaceCurrentPageToolStripMenuItem.Visible = True
                RemoveCurrentPageToolStripMenuItem.Visible = True
                RemoveAllPagesExceptThisOneToolStripMenuItem.Visible = True
                PrintDocumentToolStripMenuItem.Visible = True
                PropertiesToolStripMenuItem.Visible = True
                RemoveSignatureFlagsToolStripMenuItem.Visible = True
                OpenDocumentToolStripMenuItem.Visible = True
                OpenDocumentToolStripMenuItem.Enabled = True
                FieldsBrowserToolStripMenuItem.Visible = True
                DataSourceBrowserToolStripMenuItem.Visible = True
                ThisDocumentToolStripMenuItem1.Visible = True
            End If
        Catch ex As Exception
            Throw ex
        End Try
        Try
            eventsMouseToolStripMenuItemsLoad()
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub ContextMenuStrip1_Opening(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles ContextMenuStrip1.Opening
    End Sub
    Private Sub ContextMenuStrip1_VisibleChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ContextMenuStrip1.VisibleChanged
    End Sub
    Public Function savedUnsavedWork(Optional ByVal showPrompts As Boolean = True) As Boolean
        Try
            If Not Session("output") Is Nothing Then
                If Session("output").Length > 0 Then
                    If Session("saved") Is Nothing Then
                        GoTo GOTO_SAVE_FILE
                    Else
                        If Session("saved").Length <= 0 Then
                            GoTo GOTO_SAVE_FILE
                        End If
                    End If
                    If Not bytesMatch(Session("saved"), Session("output")) Then
GOTO_SAVE_FILE:
                        Dim p As New dialogMultiChoice(Me)
                        Try
                            If showPrompts Then
                                p.ButtonsClear()
                                p.ButtonAdd("Save", True, Windows.Forms.DialogResult.Yes)
                                p.ButtonAdd("Save As", True, Windows.Forms.DialogResult.No)
                                p.ButtonAdd("Discard", True, Windows.Forms.DialogResult.Abort)
                                p.ButtonAdd("Cancel", True, Windows.Forms.DialogResult.Cancel)
                                Me.SendToBack()
                                Select Case p.ShowDialog(Me, "Save changes to the following file:" & Environment.NewLine & Path.GetFileName(fpath & ""), "SAVE CHANGES:", p.buttons.ToArray())
                                    Case Windows.Forms.DialogResult.Yes
                                        If IsValidUrl(fpath) Then
                                            btnSave_Click(Me, New EventArgs())
                                        ElseIf File.Exists(fpath) Then
                                            btnSave_Click(Me, New EventArgs())
                                        End If
                                        Return True
                                    Case Windows.Forms.DialogResult.No
                                        Return SaveAs()
                                    Case Windows.Forms.DialogResult.Abort
                                        Return True
                                    Case Windows.Forms.DialogResult.Cancel
                                        Return False
                                End Select
                            End If
                            Return True
                        Catch ex As Exception
                            Throw ex
                        Finally
                            p.Close()
                            Me.Show()
                            Me.BringToFront()
                        End Try
                    End If
                End If
            End If
        Catch ex As Exception
            Throw ex
        End Try
        Return True
    End Function
    Private Sub CloseToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CloseToolStripMenuItem.Click
        A0_CloseDocument()
    End Sub
    Public Sub computerMemory()
        Dim info As Microsoft.VisualBasic.Devices.ComputerInfo = New Microsoft.VisualBasic.Devices.ComputerInfo
        Debug.Print("TotalPhysicalMemory: " & CStr(info.TotalPhysicalMemory))
        Debug.Print("TotalVirtualMemory: " & CStr(info.TotalVirtualMemory))
        Debug.Print("AvailablePhysicalMemory: " & CStr(info.AvailablePhysicalMemory))
    End Sub
    Private Declare Function SetProcessWorkingSetSize Lib "kernel32.dll" (ByVal hProcess As IntPtr, ByVal dwMinimumWorkingSetSize As Int32, ByVal dwMaximumWorkingSetSize As Int32) As Int32
    Friend Sub ReleaseMemory()
        Try
            dlgValues = Nothing
            dlg = Nothing
            Try
                A0_PictureBox1.Image = Nothing
                A0_PictureBox2.Image = Nothing
                A0_PictureBox1.Enabled = False
                A0_PictureBox1.Visible = False
                A0_PictureBox2.Image = Nothing
                A0_PictureBox2.Enabled = False
                A0_PictureBox2.Visible = False
                appPath = Nothing
                debugMode = Nothing
                _debugFileName = Nothing
                fpath = Nothing
                ipath = Nothing
                pdfReaderDoc = Nothing
                pdfOwnerPassword = Nothing
                _autoScrollPages = Nothing
                _PreserveUsageRights = Nothing
            Catch exDispose As Exception
                TimeStampAdd(exDispose, debugMode)
            End Try
            Try
                memName = Nothing
                mem = Nothing
                dicColors = Nothing
                iMyCustomColors = Nothing
                dicFieldTypes = Nothing
            Catch exDispose As Exception
                TimeStampAdd(exDispose, debugMode)
            End Try
            Try
                pageSizes = Nothing
                _clickPoints = Nothing
                _dragging = Nothing
                tm = Nothing
                fieldsOnPageList = Nothing
                PuchButton_Options_StateImageList = Nothing
                PuchButton_Options_StateImageListByte = Nothing
                PuchButton_Options_StateLabelList = Nothing
                ComboBox_SortItems_SelectedItems = Nothing
                ComboBox_SortItems_SelectedItemsVals = Nothing
                ComboBox_Original_Items = Nothing
                pictureboxThumb = Nothing
                _copy_Appearance_frmMain = Nothing
                cLinks = Nothing
            Catch exDispose As Exception
                TimeStampAdd(exDispose, debugMode)
            End Try
            Try
                _pdfURI = Nothing
                _pdfData = Nothing
                _fdfData = Nothing
                _outPutType = Nothing
                _flatten = Nothing
                _openPassword = Nothing
                _ownerPassword = Nothing
                _sid = Nothing
                _dimensionsList = Nothing
            Catch exDispose As Exception
                TimeStampAdd(exDispose, debugMode)
            End Try
            Try
                If Not cUserRect Is Nothing Then
                    cUserRect.DisposeMe()
                End If
                cUserRect = Nothing
                If Not cFDFApp Is Nothing Then
                    cFDFApp.Dispose()
                End If
                cFDFApp = Nothing
                If Not _cFDFDoc Is Nothing Then
                    _cFDFDoc.Dispose()
                End If
                _cFDFDoc = Nothing
            Catch exDispose As Exception
                TimeStampAdd(exDispose, debugMode)
            End Try
        Catch ex As Exception
            Throw ex
        Finally
        End Try
    End Sub
    Public Function A0_CloseDocument(Optional ByVal bnlDeleteTempFiles As Boolean = True, Optional ByVal showPrompts As Boolean = True) As Boolean
        cUserRect.pauseDraw = True
        Try
            processCloseAll()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            A0_ClearPanelFieldProperties(-1, True)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not savedUnsavedWork(showPrompts) Then
                Return False
            End If
            dsBrowser = Nothing
            fpath = ""
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            cLinks = Nothing
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not frmSecurityPassword Is Nothing Then
                frmSecurityPassword.blnCloseForm = True
                If frmSecurityPassword.Visible = False Then
                    frmSecurityPassword.Close()
                End If
                frmSecurityPassword = Nothing
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            Session("output") = Nothing
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If bnlDeleteTempFiles Then
                dlgValues.Clear()
                dlgValues = New List(Of String)
                If Not dlg Is Nothing Then
                    If dlg.Visible = True Then
                        dlg.DialogResult = Windows.Forms.DialogResult.Abort
                        dlg.Close()
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not clsPreloadImagesThread Is Nothing Then
                Try
                    clsPreloadImagesThread.clsAlarm.cThreads.StopTimer()
                Catch exStop As Exception
                    TimeStampAdd(exStop, debugMode)
                End Try
                Try
                    clsPreloadImagesThread.StopTimer()
                Catch exStop As Exception
                    TimeStampAdd(exStop, debugMode)
                End Try
                Try
                    clsPreloadImagesThread.Dispose()
                Catch exStop As Exception
                    TimeStampAdd(exStop, debugMode)
                End Try
                Try
                    clsPreloadImagesThread = Nothing
                Catch exStop As Exception
                    TimeStampAdd(exStop, debugMode)
                End Try
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            Load_Thumbnails1_Panel(False)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            A0_PictureBox1.Image = Nothing
            A0_PictureBox2.Image = Nothing
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            A0_ClearPanelFieldProperties()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            ClearPDFEncryptionPanel()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not pdfReaderDoc Is Nothing Then pdfReaderDoc.Close()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            mem.Clear()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not cFDFApp Is Nothing Then
            End If
            If Not cFDFDoc Is Nothing Then
                cFDFDoc.FDFClose()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            fldRectangles = getFieldRectangles(True)
            mMove = False
            DrawImageFieldPositions()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If bnlDeleteTempFiles Then DeleteTempFiles()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If Not fldRectangles Is Nothing Then fldRectangles.Clear()
            A0_PictureBox1.Image = Nothing
            A0_PictureBox2.Image = Nothing
            cUserRect.imgPic = Nothing
            cUserRect.mBmp = Nothing
            cUserRect.mIsClick = False
            mMove = False
            cUserRect.rectBackup = Nothing
            cUserRect.rectOld = Nothing
            cUserRect.rect = Nothing
            cUserRect._highLightFieldName = ""
            cUserRect._rect = Nothing
            A0_PictureBox1.Visible = False
            pnlFields.Hide()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            Me.Text = "PDForms.net"
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            cUserRect.pauseDraw = False
        End Try
        Return True
    End Function
    Private Sub ExitToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExitToolStripMenuItem.Click
        Try
            Me.Close()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub NewDocumentToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NewDocumentToolStripMenuItem1.Click
        Try
            blnModelPopupClose = MsgBoxResult.Ignore
            pnlPageSize_MaintainAspectRatio.Checked = False
            Load_PageSizePanel()
            pnlPageSizeApsectRation_Update()
            pnlPageSize.Show()
            pnlPageSize.BringToFront()
            If modelPopup_DoEvents(blnModelPopupClose) Then
                pnlPageSize.Hide()
            End If
            If blnModelPopupClose <> MsgBoxResult.Ok Then Return
            Dim doc As New iTextSharp.text.Document(pageSizes("CUSTOM"), CSng(Me.pnlPageSize_MarginLeft.Text) + 0, CSng(Me.pnlPageSize_MarginRight.Text) + 0, CSng(Me.pnlPageSize_MarginTop.Text) + 0, CSng(Me.pnlPageSize_MarginBottom.Text) + 0)
            Dim baos As New MemoryStream()
            Dim writer As PdfWriter = PdfWriter.GetInstance(doc, baos)
            writer.SetPdfVersion(New PdfName(PdfWriter.VERSION_1_7))
            writer.CompressionLevel = 0
            writer.CreateXmpMetadata()
            doc.Open()
            Dim canvas As PdfContentByte = writer.DirectContentUnder()
            doc.Add(New Paragraph(" "))
            Try
                writer.CloseStream = False
                doc.Close()
                writer.Close()
            Catch exDoc As Exception
                TimeStampAdd(exDoc, debugMode)
            End Try
            If baos.Length > 0 Then
                fpath = ApplicationDataFolder(False, "temp") & "blank.pdf"
                pdfOwnerPassword = ""
                System.IO.File.WriteAllBytes(fpath, baos.ToArray())
                Session = baos.ToArray()
                writer.Close()
                A0_ClearPanelFieldProperties()
                ClearPDFEncryptionPanel(True, False)
                LoadPDFEncryptionPanel(Session("output"), False)
                addOpenHistoryListItem(fpath)
                loadToolStripMenu_OpenHistoryList()
                LoadPDFReaderDoc(pdfOwnerPassword.ToString, True)
                fldRectangles = getFieldRectangles(True)
                LoadPageList(Me.btnPage, cFDFDoc)
                A0_LoadPDF(True)
                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                A0_PictureBox1.Enabled = True
                A0_PictureBox2.Enabled = True
                A0_PictureBox1.Visible = True
                A0_PictureBox2.Visible = True
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
        End Try
    End Sub
    Private Sub pnlPageSize_CmbPageSize_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_CmbPageSize.SelectedIndexChanged
        Try
            _pnlPageSizeAspectRatioPause = True
            pnlPageSize_MaintainAspectRatio.Checked = False
            For Each k As String In pageSizes.Keys.ToArray()
                Dim pageSizeName As String = (k.ToString().Replace("_", " ").Trim())
                If pageSizeName.ToLower() = pnlPageSize_CmbPageSize.SelectedItem.ToString().ToLower() Then
                    Select Case pnlPageSize_CmbOrientation.SelectedIndex
                        Case 0
                            pnlPageSize_WidthUnit.SelectedIndex = 0
                            pnlPageSize_HeightUnit.SelectedIndex = 0
                            pnlPageSize_Width.Text = pageSizes(k).Width.ToString() & ""
                            pnlPageSize_Height.Text = pageSizes(k).Height.ToString() & ""
                            Return
                        Case Else
                            pnlPageSize_WidthUnit.SelectedIndex = 0
                            pnlPageSize_HeightUnit.SelectedIndex = 0
                            pnlPageSize_Width.Text = pageSizes(k).Height.ToString() & ""
                            pnlPageSize_Height.Text = pageSizes(k).Width.ToString() & ""
                            Return
                    End Select
                End If
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            _pnlPageSizeAspectRatioPause = False
        End Try
    End Sub
    Private Sub ComboBox2_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_CmbOrientation.SelectedIndexChanged
        Try
            _pnlPageSizeAspectRatioPause = True
            pnlPageSize_MaintainAspectRatio.Checked = False
            For Each k As String In pageSizes.Keys.ToArray()
                Dim pageSizeName As String = (k.ToString().Replace("_", " ").Trim())
                If pageSizeName.ToLower() = pnlPageSize_CmbPageSize.SelectedItem.ToString().ToLower() Then
                    Select Case pnlPageSize_CmbOrientation.SelectedIndex
                        Case 0
                            pnlPageSize_WidthUnit.SelectedIndex = 0
                            pnlPageSize_HeightUnit.SelectedIndex = 0
                            pnlPageSize_Width.Text = pageSizes(k).Width.ToString() & ""
                            pnlPageSize_Height.Text = pageSizes(k).Height.ToString() & ""
                            Return
                        Case Else
                            pnlPageSize_WidthUnit.SelectedIndex = 0
                            pnlPageSize_HeightUnit.SelectedIndex = 0
                            pnlPageSize_Width.Text = pageSizes(k).Height.ToString() & ""
                            pnlPageSize_Height.Text = pageSizes(k).Width.ToString() & ""
                            Return
                    End Select
                End If
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            _pnlPageSizeAspectRatioPause = False
        End Try
    End Sub
    Private Sub pnlPageSize_WidthUnit_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_WidthUnit.SelectedIndexChanged
    End Sub
    Private Sub pnlPageSize_HeightUnit_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_HeightUnit.SelectedIndexChanged
    End Sub
    Private Sub pnlPageSize_MarginLeftUnit_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_MarginLeftUnit.SelectedIndexChanged
    End Sub
    Private Sub pnlPageSize_MarginRightUnit_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_MarginRightUnit.SelectedIndexChanged
    End Sub
    Private Sub pnlPageSize_MarginTopUnit_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_MarginTopUnit.SelectedIndexChanged
    End Sub
    Private Sub pnlPageSize_MarginBottomUnit_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_MarginBottomUnit.SelectedIndexChanged
    End Sub
    Public blnModelPopupClose As MsgBoxResult
    Private Sub pnlPageSize_OK_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_OK.Click
        Try
            pageSizes("CUSTOM") = New iTextSharp.text.Rectangle(0, 0, CInt(pnlPageSize_Width.Text) + 0, CInt(pnlPageSize_Height.Text) + 0)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        blnModelPopupClose = MsgBoxResult.Ok
    End Sub
    Private Sub pnlPageSize_Cancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_Cancel.Click
        blnModelPopupClose = MsgBoxResult.Cancel
    End Sub
    Public Function modelPopup_DoEvents(ByRef blnDone As MsgBoxResult) As Boolean
        Do While blnDone = MsgBoxResult.Ignore
            Application.DoEvents()
        Loop
        Return True
    End Function
    Public Function DoUntil_Boolean(ByRef blnValue As Boolean, Optional ByVal blnBreakValue As Boolean = False) As Boolean
        Do Until blnValue = blnBreakValue
            Application.DoEvents()
        Loop
        Return True
    End Function
    Private Function modelPopupFrmSaveAs_DoEvents(ByRef frmSaveAsDialog As frmSaveAs) As Boolean
        Do While frmSaveAsDialog.dialogResult_1 = Windows.Forms.DialogResult.None
            Application.DoEvents()
        Loop
        Return True
    End Function
    Public Function DoEvents_Wait(ByVal WaitTimeMilliseconds As Integer) As Boolean
        Try
            Dim dt As DateTime = DateTime.Now
            Dim dtSave As DateTime = DateTime.Now
            Do While dt <= dtSave.AddMilliseconds(CInt(WaitTimeMilliseconds + 0))
                Application.DoEvents()
                dt = DateTime.Now
            Loop
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return True
    End Function
    Private Function frmImageRotation_DoEvents(ByRef frmImageRot As frmImageRotation, Optional ByVal closeForm As Boolean = True) As System.Drawing.RotateFlipType
        Try
            Do While frmImageRot.CloseForm = False
                Application.DoEvents()
            Loop
            Return frmImageRot.rotType
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If closeForm Then
                frmImageRot.Close()
            Else
                frmImageRot.Hide()
            End If
            Me.Show()
            Me.BringToFront()
        End Try
    End Function
    Private Sub PageSizeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PageSizeToolStripMenuItem.Click
        blnModelPopupClose = MsgBoxResult.Ignore
        pnlPageSize_MaintainAspectRatio.Checked = False
        Try
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    Load_PageSizePanel(pdfReaderDoc.GetPageSizeWithRotation(CInt(pageIndex) + 1), 0, 0, 0, 0)
                Else
                    Load_PageSizePanel()
                End If
            Else
                Load_PageSizePanel()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        pnlPageSizeApsectRation_Update()
        pnlPageSize.Show()
        pnlPageSize.BringToFront()
        If modelPopup_DoEvents(blnModelPopupClose) Then
            pnlPageSize.Hide()
        End If
        Return
    End Sub
    Private Sub pnlPageSize_Width_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_Width.TextChanged
        Try
            If _pnlPageSizeAspectRatioPause Or pnlPageSize_MaintainAspectRatio.Checked = False Then Return
            _pnlPageSizeAspectRatioPause = True
            If _pnlPageSizeAspectRatioW > 0 And _pnlPageSizeAspectRatioH > 0 Then
                pnlPageSize_Height.Text = CSng(pnlPageSize_Width.Text) * _pnlPageSizeAspectRatioH
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            _pnlPageSizeAspectRatioPause = False
        End Try
    End Sub
    Private Sub pnlPageSize_Height_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_Height.TextChanged
        Try
            If _pnlPageSizeAspectRatioPause Or pnlPageSize_MaintainAspectRatio.Checked = False Then Return
            _pnlPageSizeAspectRatioPause = True
            If _pnlPageSizeAspectRatioW > 0 And _pnlPageSizeAspectRatioH > 0 Then
                pnlPageSize_Width.Text = CSng(pnlPageSize_Height.Text) * _pnlPageSizeAspectRatioW
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            _pnlPageSizeAspectRatioPause = False
        End Try
    End Sub
    Public Function PDFProperties_Info(Optional ByVal pdfBytes() As Byte = Nothing, Optional ByVal title As String = "", Optional ByVal subject As String = "", Optional ByVal keywords As String = "", Optional ByVal creator As String = "", Optional ByVal author As String = "") As Byte()
        Dim mOut As New MemoryStream
        If pdfBytes Is Nothing Then pdfBytes = Session
        If pdfBytes.Length <= 0 Then pdfBytes = Session
        If pdfBytes Is Nothing Then Return Nothing
        If pdfBytes.Length <= 0 Then Return Nothing
        Dim reader As New PdfReader(pdfBytes, getBytes(pdfOwnerPassword & ""))
        Dim stamper As PdfStamper = getStamper(pdfReaderDoc, mOut)
        Dim info As Dictionary(Of String, String) = pdfReaderDoc.Info()
        Try
            If info.Keys.Contains("Title") Then info("Title") = title & "" Else info.Add("Title", title & "")
            If info.Keys.Contains("Subject") Then info("Subject") = subject & "" Else info.Add("Subject", subject & "")
            If info.Keys.Contains("Keywords") Then info("Keywords") = keywords & "" Else info.Add("Keywords", keywords & "")
            If info.Keys.Contains("Creator") Then info("Creator") = creator & "" Else info.Add("Creator", creator & "")
            If info.Keys.Contains("Author") Then info("Author") = author & "" Else info.Add("Author", author & "")
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            stamper.MoreInfo = (info)
            stamper.Writer.CloseStream = False
            stamper.Close()
            reader.Close()
        End Try
        Return mOut.ToArray
    End Function
    Public Function PDFProperties_MoreInfo(Optional ByVal pdfBytes() As Byte = Nothing, Optional ByVal moreInfoDictionary As Dictionary(Of String, String) = Nothing) As Byte()
        Dim mOut As New MemoryStream
        If pdfBytes Is Nothing Then pdfBytes = Session
        If pdfBytes.Length <= 0 Then pdfBytes = Session
        If pdfBytes Is Nothing Then Return Nothing
        If pdfBytes.Length <= 0 Then Return Nothing
        Dim reader As New PdfReader(pdfBytes, getBytes(pdfOwnerPassword & ""))
        Dim stamper As PdfStamper = getStamper(pdfReaderDoc, mOut)
        Dim info As Dictionary(Of String, String) = pdfReaderDoc.Info()
        Try
            For Each strKey As String In moreInfoDictionary.Keys.ToArray()
                If info.Keys.Contains(strKey & "") Then info(strKey & "") = moreInfoDictionary(strKey & "") & "" Else info.Add(strKey & "", moreInfoDictionary(strKey & "") & "")
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            stamper.MoreInfo = (info)
            stamper.Writer.CloseStream = False
            stamper.Close()
            reader.Close()
        End Try
        Return mOut.ToArray
    End Function
    Private Sub PuchButton_Options_Icon_BtnOk_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_Icon_BtnOk.Click
        Try
            grpBoxPuchButton_IconAndLabel.Visible = True
            grpBoxPuchButton_IconPlacement.Visible = False
            puchButtonIcon_Default_IconFitToBounds = PuchButton_Options_Icon_ChkFitToBounds.Checked
            puchButtonIcon_Default_ScaleIcon = PuchButton_Options_Icon_CmbScale.SelectedIndex
            puchButtonIcon_Default_ProportionalIcon = PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex
            puchButtonIcon_Default_IconHorizontalAdjustment = PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value
            puchButtonIcon_Default_IconVerticalAdjustment = PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PuchButton_Options_AdvancedShow_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_AdvancedShow.Click
        Try
            grpBoxPuchButton_IconAndLabel.Visible = False
            grpBoxPuchButton_IconPlacement.Visible = True
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PuchButton_Options_Icon_BtnCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_Icon_BtnCancel.Click
        Try
            grpBoxPuchButton_IconAndLabel.Visible = True
            grpBoxPuchButton_IconPlacement.Visible = False
            PuchButton_Options_Icon_ChkFitToBounds.Checked = puchButtonIcon_Default_IconFitToBounds
            PuchButton_Options_Icon_CmbScale.SelectedIndex = puchButtonIcon_Default_ScaleIcon
            PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex = puchButtonIcon_Default_ProportionalIcon
            PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value = puchButtonIcon_Default_IconHorizontalAdjustment
            PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value = puchButtonIcon_Default_IconVerticalAdjustment
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PuchButton_Options_Icon_BtnReset_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_Icon_BtnReset.Click
        Try
            PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value = 50
            PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value = 50
            PuchButton_Options_Icon_Label_Offset.Text = "(" & PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value & "," & PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value & ")"
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PuchButton_Options_Icon_Trackbar_Offset_Vertical_Scroll(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_Icon_Trackbar_Offset_Vertical.Scroll
        Try
            PuchButton_Options_Icon_Label_Offset.Text = "(" & PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value & "," & PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value & ")"
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PuchButton_Options_Icon_Trackbar_Offset_Horizontal_Scroll(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Scroll
        Try
            PuchButton_Options_Icon_Label_Offset.Text = "(" & PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Value & "," & PuchButton_Options_Icon_Trackbar_Offset_Vertical.Value & ")"
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PuchButton_Options_Icon_CmbScaleWhen_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_Icon_CmbScaleWhen.SelectedIndexChanged
        Try
            If PuchButton_Options_Icon_CmbScaleWhen.SelectedIndex <> 1 Then
                PuchButton_Options_Icon_CmbScale.Enabled = True
            Else
                PuchButton_Options_Icon_CmbScale.Enabled = False
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PuchButton_Options_Icon_CmbScale_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PuchButton_Options_Icon_CmbScale.SelectedIndexChanged
        Try
            If PuchButton_Options_Icon_CmbScale.SelectedIndex <= 0 Then
                PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Enabled = True
                PuchButton_Options_Icon_Trackbar_Offset_Vertical.Enabled = True
            Else
                PuchButton_Options_Icon_Trackbar_Offset_Horizontal.Enabled = False
                PuchButton_Options_Icon_Trackbar_Offset_Vertical.Enabled = False
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub ShowHideTextFieldOptionCheckBoxes()
        Try
            PDFField_MultiLine.Enabled = True
            PDFField_Scroll.Enabled = True
            PDFField_RichText.Enabled = True
            PDFField_MaxLenChk.Enabled = True
            PDFField_MaxLen.Enabled = True
            PDFField_Password.Enabled = True
            PDFField_Selection.Enabled = True
            PDFField_CheckSpelling.Enabled = True
            PDFField_Comb.Enabled = True
            PDFField_CombChk.Enabled = True
            If PDFField_MultiLine.Checked And PDFField_MultiLine.Enabled Then
                PDFField_Password.Enabled = False
                PDFField_Selection.Enabled = False
                PDFField_Comb.Enabled = False
                PDFField_CombChk.Enabled = False
                PDFField_CheckSpelling.Enabled = True
            End If
            If PDFField_RichText.Checked And PDFField_RichText.Enabled Then
                PDFField_Password.Enabled = False
                PDFField_Selection.Enabled = False
                PDFField_Comb.Enabled = False
                PDFField_CombChk.Enabled = False
                PDFField_CheckSpelling.Enabled = True
            End If
            If PDFField_Scroll.Checked And PDFField_Scroll.Enabled Then
                PDFField_Selection.Enabled = True
                PDFField_Comb.Enabled = False
                PDFField_CombChk.Enabled = False
                PDFField_CheckSpelling.Enabled = True
            End If
            If PDFField_MaxLenChk.Checked And PDFField_MaxLenChk.Enabled Then
                PDFField_Selection.Enabled = False
                PDFField_Comb.Enabled = False
                PDFField_CombChk.Enabled = False
                PDFField_CheckSpelling.Enabled = True
            End If
            If PDFField_Password.Checked And PDFField_Password.Enabled Then
                PDFField_Scroll.Enabled = True
                PDFField_MaxLenChk.Enabled = True
                PDFField_MaxLen.Enabled = True
                PDFField_Password.Enabled = True
                PDFField_Comb.Enabled = False
                PDFField_CombChk.Enabled = False
                PDFField_MultiLine.Enabled = False
                PDFField_RichText.Enabled = False
                PDFField_Selection.Enabled = False
                PDFField_CheckSpelling.Enabled = False
            End If
            If PDFField_CombChk.Checked And PDFField_CombChk.Enabled Then
                PDFField_Comb.Enabled = True
                PDFField_CombChk.Enabled = True
                PDFField_MultiLine.Enabled = False
                PDFField_Scroll.Enabled = False
                PDFField_RichText.Enabled = False
                PDFField_MaxLenChk.Enabled = False
                PDFField_MaxLen.Enabled = False
                PDFField_Password.Enabled = False
                PDFField_Selection.Enabled = False
                PDFField_CheckSpelling.Enabled = False
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_MultiLine_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_MultiLine.CheckedChanged
        Try
            ShowHideTextFieldOptionCheckBoxes()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Scroll_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Scroll.CheckedChanged
        Try
            ShowHideTextFieldOptionCheckBoxes()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_RichText_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_RichText.CheckedChanged
        Try
            ShowHideTextFieldOptionCheckBoxes()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_CheckSpelling_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_CheckSpelling.CheckedChanged
        Try
            ShowHideTextFieldOptionCheckBoxes()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Password_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Password.CheckedChanged
        Try
            ShowHideTextFieldOptionCheckBoxes()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_MaxLenChk_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_MaxLenChk.CheckedChanged
        Try
            ShowHideTextFieldOptionCheckBoxes()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_CombChk_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_CombChk.CheckedChanged
        Try
            ShowHideTextFieldOptionCheckBoxes()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Selection_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Selection.CheckedChanged
        Try
            ShowHideTextFieldOptionCheckBoxes()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub ImportImageFromClipboardToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportImageFromClipboardToolStripMenuItem.Click
        Dim returnImage As System.Drawing.Image = Nothing
        Dim extensions As New List(Of String)
        extensions.AddRange(New String() {".fdf", ".xfdf", ".xdp", ".xml", ".pdf", ".xpdf"})
        Dim imageExtensions As New List(Of String)
        imageExtensions.AddRange(New String() {".jpg", ".gif", ".png", ".jpeg", ".tif", ".tiff"})
        Try
            If Clipboard.ContainsImage() Then
                Select Case MsgBox("Import Image from Clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Import Image?")
                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                        returnImage = Clipboard.GetImage()
                        ImportImageFromImage(returnImage.Clone())
                    Case Else
                        Return
                End Select
            ElseIf Clipboard.ContainsData(System.Windows.Forms.DataFormats.Bitmap) Then
                Select Case MsgBox("Import Image from Clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Import Image?")
                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                        Dim oDataObj As IDataObject = System.Windows.Forms.Clipboard.GetDataObject()
                        If oDataObj.GetDataPresent(System.Windows.Forms.DataFormats.Bitmap) Then
                            returnImage = oDataObj.GetData(DataFormats.Bitmap, True)
                            ImportImageFromImage(returnImage.Clone())
                        End If
                    Case Else
                        Return
                End Select
            ElseIf Clipboard.ContainsText(System.Windows.Forms.TextDataFormat.Text) Then
                Dim oDataString As String = System.Windows.Forms.Clipboard.GetText(TextDataFormat.Text).ToString() & ""
                If FileExists(oDataString & "") Then
                    If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Import Image from Clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Import Image?")
                            Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                    returnImage = System.Drawing.Image.FromFile(oDataString)
                                    ImportImageFromImage(returnImage.Clone())
                                    returnImage.Dispose()
                                    returnImage = Nothing
                                    addOpenHistoryListItem(oDataString)
                                End If
                            Case Else
                                Return
                        End Select
                        Return
                    ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Open PDF From Clipboard?", MsgBoxStyle.Question + MsgBoxStyle.OkCancel + MsgBoxStyle.ApplicationModal, "Open Document?")
                            Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                fpath = oDataString.ToString().Trim()
                                If String.IsNullOrEmpty(fpath & "") Then
                                    fpath = appPath & "acro.pdf"
                                    OpenFile(fpath, False)
                                    Return
                                Else
                                    OpenFile(fpath, False)
                                    Return
                                End If
                                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                A0_PictureBox1.Enabled = True
                                A0_PictureBox2.Enabled = True
                                Return
                            Case Else
                                Exit Select
                        End Select
                    End If
                End If
            ElseIf Clipboard.ContainsText(System.Windows.Forms.TextDataFormat.UnicodeText) Then
                Dim oDataString As String = System.Windows.Forms.Clipboard.GetText(TextDataFormat.UnicodeText).ToString & ""
                If FileExists(oDataString & "") Then
                    If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Import Image from Clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Import Image?")
                            Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                    returnImage = System.Drawing.Image.FromFile(oDataString)
                                    ImportImageFromImage(returnImage.Clone())
                                    returnImage.Dispose()
                                    returnImage = Nothing
                                    addOpenHistoryListItem(oDataString)
                                End If
                            Case Else
                                Return
                        End Select
                        Return
                    ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Open PDF From Clipboard?", MsgBoxStyle.Question + MsgBoxStyle.OkCancel + MsgBoxStyle.ApplicationModal, "Open Document?")
                            Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                fpath = oDataString.ToString().Trim()
                                If String.IsNullOrEmpty(fpath & "") Then
                                    fpath = appPath & "acro.pdf"
                                    OpenFile(fpath, False)
                                    Return
                                Else
                                    OpenFile(fpath, False)
                                    Return
                                End If
                                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                A0_PictureBox1.Enabled = True
                                A0_PictureBox2.Enabled = True
                                A0_PictureBox2.Enabled = True
                                Return
                            Case Else
                                Exit Select
                        End Select
                    End If
                End If
            ElseIf Clipboard.GetFileDropList.Count > 0 Then
                Dim oDataString As String = Clipboard.GetFileDropList(0).ToString()
                If FileExists(oDataString & "") Then
                    If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Import Image from Clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Import Image?")
                            Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                    returnImage = System.Drawing.Image.FromFile(oDataString)
                                    ImportImageFromImage(returnImage.Clone())
                                    returnImage.Dispose()
                                    returnImage = Nothing
                                    addOpenHistoryListItem(oDataString)
                                End If
                            Case Else
                                Return
                        End Select
                        Return
                    ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Open PDF From Clipboard?", MsgBoxStyle.Question + MsgBoxStyle.OkCancel + MsgBoxStyle.ApplicationModal, "Open Document?")
                            Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                fpath = oDataString.ToString().Trim()
                                If String.IsNullOrEmpty(fpath & "") Then
                                    fpath = appPath & "acro.pdf"
                                    OpenFile(fpath, False)
                                    Return
                                Else
                                    OpenFile(fpath, False)
                                    Exit Sub
                                End If
                                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                A0_PictureBox1.Enabled = True
                                A0_PictureBox2.Enabled = True
                                Return
                            Case Else
                                Exit Select
                        End Select
                        Return
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If imageExtensions.Contains("." & GetFileExtension(fpath & "").ToString.TrimStart("."c).ToLower & "") Then
                pageIndex = Me.btnPage.Items.Count - 1
                LoadPDFReaderDoc(pdfOwnerPassword.ToString, True)
                A0_LoadPDF(True)
                LoadPageList(Me.btnPage)
                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                A0_PictureBox1.Enabled = True
                A0_PictureBox2.Enabled = True
                btnPage_SelectedIndexChanged(Me, New EventArgs())
            ElseIf extensions.Contains("." & GetFileExtension(fpath & "").ToString.TrimStart("."c).ToLower & "") Then
                pageIndex = 0
            End If
        End Try
        Return
    End Sub
    Public Function Clipboard_HasContent() As Boolean
        Dim extensions As New List(Of String)
        extensions.AddRange(New String() {".fdf", ".xfdf", ".xdp", ".xml", ".pdf", ".xpdf"})
        Dim imageExtensions As New List(Of String)
        imageExtensions.AddRange(New String() {".jpg", ".gif", ".png", ".jpeg", ".tif", ".tiff"})
        Try
            If Clipboard.ContainsImage() Then
                Return True
            ElseIf Clipboard.ContainsData(System.Windows.Forms.DataFormats.Bitmap) Then
                Return True
            ElseIf Clipboard.ContainsText(System.Windows.Forms.TextDataFormat.Text) Then
                Dim oDataString As String = System.Windows.Forms.Clipboard.GetText(TextDataFormat.Text).ToString() & ""
                If FileExists(oDataString & "") Then
                    If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Return True
                    ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Return True
                    End If
                End If
            ElseIf Clipboard.ContainsText(System.Windows.Forms.TextDataFormat.UnicodeText) Then
                Dim oDataString As String = System.Windows.Forms.Clipboard.GetText(TextDataFormat.UnicodeText).ToString & ""
                If FileExists(oDataString & "") Then
                    If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Return True
                    ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Return True
                    End If
                End If
            ElseIf Clipboard.GetFileDropList.Count > 0 Then
                Dim oDataString As String = Clipboard.GetFileDropList(0).ToString()
                If FileExists(oDataString & "") Then
                    If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Return True
                    ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Return True
                    End If
                End If
            Else
                Return False
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return False
    End Function
    Private Sub ClearClipboardToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ClearClipboardToolStripMenuItem.Click
        Try
            Select Case MsgBox("Clear clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Clear Clipboard?")
                Case MsgBoxResult.Ok, MsgBoxResult.Yes
                    Clipboard.Clear()
                Case Else
                    Return
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub PdfForm_FieldNames_UpdateButton()
        Try
            If PDFField_Copy.Checked = True Then
                GoTo GOTO_ADDFIELD
            ElseIf String.IsNullOrEmpty(PDFField_Name.Text & "") Or IsNumeric(PDFField_Index.Text & "") = False Then
                GoTo GOTO_ADDFIELD
            ElseIf CInt(PDFField_Index.Text) > -1 And CheckfieldNameExits(PDFField_Name.Text & "") Then
                btnField_AddTextField.Text = "Update Field"
                btnField_AddCheckBox.Text = "Update Field"
                btnField_AddListBox.Text = "Update Field"
                btnField_AddRadioButton.Text = "Update Field"
                btnField_AddButton.Text = "Update Field"
                btnField_AddCombobox.Text = "Update Field"
                btnField_AddSignatureField.Text = "Update Field"
                Me.lblFieldType.Text = PDFField_Name.Text & ""
            Else
GOTO_ADDFIELD:
                btnField_AddTextField.Text = "Add Field"
                btnField_AddListBox.Text = "Add Field"
                btnField_AddRadioButton.Text = "Add Field"
                btnField_AddButton.Text = "Add Field"
                btnField_AddCombobox.Text = "Add Field"
                btnField_AddCheckBox.Text = "Add Field"
                btnField_AddSignatureField.Text = "Add Field"
                Me.lblFieldType.Text = "PROPERTIES"
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub tmrUpdateAddFieldButton_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try
            PdfForm_FieldNames_UpdateButton()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            tmrUpdateAddFieldButton.Enabled = False
        End Try
    End Sub
    Private Sub pnlPageSize_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles pnlPageSize.Paint
    End Sub
    Private Sub pnlPageSize_MaintainAspectRatio_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_MaintainAspectRatio.CheckedChanged
        pnlPageSizeApsectRation_Update()
    End Sub
    Public Sub pnlPageSizeApsectRation_Update()
        Try
            If pnlPageSize_MaintainAspectRatio.Checked Then
                If Not String.IsNullOrEmpty(pnlPageSize_Width.Text & "") And Not String.IsNullOrEmpty(pnlPageSize_Height.Text & "") Then
                    If IsNumeric(pnlPageSize_Width.Text & "") And IsNumeric(pnlPageSize_Height.Text & "") Then
                        If CSng(pnlPageSize_Width.Text & "") > 0 And CSng(pnlPageSize_Height.Text & "") > 1 Then
                            _pnlPageSizeAspectRatioW = CSng(pnlPageSize_Width.Text) / CSng(pnlPageSize_Height.Text)
                            _pnlPageSizeAspectRatioH = CSng(pnlPageSize_Height.Text) / CSng(pnlPageSize_Width.Text)
                            Return
                        End If
                    End If
                End If
            End If
            _pnlPageSizeAspectRatioW = -1
            _pnlPageSizeAspectRatioH = -1
            Return
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub CmbHistoryMaxShow_ToolStripComboBox1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CmbHistoryMaxShow_ToolStripComboBox1.Click
    End Sub
    Private Sub CmbHistoryMaxShow_ToolStripComboBox1_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles CmbHistoryMaxShow_ToolStripComboBox1.SelectedIndexChanged
        Try
            Select Case CmbHistoryMaxShow_ToolStripComboBox1.SelectedIndex
                Case 0
                    _showMaxHistoryMaxShow = -1
                Case 1
                    _showMaxHistoryMaxShow = 5
                Case 2
                    _showMaxHistoryMaxShow = 10
                Case 3
                    _showMaxHistoryMaxShow = 20
                Case 4
                    _showMaxHistoryMaxShow = 30
                Case 5
                    _showMaxHistoryMaxShow = 40
                Case 6
                    _showMaxHistoryMaxShow = 50
                Case 7
                    _showMaxHistoryMaxShow = 100
                Case Else
                    _showMaxHistoryMaxShow = -1
            End Select
            loadToolStripMenu_OpenHistoryList()
            If Not btnMainLocation = Nothing Then
                If Not ContextMenuStrip1.Visible Then
                    ContextMenuStrip1.Show(btnMain, btnMainLocation)
                    ContextMenuStrip1.Focus()
                    ContextMenuStrip1.BringToFront()
                    OpenToolStripMenuItem.Select()
                    If Not OpenToolStripMenuItem.DropDown.Visible Then
                        If OpenToolStripMenuItem.DropDown.Items.Count > 1 Then
                            OpenToolStripMenuItem.DropDown.Show()
                            OpenToolStripMenuItem.DropDown.BringToFront()
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function PDFCompression(ByVal bytes() As Byte, Optional ByVal OwnerPassword As String = "", Optional ByVal compressionLevel As compression_Level = compression_Level.BEST_COMPRESSION, Optional ByVal removeUnusedObjects As Boolean = False, Optional ByVal removeFormFields As Boolean = False) As Byte()
        Try
            If Not bytes Is Nothing Then
                If bytes.Length > 0 Then
                    Dim reader As New PdfReader(bytes, IIf(String.IsNullOrEmpty(OwnerPassword & ""), Nothing, getBytes(OwnerPassword & "")))
                    Using fs As New MemoryStream()
                        Dim stamper As PdfStamper = getStamper(reader, fs)
                        If compressionLevel >= 10 Then
                            stamper.Writer.CompressionLevel = compression_Level.BEST_COMPRESSION
                            If removeFormFields Then
                                reader.RemoveFields()
                            End If
                            If removeUnusedObjects Then
                                reader.RemoveUnusedObjects()
                                stamper.Reader.RemoveUnusedObjects()
                            End If
                            stamper.SetFullCompression()
                        ElseIf compressionLevel >= -1 Then
                            stamper.Writer.CompressionLevel = compressionLevel
                            If removeFormFields Then
                                reader.RemoveFields()
                            End If
                            If removeUnusedObjects Then
                                reader.RemoveUnusedObjects()
                                stamper.Reader.RemoveUnusedObjects()
                            End If
                        End If
                        stamper.Writer.CloseStream = False
                        stamper.Close()
                        Return fs.ToArray()
                    End Using
                End If
            End If
        Catch ex As Exception
            Throw ex
        End Try
        Return bytes
    End Function
    Public Sub UpdatePnlCompressionResults_Label(ByVal bytes() As Byte, ByRef lbl As Label)
        Try
            Dim pdfBytes() As Byte = Session().ToArray()
            Dim pdfBytesCompressed() As Byte = PDFCompression(pdfBytes, pdfOwnerPassword, IIf(pnlCompression_CmbLevel.SelectedIndex >= 0, CInt(pnlCompression_CmbLevel.SelectedIndex - 1) + 0, -1), pnlCompression_ChkRemoveUnusedObjects.Checked, pnlCompression_ChkRemoveFormFields.Checked).ToArray()
            If pnlCompressionJPEG_CmbLevel.SelectedIndex > 0 Then
                Dim cImageReduction As New clsPdfSizeReduction()
                pdfBytesCompressed = cImageReduction.ReducePDFImages(pdfBytesCompressed, 100 - CInt(pnlCompressionJPEG_CmbLevel.Items(pnlCompressionJPEG_CmbLevel.SelectedIndex + 0).ToString().Replace("% loss", "")), pdfOwnerPassword & "")
            End If
            Dim lblStrBlder As New System.Text.StringBuilder()
            lblStrBlder.AppendLine("Preliminary Compression:".ToUpper())
            lblStrBlder.AppendLine("Current Size: " & FormatNumber(CInt(pdfBytes.Length / 1024), 0, TriState.False, TriState.UseDefault, TriState.True) & " kb")
            lblStrBlder.AppendLine("Compressed Size: " & FormatNumber(CInt(pdfBytesCompressed.Length / 1024), 0, TriState.False, TriState.UseDefault, TriState.True) & " kb")
            If pdfBytes.Length > pdfBytesCompressed.Length Then
                lblStrBlder.AppendLine("Difference: -" & FormatNumber(Math.Abs(CInt((pdfBytes.Length - pdfBytesCompressed.Length) / 1024)), 0, TriState.False, TriState.UseDefault, TriState.True) & " kb")
            Else
                lblStrBlder.AppendLine("Difference: +" & FormatNumber(Math.Abs(CInt((pdfBytes.Length - pdfBytesCompressed.Length) / 1024)), 0, TriState.False, TriState.UseDefault, TriState.True) & " kb")
            End If
            lbl.Text = lblStrBlder.ToString
        Catch ex As Exception
            lbl.Text = "Error: " & ex.Message
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub pnlCompression_CmbLevel_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCompression_CmbLevel.SelectedIndexChanged
        If Not _pnlCompression_Pause Then
            UpdatePnlCompressionResults_Label(Session, pnlCompression_lblCompressionResults)
        End If
    End Sub
    Private Sub pnlCompression_ChkRemoveUnusedObjects_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCompression_ChkRemoveUnusedObjects.CheckedChanged
        If Not _pnlCompression_Pause Then
            UpdatePnlCompressionResults_Label(Session, pnlCompression_lblCompressionResults)
        End If
    End Sub
    Private Sub pnlCompression_ChkRemoveFormFields_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCompression_ChkRemoveFormFields.CheckedChanged
        If Not _pnlCompression_Pause Then
            UpdatePnlCompressionResults_Label(Session, pnlCompression_lblCompressionResults)
        End If
    End Sub
    Private Sub pnlCompression_BtnOK_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCompression_BtnOK.Click
        Try
            Dim pdfBytes() As Byte = Session()
            If Not pdfBytes Is Nothing Then
                If pdfBytes.Length <= 0 Then Return
            End If
            Dim pdfBytesCompressed() As Byte = PDFCompression(pdfBytes, pdfOwnerPassword, IIf(pnlCompression_CmbLevel.SelectedIndex >= 0, CInt(pnlCompression_CmbLevel.SelectedIndex - 1) + 0, -1), pnlCompression_ChkRemoveUnusedObjects.Checked, pnlCompression_ChkRemoveFormFields.Checked)
            If pnlCompressionJPEG_CmbLevel.SelectedIndex > 0 Then
                Dim cImageReduction As New clsPdfSizeReduction()
                pdfBytesCompressed = cImageReduction.ReducePDFImages(pdfBytesCompressed, 100 - CInt(pnlCompressionJPEG_CmbLevel.Items(pnlCompressionJPEG_CmbLevel.SelectedIndex + 0).ToString().Replace("% loss", "")), pdfOwnerPassword & "")
            End If
            If Not pdfBytesCompressed Is Nothing Then
                If pdfBytesCompressed.Length > 0 Then
                    Session = pdfBytesCompressed
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            pnlCompression.Hide()
        End Try
    End Sub
    Private Sub pnlCompression_BtnCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCompression_BtnCancel.Click
        Try
            pnlCompression.Hide()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub CompressDocumentToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CompressDocumentToolStripMenuItem.Click
        Try
            _pnlCompression_Pause = True
            pnlCompression_CmbLevel.SelectedIndex = 0
            pnlCompression_ChkRemoveFormFields.Checked = False
            pnlCompression_ChkRemoveUnusedObjects.Checked = True
            pnlCompression_lblCompressionResults.Text = ""
            pnlCompressionJPEG_CmbLevel.Items.Clear()
            pnlCompressionJPEG_CmbLevel.Items.Add("None")
            For i As Integer = 10 To 100 Step 10
                pnlCompressionJPEG_CmbLevel.Items.Add((i).ToString & "% loss")
            Next
            pnlCompressionJPEG_CmbLevel.SelectedIndex = 0
            _pnlCompression_Pause = False
            pnlCompression.Show()
            pnlCompression.BringToFront()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub pnlCompression_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles pnlCompression.Paint
    End Sub
    Private Sub pnlCompressionJPEG_CmbLevel_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCompressionJPEG_CmbLevel.SelectedIndexChanged
        If Not _pnlCompression_Pause Then
            UpdatePnlCompressionResults_Label(Session, pnlCompression_lblCompressionResults)
        End If
    End Sub
    Public Sub pnlCalculationOrder_Load(Optional ByVal preserveCurrentTabOrder As Boolean = False)
        Try
            calculationOrderList = CalculationOrder
            Dim fldNames() As String = CalculationOrderNames()
            pnlCalculationOrder_ListBoxFieldOrder.Items.Clear()
            For Each fld As String In fldNames.ToArray()
                If Not String.IsNullOrEmpty(fld.ToString() & "") Then
                    If Not pnlCalculationOrder_ListBoxFieldOrder.Items.Contains(fld.ToString & "") Then
                        pnlCalculationOrder_ListBoxFieldOrder.Items.Add(fld.ToString() & "")
                    End If
                End If
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub FieldCalculationOrderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FieldCalculationOrderToolStripMenuItem.Click
        Try
            pnlCalculationOrder_Load()
            pnlCalculationOrder.Show()
            pnlCalculationOrder.BringToFront()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub pnlCalculationOrder_btnMoveUp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCalculationOrder_btnMoveUp.Click
        Try
            If pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex > 0 Then
                Dim sel As Integer = pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex
                Dim fld As String = pnlCalculationOrder_ListBoxFieldOrder.Items(pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex).ToString()
                pnlCalculationOrder_ListBoxFieldOrder.Items.RemoveAt(sel)
                pnlCalculationOrder_ListBoxFieldOrder.Items.Insert(sel - 1, fld)
                pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex = sel - 1
                Dim fldDic As PdfObject = calculationOrderList(sel)
                calculationOrderList.ArrayList.RemoveAt(sel)
                calculationOrderList.ArrayList.Insert(sel - 1, fldDic)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub pnlCalculationOrder_btnMoveDown_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCalculationOrder_btnMoveDown.Click
        Try
            If pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex >= 0 And pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex < pnlCalculationOrder_ListBoxFieldOrder.Items.Count - 1 Then
                Dim sel As Integer = pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex
                Dim fld As String = pnlCalculationOrder_ListBoxFieldOrder.Items(pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex).ToString()
                pnlCalculationOrder_ListBoxFieldOrder.Items.RemoveAt(sel)
                pnlCalculationOrder_ListBoxFieldOrder.Items.Insert(sel + 1, fld)
                pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex = sel + 1
                Dim fldDic As PdfObject = calculationOrderList(sel)
                calculationOrderList.ArrayList.RemoveAt(sel)
                calculationOrderList.ArrayList.Insert(sel + 1, fldDic)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub pnlCalculationOrder_BtnOK_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCalculationOrder_BtnOK.Click
        Try
            If Not calculationOrderList Is Nothing Then
                CalculationOrder = calculationOrderList
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            pnlCalculationOrder.Hide()
        End Try
    End Sub
    Private Sub pnlCalculationOrder_BtnCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCalculationOrder_BtnCancel.Click
        Try
            pnlCalculationOrder.Hide()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub pnlCalculationOrder_btnDelete_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCalculationOrder_btnDelete.Click
        Try
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            If pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex >= 0 And pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex < pnlCalculationOrder_ListBoxFieldOrder.Items.Count - 1 Then
                Dim sel As Integer = pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex
                Dim fld As String = pnlCalculationOrder_ListBoxFieldOrder.Items(pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex).ToString()
                pnlCalculationOrder_ListBoxFieldOrder.Items.RemoveAt(sel)
                If pnlCalculationOrder_ListBoxFieldOrder.Items.Count > 0 Then
                    pnlCalculationOrder_ListBoxFieldOrder.SelectedIndex = 0
                End If
                Dim fldDic As PdfObject = calculationOrderList(sel)
                calculationOrderList.ArrayList.RemoveAt(sel)
                If fldDic.IsIndirect Then
                    Dim io As PdfIndirectReference = DirectCast(fldDic, PdfIndirectReference)
                    PdfReader.KillIndirect(io)
                    Dim obj As PdfObject = pdfReaderDoc.GetPdfObject(io.Number)
                    PdfReader.KillIndirect(obj)
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Structure FieldName_Rectangle
        Public pdfdictionary_field As PdfObject
        Public rect As System.Drawing.RectangleF
        Public field_name As String
        Public sort_order_new As Integer
        Public sort_order As Integer
        Public page_number As Integer
        Public kids_pdfarray As PdfArray
        Public kids_fldDicList As List(Of FieldName_Rectangle)
        Public Function sortedKids() As List(Of FieldName_Rectangle)
            Try
                If hasKids() Then
                    Dim tmp_fldDicKidsList As New List(Of FieldName_Rectangle)
                    tmp_fldDicKidsList.AddRange(kids_fldDicList.ToArray())
                    tmp_fldDicKidsList.Sort(AddressOf sortKid)
                    Dim tmp_fldDicKidsList2 As New List(Of FieldName_Rectangle)
                    For i As Integer = 0 To tmp_fldDicKidsList.Count - 1
                        Dim fldTemp As FieldName_Rectangle = tmp_fldDicKidsList(i)
                        fldTemp.sort_order_new = i
                        tmp_fldDicKidsList2.Add(fldTemp)
                    Next
                    Return tmp_fldDicKidsList2
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Return New List(Of FieldName_Rectangle)
        End Function
        Public Function sortKids() As List(Of FieldName_Rectangle)
            Try
                If hasKids() Then
                    Dim tmp_fldDicKidsList As New List(Of FieldName_Rectangle)
                    tmp_fldDicKidsList.AddRange(kids_fldDicList.ToArray())
                    tmp_fldDicKidsList.Sort(AddressOf sortKid)
                    kids_fldDicList = tmp_fldDicKidsList
                    kids_pdfarray = New PdfArray
                    For fldKidIdx As Integer = 0 To tmp_fldDicKidsList.Count - 1
                        kids_pdfarray.Add(tmp_fldDicKidsList(fldKidIdx).pdfdictionary_field)
                    Next
                    Return tmp_fldDicKidsList
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Return New List(Of FieldName_Rectangle)
        End Function
        Public Function hasKids() As Boolean
            Try
                If Not kids_fldDicList Is Nothing Then
                    If kids_fldDicList.Count > 0 Then
                        Return True
                    End If
                End If
                Return False
            Catch ex As Exception
                Err.Clear()
                Return False
            End Try
        End Function
        Public Function HighestPageNumber() As Integer
            If hasKids() Then
                Try
                    Dim page_numberTemp As Integer = 1
                    If Not kids_fldDicList Is Nothing Then
                        If kids_fldDicList.Count > 0 Then
                            For p As Integer = 0 To kids_fldDicList.Count - 1
                                If page_numberTemp <= kids_fldDicList(p).page_number Then
                                    page_numberTemp = kids_fldDicList(p).page_number
                                End If
                            Next
                        End If
                    End If
                    Return page_numberTemp
                Catch ex As Exception
                    Err.Clear()
                    Return 0
                End Try
            Else
                Return page_number + 0
            End If
        End Function
        Public Function LowestPageNumber() As Integer
            If hasKids() Then
                Try
                    Dim page_numberTemp As Integer = 1
                    If Not kids_fldDicList Is Nothing Then
                        If kids_fldDicList.Count > 0 Then
                            For p As Integer = 0 To kids_fldDicList.Count - 1
                                If page_numberTemp >= kids_fldDicList(p).page_number Then
                                    page_numberTemp = kids_fldDicList(p).page_number
                                End If
                            Next
                        End If
                    End If
                    Return page_numberTemp
                Catch ex As Exception
                    Err.Clear()
                    Return 0
                End Try
            Else
                Return page_number + 0
            End If
        End Function
        Public Function kidIndexFirstOnPage(ByVal page_number_temp As Integer) As Integer
            Try
                If Not kids_fldDicList Is Nothing Then
                    If kids_fldDicList.Count > 0 Then
                        For p As Integer = 0 To kids_fldDicList.Count - 1
                            If kids_fldDicList(p).page_number = page_number_temp Then
                                Return p
                            End If
                        Next
                    End If
                End If
                Return -1
            Catch ex As Exception
                Err.Clear()
                Return -1
            End Try
        End Function
        Public Function kidIndexHighestPageNumber() As Integer
            Try
                Dim page_number_temp As Integer = -1
                Dim idx As Integer = -1
                If Not kids_fldDicList Is Nothing Then
                    If kids_fldDicList.Count > 0 Then
                        For p As Integer = 0 To kids_fldDicList.Count - 1
                            If kids_fldDicList(p).page_number > page_number_temp Then
                                page_number_temp = kids_fldDicList(p).page_number
                                idx = p
                            End If
                        Next
                    End If
                End If
                Return idx
            Catch ex As Exception
                Err.Clear()
                Return 0
            End Try
        End Function
        Public Function kidIndexLowestPageNumber() As Integer
            Try
                Dim page_number_temp As Integer = Integer.MaxValue
                Dim idx As Integer = -1
                If Not kids_fldDicList Is Nothing Then
                    If kids_fldDicList.Count > 0 Then
                        For p As Integer = 0 To kids_fldDicList.Count - 1
                            If kids_fldDicList(p).page_number <= page_number_temp Then
                                page_number_temp = kids_fldDicList(p).page_number
                                idx = p
                            End If
                        Next
                    End If
                End If
                Return idx
            Catch ex As Exception
                Err.Clear()
                Return 0
            End Try
        End Function
        Public Function kidFirstOnPage(ByVal page_number_temp As Integer) As FieldName_Rectangle
            Try
                If Not kids_fldDicList Is Nothing Then
                    If kids_fldDicList.Count > 0 Then
                        For p As Integer = 0 To kids_fldDicList.Count - 1
                            If kids_fldDicList(p).page_number = page_number_temp Then
                                Return kids_fldDicList(p)
                            End If
                        Next
                    End If
                End If
                Return Nothing
            Catch ex As Exception
                Err.Clear()
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Example usage: kids_fldDicList.Sort(AddressOf SortKids)
        ''' </summary>
        ''' <param name="rect1"></param>
        ''' <param name="rect2"></param>
        ''' <returns>Returns FieldName_Rectangle Kids List sorted by rectangle y+,x-</returns>
        ''' <remarks></remarks>
        Private Function sortKid(ByVal rect1 As FieldName_Rectangle, ByVal rect2 As FieldName_Rectangle) As Integer
            If rect1.hasKids Then
                rect1.sortKids()
            End If
            If rect2.hasKids Then
                rect2.sortKids()
            End If
            If Not rect1.hasKids And Not rect2.hasKids Then
                If rect1.page_number <> rect2.page_number Then
                    Return rect1.page_number.CompareTo(rect2.page_number)
                End If
                If rect1.rect.Top > rect2.rect.Top Then
                    Return -1
                ElseIf rect1.rect.Top = rect2.rect.Top And rect1.rect.Left < rect2.rect.Left Then
                    Return -1
                Else
                    Return 1
                End If
            ElseIf rect1.hasKids And Not rect2.hasKids Then
                Dim intKidIndexHighestPageNumber As Integer = rect1.kidIndexHighestPageNumber()
                If intKidIndexHighestPageNumber >= 0 Then
                    If intKidIndexHighestPageNumber > 0 And rect2.page_number > 0 Then
                        If rect1.kids_fldDicList(intKidIndexHighestPageNumber).page_number <> rect2.page_number Then
                            If rect1.kids_fldDicList(intKidIndexHighestPageNumber).page_number > rect2.page_number Then
                                Return 1
                            ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber).page_number < rect2.page_number Then
                                Return -1
                            End If
                        Else
                            If rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top > rect2.rect.Top Then
                                Return -1
                            ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top = rect2.rect.Top And rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Left < rect2.rect.Left Then
                                Return -1
                            Else
                                Return 1
                            End If
                        End If
                    End If
                End If
                If intKidIndexHighestPageNumber >= 0 Then
                    If rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top > rect2.rect.Top Then
                        Return -1
                    ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top = rect2.rect.Top And rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Left < rect2.rect.Left Then
                        Return -1
                    Else
                        Return 1
                    End If
                Else
                    Return rect1.kids_fldDicList(0).rect.Top.CompareTo(rect2.rect.Top)
                End If
            ElseIf Not rect1.hasKids And rect2.hasKids Then
                Dim intKidIndexHighestPageNumber As Integer = rect2.kidIndexHighestPageNumber()
                If intKidIndexHighestPageNumber >= 0 Then
                    If rect1.page_number > 0 And rect2.kids_fldDicList(intKidIndexHighestPageNumber).page_number > 0 Then
                        If rect1.page_number <> rect2.kids_fldDicList(intKidIndexHighestPageNumber).page_number Then
                            If rect1.page_number > rect2.kids_fldDicList(intKidIndexHighestPageNumber).page_number Then
                                Return 1
                            ElseIf rect1.page_number < rect2.kids_fldDicList(intKidIndexHighestPageNumber).page_number Then
                                Return -1
                            End If
                        Else
                            If rect1.rect.Top > rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top Then
                                Return -1
                            ElseIf rect1.rect.Top = rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top And rect1.rect.Left < rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Left Then
                                Return -1
                            Else
                                Return 1
                            End If
                        End If
                    End If
                End If
                If intKidIndexHighestPageNumber >= 0 Then
                    If rect1.rect.Top > rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top Then
                        Return -1
                    ElseIf rect1.rect.Top = rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top And rect1.rect.Left < rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Left Then
                        Return -1
                    Else
                        Return 1
                    End If
                Else
                    Return rect1.rect.Top.CompareTo(rect2.kids_fldDicList(0).rect.Top)
                End If
            ElseIf rect1.hasKids And rect2.hasKids Then
                Dim intKidIndexHighestPageNumber_1 As Integer = rect1.kidIndexHighestPageNumber()
                Dim intKidIndexHighestPageNumber_2 As Integer = rect2.kidIndexHighestPageNumber()
                If intKidIndexHighestPageNumber_1 >= 0 Then
                    If intKidIndexHighestPageNumber_2 >= 0 Then
                        If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number > 0 And rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number > 0 Then
                            If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number <> rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                                If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number > rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                                    Return 1
                                ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number < rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                                    Return -1
                                End If
                            Else
                                If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Top > rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Top Then
                                    Return -1
                                ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Top = rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Top And rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Left < rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Left Then
                                    Return -1
                                Else
                                    Return 1
                                End If
                            End If
                        End If
                    Else
                        If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number > 0 And rect2.kids_fldDicList(0).page_number > 0 Then
                            If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number <> rect2.kids_fldDicList(0).page_number Then
                                If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number > rect2.kids_fldDicList(0).page_number Then
                                    Return 1
                                ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number < rect2.kids_fldDicList(0).page_number Then
                                    Return -1
                                End If
                            End If
                        End If
                    End If
                ElseIf intKidIndexHighestPageNumber_2 >= 0 Then
                    If rect1.kids_fldDicList(0).page_number > 0 And rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number > 0 Then
                        If rect1.kids_fldDicList(0).page_number <> rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                            If rect1.kids_fldDicList(0).page_number > rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                                Return 1
                            ElseIf rect1.kids_fldDicList(0).page_number < rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                                Return -1
                            End If
                        Else
                            If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Top > rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Top Then
                                Return -1
                            ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Top = rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Top And rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Left < rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Left Then
                                Return -1
                            Else
                                Return 1
                            End If
                        End If
                    End If
                Else
                    If rect1.kids_fldDicList(0).rect.Top > rect2.kids_fldDicList(0).rect.Top Then
                        Return -1
                    ElseIf rect1.kids_fldDicList(0).rect.Top = rect2.kids_fldDicList(0).rect.Top And rect1.kids_fldDicList(0).rect.Left < rect2.kids_fldDicList(0).rect.Left Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            Else
                If rect1.rect.Top > rect2.rect.Top Then
                    Return -1
                ElseIf rect1.rect.Top = rect2.rect.Top And rect1.rect.Left < rect2.rect.Left Then
                    Return -1
                Else
                    Return 1
                End If
            End If
        End Function
    End Structure
    Public Function FieldTabOrder(Optional ByVal sorted As Boolean = False) As List(Of FieldName_Rectangle)
        Try
            fields_tab_order = New List(Of FieldName_Rectangle)
            Dim fldRectsortorder As Integer = -1
            Dim fields As PdfArray = FieldsDictionary()
            If Not fields Is Nothing Then
                For fldDicIdx As Integer = 0 To fields.Size - 1
                    Dim fld As PdfDictionary = fields.GetAsDict(fldDicIdx)
                    If Not fld.Get(PdfName.T) Is Nothing Then
                        Dim fldRect As New FieldName_Rectangle
                        fldRect.pdfdictionary_field = fields(fldDicIdx)
                        fldRect.field_name = fld.GetAsString(PdfName.T).ToUnicodeString() & ""
                        If Not fld.Get(PdfName.KIDS) Is Nothing Then
                            Dim fldDicKids As PdfArray = fld.GetAsArray(PdfName.KIDS)
                            fldRect.kids_fldDicList = New List(Of FieldName_Rectangle)
                            fldRect.kids_pdfarray = New PdfArray
                            Dim fldRectsortorder_Kids As Integer = 0
                            For fldDicKidIdx As Integer = 0 To fldDicKids.Size - 1
                                Dim fldRectKid As New FieldName_Rectangle
                                fldRectKid.field_name = fldRect.field_name & ""
                                Dim fldDicKid As PdfDictionary = fldDicKids.GetAsDict(fldDicKidIdx)
                                fldRect.kids_pdfarray.Add(fldDicKids(fldDicKidIdx))
                                fldRectKid.pdfdictionary_field = fldDicKids(fldDicKidIdx)
                                If Not fldDicKid.Get(PdfName.RECT) Is Nothing Then
                                    Dim fldRectArr As PdfArray = fldDicKid.GetAsArray(PdfName.RECT)
                                    Dim itextRect As iTextSharp.text.Rectangle = New iTextSharp.text.Rectangle(fldRectArr.GetAsNumber(0).FloatValue, fldRectArr.GetAsNumber(1).FloatValue, fldRectArr.GetAsNumber(2).FloatValue, fldRectArr.GetAsNumber(3).FloatValue)
                                    fldRectKid.rect = New System.Drawing.RectangleF(itextRect.Left, itextRect.Top, itextRect.Width, itextRect.Height)
                                End If
                                fldRectsortorder_Kids = fldDicKidIdx
                                fldRectKid.sort_order = fldRectsortorder_Kids
                                Try
                                    If Not pdfReaderDoc.AcroFields.GetFieldPositions(fldRect.field_name & "") Is Nothing Then
                                        fldRectKid.page_number = pdfReaderDoc.AcroFields.GetFieldPositions(fldRect.field_name & "")(fldDicKidIdx).page + 0
                                    Else
                                        fldRectKid.page_number = -1
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                    fldRectKid.page_number = -1
                                End Try
                                fldRect.kids_fldDicList.Add(fldRectKid)
                            Next
                            fldRectsortorder += 1
                            fldRect.sort_order = fldRectsortorder
                            fldRect.page_number = -1
                            fields_tab_order.Add(fldRect)
                        ElseIf Not fld.Get(PdfName.RECT) Is Nothing Then
                            Dim fldRectArr As PdfArray = fld.GetAsArray(PdfName.RECT)
                            Dim itextRect As iTextSharp.text.Rectangle = New iTextSharp.text.Rectangle(fldRectArr.GetAsNumber(0).FloatValue, fldRectArr.GetAsNumber(1).FloatValue, fldRectArr.GetAsNumber(2).FloatValue, fldRectArr.GetAsNumber(3).FloatValue)
                            fldRect.rect = New System.Drawing.RectangleF(itextRect.Left, itextRect.Top, itextRect.Width, itextRect.Height)
                            fldRectsortorder += 1
                            fldRect.sort_order = fldRectsortorder
                            Try
                                If Not pdfReaderDoc.AcroFields.GetFieldPositions(fldRect.field_name & "") Is Nothing Then
                                    fldRect.page_number = pdfReaderDoc.AcroFields.GetFieldPositions(fldRect.field_name & "")(0).page + 0
                                Else
                                    fldRect.page_number = -1
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                                fldRect.page_number = -1
                            End Try
                            fields_tab_order.Add(fldRect)
                        End If
                    End If
                Next
            End If
            If sorted Then
                fields_tab_order.Sort(AddressOf SortField)
            End If
            Return fields_tab_order
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    ''' <summary>
    ''' Example usage: fields_tab_order.Sort(AddressOf RectangleSort)
    ''' </summary>
    ''' <param name="rect1"></param>
    ''' <param name="rect2"></param>
    ''' <returns>Returns FieldName_Rectangle List sorted by rectangle y+,x-</returns>
    ''' <remarks></remarks>
    Private Function SortField(ByVal rect1 As FieldName_Rectangle, ByVal rect2 As FieldName_Rectangle) As Integer
        If rect1.hasKids Then
            rect1.sortKids()
        End If
        If rect2.hasKids Then
            rect2.sortKids()
        End If
        If Not rect1.hasKids And Not rect2.hasKids Then
            If rect1.page_number <> rect2.page_number Then
                Return rect1.page_number.CompareTo(rect2.page_number)
            End If
            If rect1.rect.Top > rect2.rect.Top Then
                Return -1
            ElseIf rect1.rect.Top = rect2.rect.Top And rect1.rect.Left < rect2.rect.Left Then
                Return -1
            Else
                Return 1
            End If
        ElseIf rect1.hasKids And Not rect2.hasKids Then
            Dim intKidIndexHighestPageNumber As Integer = rect1.kidIndexHighestPageNumber()
            If intKidIndexHighestPageNumber >= 0 Then
                If intKidIndexHighestPageNumber > 0 And rect2.page_number > 0 Then
                    If rect1.kids_fldDicList(intKidIndexHighestPageNumber).page_number <> rect2.page_number Then
                        If rect1.kids_fldDicList(intKidIndexHighestPageNumber).page_number > rect2.page_number Then
                            Return 1
                        ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber).page_number < rect2.page_number Then
                            Return -1
                        End If
                    Else
                        If rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top > rect2.rect.Top Then
                            Return -1
                        ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top = rect2.rect.Top And rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Left < rect2.rect.Left Then
                            Return -1
                        Else
                            Return 1
                        End If
                    End If
                End If
            End If
            If intKidIndexHighestPageNumber >= 0 Then
                If rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top > rect2.rect.Top Then
                    Return -1
                ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top = rect2.rect.Top And rect1.kids_fldDicList(intKidIndexHighestPageNumber).rect.Left < rect2.rect.Left Then
                    Return -1
                Else
                    Return 1
                End If
            Else
                Return rect1.kids_fldDicList(0).rect.Top.CompareTo(rect2.rect.Top)
            End If
        ElseIf Not rect1.hasKids And rect2.hasKids Then
            Dim intKidIndexHighestPageNumber As Integer = rect2.kidIndexHighestPageNumber()
            If intKidIndexHighestPageNumber >= 0 Then
                If rect1.page_number > 0 And rect2.kids_fldDicList(intKidIndexHighestPageNumber).page_number > 0 Then
                    If rect1.page_number <> rect2.kids_fldDicList(intKidIndexHighestPageNumber).page_number Then
                        If rect1.page_number > rect2.kids_fldDicList(intKidIndexHighestPageNumber).page_number Then
                            Return 1
                        ElseIf rect1.page_number < rect2.kids_fldDicList(intKidIndexHighestPageNumber).page_number Then
                            Return -1
                        End If
                    Else
                        If rect1.rect.Top > rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top Then
                            Return -1
                        ElseIf rect1.rect.Top = rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top And rect1.rect.Left < rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Left Then
                            Return -1
                        Else
                            Return 1
                        End If
                    End If
                End If
            End If
            If intKidIndexHighestPageNumber >= 0 Then
                If rect1.rect.Top > rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top Then
                    Return -1
                ElseIf rect1.rect.Top = rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Top And rect1.rect.Left < rect2.kids_fldDicList(intKidIndexHighestPageNumber).rect.Left Then
                    Return -1
                Else
                    Return 1
                End If
            Else
                Return rect1.rect.Top.CompareTo(rect2.kids_fldDicList(0).rect.Top)
            End If
        ElseIf rect1.hasKids And rect2.hasKids Then
            Dim intKidIndexHighestPageNumber_1 As Integer = rect1.kidIndexHighestPageNumber()
            Dim intKidIndexHighestPageNumber_2 As Integer = rect2.kidIndexHighestPageNumber()
            If intKidIndexHighestPageNumber_1 >= 0 Then
                If intKidIndexHighestPageNumber_2 >= 0 Then
                    If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number > 0 And rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number > 0 Then
                        If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number <> rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                            If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number > rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                                Return 1
                            ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number < rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                                Return -1
                            End If
                        Else
                            If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Top > rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Top Then
                                Return -1
                            ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Top = rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Top And rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Left < rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Left Then
                                Return -1
                            Else
                                Return 1
                            End If
                        End If
                    End If
                Else
                    If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number > 0 And rect2.kids_fldDicList(0).page_number > 0 Then
                        If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number <> rect2.kids_fldDicList(0).page_number Then
                            If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number > rect2.kids_fldDicList(0).page_number Then
                                Return 1
                            ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).page_number < rect2.kids_fldDicList(0).page_number Then
                                Return -1
                            End If
                        End If
                    End If
                End If
            ElseIf intKidIndexHighestPageNumber_2 >= 0 Then
                If rect1.kids_fldDicList(0).page_number > 0 And rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number > 0 Then
                    If rect1.kids_fldDicList(0).page_number <> rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                        If rect1.kids_fldDicList(0).page_number > rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                            Return 1
                        ElseIf rect1.kids_fldDicList(0).page_number < rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).page_number Then
                            Return -1
                        End If
                    Else
                        If rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Top > rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Top Then
                            Return -1
                        ElseIf rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Top = rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Top And rect1.kids_fldDicList(intKidIndexHighestPageNumber_1).rect.Left < rect2.kids_fldDicList(intKidIndexHighestPageNumber_2).rect.Left Then
                            Return -1
                        Else
                            Return 1
                        End If
                    End If
                End If
            Else
                If rect1.kids_fldDicList(0).rect.Top > rect2.kids_fldDicList(0).rect.Top Then
                    Return -1
                ElseIf rect1.kids_fldDicList(0).rect.Top = rect2.kids_fldDicList(0).rect.Top And rect1.kids_fldDicList(0).rect.Left < rect2.kids_fldDicList(0).rect.Left Then
                    Return -1
                Else
                    Return 1
                End If
            End If
        Else
            If rect1.rect.Top > rect2.rect.Top Then
                Return -1
            ElseIf rect1.rect.Top = rect2.rect.Top And rect1.rect.Left < rect2.rect.Left Then
                Return -1
            Else
                Return 1
            End If
        End If
    End Function
    Public Function FieldsDictionaryArrayFromList(ByVal lst As List(Of FieldName_Rectangle)) As PdfArray
        Try
            If Not fields_tab_order Is Nothing Then
                If fields_tab_order.Count > 0 Then
                    Dim parr As New PdfArray
                    For Each f As FieldName_Rectangle In fields_tab_order.ToArray()
                        parr.Add(f.pdfdictionary_field)
                    Next
                    Return parr
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return New PdfArray()
    End Function
    Public Property FieldsDictionary() As PdfArray
        Get
            Try
                Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
                If Not (acroForm Is Nothing) Then
                    If Not acroForm.Get(PdfName.FIELDS) Is Nothing Then
                        Dim fields As PdfArray = acroForm.GetAsArray(PdfName.FIELDS)
                        Return fields
                    End If
                End If
                Return New PdfArray()
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Return New PdfArray()
        End Get
        Set(ByVal value As PdfArray)
            If pdfReaderDoc Is Nothing Then Return
            Dim acroForm As PdfDictionary = DirectCast(pdfReaderDoc.Catalog.GetAsDict(PdfName.ACROFORM), PdfDictionary)
            If Not (acroForm Is Nothing) Then
                acroForm.Put(PdfName.FIELDS, value)
                Session() = getPDFBytes(pdfReaderDoc)
                A0_LoadPDF(True, False, True)
                Return
            End If
        End Set
    End Property
    Private Sub pnlFieldTabOrder_BtnUp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlFieldTabOrder_BtnUp.Click
        Try
            If pnlFieldTabOrder_Listbox.SelectedIndex > 0 Then
                Dim sel As Integer = pnlFieldTabOrder_Listbox.SelectedIndex
                Dim fld As String = pnlFieldTabOrder_Listbox.Items(pnlFieldTabOrder_Listbox.SelectedIndex).ToString()
                pnlFieldTabOrder_Listbox.Items.RemoveAt(sel)
                pnlFieldTabOrder_Listbox.Items.Insert(sel - 1, fld)
                pnlFieldTabOrder_Listbox.SelectedIndex = sel - 1
                Dim fldRect As FieldName_Rectangle = fields_tab_order(sel)
                fields_tab_order.RemoveAt(sel)
                fields_tab_order.Insert(sel - 1, fldRect)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub pnlFieldTabOrder_BtnDown_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlFieldTabOrder_BtnDown.Click
        Try
            If pnlFieldTabOrder_Listbox.SelectedIndex >= 0 And pnlFieldTabOrder_Listbox.SelectedIndex < pnlFieldTabOrder_Listbox.Items.Count - 1 Then
                Dim sel As Integer = pnlFieldTabOrder_Listbox.SelectedIndex
                Dim fld As String = pnlFieldTabOrder_Listbox.Items(pnlFieldTabOrder_Listbox.SelectedIndex).ToString()
                pnlFieldTabOrder_Listbox.Items.RemoveAt(sel)
                pnlFieldTabOrder_Listbox.Items.Insert(sel + 1, fld)
                pnlFieldTabOrder_Listbox.SelectedIndex = sel + 1
                Dim fldRect As FieldName_Rectangle = fields_tab_order(sel)
                fields_tab_order.RemoveAt(sel)
                fields_tab_order.Insert(sel + 1, fldRect)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub pnlFieldTabOrder_BtnSort_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlFieldTabOrder_BtnSort.Click
        Try
            pnlFieldTabOrder_BtnOK.Enabled = False
            If Not fields_tab_order Is Nothing Then
                If fields_tab_order.Count > 0 Then
                    fields_tab_order.Sort(AddressOf SortField)
                    pnlFieldTabOrder_Load(True)
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            pnlFieldTabOrder_BtnOK.Enabled = True
        End Try
    End Sub
    Private Sub pnlFieldTabOrder_BtnOK_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlFieldTabOrder_BtnOK.Click
        Try
            If Not fields_tab_order Is Nothing Then
                FieldsDictionary = FieldsDictionaryArrayFromList(fields_tab_order)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            pnlFieldTabOrder.Hide()
        End Try
    End Sub
    Private Sub pnlFieldTabOrder_BtnCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlFieldTabOrder_BtnCancel.Click
        Try
            pnlFieldTabOrder.Hide()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub pnlFieldTabOrder_Load(Optional ByVal preserveCurrentTabOrder As Boolean = False)
        Try
            fields_tab_order = FieldTabOrder(preserveCurrentTabOrder)
            pnlFieldTabOrder_Listbox.Items.Clear()
            For Each fld As FieldName_Rectangle In fields_tab_order.ToArray()
                If Not fld.field_name Is Nothing Then
                    If Not String.IsNullOrEmpty(fld.field_name) Then
                        If Not pnlFieldTabOrder_Listbox.Items.Contains(fld.field_name.ToString & "") Then
                            pnlFieldTabOrder_Listbox.Items.Add(fld.field_name.ToString() & "")
                        Else
                            pnlFieldTabOrder_Listbox.Items.Add("unknown")
                        End If
                    Else
                        pnlFieldTabOrder_Listbox.Items.Add("unknown")
                    End If
                Else
                    pnlFieldTabOrder_Listbox.Items.Add("unknown")
                End If
            Next
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            pnlFieldTabOrder_TabsModePage.Items.Clear()
            For i As Integer = 1 To btnPage.Items.Count
                pnlFieldTabOrder_TabsModePage.Items.Add("Page #" & i.ToString)
            Next
            pnlFieldTabOrder_PauseUpdate = True
            pnlFieldTabOrder_TabsModePage.SelectedIndex = pageIndex
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            pnlFieldTabOrder_PauseUpdate = False
        End Try
    End Sub
    Private Sub FieldTabOrderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FieldTabOrderToolStripMenuItem.Click
        Try
            pnlFieldTabOrder_Load()
            pnlFieldTabOrder.Show()
            pnlFieldTabOrder.BringToFront()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub pnlCalculationOrder_btnSort_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlCalculationOrder_btnSort.Click
        Try
            pnlCalculationOrder_BtnOK.Enabled = False
            Dim fldCalcSort As List(Of FieldName_Rectangle) = CalculationOrder_FieldName_Rectangle(True)
            If Not fldCalcSort Is Nothing Then
                If fldCalcSort.Count > 0 Then
                    CalculationOrder_FieldName_Rectangle(True) = fldCalcSort
                    pnlCalculationOrder_Load(True)
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            pnlCalculationOrder_BtnOK.Enabled = True
        End Try
    End Sub
    Private Sub SelectProgramToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SelectProgramToolStripMenuItem1.Click
        Try
            OpenFileDialog4.CheckFileExists = True
            OpenFileDialog4.CheckPathExists = True
            OpenFileDialog4.DefaultExt = ".exe"
            OpenFileDialog4.Filter = "EXE|*.exe|COM|*.com|All files|*.*"
            OpenFileDialog4.FilterIndex = 0
            OpenFileDialog4.InitialDirectory = My.Computer.FileSystem.SpecialDirectories.ProgramFiles()
            OpenFileDialog4.FileName = ""
            OpenFileDialog4.Multiselect = False
            OpenFileDialog4.Title = "SELECT A PROGRAM"
            Select Case OpenFileDialog4.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    Dim appSel As String = OpenFileDialog4.FileName.ToString & ""
                    If FileExists(appSel) Then
                        Dim tmpFn As String = fpath & ""
                        If Not String.IsNullOrEmpty(tmpFn) Then
                            Select Case MsgBox("Save document?", MsgBoxStyle.YesNo Or MsgBoxStyle.Question Or MsgBoxStyle.ApplicationModal, "Save Document:")
                                Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                    File.WriteAllBytes(tmpFn, Session("output"))
                            End Select
                            Process.Start("" & appSel & "", """" & tmpFn & """")
                            Return
                        End If
                    End If
                Case Else
                    Return
            End Select
            Return
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Return
        End Try
    End Sub
    Private Sub AdobeAcrobatToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AdobeAcrobatToolStripMenuItem.Click
        Dim tmpFn As String = fpath & ""
        If Not String.IsNullOrEmpty(tmpFn) Then
            Select Case MsgBox("Save document?", MsgBoxStyle.YesNo Or MsgBoxStyle.Question Or MsgBoxStyle.ApplicationModal, "Save Document:")
                Case MsgBoxResult.Yes, MsgBoxResult.Ok
                    File.WriteAllBytes(tmpFn, Session("output"))
            End Select
            If My.Computer.FileSystem.FileExists(tmpFn) Then
                Try
                    Process.Start("acrobat", """" & tmpFn & """")
                Catch ex As Exception
                    Try
                        Dim processX As New Process()
                        processX.StartInfo = New ProcessStartInfo("AcroRd32")
                        processX.StartInfo.CreateNoWindow = False
                        processX.StartInfo.UseShellExecute = True
                        processX.StartInfo.Arguments = """" & tmpFn & """"
                        processX.Start()
                    Catch ex2 As Exception
                        Try
                            Process.Start(tmpFn)
                        Catch ex3 As Exception
                            MsgBox("Instal Acrobat Reader")
                        End Try
                    End Try
                End Try
            Else
                MsgBox("File not found.")
            End If
        End If
    End Sub
    Private Sub DefaultPDFViewerToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DefaultPDFViewerToolStripMenuItem.Click
        Dim tmpFn As String = fpath & ""
        If Not String.IsNullOrEmpty(tmpFn) Then
            Select Case MsgBox("Save document?", MsgBoxStyle.YesNo Or MsgBoxStyle.Question Or MsgBoxStyle.ApplicationModal, "Save Document:")
                Case MsgBoxResult.Yes, MsgBoxResult.Ok
                    If My.Computer.FileSystem.FileExists(tmpFn) Then
                        Try
                            Dim processX As New Process()
                            processX.StartInfo = New ProcessStartInfo("AcroRd32")
                            processX.StartInfo.CreateNoWindow = False
                            processX.StartInfo.UseShellExecute = True
                            processX.StartInfo.Arguments = """" & tmpFn & """"
                            processX.Start()
                        Catch ex As Exception
                            Try
                                Process.Start("acrobat", """" & tmpFn & """")
                            Catch ex2 As Exception
                                Try
                                    Process.Start(tmpFn)
                                Catch ex3 As Exception
                                    MsgBox("Instal Acrobat Reader")
                                End Try
                            End Try
                        End Try
                    Else
                        MsgBox("File not found.")
                    End If
            End Select
            Process.Start(tmpFn)
        End If
    End Sub
    Private Sub CostEditToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CostEditToolStripMenuItem.Click
        Dim tmpFn As String = fpath & ""
        If Not String.IsNullOrEmpty(tmpFn) Then
            Select Case MsgBox("Save document?", MsgBoxStyle.YesNo Or MsgBoxStyle.Question Or MsgBoxStyle.ApplicationModal, "Save Document:")
                Case MsgBoxResult.Yes, MsgBoxResult.Ok
                    File.WriteAllBytes(tmpFn, Session("output"))
            End Select
            If FileExists(appPath & "CosEdit\CosEdit.exe") Then
                Process.Start(appPath & "CosEdit\CosEdit.exe", """" & tmpFn & """")
            Else
                SelectProgramToolStripMenuItem_Click(Me, e)
            End If
        End If
    End Sub
    Private Sub pnlFieldTabOrder_TabsModePage_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlFieldTabOrder_TabsModePage.SelectedIndexChanged
        Try
            pnlFieldTabOrder_PauseUpdate = True
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Dim selIndex As Integer = pnlFieldTabOrder_TabsModePage.SelectedIndex
            If True = True Then
                If True = True Then
                    If True = True Then
                        Dim pageDic As PdfDictionary = DirectCast(pdfReaderDoc.GetPageN(selIndex + 1), PdfDictionary)
                        If Not pageDic Is Nothing Then
                            If pageDic.Get(PdfName.TABS) Is Nothing Then
                                pnlFieldTabOrder_TabsMode.SelectedIndex = 3
                                Return
                            Else
                                Select Case pageDic.GetAsName(PdfName.TABS).ToString.TrimStart("/"c).ToLower()
                                    Case "r"
                                        pnlFieldTabOrder_TabsMode.SelectedIndex = 0
                                        Return
                                    Case "c"
                                        pnlFieldTabOrder_TabsMode.SelectedIndex = 1
                                        Return
                                    Case "s"
                                        pnlFieldTabOrder_TabsMode.SelectedIndex = 2
                                        Return
                                    Case Else
                                        pnlFieldTabOrder_TabsMode.SelectedIndex = 3
                                        Return
                                End Select
                            End If
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            Throw ex
        Finally
            pnlFieldTabOrder_PauseUpdate = False
        End Try
        pnlFieldTabOrder_TabsMode.SelectedIndex = 2
        Return
    End Sub
    Private Sub pnlFieldTabOrder_TabsMode_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlFieldTabOrder_TabsMode.SelectedIndexChanged
        Try
            If pnlFieldTabOrder_PauseUpdate = True Then Return
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            If True = True Then
                If True = True Then
                    Dim selIndex As Integer = pnlFieldTabOrder_TabsModePage.SelectedIndex
                    Dim pageDic As PdfDictionary = DirectCast(pdfReaderDoc.GetPageN(selIndex + 1), PdfDictionary)
                    If True = True Then
                        If True = True Then
                            If True = True Then
                                If True = True Then
                                    If True = True Then
                                        If Not pageDic Is Nothing Then
                                            Dim tabsName As PdfName = Nothing
                                            Select Case pnlFieldTabOrder_TabsMode.SelectedIndex + 0
                                                Case 0
                                                    pageDic.Put(PdfName.TABS, PdfName.R)
                                                Case 1
                                                    pageDic.Put(PdfName.TABS, PdfName.C)
                                                Case 2
                                                    pageDic.Put(PdfName.TABS, PdfName.S)
                                                Case Else
                                                    If Not pageDic.Get(PdfName.TABS) Is Nothing Then
                                                        pageDic.Remove(PdfName.TABS)
                                                    End If
                                            End Select
                                        End If
                                    End If
                                Else
                                    If True = True Then
                                        If Not pageDic Is Nothing Then
                                            Dim tabsName As PdfName = Nothing
                                            Select Case pnlFieldTabOrder_TabsMode.SelectedIndex + 0
                                                Case 0
                                                    pageDic.Put(PdfName.TABS, PdfName.R)
                                                Case 1
                                                    pageDic.Put(PdfName.TABS, PdfName.C)
                                                Case 2
                                                    pageDic.Put(PdfName.TABS, PdfName.S)
                                                Case Else
                                                    If Not pageDic.Get(PdfName.TABS) Is Nothing Then
                                                        pageDic.Remove(PdfName.TABS)
                                                    End If
                                            End Select
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            If True = True Then
                                If True = True Then
                                    If True = True Then
                                        If Not pageDic Is Nothing Then
                                            Dim tabsName As PdfName = Nothing
                                            Select Case pnlFieldTabOrder_TabsMode.SelectedIndex + 0
                                                Case 0
                                                    pageDic.Put(PdfName.TABS, PdfName.R)
                                                Case 1
                                                    pageDic.Put(PdfName.TABS, PdfName.C)
                                                Case 2
                                                    pageDic.Put(PdfName.TABS, PdfName.S)
                                                Case Else
                                                    If Not pageDic.Get(PdfName.TABS) Is Nothing Then
                                                        pageDic.Remove(PdfName.TABS)
                                                    End If
                                            End Select
                                        End If
                                    End If
                                Else
                                    If True = True Then
                                        If Not pageDic Is Nothing Then
                                            Dim tabsName As PdfName = Nothing
                                            Select Case pnlFieldTabOrder_TabsMode.SelectedIndex + 0
                                                Case 0
                                                    pageDic.Put(PdfName.TABS, PdfName.R)
                                                Case 1
                                                    pageDic.Put(PdfName.TABS, PdfName.C)
                                                Case 2
                                                    pageDic.Put(PdfName.TABS, PdfName.S)
                                                Case Else
                                                    If Not pageDic.Get(PdfName.TABS) Is Nothing Then
                                                        pageDic.Remove(PdfName.TABS)
                                                    End If
                                            End Select
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                Session = getPDFBytes(pdfReaderDoc)
                LoadPDFReaderDoc(pdfOwnerPassword, True)
            End If
        Catch ex As Exception
            Throw ex
        Finally
        End Try
    End Sub
    Private Sub pnlFieldTabOrder_TabsMode_BtnAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlFieldTabOrder_TabsMode_BtnAll.Click
        Try
            If pnlFieldTabOrder_PauseUpdate = True Then Return
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            If True = True Then
                If True = True Then
                    For selIndex As Integer = 0 To pnlFieldTabOrder_TabsModePage.Items.Count - 1
                        If True = True Then
                            Dim pageDic As PdfDictionary = DirectCast(pdfReaderDoc.GetPageN(selIndex + 1), PdfDictionary)
                            If True = True Then
                                If True = True Then
                                    If True = True Then
                                        If True = True Then
                                            If True = True Then
                                                If Not pageDic Is Nothing Then
                                                    Dim tabsName As PdfName = Nothing
                                                    Select Case pnlFieldTabOrder_TabsMode.SelectedIndex + 0
                                                        Case 0
                                                            pageDic.Put(PdfName.TABS, PdfName.R)
                                                        Case 1
                                                            pageDic.Put(PdfName.TABS, PdfName.C)
                                                        Case 2
                                                            pageDic.Put(PdfName.TABS, PdfName.S)
                                                        Case Else
                                                            If Not pageDic.Get(PdfName.TABS) Is Nothing Then
                                                                pageDic.Remove(PdfName.TABS)
                                                            End If
                                                    End Select
                                                End If
                                            End If
                                        Else
                                            If True = True Then
                                                If Not pageDic Is Nothing Then
                                                    Dim tabsName As PdfName = Nothing
                                                    Select Case pnlFieldTabOrder_TabsMode.SelectedIndex + 0
                                                        Case 0
                                                            pageDic.Put(PdfName.TABS, PdfName.R)
                                                        Case 1
                                                            pageDic.Put(PdfName.TABS, PdfName.C)
                                                        Case 2
                                                            pageDic.Put(PdfName.TABS, PdfName.S)
                                                        Case Else
                                                            If Not pageDic.Get(PdfName.TABS) Is Nothing Then
                                                                pageDic.Remove(PdfName.TABS)
                                                            End If
                                                    End Select
                                                End If
                                            End If
                                        End If
                                    End If
                                Else
                                    If True = True Then
                                        If True = True Then
                                            If True = True Then
                                                If Not pageDic Is Nothing Then
                                                    Dim tabsName As PdfName = Nothing
                                                    Select Case pnlFieldTabOrder_TabsMode.SelectedIndex + 0
                                                        Case 0
                                                            pageDic.Put(PdfName.TABS, PdfName.R)
                                                        Case 1
                                                            pageDic.Put(PdfName.TABS, PdfName.C)
                                                        Case 2
                                                            pageDic.Put(PdfName.TABS, PdfName.S)
                                                        Case Else
                                                            If Not pageDic.Get(PdfName.TABS) Is Nothing Then
                                                                pageDic.Remove(PdfName.TABS)
                                                            End If
                                                    End Select
                                                End If
                                            End If
                                        Else
                                            If True = True Then
                                                If Not pageDic Is Nothing Then
                                                    Dim tabsName As PdfName = Nothing
                                                    Select Case pnlFieldTabOrder_TabsMode.SelectedIndex + 0
                                                        Case 0
                                                            pageDic.Put(PdfName.TABS, PdfName.R)
                                                        Case 1
                                                            pageDic.Put(PdfName.TABS, PdfName.C)
                                                        Case 2
                                                            pageDic.Put(PdfName.TABS, PdfName.S)
                                                        Case Else
                                                            If Not pageDic.Get(PdfName.TABS) Is Nothing Then
                                                                pageDic.Remove(PdfName.TABS)
                                                            End If
                                                    End Select
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    Next
                End If
                Session = getPDFBytes(pdfReaderDoc)
                LoadPDFReaderDoc(pdfOwnerPassword, True)
            End If
        Catch ex As Exception
            Throw ex
        Finally
        End Try
    End Sub
    ''' <summary>
    ''' This class expands a string into a list of numbers. The main use is to select a range of pages. Example: SelectPages(Session(),"1-6,!5")
    ''' </summary>
    ''' <param name="inputPdf">PDF Byte Array</param>
    ''' <param name="pageSelection">[!][o][odd][e][even]start-end</param>
    ''' <param name="ownerPassword">Pdf Owner / Modify Password</param>
    ''' <remarks></remarks>
    Public Function SelectPages(ByVal inputPdf() As Byte, ByVal pageSelection As String, Optional ByVal ownerPassword As String = "") As Byte()
        Dim reader As PdfReader = Nothing
        Dim stamper As PdfStamper = Nothing
        Dim outputPdf As New MemoryStream()
        Try
            If String.IsNullOrEmpty(ownerPassword & "") Then
                reader = New PdfReader(inputPdf)
            Else
                reader = New PdfReader(inputPdf, getBytes(ownerPassword & ""))
            End If
            reader.SelectPages(pageSelection)
            stamper = New PdfStamper(reader, outputPdf)
            stamper.Close()
            reader.Close()
            Return outputPdf.ToArray
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
        End Try
        Return inputPdf
    End Function
    Private Sub RemoveCurrentPageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RemoveCurrentPageToolStripMenuItem.Click
        Try
            If btnPage.Items.Count > 1 Then
                Dim selIndex As Integer = pageIndex
                Session = SelectPages(Session, CStr("1-" & btnPage.Items.Count.ToString() & ",!" & (page).ToString()))
                A0_LoadPDF(True)
                cUserRect.rect = Nothing
                cUserRect._highLightFieldName = ""
                fldNameHighlighted = ""
                LoadPageList(Me.btnPage)
                If pnlFields.Visible Then pnlFields.Visible = False
                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                A0_PictureBox1.Enabled = True
                A0_PictureBox2.Enabled = True
                If btnPage.Items.Count > selIndex Then
                    pageIndex = selIndex
                Else
                    pageIndex = Me.btnPage.Items.Count - 1
                End If
                btnPage_SelectedIndexChanged(Me, New EventArgs())
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub RemoveAllPagesExceptThisOneToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RemoveAllPagesExceptThisOneToolStripMenuItem.Click
        Try
            If btnPage.Items.Count > 1 Then
                Session = SelectPages(Session, CStr("" & (page).ToString()))
                LoadPageList(Me.btnPage)
                pageIndex = 0
                LoadPDFReaderDoc(pdfOwnerPassword.ToString, True)
                A0_LoadPDF(True)
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub pnlPageSize_VisibleChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles pnlPageSize.VisibleChanged
        Try
            If pnlPageSize.Visible Then
                blnModelPopupClose = MsgBoxResult.Ignore
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Copy_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Copy.CheckedChanged
        Try
            If Not cUserRect.pauseDraw Then
                If Not PDFField_Copy.Checked Then
                    If PDFField_Index.Text = "-1" Then
                        fldNameHighlightedCopy = PDFField_Name.Text & ""
                        PDFField_FieldNameRandom(True)
                    End If
                Else
                    If Not String.IsNullOrEmpty(fldNameHighlightedCopy & "") Then
                        PDFField_Name.Text = fldNameHighlightedCopy & ""
                    End If
                End If
            End If
            lblFieldType.Text = PDFField_Name.Text & ""
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            PdfForm_FieldNames_UpdateButton()
        End Try
    End Sub
    Private Sub ImportBlankPageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportBlankPageToolStripMenuItem.Click
        Try
            If True = True Then
                If True = True Then
                    blnModelPopupClose = MsgBoxResult.Ignore
                    pnlPageSize_MaintainAspectRatio.Checked = False
                    Load_PageSizePanel()
                    pnlPageSizeApsectRation_Update()
                    pnlPageSize.Show()
                    pnlPageSize.BringToFront()
                    If modelPopup_DoEvents(blnModelPopupClose) Then
                        pnlPageSize.Hide()
                    End If
                    If blnModelPopupClose <> MsgBoxResult.Ok Then Return
                    Dim doc As New iTextSharp.text.Document(pageSizes("CUSTOM"), CSng(Me.pnlPageSize_MarginLeft.Text) + 0, CSng(Me.pnlPageSize_MarginRight.Text) + 0, CSng(Me.pnlPageSize_MarginTop.Text) + 0, CSng(Me.pnlPageSize_MarginBottom.Text) + 0)
                    Dim baos As New MemoryStream()
                    Dim writer As PdfWriter = PdfWriter.GetInstance(doc, baos)
                    writer.SetPdfVersion(New PdfName(PdfWriter.VERSION_1_7))
                    writer.CompressionLevel = 0
                    writer.CreateXmpMetadata()
                    doc.Open()
                    Dim canvas As PdfContentByte = writer.DirectContentUnder()
                    doc.Add(New Paragraph(" "))
                    Try
                        writer.CloseStream = False
                        doc.Close()
                        writer.Close()
                    Catch exDoc As Exception
                        TimeStampAdd(exDoc, debugMode)
                    End Try
                    If baos.Length > 0 Then
                        Dim pdfBytes() As Byte = Nothing
                        If Not Session Is Nothing Then
                            If Session.Length > 0 Then
                                pdfBytes = PDFConcatenateForms2Buf(New Byte()() {Session, baos.ToArray()}, New String() {pdfOwnerPassword, ""}, Nothing)
                            Else
                                pdfBytes = baos.ToArray()
                            End If
                        Else
                            pdfBytes = baos.ToArray()
                        End If
                        Session = EncryptPDFDocument(pdfBytes)
                        LoadPDFReaderDoc(pdfOwnerPassword.ToString, True)
                        A0_LoadPDF(True)
                        LoadPageList(Me.btnPage)
                        ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                        A0_PictureBox1.Enabled = True
                        A0_PictureBox2.Enabled = True
                        pageIndex = Me.btnPage.Items.Count - 1
                        btnPage_SelectedIndexChanged(Me, New EventArgs())
                    End If
                End If
            End If
        Catch ex As Exception
            Throw ex
        Finally
        End Try
    End Sub
    ''' <summary>
    ''' Removes Usage Rights from a PDF
    ''' </summary>
    ''' <param name="PDFFile">PDF File Byte Array</param>
    ''' <param name="pdfownerPassword">PDF Owner Password</param>
    ''' <returns>Returns the PDF without usage rights enabled</returns>
    ''' <remarks></remarks>
    Public Function RemoveUsageRights_PDF(ByVal PDFFile As Byte(), ByVal pdfownerPassword As String) As Byte()
        Dim _tempBytes() As Byte = PDFFile
        Using reader As New iTextSharp.text.pdf.PdfReader(PDFFile, getBytes(pdfownerPassword & ""))
            Try
                If Not reader.HasUsageRights Then
                    Return _tempBytes
                End If
                If Not reader Is Nothing Then
                    reader.RemoveUsageRights()
                End If
                Dim strOut As New MemoryStream
                Using stamper As New iTextSharp.text.pdf.PdfStamper(reader, strOut)
                    stamper.Writer.CloseStream = False
                    stamper.Close()
                    Return GetUsedBytesOnly(strOut.ToArray())
                End Using
            Catch ex As Exception
                Throw ex
            Finally
                reader.Close()
            End Try
        End Using
        Return _tempBytes
    End Function
    Private Sub RemovePDFUsageRightsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RemovePDFUsageRightsToolStripMenuItem.Click
        Try
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    Session = RemoveUsageRights_PDF(Session, pdfOwnerPassword)
                    A0_LoadPDF(True)
                    Return
                End If
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Public Function getFieldPage(ByVal fldname As String, Optional ByVal kidIdx As Integer = 0, Optional ByRef pdfReaderDocTemp As PdfReader = Nothing) As Integer
        Try
            If pdfReaderDocTemp Is Nothing Then
                pdfReaderDocTemp = pdfReaderDoc
            End If
            If kidIdx < 0 Then
                kidIdx = 0
            End If
            If Not pdfReaderDoc.AcroFields Is Nothing Then
                Dim f As AcroFields.Item = pdfReaderDoc.AcroFields.GetFieldItem(fldname)
                Return f.GetPage(kidIdx)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return 1
    End Function
    Public Function A0_PdfFormField_AddAllFields(ByVal b() As Byte, ByVal sessionVariableName_WithFields As String) As Byte()
        A0_PictureBox1.Visible = False
        PDFField_Copy.Checked = False
        If String.IsNullOrEmpty(sessionVariableName_WithFields & "") Then
            sessionVariableName_WithFields = "output".ToLower
        End If
        If b Is Nothing Then
            b = Session()
        ElseIf b.Length <= 0 Then
            b = Session()
        End If
        Dim newRect As iTextSharp.text.Rectangle = Nothing
        Dim fldname As String = "", fldnamePrev As String = ""
        Try
            For Each fNameLong As String In getFieldRectangles(True, sessionVariableName_WithFields).Keys.ToArray()
                fldnamePrev = fldname
                fldname = fNameLong.ToString
                If fldname.Contains("."c) Or fldname.Contains("#") Then
                    fldname = fldname.Replace("#", ".").ToString.Substring(0, fldname.Replace("#", ".").ToString.LastIndexOf("."c))
                End If
                If Not String.IsNullOrEmpty(fldname & "") Then
                    Dim fltType As Integer = -1
                    fldNameHighlighted = fldname & ""
                    fldKidIndex = 0
                    pnlFields.Hide()
                    pnlFields.Hide()
                    Dim newFldName As String = fldname, textcolor As iTextSharp.text.BaseColor, bgcolor As iTextSharp.text.BaseColor, bordercolor As iTextSharp.text.BaseColor, pageNumber As Integer = 1, removeKidFieldIdx As Integer = -1
                    cUserRect.rect = getFieldRectangles(False, sessionVariableName_WithFields)(fNameLong)
                    Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), CSng(btnBottom.Text), CSng(btnRight.Text), CSng(btnTop.Text))
                    r = GetFieldPositionsReverse(Session(), r)
                    newRect = r
                    pageNumber = getFieldPage(fldname, 0, pdfReaderDoc) + 0
                    If pageNumber <= 0 Then
                        pageNumber = 1
                    End If
                    A0_PDFFormField_LoadProperties(Session, fldname, pageNumber, 0)
                    textcolor = New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A)
                    bgcolor = New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A)
                    bordercolor = New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A)
                    If Not String.IsNullOrEmpty(fldname & "") Then
                        fltType = GetFormFieldType(Session("output"), fldname)
                    Else
                        Select Case ComboBox1.SelectedItem.ToString.ToLower
                            Case "Textbox".ToLower
                                fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                            Case "CheckBox".ToLower
                                fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                            Case "ComboBox".ToLower
                                fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                            Case "ListBox".ToLower
                                fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                            Case "Button".ToLower
                                fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                            Case "RadioButton".ToLower
                                fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                            Case "Signature".ToLower
                                fltType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                            Case Else
                        End Select
                    End If
                    Dim b2() As Byte = Nothing
                    Select Case fltType
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                            b2 = A0_PDFFormField_Modify_Button(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                            b2 = A0_PDFFormField_Modify_TextField(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                            b2 = A0_PDFFormField_Modify_CheckBox(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                            b2 = A0_PDFFormField_Modify_ComboBox_Test_Multi(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                            b2 = A0_PDFFormField_Modify_ListBox(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                            b2 = A0_PDFFormField_Modify_Signature(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                            b2 = A0_PDFFormField_Modify_RadioField(b, fldname, newFldName, textcolor, bgcolor, bordercolor, newRect, pageNumber, removeKidFieldIdx)
                        Case Else
                    End Select
                    b = b2
                Else
                End If
            Next
            Return b
        Catch ex As Exception
            fldnamePrev = fldnamePrev
            Throw ex
        Finally
            pnlFields.Hide()
            A0_PictureBox1.Visible = True
            A0_PictureBox2.Visible = True
            CheckfieldNameExits("", True)
        End Try
        PDFField_Copy.Checked = False
        Return b
    End Function
    Private Sub FlattenFormFieldsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FlattenFormFieldsToolStripMenuItem.Click
        Dim reader As iTextSharp.text.pdf.PdfReader
        If String.IsNullOrEmpty(pdfOwnerPassword & "") Then
            reader = New iTextSharp.text.pdf.PdfReader(Session)
        Else
            reader = New iTextSharp.text.pdf.PdfReader(Session, getBytes(pdfOwnerPassword))
        End If
        Dim MemStream As New MemoryStream
        Try
            If Not reader Is Nothing Then
                If reader.HasUsageRights Then
                    reader.RemoveUsageRights()
                End If
                Using stamper As PdfStamper = New iTextSharp.text.pdf.PdfStamper(reader, MemStream)
                    stamper.FormFlattening = True
                    stamper.Writer.CloseStream = False
                    stamper.Close()
                End Using
                If Not MemStream Is Nothing Then
                    Dim b() As Byte = GetUsedBytesOnly(MemStream, True)
                    preventClickDialog = True
                    If String.IsNullOrEmpty(fpath & "") Then
                        SaveFileDialog1.InitialDirectory = ApplicationDataFolder(False, "") & ""
                    Else
                        SaveFileDialog1.InitialDirectory = System.IO.Path.GetDirectoryName(fpath)
                    End If
                    SaveFileDialog1.Filter = "PDF|*.pdf|JPG|*.jpg|PNG|*.png|GIF|*.gif|BMP|*.bmp|TIFF|*.tiff"
                    If String.IsNullOrEmpty(fpath & "") Then
                        SaveFileDialog1.FileName = ""
                    Else
                        SaveFileDialog1.FileName = System.IO.Path.GetFileName(fpath & "")
                    End If
                    SaveFileDialog1.AutoUpgradeEnabled = True
                    SaveFileDialog1.DefaultExt = ".pdf"
                    SaveFileDialog1.FilterIndex = 1
                    SaveFileDialog1.Title = "Save As"
                    SaveFileDialog1.ValidateNames = True
                    SaveFileDialog1.OverwritePrompt = True
                    Try
                        Select Case SaveFileDialog1.ShowDialog(Me)
                            Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                                If Not String.IsNullOrEmpty(SaveFileDialog1.FileName) Then
                                    RemoveUnusedObjectsToolStripMenuItem_Click(Me, New EventArgs())
                                    Dim fn As String = SaveFileDialog1.FileName & ""
                                    Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                                        Case "pdf"
                                            File.WriteAllBytes(fn, b)
                                        Case "png"
                                            b = A0_LoadImage(b)
                                            File.WriteAllBytes(fn, b)
                                        Case "jpg"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Jpeg)
                                        Case "bmp"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Bmp)
                                        Case "gif"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Gif)
                                        Case "tiff"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Tiff)
                                        Case Else
                                            File.WriteAllBytes(fn, b)
                                    End Select
                                End If
                            Case Else
                                Return
                        End Select
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    Finally
                        timerPreventDefaultExpires.Enabled = True
                    End Try
                End If
            Else
                Return
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Public Function MergePDFs(ByVal lst As List(Of String)) As Byte()
        Try
            Dim doc As New iTextSharp.text.Document
            Dim m As New MemoryStream
            Dim readers As New List(Of PdfReader)
            Using copy As PdfSmartCopy = New PdfSmartCopy(doc, m)
                copy.SetMergeFields()
                copy.CloseStream = False
                doc.Open()
                For Each strFileName As String In lst.ToArray()
                    If FileExists(strFileName & "") Then
                        Try
                            readers.Add(New PdfReader(strFileName))
                            If readers(readers.Count - 1).IsOpenedWithFullPermissions Then
                                copy.AddDocument(readers(readers.Count - 1))
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    End If
                Next
                doc.Close()
                copy.Close()
                For Each r As PdfReader In readers.ToArray()
                    Try
                        r.Dispose()
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                Next
            End Using
            Return m.ToArray
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function MergePDFs(ByVal lst() As String) As Byte()
        Try
            Dim doc As New iTextSharp.text.Document
            Dim m As New MemoryStream
            Dim readers As New List(Of PdfReader)
            Using copy As PdfSmartCopy = New PdfSmartCopy(doc, m)
                copy.SetMergeFields()
                copy.CloseStream = False
                doc.Open()
                For Each strFileName As String In lst.ToArray()
                    If FileExists(strFileName & "") Then
                        Try
                            readers.Add(New PdfReader(strFileName))
                            If readers(readers.Count - 1).IsOpenedWithFullPermissions Then
                                copy.AddDocument(readers(readers.Count - 1))
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    End If
                Next
                doc.Close()
                copy.Close()
                For Each r As PdfReader In readers.ToArray()
                    Try
                        r.Dispose()
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                Next
            End Using
            Return m.ToArray
        Catch ex As Exception
            Throw ex
        End Try
        Return Nothing
    End Function
    Public Function MergePDFs(ByVal lst() As String, flattenDocuments As Boolean) As Byte()
        Try
            Dim doc As New iTextSharp.text.Document
            Dim m As New MemoryStream
            Dim readers As New List(Of PdfReader)
            Using copy As PdfSmartCopy = New PdfSmartCopy(doc, m)
                copy.SetMergeFields()
                copy.CloseStream = False
                doc.Open()
                For Each strFileName As String In lst.ToArray()
                    If FileExists(strFileName & "") Then
                        Try
                            Dim fdfDoc As New FDFApp.FDFDoc_Class, fdfApp As New FDFApp.FDFApp_Class
                            fdfDoc = fdfApp.PDFOpenFromFile(strFileName, True, True, "")
                            Dim bytes() As Byte = File.ReadAllBytes(strFileName)
                            bytes = UnlockSecurePDF(bytes)
                            If flattenDocuments Then
                                bytes = fdfDoc.PDFFlatten2Buf(bytes, True, "")
                            End If
                            Try
                                readers.Add(New PdfReader(bytes))
                                If readers(readers.Count - 1).IsOpenedWithFullPermissions Then
                                    copy.AddDocument(readers(readers.Count - 1))
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    End If
                Next
                doc.Close()
                copy.Close()
                For Each r As PdfReader In readers.ToArray()
                    Try
                        r.Dispose()
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                Next
            End Using
            Return m.ToArray
        Catch ex As Exception
            Throw ex
        End Try
        Return Nothing
    End Function
    Public Function MergePDFs(ByVal lst() As String, pages() As String, flattenDocuments As Boolean, Optional renameFields As Boolean = True, Optional RecalculateOrder As Boolean = False) As Byte()
        Try
            Dim doc As New iTextSharp.text.Document
            Dim m As New MemoryStream
            Dim readers As New List(Of PdfReader)
            Dim lstFieldNames As New List(Of String)
            Dim copy As PdfSmartCopy = New PdfSmartCopy(doc, m)
            copy.SetMergeFields()
            copy.CloseStream = False
            doc.Open()
            Dim pdfArrayCalculationOrder As New List(Of PdfArray)
            Dim idx As Integer = -1
            Dim calculationOrderFieldNames As New List(Of String)
            For Each strFileName As String In lst.ToArray()
                idx += 1
                Dim dictRenamedFields As New Dictionary(Of String, String)
                If FileExists(strFileName & "") Then
                    Try
                        Dim fdfDoc As New FDFApp.FDFDoc_Class, fdfApp As New FDFApp.FDFApp_Class
                        fdfDoc = fdfApp.PDFOpenFromFile(strFileName, True, True, "")
                        Dim bytes() As Byte = File.ReadAllBytes(strFileName)
                        bytes = UnlockSecurePDF(bytes)
                        If flattenDocuments Then
                            bytes = fdfDoc.PDFFlatten2Buf(bytes, True, "")
                        ElseIf renameFields Then
                            fdfDoc = fdfApp.PDFOpenFromBuf(bytes, True, True, "")
                            readers.Add(New PdfReader(bytes))
                            Dim stampMemoryStream As New MemoryStream
                            Using stamp As New PdfStamper(readers(readers.Count - 1), stampMemoryStream)
                                For Each fld As FDFApp.FDFDoc_Class.FDFField In fdfDoc.XDPGetAllFields()
GOTO_NewGuid:
                                    Dim guid1 As String = Guid.NewGuid().ToString()
                                    guid1 = guid1.Replace("-"c, "")
                                    guid1 = guid1.Substring(0, 4)
                                    guid1 = "_" & guid1.ToString.ToLower()
                                    If lstFieldNames.Contains(fld.FieldName.ToString().ToLower()) Then
                                        Dim fldNameNew As String = "form" & idx & "_" & fld.FieldName.ToString()
                                        If Not lstFieldNames.Contains(fldNameNew.ToString().ToLower()) Then
                                            stamp.AcroFields.RenameField(fld.FieldName, fldNameNew)
                                            lstFieldNames.Add(fldNameNew.ToString().ToLower())
                                            dictRenamedFields.Add(fldNameNew, fld.FieldName)
                                        ElseIf Not lstFieldNames.Contains(fldNameNew.ToString().ToLower() & guid1) Then
                                            stamp.AcroFields.RenameField(fld.FieldName, fldNameNew & guid1)
                                            lstFieldNames.Add(fldNameNew.ToString().ToLower() & guid1)
                                            dictRenamedFields.Add(fldNameNew, fld.FieldName)
                                        Else
                                            GoTo GOTO_NewGuid
                                        End If
                                    Else
                                        lstFieldNames.Add(fld.FieldName.ToString().ToLower())
                                    End If
                                Next
                                stamp.Writer.CloseStream = False
                                If RecalculateOrder Then
                                    For pg As Integer = 0 To stamp.Reader.NumberOfPages
                                        For Each fldName As String In GetAllFieldsOnPage(stamp.Reader, pg, False)
                                            Dim formatField As PdfDictionary = Nothing
                                            If Not iTextFieldItemPdfDictionary(fldName, stamp.Reader, pg) Is Nothing Then
                                                If Not iTextFieldItemPdfDictionary(fldName, stamp.Reader, pg).Get(PdfName.AA) Is Nothing Then
                                                    formatField = iTextFieldItemPdfDictionary(fldName, stamp.Reader, pg).GetAsDict(PdfName.AA)
                                                    If Not iTextGetPDFObject(formatField, stamp.Reader, PdfName.C) Is Nothing Then
                                                        If Not iTextGetPDFObject(formatField, stamp.Reader, PdfName.C) Is Nothing Then
                                                            Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, stamp.Reader, PdfName.C)
                                                            Dim strJS As String = iTextGetPDFString(calcScriptC, stamp.Reader, PdfName.JS) & ""
                                                            Dim strJSKeyStrokeTmp2 As String = strJS & ""
                                                            Dim strS As String = iTextGetPDFObject(calcScriptC, stamp.Reader, PdfName.S).ToString
                                                            If Not String.IsNullOrEmpty(strJS & "") Then
                                                                For Each fldRenamed As String In dictRenamedFields.Keys.ToArray
                                                                    strJS = strJS.Replace("""" & dictRenamedFields(fldRenamed) & """", """" & (fldRenamed) & """")
                                                                Next
                                                                calcScriptC.Put(PdfName.JS, New PdfString(strJS))
                                                                calculationOrderFieldNames.Add(fldName)
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        Next
                                    Next
                                End If
                                stamp.Close()
                            End Using
                            bytes = stampMemoryStream.ToArray
                        Else
                            If RecalculateOrder Then
                                fdfDoc = fdfApp.PDFOpenFromBuf(bytes, True, True, "")
                                readers.Add(New PdfReader(bytes))
                                Dim stampMemoryStream As New MemoryStream
                                Using stamp As New PdfStamper(readers(readers.Count - 1), stampMemoryStream)
                                    For Each fld As FDFApp.FDFDoc_Class.FDFField In fdfDoc.XDPGetAllFields()
                                        If Not lstFieldNames.Contains(fld.FieldName.ToString().ToLower()) Then
                                            lstFieldNames.Add(fld.FieldName.ToString().ToLower())
                                            If Not dictRenamedFields.Keys.Contains(fld.FieldName) Then
                                                dictRenamedFields.Add(fld.FieldName, fld.FieldName)
                                            End If
                                        End If
                                    Next
                                    If RecalculateOrder Then
                                        For pg As Integer = 0 To stamp.Reader.NumberOfPages
                                            For Each fldName As String In GetAllFieldsOnPage(stamp.Reader, pg, False)
                                                Dim formatField As PdfDictionary = Nothing
                                                If Not iTextFieldItemPdfDictionary(fldName, stamp.Reader, pg) Is Nothing Then
                                                    If Not iTextFieldItemPdfDictionary(fldName, stamp.Reader, pg).Get(PdfName.AA) Is Nothing Then
                                                        formatField = iTextFieldItemPdfDictionary(fldName, stamp.Reader, pg).GetAsDict(PdfName.AA)
                                                        If Not iTextGetPDFObject(formatField, stamp.Reader, PdfName.C) Is Nothing Then
                                                            If Not iTextGetPDFObject(formatField, stamp.Reader, PdfName.C) Is Nothing Then
                                                                Dim calcScriptC As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(formatField, stamp.Reader, PdfName.C)
                                                                Dim strJS As String = iTextGetPDFString(calcScriptC, stamp.Reader, PdfName.JS) & ""
                                                                Dim strJSKeyStrokeTmp2 As String = strJS & ""
                                                                Dim strS As String = iTextGetPDFObject(calcScriptC, stamp.Reader, PdfName.S).ToString
                                                                If Not String.IsNullOrEmpty(strJS & "") Then
                                                                    For Each fldRenamed As String In dictRenamedFields.Keys.ToArray
                                                                        strJS = strJS.Replace("""" & dictRenamedFields(fldRenamed) & """", """" & (fldRenamed) & """")
                                                                    Next
                                                                    calcScriptC.Put(PdfName.JS, New PdfString(strJS))
                                                                    calculationOrderFieldNames.Add(fldName)
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            Next
                                        Next
                                    End If
                                    stamp.Close()
                                End Using
                                bytes = stampMemoryStream.ToArray
                            End If
                        End If
                        readers.Add(New PdfReader(bytes))
                        Try
                            If Not pages Is Nothing Then
                                If pages.Length > 0 And idx < pages.Length Then
                                    If Not pages(idx) Is Nothing Then
                                        If Not pages(idx) = "" Then
                                            If readers(readers.Count - 1).IsOpenedWithFullPermissions Then
                                                readers(readers.Count - 1).SelectPages(pages(idx))
                                                copy.AddDocument(readers(readers.Count - 1))
                                            Else
                                                copy.AddDocument(readers(readers.Count - 1))
                                            End If
                                        Else
                                            copy.AddDocument(readers(readers.Count - 1))
                                        End If
                                    Else
                                        copy.AddDocument(readers(readers.Count - 1))
                                    End If
                                Else
                                    copy.AddDocument(readers(readers.Count - 1))
                                End If
                            Else
                                copy.AddDocument(readers(readers.Count - 1))
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                End If
            Next
            Try
                doc.Close()
            Catch exClose As Exception
                Err.Clear()
            End Try
            Try
                copy.Close()
            Catch exClose As Exception
                Err.Clear()
            End Try
            For Each r As PdfReader In readers.ToArray()
                Try
                    r.Close()
                    r.Dispose()
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            Next
            Dim b() As Byte = m.ToArray
            If RecalculateOrder Then
                If calculationOrderFieldNames.Count > 0 Then
                    For Each fldName As String In calculationOrderFieldNames.ToArray
                        Dim r As New PdfReader(b.ToArray())
                        Dim sm As New MemoryStream
                        Using stamp As New PdfStamper(r, sm)
                            AddCalculationOrder(fldName, stamp.Reader)
                            Dim form As AcroFields = stamp.Reader.AcroFields
                            Dim str As String = ""
                            Dim item As AcroFields.Item = form.GetFieldItem(fldName)
                            Dim dict As PdfDictionary = item.GetWidget(0)
                            Dim mk As PdfDictionary = iTextGetPDFObject(dict, PdfName.MK)
                            Dim merged As PdfDictionary = item.GetMerged(0)
                            Dim v As PdfString = iTextGetPDFObject(merged, PdfName.V)
                            Dim strVal As String = ""
                            If Not v Is Nothing Then
                                strVal = v.ToUnicodeString()
                            Else
                                strVal = ""
                            End If
                            stamp.Writer.CloseStream = False
                            stamp.Close()
                            Dim AA As PdfDictionary = Nothing
                            If Not iTextFieldItemPdfDictionary(fldName, stamp.Reader) Is Nothing Then
                                If Not iTextFieldItemPdfDictionary(fldName, stamp.Reader).Get(PdfName.AA) Is Nothing Then
                                    AA = iTextFieldItemPdfDictionary(fldName, stamp.Reader).GetAsDict(PdfName.AA)
                                End If
                            End If
                            Try
                                Dim validateField As PdfDictionary = Nothing
                                If validateField Is Nothing Then
                                    validateField = AA
                                End If
                                Dim strJSTMP As String = ""
                                If validateField Is Nothing Then Exit Try
                                If Not PDFField_CopyValidation.Checked Then
                                    If Not iTextGetPDFObject(validateField, PdfName.V) Is Nothing Then
                                        Dim validateVV As iTextSharp.text.pdf.PdfDictionary = iTextGetPDFObject(validateField, stamp.Reader, PdfName.V)
                                        Dim strJS As String = iTextGetPDFString(validateVV, stamp.Reader, PdfName.JS) & ""
                                        strJSTMP = strJS & ""
                                        PDFField_Validation_Range_Custom.Text = strJSTMP & ""
                                        Dim strS As String = iTextGetPDFObject(validateVV, stamp.Reader, PdfName.S).ToString
                                        If strS.ToString.TrimStart("/"c).ToLower = "javascript" Then
                                            If strJS.TrimStart("/"c).ToLower.StartsWith("AFRange_Validate".ToLower) Then
                                                strJS = strJS.Replace(CStr("AFRange_Validate"), "")
                                                strJS = strJS.TrimEnd(CStr(";"))
                                                strJS = strJS.TrimEnd(CStr(")"))
                                                strJS = strJS.TrimStart(CStr("("))
                                                Dim strJSParameters() As String = strJS.Split(","c)
                                                Try
                                                    PDFField_Validation_Range_From.Text = CInt(strJSParameters(1))
                                                Catch exF As Exception
                                                    TimeStampAdd(exF, debugMode)
                                                End Try
                                                Try
                                                    PDFField_Validation_Range_To.Text = CInt(strJSParameters(3))
                                                Catch exF As Exception
                                                    TimeStampAdd(exF, debugMode)
                                                End Try
                                                PDFField_Validations_Range.Checked = True
                                            End If
                                        End If
                                    End If
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            Finally
                                If Not PDFField_Validations_Range.Checked And Not String.IsNullOrEmpty(PDFField_Validation_Range_Custom.Text & "") Then
                                    PDFField_Validations_CustomScript.Checked = True
                                End If
                            End Try
                            Try
                                Dim formatField As PdfDictionary = AA
                                If formatField Is Nothing Then
                                    Exit Try
                                End If
                                Dim formatFF As PdfDictionary = iTextGetPDFObject(formatField, stamp.Reader, PdfName.F)
                                Dim strJSTMP As String = ""
                                If Not formatFF Is Nothing Then
                                    Dim strJS As String = iTextGetPDFString(formatFF, stamp.Reader, PdfName.JS) & ""
                                    strJSTMP = strJS & ""
                                    Dim strS As String = iTextGetPDFString(formatFF, stamp.Reader, PdfName.S) & ""
                                    If strS.ToString.TrimStart("/"c).ToLower = "javascript" Then
                                        If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_Format".ToLower) Then
                                            strJS = strJS.Replace(CStr("AFNumber_Format"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            Dim strJSParameters() As String = strJS.Split(","c)
                                            Try
                                                PDFField_Format_Number_DecimalPlaces.SelectedIndex = CInt(strJSParameters(0))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                PDFField_Format_Number_SeparatorStyle.SelectedIndex = CInt(strJSParameters(1))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                PDFField_Format_Number_Negative_UseRedText.Checked = False
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                Select Case CInt(strJSParameters(2))
                                                    Case 0
                                                        PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                        PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                    Case 1
                                                        PDFField_Format_Number_Negative_UseRedText.Checked = True
                                                        PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                    Case 2
                                                        PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                        PDFField_Format_Number_Negative_ShowParantheses.Checked = True
                                                    Case 3
                                                        PDFField_Format_Number_Negative_ShowParantheses.Checked = True
                                                        PDFField_Format_Number_Negative_UseRedText.Checked = True
                                                End Select
                                            Catch exF As Exception
                                                PDFField_Format_Number_Negative_UseRedText.Checked = False
                                                PDFField_Format_Number_Negative_ShowParantheses.Checked = False
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                Select Case CStr(strJSParameters(4) & "").Trim()
                                                    Case ""
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case """"""
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case CStr(" ""\u0024""").Trim()
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 1
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case CStr(" ""\u0020\u0044\u004d""").Trim()
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 2
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case CStr(" ""\u20ac""").Trim()
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 3
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case CStr(" ""\u0066\u006c""").Trim()
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 4
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case CStr(" ""\u0020\u0046""").Trim()
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 5
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case CStr(" ""\u0020\u006b\u0072""").Trim()
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 6
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case CStr(" ""\u004c\u002e\u0020""").Trim()
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 7
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case CStr(" ""\u0020\u0050\u0074\u0073""").Trim()
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 8
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case CStr(" ""\u00a3""").Trim()
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 9
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case CStr(" ""\u00a5""").Trim()
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = 10
                                                        PDFField_Format_Category.SelectedIndex = 1
                                                    Case Else
                                                        PDFField_Format_Number_CurrencySymbol.Items.Add(strJSParameters(4))
                                                        PDFField_Format_Number_CurrencySymbol.SelectedIndex = PDFField_Format_Number_CurrencySymbol.Items.Count - 1
                                                        PDFField_Format_Category.SelectedIndex = PDFField_Format_Category.Items.Count - 1
                                                End Select
                                            Catch exF As Exception
                                                PDFField_Format_Number_CurrencySymbol.SelectedIndex = 0
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                Select Case CBool(strJSParameters(5).ToString.Trim())
                                                    Case True
                                                        PDFField_Format_Number_CurrencySymbol_Prepend.Checked = True
                                                    Case False
                                                        PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                                    Case Else
                                                        PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                                End Select
                                            Catch exF As Exception
                                                PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                        ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_Format".ToLower) Then
                                            strJS = strJS.Replace(CStr("AFPercent_Format"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            Dim strJSParameters() As String = strJS.Split(","c)
                                            Try
                                                PDFField_Format_Percentage_DecimalPlaces.SelectedIndex = CInt(strJSParameters(0))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            Try
                                                PDFField_Format_Percentage_SeparatorStyle.SelectedIndex = CInt(strJSParameters(1))
                                            Catch exF As Exception
                                                TimeStampAdd(exF, debugMode)
                                            End Try
                                            PDFField_Format_Category.SelectedIndex = 2
                                        ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_FormatEx".ToLower) Then
                                            strJS = strJS.Replace(CStr("AFDate_FormatEx"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            strJS = strJS.TrimStart("""")
                                            strJS = strJS.TrimEnd("""")
                                            Dim selIndex As Integer = -1
                                            For iVal As Integer = 0 To PDFField_Format_Dates.Items.Count - 1
                                                If strJS = PDFField_Format_Dates.Items(iVal).ToString Then
                                                    selIndex = iVal
                                                    Exit For
                                                End If
                                            Next
                                            PDFField_Format_Category.SelectedIndex = 3
                                            If selIndex >= 0 Then
                                                PDFField_Format_Dates.SelectedIndex = selIndex
                                                PDFField_Format_Date_Custom.Text = strJS.ToString
                                                PDFField_Format_Date_Custom.Visible = False
                                            Else
                                                PDFField_Format_Dates.SelectedIndex = PDFField_Format_Dates.Items.Count - 1
                                                PDFField_Format_Date_Custom.Text = strJS.ToString
                                                PDFField_Format_Date_Custom.Visible = True
                                            End If
                                        ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_Format(".ToLower) Then
                                            Dim strJSTemp As String = strJS
                                            strJS = strJS.Replace(CStr("AFTime_Format"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            strJS = strJS.TrimStart("""")
                                            strJS = strJS.TrimEnd("""")
                                            Dim selIndex As Integer = CInt(strJS)
                                            PDFField_Format_Category.SelectedIndex = 4
                                            If selIndex >= 0 Then
                                                PDFField_Format_Times.SelectedIndex = selIndex
                                                PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(selIndex).ToString
                                                PDFField_Format_Time_Custom.Visible = False
                                            Else
                                                PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1
                                                PDFField_Format_Time_Custom.Text = strJSTemp.ToString
                                                PDFField_Format_Time_Custom.Visible = True
                                            End If
                                        ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_FormatEx(".ToLower) Then
                                            Dim strJSTemp As String = strJS
                                            strJS = strJS.Replace(CStr("AFTime_FormatEx"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            strJS = strJS.TrimStart("""")
                                            strJS = strJS.TrimEnd("""")
                                            Dim selIndex As Integer = -1
                                            For iVal As Integer = 0 To PDFField_Format_Times.Items.Count - 1
                                                If strJS = PDFField_Format_Times.Items(iVal).ToString Then
                                                    selIndex = iVal
                                                    Exit For
                                                End If
                                            Next
                                            PDFField_Format_Category.SelectedIndex = 4
                                            If selIndex >= 0 Then
                                                PDFField_Format_Times.SelectedIndex = selIndex
                                                PDFField_Format_Time_Custom.Text = PDFField_Format_Times.Items(selIndex).ToString
                                                PDFField_Format_Time_Custom.Visible = False
                                            Else
                                                PDFField_Format_Times.SelectedIndex = PDFField_Format_Times.Items.Count - 1
                                                PDFField_Format_Time_Custom.Text = strJS.ToString
                                                PDFField_Format_Time_Custom.Visible = True
                                            End If
                                        ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_Format(".ToLower) Then
                                            Dim strJSTemp As String = strJS
                                            strJS = strJS.Replace(CStr("AFSpecial_Format"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            strJS = strJS.TrimStart("""")
                                            strJS = strJS.TrimEnd("""")
                                            Dim selIndex As Integer = CInt(strJS)
                                            PDFField_Format_Category.SelectedIndex = 5
                                            If selIndex >= 0 Then
                                                PDFField_Format_Specials.SelectedIndex = selIndex
                                                PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                                PDFField_Format_Special_Custom.Visible = False
                                            Else
                                                PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                                PDFField_Format_Special_Custom.Text = strJSTemp.ToString
                                                PDFField_Format_Special_Custom.Visible = True
                                            End If
                                        ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_FormatEx(".ToLower) Then
                                            Dim strJSTemp As String = strJS
                                            strJS = strJS.Replace(CStr("AFSpecial_FormatEx"), "")
                                            strJS = strJS.TrimEnd(CStr(";"))
                                            strJS = strJS.TrimEnd(CStr(")"))
                                            strJS = strJS.TrimStart(CStr("("))
                                            strJS = strJS.TrimStart("""")
                                            strJS = strJS.TrimEnd("""")
                                            Dim selIndex As Integer = -1
                                            PDFField_Format_Category.SelectedIndex = 5
                                            For iVal As Integer = 0 To PDFField_Format_Specials.Items.Count - 1
                                                If strJS = PDFField_Format_Specials.Items(iVal).ToString Then
                                                    selIndex = iVal
                                                    Exit For
                                                End If
                                            Next
                                            If selIndex >= 0 Then
                                                PDFField_Format_Specials.SelectedIndex = selIndex
                                                PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                                PDFField_Format_Special_Custom.Visible = False
                                            Else
                                                PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                                PDFField_Format_Special_Custom.Text = strJS.ToString
                                                PDFField_Format_Special_Custom.Visible = True
                                            End If
                                        Else
                                            PDFField_Format_Category.SelectedIndex = 6
                                        End If
                                    End If
                                    PDFField_Format_Custom_Format_Script.Text = strJSTMP
                                End If
                            Catch
                                Err.Clear()
                            End Try
                            b = A0_Set_PDFField_Value(sm.ToArray, fldName, strVal, A0_GetFormattedTextBox(strVal), True)
                        End Using
                    Next
                    m = New MemoryStream(b.ToArray)
                End If
            End If
            Return m.ToArray
        Catch ex As Exception
            Throw ex
        End Try
        Return Nothing
    End Function
    Public Function MergePDFs(ByVal lst() As String, ByVal passwords() As String) As Byte()
        Try
            Dim doc As New iTextSharp.text.Document
            Dim m As New MemoryStream
            Dim readers As New List(Of PdfReader)
            Using copy As PdfSmartCopy = New PdfSmartCopy(doc, m)
                copy.SetMergeFields()
                copy.CloseStream = False
                doc.Open()
                Try
                    Dim i As Integer = 0
                    If lst.Length = passwords.Length Then
                        For Each strFileName As String In lst.ToArray()
                            If FileExists(strFileName & "") Then
                                Try
                                    readers.Add(New PdfReader(strFileName & "", getBytes(passwords(i) & "")))
                                    If readers(readers.Count - 1).IsOpenedWithFullPermissions Then
                                        copy.AddDocument(readers(readers.Count - 1))
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            End If
                            i += 1
                        Next
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
                doc.Close()
                copy.Close()
                For Each r As PdfReader In readers.ToArray()
                    Try
                        r.Dispose()
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                Next
            End Using
            Return m.ToArray
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return Nothing
    End Function
    Public Function MovePage(ByVal bFile() As Byte, ByVal pageFrom As Integer, ByVal pageTo As Integer) As Byte()
        Try
            Dim m As New MemoryStream
            Dim readers As New List(Of PdfReader)
            If bFile.Length > 0 Then
                Try
                    Using reader1 As New PdfReader(bFile, getBytes(pdfOwnerPassword & ""))
                        Dim r As PdfReader = Nothing
                        r = reader1.Clone()
                        r.SelectPages(CInt(pageFrom).ToString)
                        readers.Add(r)
                        r = reader1.Clone()
                        r.SelectPages("1-" & CInt(pageTo - 1).ToString)
                        readers.Add(r)
                        r = reader1.Clone()
                        r.SelectPages(CInt(pageTo).ToString & "-" & reader1.NumberOfPages().ToString())
                        readers.Add(r)
                        Dim pdfBytes As New List(Of Byte())
                        pdfBytes.Add(getPDFBytes(readers(0)))
                        pdfBytes.Add(getPDFBytes(readers(1)))
                        pdfBytes.Add(getPDFBytes(readers(2)))
                        For Each r1 As PdfReader In readers.ToArray()
                            Try
                                r1.Close()
                                r1.Dispose()
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Next
                        m = New MemoryStream(MergeFiles(pdfBytes.ToArray()))
                    End Using
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
            End If
            Return m.ToArray
        Catch ex As Exception
            Throw ex
        End Try
        Return Nothing
    End Function
    Private Sub MergePDFFilesInFolderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim MemStream As New MemoryStream
        Try
            If True = True Then
                Dim fsel As New FolderSelect.FolderSelectDialog()
                fsel.InitialDirectory = ApplicationDataFolder(False, "")
                fsel.Title = "Select a folder with PDF forms:"
                Select Case fsel.ShowDialog(Me.Handle)
                    Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                        Dim selFolder As String = fsel.FileName 'FolderBrowserDialog1.SelectedPath
                        Dim files As New List(Of String)
                        For Each f As String In Directory.GetFiles(selFolder & "")
                            If Not String.IsNullOrEmpty(f & "") Then
                                If GetFileExtension(f & "").ToString.Replace(".", "").ToLower() = "pdf" Then
                                    If Not files.Contains(f & "") Then
                                        Try
                                            files.Add(f & "")
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                    End If
                                End If
                            End If
                        Next
                        If files.Count > 0 Then
                            Select Case MessageBox.Show("Flatten all form fields?", "Flatten?", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                                Case DialogResult.Yes, DialogResult.OK
                                    MemStream = New MemoryStream(MergePDFs(files.ToArray(), True))
                                Case Else
                                    Select Case MessageBox.Show("Rename identical form fields?", "Rename?", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                                        Case DialogResult.Yes, DialogResult.OK
                                            MemStream = New MemoryStream(MergePDFs(files.ToArray(), Nothing, False, True, False))
                                        Case Else
                                            MemStream = New MemoryStream(MergePDFs(files.ToArray(), False))
                                    End Select
                            End Select
                        End If
                    Case Else
                        Return
                End Select
                If Not MemStream Is Nothing Then
                    If MemStream.Length <= 0 Then Return
                    Dim b() As Byte = GetUsedBytesOnly(MemStream, True)
                    preventClickDialog = True
                    If String.IsNullOrEmpty(fpath & "") Then
                        SaveFileDialog1.InitialDirectory = ApplicationDataFolder(False, "") & ""
                    Else
                        SaveFileDialog1.InitialDirectory = System.IO.Path.GetDirectoryName(fpath)
                    End If
                    SaveFileDialog1.Filter = "PDF|*.pdf"
                    If String.IsNullOrEmpty(fpath & "") Then
                        SaveFileDialog1.FileName = ""
                    Else
                        SaveFileDialog1.FileName = System.IO.Path.GetFileName(fpath & "")
                    End If
                    SaveFileDialog1.AutoUpgradeEnabled = True
                    SaveFileDialog1.DefaultExt = ".pdf"
                    SaveFileDialog1.FilterIndex = 1
                    SaveFileDialog1.Title = "Save As"
                    SaveFileDialog1.ValidateNames = True
                    SaveFileDialog1.OverwritePrompt = True
                    Try
                        Select Case SaveFileDialog1.ShowDialog(Me)
                            Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                                If Not String.IsNullOrEmpty(SaveFileDialog1.FileName) Then
                                    Dim fn As String = SaveFileDialog1.FileName & ""
                                    Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                                        Case "pdf"
                                            File.WriteAllBytes(fn, b)
                                        Case "png"
                                            b = A0_LoadImage(b)
                                            File.WriteAllBytes(fn, b)
                                        Case "jpg"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Jpeg)
                                        Case "bmp"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Bmp)
                                        Case "gif"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Gif)
                                        Case "tiff"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Tiff)
                                        Case Else
                                            File.WriteAllBytes(fn, b)
                                    End Select
                                End If
                            Case Else
                                Return
                        End Select
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    Finally
                        timerPreventDefaultExpires.Enabled = True
                    End Try
                End If
            Else
                Return
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub RadioButton_Checked_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton_Checked.CheckedChanged
        Try
            PDFField_Value_Checked.Checked = RadioButton_Checked.Checked
            If ComboBox1.SelectedItem.ToString().ToLower() = "CheckBox".ToLower() Then
                RadioButton_OnValue.Text = IIf(String.IsNullOrEmpty(RadioButton_OnValue.Text & ""), "Yes", RadioButton_OnValue.Text & "")
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Function FDFCheckCharReverse(ByVal strINPUT As String) As String
        If strINPUT.Length <= 0 Then
            Return ""
            Exit Function
        End If
        strINPUT = strINPUT.Replace("\\".ToString, "\".ToString)
        For Each chrReplace As Char In "/$#~%*^()+=[]{};""<>?|!'".ToCharArray
            If strINPUT.IndexOf("\" & chrReplace) >= 0 Then
                strINPUT = strINPUT.Replace("\" & chrReplace, chrReplace)
            End If
        Next
        strINPUT = strINPUT.Replace("\r", vbNewLine)
        strINPUT = strINPUT.Replace("\" & Environment.NewLine, vbNewLine)
        strINPUT = strINPUT.Replace("\" & Chr(13), vbNewLine)
        strINPUT = strINPUT.Replace("\" & Chr(10), vbNewLine)
        Return strINPUT.ToString
    End Function
    Private Sub PDFField_Action_Panel_SubmitForm_Send_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_SubmitForm_Send.Click
        Try
            Dim submit_bytes() As Byte = Nothing, submit_url As String = PDFField_Action_Panel_SubmitForm_URL.Text.ToString & ""
            Dim w As New WebClient
            w.UseDefaultCredentials = True
            w.Encoding = cFDFDoc.DefaultEncoding
            _cFDFDoc.FDFClose()
            _cFDFDoc = cFDFDoc(True)
            Select Case PDFField_Action_Panel_SubmitForm_Format.SelectedItem.ToString.ToLower
                Case "pdf".ToLower
                    _cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
                    w.Headers.Add("Content-Type", cFDFApp.MimePDF)
                    submit_bytes = Session
                Case "fdf".ToLower
                    _cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
                    If PDFField_Action_Panel_SubmitForm_OnlyTheseFields.Checked Then
                        If PDFField_Action_Panel_SubmitForm_FieldsIncludeSelected.Checked Then
                            For i As Integer = 0 To PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Count - 1
                                If Not PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Checked Then
                                    cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                ElseIf Not PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked Then
                                    If String.IsNullOrEmpty(cFDFDoc.FDFGetValue(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "").ToString() & "") Then
                                        cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                    End If
                                End If
                            Next
                        Else
                            For i As Integer = 0 To cFDFDoc.FDFFields().Count - 1
                                If PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Checked Then
                                    cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                ElseIf PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked Then
                                    If String.IsNullOrEmpty(cFDFDoc.FDFGetValue(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")) Then
                                        cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                    End If
                                End If
                            Next
                        End If
                    End If
                    w.Headers.Add("Content-Type", cFDFApp.MimeFDF)
                    cFDFDoc.FDFSetFile(fpath)
                    submit_bytes = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.FDF, True)
                Case "xfdf".ToLower
                    _cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
                    If PDFField_Action_Panel_SubmitForm_OnlyTheseFields.Checked Then
                        If PDFField_Action_Panel_SubmitForm_FieldsIncludeSelected.Checked Then
                            For i As Integer = 0 To PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Count - 1
                                If Not PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Checked Then
                                    cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                ElseIf Not PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked Then
                                    If String.IsNullOrEmpty(cFDFDoc.FDFGetValue(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "").ToString() & "") Then
                                        cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                    End If
                                End If
                            Next
                        Else
                            For i As Integer = 0 To PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Count - 1
                                If Not PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Checked Then
                                    cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                ElseIf PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked Then
                                    If String.IsNullOrEmpty(cFDFDoc.FDFGetValue(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "").ToString() & "") Then
                                        cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                    End If
                                End If
                            Next
                        End If
                    End If
                    w.Headers.Add("Content-Type", cFDFApp.MimeXFDF)
                    cFDFDoc.FDFSetFile(fpath)
                    submit_bytes = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.xFDF, True)
                Case "xdp".ToLower
                    _cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
                    If PDFField_Action_Panel_SubmitForm_OnlyTheseFields.Checked Then
                        If PDFField_Action_Panel_SubmitForm_FieldsIncludeSelected.Checked Then
                            For i As Integer = 0 To PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Count - 1
                                If Not PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Checked Then
                                    cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                ElseIf Not PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked Then
                                    If String.IsNullOrEmpty(cFDFDoc.FDFGetValue(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "").ToString() & "") Then
                                        cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                    End If
                                End If
                            Next
                        Else
                            For i As Integer = 0 To PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Count - 1
                                If Not PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Checked Then
                                    cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                ElseIf PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked Then
                                    If String.IsNullOrEmpty(cFDFDoc.FDFGetValue(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "").ToString() & "") Then
                                        cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                    End If
                                End If
                            Next
                        End If
                    End If
                    w.Headers.Add("Content-Type", cFDFApp.MimeXDP)
                    cFDFDoc.FDFSetFile(fpath)
                    submit_bytes = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XDP, True)
                Case "xml".ToLower
                    _cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword)
                    If PDFField_Action_Panel_SubmitForm_OnlyTheseFields.Checked Then
                        If PDFField_Action_Panel_SubmitForm_FieldsIncludeSelected.Checked Then
                            For i As Integer = 0 To PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Count - 1
                                If Not PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Checked Then
                                    cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                ElseIf Not PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked Then
                                    If String.IsNullOrEmpty(cFDFDoc.FDFGetValue(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "").ToString() & "") Then
                                        cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                    End If
                                End If
                            Next
                        Else
                            For i As Integer = 0 To PDFField_Action_Panel_SubmitForm_FieldsList.Nodes.Count - 1
                                If Not PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Checked Then
                                    cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                ElseIf PDFField_Action_Panel_SubmitForm_FieldsIncludeEmpty.Checked Then
                                    If String.IsNullOrEmpty(cFDFDoc.FDFGetValue(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "").ToString() & "") Then
                                        cFDFDoc.FDFRemoveField(PDFField_Action_Panel_SubmitForm_FieldsList.Nodes(i).Name.ToString() & "")
                                    End If
                                End If
                            Next
                        End If
                    End If
                    w.Headers.Add("Content-Type", cFDFApp.MimeXML)
                    cFDFDoc.FDFSetFile(fpath)
                    submit_bytes = cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XML, True)
                Case Else
                    Return
            End Select
            If Not submit_bytes Is Nothing Then
                If submit_bytes.Length > 0 Then
                    If IsValidUrl(submit_url) Then
                        Dim return_bytes() As Byte = Nothing
                        w.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0")
                        w.Headers.Add("DNT", "1")
                        w.Headers.Add("Acrobat-Version", "15.10.0")
                        Try
                            return_bytes = w.UploadData(submit_url & "", submit_bytes)
                        Catch wex As WebException
                            If TypeOf wex.Response Is HttpWebResponse Then
                                Me.Hide()
                                Dim wr As HttpWebResponse = DirectCast(wex.Response, HttpWebResponse)
                                MsgBox("Submission failed!" & Environment.NewLine & "Error code: " & wr.StatusCode & " - " & wr.StatusDescription.ToString())
                                Me.Show()
                                Me.BringToFront()
                                Return
                            End If
                        End Try
                        Dim response_status As String = ""
                        Select Case cFDFDoc.Determine_Type(return_bytes)
                            Case FDFApp.FDFDoc_Class.FDFType.FDF
                                Dim cdoc As New FDFApp.FDFDoc_Class
                                cdoc = cFDFApp.FDFOpenFromBuf(return_bytes, True, True)
                                response_status = cFDFDoc.FDFGetStatus() & ""
                                Dim strHeaders As New System.Text.StringBuilder
                                If String.IsNullOrEmpty(response_status & "") Then response_status = "Submission successfully sent."
                                If Not String.IsNullOrEmpty(response_status & "") Then
                                    Me.Hide()
                                    If cdoc.FDFFields Is Nothing Then
                                        Select Case MsgBox("Response Status: " & Environment.NewLine & response_status & "" & strHeaders.ToString(), MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal + MsgBoxStyle.OkOnly, "Submit")
                                            Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                                Dim fn As String = ApplicationDataFolder(False, "temp") & "response.fdf.txt"
                                                File.WriteAllBytes(fn, return_bytes)
                                                Return
                                            Case Else
                                                Return
                                        End Select
                                        Me.Show()
                                        Me.BringToFront()
                                    ElseIf cdoc.FDFFields.Count = 1 Then
                                        If cdoc.FDFFields(0).FieldName.ToString.ToLower().Contains("F00BAR".ToLower) Then
                                            Select Case MsgBox("Response Status: " & Environment.NewLine & response_status & "" & strHeaders.ToString(), MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal + MsgBoxStyle.OkOnly, "Submit")
                                                Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                                    Dim fn As String = ApplicationDataFolder(False, "temp") & "response.fdf.txt"
                                                    File.WriteAllBytes(fn, return_bytes)
                                                    Return
                                                Case Else
                                                    Return
                                            End Select
                                            Me.Show()
                                            Me.BringToFront()
                                        End If
                                    ElseIf cdoc.FDFFields.Count > 1 Then
                                        Select Case MsgBox("Response Status: " & Environment.NewLine & response_status & Environment.NewLine & "Open the response PDF file?", MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal + MsgBoxStyle.YesNo, "Submit")
                                            Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                                Dim fn As String = ApplicationDataFolder(False, "temp") & "response.fdf"
                                                cdoc.FDFSavetoFile(fn, FDFApp.FDFDoc_Class.FDFType.FDF, True)
                                                If A0_CloseDocument(False, False) Then
                                                    OpenFile(fn, False, True)
                                                End If
                                                Return
                                            Case Else
                                                Return
                                        End Select
                                        Me.Show()
                                        Me.BringToFront()
                                    Else
                                        Select Case MsgBox("Response Status: " & Environment.NewLine & response_status & "" & strHeaders.ToString(), MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal + MsgBoxStyle.OkOnly, "Submit")
                                            Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                                Dim fn As String = ApplicationDataFolder(False, "temp") & "response.fdf.txt"
                                                File.WriteAllBytes(fn, return_bytes)
                                                Return
                                            Case Else
                                                Return
                                        End Select
                                        Me.Show()
                                        Me.BringToFront()
                                    End If
                                End If
                            Case FDFApp.FDFDoc_Class.FDFType.xFDF
                                Dim cdoc As New FDFApp.FDFDoc_Class
                                cdoc = cFDFApp.FDFOpenFromBuf(return_bytes, True, True)
                                response_status = cFDFDoc.FDFGetStatus() & ""
                                If String.IsNullOrEmpty(response_status & "") Then response_status = "Message Successfully Sent."
                                Me.Hide()
                                If Not String.IsNullOrEmpty(response_status & "") Then
                                    Select Case MsgBox("Response Status: " & Environment.NewLine & FDFCheckCharReverse(cdoc.FDFGetStatus().Trim()) & Environment.NewLine & "Open the response PDF file?", MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal + MsgBoxStyle.YesNo, "Submit")
                                        Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                            Dim fn As String = ApplicationDataFolder(False, "temp") & "response.xfdf"
                                            cdoc.FDFSetFile(fpath)
                                            cdoc.FDFSavetoFile(fn, FDFApp.FDFDoc_Class.FDFType.xFDF, True)
                                            OpenFile(fn, False, True)
                                            Return
                                        Case Else
                                            Return
                                    End Select
                                End If
                                Me.Show()
                                Me.BringToFront()
                            Case FDFApp.FDFDoc_Class.FDFType.XDP
                                Dim cdoc As New FDFApp.FDFDoc_Class
                                cdoc = cFDFApp.FDFOpenFromBuf(return_bytes, True, True)
                                response_status = cFDFDoc.FDFGetStatus() & ""
                                If String.IsNullOrEmpty(response_status & "") Then response_status = "Message Successfully Sent."
                                Me.Hide()
                                If Not String.IsNullOrEmpty(response_status & "") Then
                                    Select Case MsgBox("Response Status: " & Environment.NewLine & FDFCheckCharReverse(cdoc.FDFGetStatus().Trim()) & Environment.NewLine & "Open the response PDF file?", MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal + MsgBoxStyle.YesNo, "Submit")
                                        Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                            Dim fn As String = ApplicationDataFolder(False, "temp") & "response.xdp"
                                            cdoc.FDFSetFile(fpath)
                                            cdoc.FDFSavetoFile(fn, FDFApp.FDFDoc_Class.FDFType.XDP, True)
                                            OpenFile(fn, False, True)
                                            Return
                                        Case Else
                                            Return
                                    End Select
                                End If
                                Me.Show()
                                Me.BringToFront()
                            Case FDFApp.FDFDoc_Class.FDFType.XML
                                Dim cdoc As New FDFApp.FDFDoc_Class
                                cdoc = cFDFApp.FDFOpenFromBuf(return_bytes, True, True)
                                response_status = cFDFDoc.FDFGetStatus() & ""
                                If String.IsNullOrEmpty(response_status & "") Then response_status = "Message Successfully Sent."
                                Me.Hide()
                                If Not String.IsNullOrEmpty(response_status & "") Then
                                    Select Case MsgBox("Response Status: " & Environment.NewLine & FDFCheckCharReverse(cdoc.FDFGetStatus().Trim()) & Environment.NewLine & "Open the response PDF file?", MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal + MsgBoxStyle.YesNo, "Submit")
                                        Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                            Dim fn As String = ApplicationDataFolder(False, "temp") & "response.xml"
                                            cdoc.FDFSetFile(fpath)
                                            cdoc.FDFSavetoFile(fn, FDFApp.FDFDoc_Class.FDFType.XML, True)
                                            Process.Start(fn & "")
                                            Return
                                        Case Else
                                            Return
                                    End Select
                                End If
                                Me.Show()
                                Me.BringToFront()
                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                Me.Hide()
                                Select Case MsgBox("Response Status: Message Successfully Sent." & Environment.NewLine & "Open the response PDF file?", MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal + MsgBoxStyle.YesNo, "Submit")
                                    Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                        Dim fn As String = ApplicationDataFolder(False, "temp") & "response.pdf"
                                        File.WriteAllBytes(fn, return_bytes)
                                        OpenFile(fn, False, True)
                                        Return
                                    Case Else
                                        Return
                                End Select
                                Me.Show()
                                Me.BringToFront()
                            Case Else
                                MsgBox("Submission Status: Response:" & Environment.NewLine & response_status & "", MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal + MsgBoxStyle.OkOnly, "Submit")
                                Return
                        End Select
                    Else
                        Dim return_bytes() As Byte = Nothing
                        If File.Exists(submit_url) Then
                            Try
                                Dim tmpFilePath As String = ApplicationDataFolder(False,"temp") & System.IO.Path.GetFileNameWithoutExtension(fpath) & "."c & PDFField_Action_Panel_SubmitForm_Format.SelectedItem.ToString.ToLower.TrimStart("."c)
                                File.WriteAllBytes(tmpFilePath, submit_bytes)
                                Dim p As New Process
                                Process.Start(submit_url, """" & tmpFilePath & """")
                            Catch wex As WebException
                                If TypeOf wex.Response Is HttpWebResponse Then
                                    Me.Hide()
                                    MsgBox("Submission failed!" & Environment.NewLine & "Error code: " & wex.Message.ToString())
                                    Me.Show()
                                    Me.BringToFront()
                                    Return
                                End If
                            End Try
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            Dim str = ex.Message
        Finally
            If Not Me.Visible Then
                Me.Show()
                Me.BringToFront()
            End If
        End Try
    End Sub
    Private Sub EmailDocumentToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles EmailDocumentToolStripMenuItem.Click
        Try
            Me.Hide()
            frmEmail1 = New frmEmail
            frmEmail1.addAutoCompleteFields(Session, pdfOwnerPassword, Me)
            frmEmail1.ShowDialog(Me, "")
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            frmEmail1 = Nothing
        Finally
            Me.Show()
            Me.BringToFront()
        End Try
    End Sub
    Public Class fieldInfo
        Public fieldName As String = ""
        Public fieldNameLong As String = ""
        Public fieldIndex As Integer = -1
        Public fieldItem As iTextSharp.text.pdf.AcroFields.Item = Nothing
        Public fieldDictionary As iTextSharp.text.pdf.PdfDictionary = Nothing
        Public fieldPositioniText As iTextSharp.text.Rectangle
        Public fieldPositionScreen As System.Drawing.RectangleF
        Public fieldPageNumber As Integer = -1
        Public fieldType As Integer = -1
        Public fieldValue As String = ""
        Public fieldListSelection() As String = New String() {}
        Public fieldOptionDisplay() As String = New String() {}
        Public fieldOptionExport() As String = New String() {}
        Public fieldSize As Integer = -1
        Public Sub New()
        End Sub
        Public Sub New(name As String, type As Integer, value As String)
            fieldName = name
            fieldType = type
            fieldValue = value
        End Sub
        Public Sub New(name As String, type As Integer, OptionExportvalues() As String, OptionDisplayNames() As String, OptionListSelection() As String, OptfieldSize As Integer)
            fieldName = name
            fieldType = type
            fieldOptionDisplay = OptionDisplayNames
            fieldOptionExport = OptionExportvalues
            fieldListSelection = OptionListSelection
            fieldSize = OptfieldSize
        End Sub
        Public Sub New(name As String, nameLong As String, type As Integer, OptionExportvalues() As String, OptionDisplayNames() As String, OptionListSelection() As String, OptfieldSize As Integer)
            fieldName = name
            fieldNameLong = nameLong
            fieldType = type
            fieldOptionDisplay = OptionDisplayNames
            fieldOptionExport = OptionExportvalues
            fieldListSelection = OptionListSelection
            fieldSize = OptfieldSize
        End Sub
    End Class
    Private Function LoadXFAFieldValues(ByVal PDFBuffer As Byte(), ByVal fName As String) As String()
        Dim reader As New iTextSharp.text.pdf.PdfReader(PDFBuffer)
        Dim xfaFrm As New iTextSharp.text.pdf.XfaForm(reader)
        Dim isXFA As Boolean = False
        isXFA = xfaFrm.XfaPresent
        If Not isXFA Then
            reader.Close()
            reader = Nothing
            xfaFrm = Nothing
            Return Nothing
            Exit Function
        End If
        On Error Resume Next
        Dim FileNameorURL As String = ""
        Dim xData As iTextSharp.text.pdf.XfaForm.Xml2SomDatasets
        Dim xForm As iTextSharp.text.pdf.XfaForm.Xml2SomTemplate
        xData = xfaFrm.DatasetsSom
        Dim xmlString As String = xfaFrm.DomDocument.InnerXml
        Dim FilePath As String = ""
        Dim fpathStart As Integer = xmlString.IndexOf("<output>") + 8
        FilePath = xmlString.Substring(xmlString.IndexOf("<uri>", fpathStart) + 5, xmlString.IndexOf("</uri>", fpathStart) - (xmlString.IndexOf("<uri>", fpathStart) + 5))
        If Not FilePath = "" Then
            FileNameorURL = FilePath
        End If
        Dim xFld As Dictionary(Of String, System.Xml.XmlNode) = xData.Name2Node
        Dim formName(1) As String
        Dim Val As String() = {""}
        For Each xString As String In xFld.Keys
            Dim fieldName As String = xString & ""
            Dim fld As System.Xml.XmlElement
            fld = xData.Name2Node(fieldName)
            Dim form As System.Xml.XmlElement
            form = fld.ParentNode
            Dim short_fieldName As String = ""
            Dim FormFieldNames() As String = CStr(xString).Split(".")
            If FormFieldNames.Length >= 2 Then
                formName(0) = FormFieldNames(0)
                short_fieldName = FormFieldNames(FormFieldNames.Length - 1)
                formName(0) = form.Name
            End If
            If Not short_fieldName = fName Then
                GoTo nextField
            End If
            Dim strHref As String = ""
            If Not String.IsNullOrEmpty(fld.InnerText & "") Then
                Val(0) = fld.InnerText
                If fld.HasAttribute("xfa:contentType") Then
                    Val = New String() {Val(0), fld.Attributes("xfa:contentType").Value.ToString(), "image"}
                End If
            Else
                If fld.HasAttribute("href") Then
                    Val(0) = fld.Attributes("href").Value.ToString()
                End If
                If fld.HasAttribute("image/mime") Then
                    Val = New String() {Val(0), fld.Attributes("image/mime").Value.ToString(), "image"}
                End If
            End If
            formName(1) = formName(0)
            If Not Val Is Nothing Then
                Return Val
            Else
                Return New String() {}
            End If
nextField:
        Next
        Return New String() {}
    End Function
    Private Function LoadPDFFormFields(reader As iTextSharp.text.pdf.PdfReader, ByVal pdfBuffer As Byte(), Optional ByVal ownerPassword As String = "") As Dictionary(Of String, List(Of fieldInfo))
        Dim myFields As New Dictionary(Of String, List(Of fieldInfo))
        Dim xfaFrm As New iTextSharp.text.pdf.XfaForm(reader)
        Dim isXFA As Boolean = False
        isXFA = xfaFrm.XfaPresent
        Dim af As iTextSharp.text.pdf.PRAcroForm
        af = reader.AcroForm
        Dim fld As iTextSharp.text.pdf.PRAcroForm.FieldInformation
        Dim flds As iTextSharp.text.pdf.AcroFields = reader.AcroFields
        On Error Resume Next
        Dim strHTMLFormFields As String = ""
        For Each fld In af.Fields.ToArray()
            Dim fieldName As String = fld.Name
            If InStr(fieldName, "].") Then
                Dim fldstart As Integer = fieldName.LastIndexOf("].")
                fieldName = fieldName.Substring(fldstart + 2, fieldName.Length - fldstart - 2)
            End If
            Dim val As String = ""
            val = flds.GetField(fieldName) & ""
            Dim fldItem As iTextSharp.text.pdf.AcroFields.Item = flds.GetFieldItem(fieldName)
            Dim fldType As Integer = flds.GetFieldType(fieldName) + 0
            Dim finfo As New fieldInfo, finfoList As New List(Of fieldInfo)
            If fldType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT Then
                finfo = New fieldInfo(fieldName, fldType, val)
                finfo.fieldNameLong = fld.Name.ToString()
                finfo.fieldItem = fldItem
                finfoList.Add(finfo)
                myFields.Add(fieldName, finfoList)
            ElseIf fldType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX Then
                finfo = New fieldInfo(fieldName, fldType, val)
                finfo.fieldNameLong = fld.Name.ToString()
                finfo.fieldItem = fldItem
                finfoList.Add(finfo)
                myFields.Add(fieldName, finfoList)
            ElseIf fldType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST Then
                Dim lstD As String(), lstV As String(), lstS As String(), intSize As Integer = 5
                lstD = flds.GetListOptionDisplay(fieldName)
                lstV = flds.GetListOptionExport(fieldName)
                lstS = flds.GetListSelection(fieldName)
                finfo = New fieldInfo(fieldName, fldType, lstV, lstD, lstS, intSize)
                finfo.fieldNameLong = fld.Name.ToString()
                finfo.fieldItem = fldItem
                finfoList.Add(finfo)
                myFields.Add(fieldName, finfoList)
            ElseIf fldType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON Then
                Dim lstD As String() = {}, lstV As New ArrayList, lstS As String()
                If isXFA Then
                    ReDim Preserve lstS(0)
                    lstS = LoadXFAFieldValues(pdfBuffer, fieldName)
                Else
                    ReDim Preserve lstS(0)
                    lstS(0) = flds.GetField(fieldName)
                End If
                Dim states() As String = flds.GetAppearanceStates(fld.Name)
                For i As Integer = 0 To states.Length - 1
                    val = states(i)
                    ReDim Preserve lstD(i)
                    lstD(i) = val
                Next
                Dim blnFound As Boolean = False
                For Each radioFld As fieldInfo In myFields(fieldName)
                    If radioFld.fieldName = fieldName Then
                        blnFound = True
                        Exit For
                    End If
                Next
                If Not blnFound Then
                    finfo = New fieldInfo(fieldName, fldType, lstD, lstD, lstS, 1)
                    finfo.fieldNameLong = fld.Name.ToString()
                    finfoList.Add(finfo)
                    myFields.Add(fieldName, finfoList)
                End If
            ElseIf Not fldType = Nothing Then
            End If
        Next
        Return myFields
    End Function
    Private Sub CreateHTMLFormToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CreateHTMLFormToolStripMenuItem.Click
        Try
            _cFDFDoc = cFDFDoc(True)
            Dim b() As Byte = Nothing
            Dim fn As String = ""
            Dim fSave As New SaveFileDialog
            fSave.CheckFileExists = False
            fSave.DefaultExt = ".htm"
            fSave.FileName = System.IO.Path.GetFileNameWithoutExtension(fpath) & ".htm"
            fSave.Filter = "htm|*.htm|html|*.html|txt|*.txt|all files|*.*"
            fSave.FilterIndex = 0
            fSave.InitialDirectory = System.IO.Path.GetDirectoryName(fpath)
            'fSave.Multiselect = False
            fSave.Title = "Save-As: HTML file"
            Select Case fSave.ShowDialog(Me)
                Case DialogResult.OK, DialogResult.Yes
                    fn = fSave.FileName
                    fSave.Dispose()
                Case Else
                    fn = ""
                    fSave.Dispose()
                    Return
            End Select
            If Not fpath.isNullOrEmpty() Then cFDFDoc.FDFSetFile(fpath)
            Dim inlineImages As Boolean = True, includeFields As Boolean = True
            Select Case MsgBox("Inline images using base64 URL encoding?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Inline Images:")
                Case MsgBoxResult.Yes, MsgBoxResult.Ok
                    inlineImages = True
                Case Else
                    inlineImages = False
            End Select
            Try
                includeFields = False
                If _cFDFDoc.XDPFieldCount() > 0 Then
                    Select Case MsgBox("Include html form fields?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "HTML form fields:")
                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                            includeFields = True
                        Case Else
                            includeFields = False
                    End Select
                End If
            Catch exFields As Exception
                Err.Clear()
            End Try
            b = System.Text.Encoding.UTF8.GetBytes(createHTMLFile("", includeFields, inlineImages, "", Me, "", False, fn, False, -1)) 'cFDFDoc.FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XML, True)
            File.WriteAllBytes(fn, b)
            Select Case MsgBox("Open HTML File?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Open:")
                Case MsgBoxResult.Yes, MsgBoxResult.Ok
                    Process.Start(fn)
                Case Else
            End Select
        Catch ex As Exception
            Err.Clear()
        End Try
        'pnlFields.Hide()
        'Dim b() As Byte = Session
        'Dim chtml As New PDF2HTMLnet.PDF2HTMLnet(Session, pdfOwnerPassword, "form1", "", "_self")
        'chtml.formMethod = "post"
        'chtml.ShowTitles = True
        'chtml.TitleReplaceStringsWithSpace = New String() {"_", "-", "."}
        'Dim fn As String = fileDirectory() & "html\" & Path.GetFileNameWithoutExtension(fpath) & "\" & Path.GetFileNameWithoutExtension(fpath & "") & ".htm" & ""
        'Dim sd As New SaveFileDialog
        'sd.CheckPathExists = True
        'sd.FileName = Path.GetFileName(fn & "")
        'If Not Directory.Exists(fileDirectory() & "html\") Then
        '    Directory.CreateDirectory(fileDirectory() & "html\")
        'End If
        'If Not Directory.Exists(fileDirectory() & "html\" & Path.GetFileNameWithoutExtension(fpath) & "\") Then
        '    Directory.CreateDirectory(fileDirectory() & "html\" & Path.GetFileNameWithoutExtension(fpath) & "\")
        'End If
        'sd.InitialDirectory = fileDirectory() & "html\" & Path.GetFileNameWithoutExtension(fpath) & "\"
        'sd.Filter = "HTM|*.htm|HTML|*.html|Text|*.txt|All Files|*.*"
        'sd.FilterIndex = 0
        'sd.DefaultExt = ".htm"
        'Me.Show()
        'Select Case sd.ShowDialog(Me)
        '    Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
        '        fn = sd.FileName & ""
        '    Case Else
        '        Return
        '        Exit Select
        'End Select
        'Select Case MsgBox("Export background and layout exactly as it appears?", MsgBoxStyle.YesNoCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Export HTML:")
        '    Case MsgBoxResult.Yes, MsgBoxResult.Ok
        '        Try
        '            Dim totalPageHeight As Single = 0, pageWidth As Single, pageHeight As Single
        '            Dim strHTML As String = ""
        '            Dim useBase64ImageURL As Boolean = False
        '            Select Case MsgBox("Inline base64 image URLs?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Inline Image URLs:")
        '                Case MsgBoxResult.Yes, MsgBoxResult.Ok
        '                    useBase64ImageURL = True
        '                Case Else
        '                    useBase64ImageURL = False
        '            End Select
        '            Dim strCalcScript As String = ""
        '            strHTML &= "<html>"
        '            strHTML &= "<head>"
        '            strHTML &= "<style media=""all"" type=""text/css"">.lazy {display: none;}" & Environment.NewLine & "@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){html,body,form{font-size:28px}}" & Environment.NewLine & "</style>"
        '            '
        '            strHTML &= "</head>"
        '            strHTML &= "<body style=""margin:0;padding:0;"">"
        '            Dim clsInput As New clsPromptDialog
        '            Dim htmlSubmitAction As String = clsInput.ShowDialog("HTML submit action URL?", "HTML Submit Action URL?", Me, "", "OK")
        '            strHTML &= Environment.NewLine & "<form action=""" & htmlSubmitAction & """ method=""post"" id=""form"" " & Environment.NewLine
        '            Dim pField As New List(Of String)
        '            ToolStripProgressBar1.Maximum = pdfReaderDoc.NumberOfPages
        '            ToolStripProgressBar1.Minimum = 1
        '            ToolStripProgressBar1.Value = 1
        '            ToolStripProgressBar1.Visible = True
        '            Dim dir As String = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\"
        '            If cLinks Is Nothing Then
        '                cLinks = New clsLinks(pdfReaderDoc, Me)
        '            ElseIf cLinks.Links.Count <= 0 Then
        '                cLinks = New clsLinks(pdfReaderDoc, Me)
        '                cLinks.LoadLinksOnPage(CInt(pageIndex))
        '            End If
        '            Dim fieldListFlowType As New Dictionary(Of String, Single)
        '            Dim fldTabIndex As Integer = 0
        '            Dim fldTabMax As Integer = 0
        '            Dim maskInput As New System.Text.StringBuilder
        '            For p As Integer = 1 To pdfReaderDoc.NumberOfPages
        '                pageIndex = p - 1
        '                ToolStripProgressBar1.Value = p
        '                pnlFieldTabOrder_Load(True)
        '                Dim lstFields As Dictionary(Of String, List(Of fieldInfo)) = GetAllFieldsOnPageiText(Session.ToArray(), pdfOwnerPassword, p, True)
        '                pageWidth = pdfReaderDoc.GetPageSizeWithRotation(p).Width
        '                pageHeight = pdfReaderDoc.GetPageSizeWithRotation(p).Height
        '                LoadPDFReaderDoc(pdfOwnerPassword, True)
        '                Dim pdfReaderDocClone As PdfReader = pdfReaderDoc.Clone
        '                pdfReaderDocClone.RemoveFields()
        '                Dim imgBytes() As Byte = A0_LoadImageGhostScript(getPDFBytes(pdfReaderDocClone), pdfOwnerPassword, p, pageWidth * getPercent() * 1.3F, pageHeight * getPercent() * 1.3F, False)
        '                Dim img As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(imgBytes))
        '                Dim imgStream As New MemoryStream
        '                img.Save(imgStream, System.Drawing.Imaging.ImageFormat.Png)
        '                strHTML &= "<div name=""page_" & p & """ id=""page_" & p & """ style=""background-size: 100%;margin:0 auto;padding:0;display:block;width:100%;max-width:100%;height:auto;position:relative;"">"
        '                If useBase64ImageURL Then
        '                    strHTML &= "<img src=""data:image/jpeg;base64," & System.Convert.ToBase64String(imgStream.ToArray()).ToString.Replace(" ", "+") & """ style=""width:100%;max-width:100%;height:auto;margin:0 auto;z-index:-1000;""/>"
        '                Else
        '                    Dim imgFileName As String = dir & "images\" & p.ToString() & "-" & Path.GetFileNameWithoutExtension(fn) & ".png"
        '                    If Not Directory.Exists(dir & "images\") Then
        '                        Directory.CreateDirectory(dir & "images\")
        '                    End If
        '                    File.WriteAllBytes(imgFileName, imgStream.ToArray())
        '                    strHTML &= "<img src=""" & "images/" & p.ToString() & "-" & Path.GetFileNameWithoutExtension(fn) & ".png" & """ style=""width:100%;max-width:100%;height:auto;margin:0 auto;z-index:-1000;""/>"
        '                End If
        '                cLinks.LoadLinksOnPage(CInt(p - 1))
        '                If cLinks.Links.Count > 0 Then
        '                    For lnkIndex As Integer = 0 To cLinks.Links.Count - 1
        '                        Dim lnkRectScreen As RectangleF = cLinks.Links(lnkIndex).Link_Rect
        '                        Dim strHTMLField As String = ""
        '                        Dim strHtmlBuilder As New System.Text.StringBuilder
        '                        Dim perc As Single = getPercent()
        '                        If cLinks.Links(lnkIndex).Link_Destination_PageIndex >= 0 And String.IsNullOrEmpty(cLinks.Links(lnkIndex).Link_Destination_URI) And cLinks.Links(lnkIndex).Link_ImageBytes Is Nothing Then
        '                            Dim intDestPage As Integer = cLinks.Links(lnkIndex).Link_Destination_PageIndex + 0
        '                            If intDestPage >= 0 Then
        '                                strHtmlBuilder.AppendLine("<a name='p" & p & "_lnk" & lnkIndex & "' id='p" & p & "_lnk" & lnkIndex & "' href=""#page_" & CInt(intDestPage + 1).ToString() & """ ")
        '                                Dim r As System.Drawing.RectangleF = lnkRectScreen
        '                                strHtmlBuilder.Append(" style=""")
        '                                strHtmlBuilder.Append("position:absolute;left:" & (r.Left / (pageWidth * perc)) * 100 & "%;right:" & (r.Right / (pageWidth * perc)) * 100 & "%;top:" & ((r.Top) / (pageHeight * perc)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight * perc)) * 100 & "%;")
        '                                strHtmlBuilder.Append("height:" & (r.Height / (pageHeight * perc)) * 100 & "%;width:" & (r.Width / (pageWidth * perc)) * 100 & "%;")
        '                                strHtmlBuilder.Append("background-color: Transparent;")
        '                                strHtmlBuilder.Append("border-color:Transparent;")
        '                                strHtmlBuilder.Append("border-width:0px;")
        '                                strHtmlBuilder.Append(""" ")
        '                                strHtmlBuilder.Append("> </a>")
        '                                strHTML &= strHtmlBuilder.ToString
        '                            End If
        '                        ElseIf Not String.IsNullOrEmpty(cLinks.Links(lnkIndex).Link_Destination_URI) And cLinks.Links(lnkIndex).Link_ImageBytes Is Nothing Then
        '                            Dim strDestUri As String = cLinks.Links(lnkIndex).Link_Destination_URI & ""
        '                            strHtmlBuilder.AppendLine("<a target=""_blank"" name='p" & p & "_lnk" & lnkIndex & "' id='p" & p & "_lnk" & lnkIndex & "' href=""" & strDestUri & """ ")
        '                            Dim r As System.Drawing.RectangleF = lnkRectScreen
        '                            strHtmlBuilder.Append(" style=""")
        '                            strHtmlBuilder.Append("position:absolute;left:" & (r.Left / (pageWidth * perc)) * 100 & "%;right:" & (r.Right / (pageWidth * perc)) * 100 & "%;top:" & ((r.Top) / ((pageHeight * perc))) * 100 & "%;bottom:" & ((r.Bottom) / ((pageHeight * perc))) * 100 & "%;")
        '                            strHtmlBuilder.Append("height:" & (r.Height / (pageHeight * perc)) * 100 & "%;width:" & (r.Width / (pageWidth * perc)) * 100 & "%;")
        '                            strHtmlBuilder.Append("background-color: Transparent;")
        '                            strHtmlBuilder.Append("border-color:Transparent;")
        '                            strHtmlBuilder.Append("border-width:0px;")
        '                            strHtmlBuilder.Append(""" ")
        '                            strHtmlBuilder.Append("> </a>")
        '                            strHTML &= strHtmlBuilder.ToString
        '                        End If
        '                    Next
        '                End If
        '                strHTML &= (Environment.NewLine & "")
        '                Try
        '                    calculationOrderList = CalculationOrder
        '                Catch ex As Exception
        '                    TimeStampAdd(ex, debugMode)
        '                End Try
        '                Dim fldTabIndexTemp As Integer = fldTabIndex
        '                For Each fldNm As String In lstFields.Keys.ToArray
        '                    strHTML &= (Environment.NewLine & "")
        '                    Try
        '                        calculationOrderList = CalculationOrder
        '                        fldTabIndexTemp = 0
        '                        Try
        '                            fields_tab_order = FieldTabOrder(True)
        '                            Dim iTab As Integer = 0
        '                            For Each fldRect As FieldName_Rectangle In fields_tab_order.ToArray()
        '                                If Not fldRect.field_name Is Nothing Then
        '                                    If Not String.IsNullOrEmpty(fldRect.field_name) Then
        '                                        If fldRect.field_name.ToString.ToLower() & "" = fldNm.ToString.ToLower() Then
        '                                            fldTabIndexTemp = fldTabIndex + iTab
        '                                            Exit For
        '                                        End If
        '                                    End If
        '                                End If
        '                                iTab += 1
        '                            Next
        '                        Catch ex As Exception
        '                            TimeStampAdd(ex, debugMode)
        '                        End Try
        '                        If fldTabIndexTemp > fldTabMax Then
        '                            fldTabMax = fldTabIndexTemp
        '                        End If
        '                    Catch ex As Exception
        '                        TimeStampAdd(ex, debugMode)
        '                    End Try
        '                    Dim fld As fieldInfo = lstFields(fldNm)(0)
        '                    Dim strHTMLField As String = ""
        '                    Dim strHtmlBuilder As New System.Text.StringBuilder
        '                    Dim defaultFontSize As Integer = 12
        '                    Select Case fld.fieldType
        '                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
        '                            Dim currencySymbol As String = "", currencyPrepend As Boolean = True
        '                            A0_PDFFormField_LoadProperties(Session, fldNm, p, fld.fieldIndex)
        '                            Dim inputType As String = "text"
        '                            Dim classStringTextbox As String = fldNm & "_" & fld.fieldIndex, formatStringTextbox As String = ""
        '                            Dim strJS As String = PDFField_Format_Custom_Format_Script.Text
        '                            If PDFField_Format_Category.SelectedIndex > 0 Then
        '                                classStringTextbox = fldNm & "_" & fld.fieldIndex
        '                                If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_Format".ToLower) Then
        '                                    inputType = "number"
        '                                    strJS = strJS.Replace(CStr("AFNumber_Format"), "")
        '                                    strJS = strJS.TrimEnd(CStr(";"))
        '                                    strJS = strJS.TrimEnd(CStr(")"))
        '                                    strJS = strJS.TrimStart(CStr("("))
        '                                    Dim strJSParameters() As String = strJS.Split(","c)
        '                                    Try
        '                                        formatStringTextbox = "[.]"
        '                                        For i As Integer = 0 To CInt(strJSParameters(0)) - 1
        '                                            formatStringTextbox &= "0"
        '                                        Next
        '                                    Catch exF As Exception
        '                                        TimeStampAdd(exF, debugMode)
        '                                    End Try
        '                                    Try
        '                                        If PDFField_Validations_Range.Checked Then
        '                                            If Not String.IsNullOrEmpty(PDFField_Validation_Range_To.Text) Then
        '                                                Dim numPrefix As String = "", numPrefixCount As Integer = 0
        '                                                If PDFField_Validation_Range_To.Text.Contains(".") Then
        '                                                    numPrefixCount = PDFField_Validation_Range_To.Text.Split(".")(0).Length - 1
        '                                                Else
        '                                                    numPrefixCount = PDFField_Validation_Range_To.Text.Length - 1
        '                                                End If
        '                                                Select Case CInt(strJSParameters(1))
        '                                                    Case 0
        '                                                        For i As Integer = 0 To numPrefixCount
        '                                                            If numPrefix.Contains(",") Then
        '                                                                If numPrefix.Split(",")(0).Length >= 2 Then
        '                                                                    numPrefix = "," & "0" & numPrefix
        '                                                                Else
        '                                                                    numPrefix = "0" & numPrefix
        '                                                                End If
        '                                                            Else
        '                                                                If numPrefix.Length >= 2 Then
        '                                                                    numPrefix = "," & "0" & numPrefix
        '                                                                Else
        '                                                                    numPrefix = "0" & numPrefix
        '                                                                End If
        '                                                            End If
        '                                                        Next
        '                                                        numPrefix = numPrefix.TrimStart(","c)
        '                                                        formatStringTextbox = numPrefix & formatStringTextbox
        '                                                    Case 1
        '                                                        For i As Integer = 0 To numPrefixCount
        '                                                            numPrefix = "0" & numPrefix
        '                                                        Next
        '                                                        numPrefix = numPrefix
        '                                                        formatStringTextbox = "0" & formatStringTextbox
        '                                                    Case 2
        '                                                        formatStringTextbox = "0.0" & formatStringTextbox.Replace(".", ",")
        '                                                    Case 3
        '                                                        formatStringTextbox = "" & formatStringTextbox.Replace(".", ",")
        '                                                End Select
        '                                            Else
        '                                                Select Case CInt(strJSParameters(1))
        '                                                    Case 0
        '                                                        formatStringTextbox = "0,0" & formatStringTextbox
        '                                                    Case 1
        '                                                        formatStringTextbox = "0" & formatStringTextbox
        '                                                    Case 2
        '                                                        formatStringTextbox = "0.0" & formatStringTextbox.Replace(".", ",")
        '                                                    Case 3
        '                                                        formatStringTextbox = "" & formatStringTextbox.Replace(".", ",")
        '                                                End Select
        '                                            End If
        '                                        Else
        '                                            Select Case CInt(strJSParameters(1))
        '                                                Case 0
        '                                                    formatStringTextbox = "0,0" & formatStringTextbox
        '                                                Case 1
        '                                                    formatStringTextbox = "0" & formatStringTextbox
        '                                                Case 2
        '                                                    formatStringTextbox = "0.0" & formatStringTextbox.Replace(".", ",")
        '                                                Case 3
        '                                                    formatStringTextbox = "" & formatStringTextbox.Replace(".", ",")
        '                                            End Select
        '                                        End If
        '                                    Catch exF As Exception
        '                                        TimeStampAdd(exF, debugMode)
        '                                    End Try
        '                                    Try
        '                                    Catch exF As Exception
        '                                        TimeStampAdd(exF, debugMode)
        '                                    End Try
        '                                    Try
        '                                    Catch exF As Exception
        '                                        TimeStampAdd(exF, debugMode)
        '                                    End Try
        '                                    Try
        '                                    Catch exF As Exception
        '                                        TimeStampAdd(exF, debugMode)
        '                                    End Try
        '                                    Try
        '                                    Catch exF As Exception
        '                                        PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
        '                                        TimeStampAdd(exF, debugMode)
        '                                    End Try
        '                                    Try
        '                                        Select Case CStr(strJSParameters(4) & "").Trim()
        '                                            Case ""
        '                                                formatStringTextbox = "" & formatStringTextbox
        '                                            Case """"""
        '                                                formatStringTextbox = "" & formatStringTextbox
        '                                            Case CStr(" ""\u0024""").Trim()
        '                                                currencySymbol = "&#036;"
        '                                                currencyPrepend = True
        '                                            Case CStr(" ""\u0020\u0044\u004d""").Trim()
        '                                                currencySymbol = "(DM)"
        '                                                currencyPrepend = False
        '                                            Case CStr(" ""\u20ac""").Trim()
        '                                                currencySymbol = "&euro;"
        '                                                currencyPrepend = True
        '                                            Case CStr(" ""\u0066\u006c""").Trim()
        '                                                currencySymbol = "fl"
        '                                                currencyPrepend = True
        '                                            Case CStr(" ""\u0020\u0046""").Trim()
        '                                                currencySymbol = "&#8355;"
        '                                                currencyPrepend = False
        '                                            Case CStr(" ""\u0020\u006b\u0072""").Trim()
        '                                                currencySymbol = "kr"
        '                                                currencyPrepend = False
        '                                            Case CStr(" ""\u004c\u002e\u0020""").Trim()
        '                                                currencySymbol = "&#8356; "
        '                                                currencyPrepend = True
        '                                            Case CStr(" ""\u0020\u0050\u0074\u0073""").Trim()
        '                                                currencySymbol = "&#8359; "
        '                                                currencyPrepend = False
        '                                            Case CStr(" ""\u00a3""").Trim()
        '                                                currencySymbol = "&pound;"
        '                                                currencyPrepend = True
        '                                            Case CStr(" ""\u00a5""").Trim()
        '                                                currencySymbol = "&yen;"
        '                                                currencyPrepend = True
        '                                            Case Else
        '                                                currencySymbol = ((strJSParameters(4).ToString().Replace("""", "").Replace(" ", "")) & "")
        '                                                If currencySymbol.Contains("\u") Then
        '                                                    currencySymbol = currencySymbol.Replace("\u", "&#x")
        '                                                End If
        '                                                If PDFField_Format_Number_CurrencySymbol_Prepend.Checked = True Then
        '                                                    currencyPrepend = True
        '                                                Else
        '                                                    currencyPrepend = False
        '                                                End If
        '                                        End Select
        '                                        currencyPrepend = PDFField_Format_Number_CurrencySymbol_Prepend.Checked
        '                                    Catch exF As Exception
        '                                        TimeStampAdd(exF, debugMode)
        '                                    End Try
        '                                ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_Format".ToLower) Then
        '                                    strJS = strJS.Replace(CStr("AFPercent_Format"), "")
        '                                    strJS = strJS.TrimEnd(CStr(";"))
        '                                    strJS = strJS.TrimEnd(CStr(")"))
        '                                    strJS = strJS.TrimStart(CStr("("))
        '                                    Dim strJSParameters() As String = strJS.Split(","c)
        '                                    Try
        '                                        formatStringTextbox = "[.]"
        '                                        For i As Integer = 0 To CInt(strJSParameters(0)) - 1
        '                                            formatStringTextbox &= "0"
        '                                        Next
        '                                    Catch exF As Exception
        '                                        TimeStampAdd(exF, debugMode)
        '                                    End Try
        '                                    Try
        '                                        Try
        '                                            Select Case CInt(strJSParameters(1))
        '                                                Case 0
        '                                                    formatStringTextbox = "0,0" & formatStringTextbox
        '                                                Case 1
        '                                                    formatStringTextbox = "0" & formatStringTextbox
        '                                                Case 2
        '                                                    formatStringTextbox = "0.0" & formatStringTextbox.Replace(".", ",")
        '                                                Case 3
        '                                                    formatStringTextbox = "" & formatStringTextbox.Replace(".", ",")
        '                                            End Select
        '                                        Catch exF As Exception
        '                                            TimeStampAdd(exF, debugMode)
        '                                        End Try
        '                                    Catch exF As Exception
        '                                        TimeStampAdd(exF, debugMode)
        '                                    End Try
        '                                    formatStringTextbox &= "%"
        '                                ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_FormatEx".ToLower) Then
        '                                    inputType = "date"
        '                                    strJS = strJS.Replace(CStr("AFDate_FormatEx"), "")
        '                                    strJS = strJS.TrimEnd(CStr(";"))
        '                                    strJS = strJS.TrimEnd(CStr(")"))
        '                                    strJS = strJS.TrimStart(CStr("("))
        '                                    strJS = strJS.TrimStart("""")
        '                                    strJS = strJS.TrimEnd("""")
        '                                    Dim selIndex As Integer = -1
        '                                    For iVal As Integer = 0 To PDFField_Format_Dates.Items.Count - 1
        '                                        If strJS = PDFField_Format_Dates.Items(iVal).ToString Then
        '                                            selIndex = iVal
        '                                            Exit For
        '                                        End If
        '                                    Next
        '                                    If selIndex >= 0 Then
        '                                        PDFField_Format_Dates.SelectedIndex = selIndex
        '                                        For i As Integer = 0 To PDFField_Format_Dates.Items(PDFField_Format_Dates.SelectedIndex).ToString.ToCharArray().Length - 1
        '                                            Dim chrX As Char = PDFField_Format_Dates.Items(PDFField_Format_Dates.SelectedIndex).ToString.ToCharArray()(i)
        '                                            If Not chrX = "/" And Not chrX = "\" And Not chrX = ":" Then
        '                                                formatStringTextbox &= "0"
        '                                            Else
        '                                                formatStringTextbox &= chrX
        '                                            End If
        '                                        Next
        '                                    Else
        '                                    End If
        '                                ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_Format(".ToLower) Then
        '                                    inputType = "time"
        '                                    Dim strJSTemp As String = strJS
        '                                    strJS = strJS.Replace(CStr("AFTime_Format"), "")
        '                                    strJS = strJS.TrimEnd(CStr(";"))
        '                                    strJS = strJS.TrimEnd(CStr(")"))
        '                                    strJS = strJS.TrimStart(CStr("("))
        '                                    strJS = strJS.TrimStart("""")
        '                                    strJS = strJS.TrimEnd("""")
        '                                    Dim selIndex As Integer = CInt(strJS)
        '                                    If selIndex >= 0 Then
        '                                        PDFField_Format_Dates.SelectedIndex = selIndex
        '                                        For i As Integer = 0 To PDFField_Format_Times.Items(PDFField_Format_Times.SelectedIndex).ToString.ToCharArray().Length - 1
        '                                            Dim chrX As Char = PDFField_Format_Times.Items(PDFField_Format_Times.SelectedIndex).ToString().ToCharArray()(i)
        '                                            If Not chrX = "/" And Not chrX = "\" And Not chrX = ":" Then
        '                                                formatStringTextbox &= "0"
        '                                            Else
        '                                                formatStringTextbox &= chrX
        '                                            End If
        '                                        Next
        '                                    Else
        '                                    End If
        '                                ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_FormatEx(".ToLower) Then
        '                                    inputType = "time"
        '                                    Dim strJSTemp As String = strJS
        '                                    strJS = strJS.Replace(CStr("AFTime_FormatEx"), "")
        '                                    strJS = strJS.TrimEnd(CStr(";"))
        '                                    strJS = strJS.TrimEnd(CStr(")"))
        '                                    strJS = strJS.TrimStart(CStr("("))
        '                                    strJS = strJS.TrimStart("""")
        '                                    strJS = strJS.TrimEnd("""")
        '                                    Dim selIndex As Integer = -1
        '                                    For iVal As Integer = 0 To PDFField_Format_Times.Items.Count - 1
        '                                        If strJS = PDFField_Format_Times.Items(iVal).ToString Then
        '                                            selIndex = iVal
        '                                            Exit For
        '                                        End If
        '                                    Next
        '                                    If selIndex >= 0 Then
        '                                        PDFField_Format_Dates.SelectedIndex = selIndex
        '                                        For i As Integer = 0 To PDFField_Format_Times.Items(PDFField_Format_Times.SelectedIndex).ToString.ToCharArray().Length - 1
        '                                            Dim chrX As Char = PDFField_Format_Times.Items(PDFField_Format_Times.SelectedIndex).ToString().ToCharArray()(i)
        '                                            If Not chrX = "/" And Not chrX = "\" And Not chrX = ":" Then
        '                                                formatStringTextbox &= "0"
        '                                            Else
        '                                                formatStringTextbox &= chrX
        '                                            End If
        '                                        Next
        '                                    Else
        '                                    End If
        '                                ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_Format(".ToLower) Then
        '                                    Dim strJSTemp As String = strJS
        '                                    strJS = strJS.Replace(CStr("AFSpecial_Format"), "")
        '                                    strJS = strJS.TrimEnd(CStr(";"))
        '                                    strJS = strJS.TrimEnd(CStr(")"))
        '                                    strJS = strJS.TrimStart(CStr("("))
        '                                    strJS = strJS.TrimStart("""")
        '                                    strJS = strJS.TrimEnd("""")
        '                                    Dim selIndex As Integer = CInt(strJS)
        '                                    PDFField_Format_Category.SelectedIndex = 5
        '                                    If selIndex >= 0 Then
        '                                        PDFField_Format_Specials.SelectedIndex = selIndex
        '                                        PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
        '                                        PDFField_Format_Special_Custom.Visible = False
        '                                    Else
        '                                        PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
        '                                        PDFField_Format_Special_Custom.Text = strJSTemp.ToString
        '                                        PDFField_Format_Special_Custom.Visible = True
        '                                    End If
        '                                ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_FormatEx(".ToLower) Then
        '                                    Dim strJSTemp As String = strJS
        '                                    strJS = strJS.Replace(CStr("AFSpecial_FormatEx"), "")
        '                                    strJS = strJS.TrimEnd(CStr(";"))
        '                                    strJS = strJS.TrimEnd(CStr(")"))
        '                                    strJS = strJS.TrimStart(CStr("("))
        '                                    strJS = strJS.TrimStart("""")
        '                                    strJS = strJS.TrimEnd("""")
        '                                    Dim selIndex As Integer = -1
        '                                    PDFField_Format_Category.SelectedIndex = 5
        '                                    For iVal As Integer = 0 To PDFField_Format_Specials.Items.Count - 1
        '                                        If strJS = PDFField_Format_Specials.Items(iVal).ToString Then
        '                                            selIndex = iVal
        '                                            Exit For
        '                                        End If
        '                                    Next
        '                                    If selIndex >= 0 Then
        '                                        PDFField_Format_Specials.SelectedIndex = selIndex
        '                                        PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
        '                                        PDFField_Format_Special_Custom.Visible = False
        '                                    Else
        '                                        PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
        '                                        PDFField_Format_Special_Custom.Text = strJS.ToString
        '                                        PDFField_Format_Special_Custom.Visible = True
        '                                    End If
        '                                Else
        '                                    PDFField_Format_Category.SelectedIndex = 6
        '                                End If
        '                            End If
        '                            If Not String.IsNullOrEmpty(formatStringTextbox) Then
        '                                maskInput.AppendLine("// $('." & classStringTextbox & "').mask('" & formatStringTextbox & "');")
        '                            End If
        '                            'range
        '                            Dim strMin As String = "", strMax As String = ""
        '                            If PDFField_Validations_Range.Checked Then
        '                                If Not String.IsNullOrEmpty(PDFField_Validation_Range_From.Text) Then
        '                                    If IsNumeric(PDFField_Validation_Range_From.Text) Then
        '                                        strMin = "min=""" & PDFField_Validation_Range_From.Text & """ "
        '                                    End If
        '                                End If
        '                                If Not String.IsNullOrEmpty(PDFField_Validation_Range_To.Text) Then
        '                                    If IsNumeric(PDFField_Validation_Range_To.Text) Then
        '                                        strMax = "max=""" & PDFField_Validation_Range_To.Text & """ "
        '                                    End If
        '                                End If
        '                            End If
        '                            Dim strCalcOnChange As String = ""
        '                            If PDFField_Calculations_Fields.Checked Then
        '                                Dim fldsCalc As String = ""
        '                                Select Case PDFField_Calculations_Fields_Type.SelectedIndex
        '                                    Case 0
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = "
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 1
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = "
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " * ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 2
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = (("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ") / " & PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Count & ")"
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 3
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.min("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ");" & Environment.NewLine
        '                                        strCalcScript &= "};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 4
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.max("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ");" & Environment.NewLine
        '                                        strCalcScript &= "};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                End Select
        '                            ElseIf PDFField_Calculations_SimpleFieldNotation.Checked Then
        '                            End If
        '                            If Not PDFField_MultiLine.Checked Then
        '                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='text' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' value='" & PDFField_Value.Text & "' ")
        '                                If PDFField_MaxLenChk.Checked And IsNumeric(PDFField_MaxLen.Text) > 0 Then
        '                                    strHtmlBuilder.Append(" maxlength=""" & PDFField_MaxLen.Text & """ ")
        '                                End If
        '                                strHtmlBuilder.Append(strMin & strMax)
        '                                If Not String.IsNullOrEmpty(formatStringTextbox) Then
        '                                    If Not String.IsNullOrEmpty(currencySymbol.Trim()) Then
        '                                        If currencyPrepend = True Then
        '                                            strHtmlBuilder.Append("onblur='this.value = """ & currencySymbol & """ + numeral(this.value).format(""" & formatStringTextbox & """);' ")
        '                                        Else
        '                                            strHtmlBuilder.Append("onblur='this.value = numeral(this.value).format(""" & formatStringTextbox & """) + """ & currencySymbol & """;' ")
        '                                        End If
        '                                        strHtmlBuilder.Append("onfocus ='this.value = numeral(this.value.toString().replace(""" & currencySymbol & ""","""")).value();' ;' ")
        '                                    Else
        '                                        strHtmlBuilder.Append("onblur='this.value = numeral(this.value).format(""" & formatStringTextbox & """);' ")
        '                                        strHtmlBuilder.Append("onfocus ='this.value = numeral(this.value.toString()).value();' ")
        '                                    End If
        '                                End If
        '                                If Not strCalcScript = "" Then
        '                                    strHtmlBuilder.Append("onchange='" & strCalcOnChange & "' ")
        '                                End If
        '                                Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
        '                                If Not String.IsNullOrEmpty(formatStringTextbox) Then
        '                                    strHtmlBuilder.Append(" class=""" & classStringTextbox & """ ")
        '                                End If
        '                                strHtmlBuilder.Append(" style=""")
        '                                strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
        '                                strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
        '                                strHtmlBuilder.Append("position:absolute;")
        '                                strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
        '                                If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
        '                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
        '                                    defaultFontSize = PDFField_FontSize.Text
        '                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(PDFField_FontSize.Text)))
        '                                Else
        '                                    Dim ftSize As Integer = 12
        '                                    If Not String.IsNullOrEmpty(PDFField_Value.Text) Then
        '                                        Dim continueFontSize As Boolean = True
        '                                        Do Until continueFontSize = False
        '                                            If (ftSize + 1) > r.Height - 4 Then
        '                                                continueFontSize = False
        '                                            ElseIf (ftSize + 1) * PDFField_Value.Text.Length >= r.Width - 4 Then
        '                                                continueFontSize = False
        '                                            End If
        '                                            If continueFontSize Then
        '                                                ftSize += 1
        '                                            End If
        '                                        Loop
        '                                    End If
        '                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & 14 * 2.86 & ");")
        '                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / ftSize))
        '                                End If
        '                                strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
        '                                If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
        '                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
        '                                Else
        '                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
        '                                End If
        '                                strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
        '                                Dim strStyle As String = PDFField_BorderStyle.Text
        '                                Select Case strStyle.ToString.ToLower
        '                                    Case "solid", "dashed", "dotted", "inset"
        '                                        strStyle = strStyle & ""
        '                                    Case "beveled"
        '                                        strStyle = "ridge"
        '                                    Case "underline"
        '                                        strStyle = "solid"
        '                                End Select
        '                                strHtmlBuilder.Append("border-style:" & strStyle & ";")
        '                                strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
        '                                strHtmlBuilder.Append("border-width:" & strStyle & "px;")
        '                                strHtmlBuilder.Append(""" ")
        '                                strHtmlBuilder.Append(" class=""resizeText"" ")
        '                                If PDFField_Required.Checked Then
        '                                    strHtmlBuilder.Append(" required")
        '                                End If
        '                                strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
        '                                strHtmlBuilder.Append(" />")
        '                                strHTML &= strHtmlBuilder.ToString
        '                            Else
        '                                strHtmlBuilder.AppendLine("<textarea tabIndex=""" & fldTabIndexTemp & """ name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                If PDFField_MaxLenChk.Checked And IsNumeric(PDFField_MaxLen.Text) > 0 Then
        '                                    strHtmlBuilder.Append(" maxlength=""" & PDFField_MaxLen.Text & """ ")
        '                                End If
        '                                Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
        '                                strHtmlBuilder.Append(" style=""")
        '                                strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
        '                                strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
        '                                strHtmlBuilder.Append("position:absolute;")
        '                                strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
        '                                If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
        '                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
        '                                    defaultFontSize = PDFField_FontSize.Text
        '                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(PDFField_FontSize.Text)))
        '                                Else
        '                                    Dim ftSize As Integer = 12
        '                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (14 * 2.86) & ");")
        '                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / ftSize))
        '                                End If
        '                                strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
        '                                If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
        '                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
        '                                Else
        '                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
        '                                End If
        '                                strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
        '                                Dim strStyle As String = PDFField_BorderStyle.Text
        '                                Select Case strStyle.ToString.ToLower
        '                                    Case "solid", "dashed", "dotted", "inset"
        '                                        strStyle = strStyle & ""
        '                                    Case "beveled"
        '                                        strStyle = "ridge"
        '                                    Case "underline"
        '                                        strStyle = "solid"
        '                                End Select
        '                                strHtmlBuilder.Append("border-style:" & strStyle & ";")
        '                                strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
        '                                strHtmlBuilder.Append("border-width:" & strStyle & "px;")
        '                                strHtmlBuilder.Append(""" ")
        '                                strHtmlBuilder.Append(" class=""resizeText"" ")
        '                                If PDFField_Required.Checked Then
        '                                    strHtmlBuilder.Append(" required")
        '                                End If
        '                                strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
        '                                strHtmlBuilder.Append(">" & PDFField_Value.Text & "</textarea>")
        '                                strHTML &= strHtmlBuilder.ToString
        '                            End If
        '                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
        '                            A0_PDFFormField_LoadProperties(Session, fldNm, p, fld.fieldIndex)
        '                            If Not fld.fieldDictionary Is Nothing Then
        '                                If Not fld.fieldDictionary.Get(PdfName.AP) Is Nothing Then
        '                                    Dim tmpDict As PdfDictionary = fld.fieldDictionary.GetAsDict(PdfName.AP)
        '                                    If Not tmpDict.Get(PdfName.N) Is Nothing Then
        '                                        tmpDict = tmpDict.GetAsDict(PdfName.N)
        '                                        For Each k As PdfName In tmpDict.Keys.ToArray()
        '                                            If Not k.ToString().TrimStart("/"c) = "Off" Then
        '                                                fld.fieldValue = k.ToString().TrimStart("/"c)
        '                                            End If
        '                                        Next
        '                                    End If
        '                                End If
        '                            End If
        '                            Dim strCalcOnChange As String = ""
        '                            If PDFField_Calculations_Fields.Checked Then
        '                                Dim fldsCalc As String = ""
        '                                Select Case PDFField_Calculations_Fields_Type.SelectedIndex
        '                                    Case 0
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = "
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 1
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = "
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " * ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 2
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = (("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ") / " & PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Count & ")"
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 3
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.min("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ");" & Environment.NewLine
        '                                        strCalcScript &= "};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 4
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.max("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ");" & Environment.NewLine
        '                                        strCalcScript &= "};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                End Select
        '                            ElseIf PDFField_Calculations_SimpleFieldNotation.Checked Then
        '                            End If
        '                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='checkbox' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' value='" & fld.fieldValue & "' ")
        '                            If Not strCalcScript = "" Then
        '                                strHtmlBuilder.Append("onchange='" & strCalcOnChange & "' ")
        '                            End If
        '                            strHtmlBuilder.Append(IIf(PDFField_Value_Checked.Checked, " CHECKED ", ""))
        '                            Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
        '                            strHtmlBuilder.Append(" style=""-moz-appearance: none;")
        '                            strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
        '                            strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
        '                            strHtmlBuilder.Append("position:absolute;")
        '                            strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
        '                            If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
        '                                strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
        '                                defaultFontSize = PDFField_FontSize.Text
        '                                fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(PDFField_FontSize.Text)))
        '                            Else
        '                                strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(14) * 2.86) & ");")
        '                                fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(12)))
        '                            End If
        '                            strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
        '                            If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
        '                                strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
        '                            Else
        '                                strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
        '                            End If
        '                            strHtmlBuilder.Append("outline-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
        '                            Dim strStyle As String = PDFField_BorderStyle.Text
        '                            Select Case strStyle.ToString.ToLower
        '                                Case "solid", "dashed", "dotted", "inset"
        '                                    strStyle = strStyle & ""
        '                                Case "beveled"
        '                                    strStyle = "ridge"
        '                                Case "underline"
        '                                    strStyle = "solid"
        '                            End Select
        '                            strHtmlBuilder.Append("outline-style:" & strStyle & ";")
        '                            strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
        '                            strHtmlBuilder.Append("outline-width:" & strStyle & "px;")
        '                            strHtmlBuilder.Append(""" ")
        '                            strHtmlBuilder.Append(" class=""resizeText"" ")
        '                            strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
        '                            strHtmlBuilder.Append(" />")
        '                            strHTML &= strHtmlBuilder.ToString
        '                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
        '                            A0_PDFFormField_LoadProperties(Session, fldNm, p, fld.fieldIndex)
        '                            Dim valList As New List(Of String)
        '                            For Each val1 As String In ComboBox_ItemDisplay.Items
        '                                valList.Add(val1)
        '                            Next
        '                            fld.fieldOptionDisplay = valList.ToArray
        '                            valList = New List(Of String)
        '                            For Each val1 As String In ComboBox_ItemValue.Items
        '                                valList.Add(val1)
        '                            Next
        '                            fld.fieldOptionExport = valList.ToArray
        '                            valList = New List(Of String)
        '                            For Each val1 As String In ComboBox_ItemDisplay.SelectedItems
        '                                valList.Add(val1)
        '                            Next
        '                            Dim strCalcOnChange As String = ""
        '                            If PDFField_Calculations_Fields.Checked Then
        '                                Dim fldsCalc As String = ""
        '                                Select Case PDFField_Calculations_Fields_Type.SelectedIndex
        '                                    Case 0
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = "
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 1
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = "
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " * ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 2
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = (("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ") / " & PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Count & ")"
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 3
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.min("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ");" & Environment.NewLine
        '                                        strCalcScript &= "};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 4
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.max("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ");" & Environment.NewLine
        '                                        strCalcScript &= "};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                End Select
        '                            ElseIf PDFField_Calculations_SimpleFieldNotation.Checked Then
        '                            End If
        '                            fld.fieldListSelection = valList.ToArray
        '                            strHtmlBuilder.AppendLine("<select tabIndex=""" & fldTabIndexTemp & """ class=""resizeText"" name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' " & " ")
        '                            If Not strCalcScript = "" Then
        '                                strHtmlBuilder.Append("onchange='" & strCalcOnChange & "' ")
        '                            End If
        '                            Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
        '                            strHtmlBuilder.Append(" style=""")
        '                            strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
        '                            strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
        '                            strHtmlBuilder.Append("position:absolute;")
        '                            strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
        '                            If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
        '                                strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
        '                                defaultFontSize = PDFField_FontSize.Text
        '                                fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(PDFField_FontSize.Text)))
        '                            Else
        '                                strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(14) * 2.86) & ");")
        '                                fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(12)))
        '                            End If
        '                            strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
        '                            If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
        '                                strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
        '                            Else
        '                                strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
        '                            End If
        '                            strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
        '                            Dim strStyle As String = PDFField_BorderStyle.Text
        '                            Select Case strStyle.ToString.ToLower
        '                                Case "solid", "dashed", "dotted", "inset"
        '                                    strStyle = strStyle & ""
        '                                Case "beveled"
        '                                    strStyle = "ridge"
        '                                Case "underline"
        '                                    strStyle = "solid"
        '                            End Select
        '                            strHtmlBuilder.Append("border-style:" & strStyle & ";")
        '                            strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
        '                            strHtmlBuilder.Append("border-width:" & strStyle & "px;")
        '                            strHtmlBuilder.Append(""" ")
        '                            If PDFField_Required.Checked Then
        '                                strHtmlBuilder.Append(" required")
        '                            End If
        '                            strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
        '                            strHtmlBuilder.Append(">")
        '                            If fld.fieldOptionExport.Length = fld.fieldOptionDisplay.Length Then
        '                                For intVal As Integer = 0 To fld.fieldOptionExport.Length - 1
        '                                    If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
        '                                        strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "'>" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                    Else
        '                                        Try
        '                                            If fld.fieldListSelection.Contains(fld.fieldOptionDisplay(intVal)) Then
        '                                                strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
        '                                                strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                            Else
        '                                                If Not fld.fieldOptionExport Is Nothing Then
        '                                                    If fld.fieldOptionExport.Length > intVal Then
        '                                                        If fld.fieldListSelection.Contains(fld.fieldOptionExport(intVal)) Then
        '                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
        '                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                        Else
        '                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
        '                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                        End If
        '                                                    Else
        '                                                        strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
        '                                                        strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                    End If
        '                                                Else
        '                                                    strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
        '                                                    strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                End If
        '                                            End If
        '                                        Catch exFieldSel As Exception
        '                                            Err.Clear()
        '                                        End Try
        '                                    End If
        '                                Next
        '                            Else
        '                                If fld.fieldOptionExport.Length > 0 Then
        '                                    Dim intVal As Integer = 0
        '                                    For Each fldvalue As String In fld.fieldOptionExport
        '                                        If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
        '                                            strHtmlBuilder.AppendLine("<option value='" & fldvalue & "'>" & fldvalue & "</option>")
        '                                        Else
        '                                            Try
        '                                                If Not fld.fieldOptionExport Is Nothing Then
        '                                                    If fld.fieldOptionExport.Length > intVal Then
        '                                                        If fld.fieldListSelection.Contains(fld.fieldOptionExport(intVal)) Then
        '                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
        '                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                        Else
        '                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
        '                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                        End If
        '                                                    Else
        '                                                        strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
        '                                                        strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                    End If
        '                                                End If
        '                                            Catch exFieldSel As Exception
        '                                                Err.Clear()
        '                                            End Try
        '                                        End If
        '                                        intVal += 1
        '                                    Next
        '                                ElseIf fld.fieldOptionDisplay.Length > 0 Then
        '                                    For Each fldvalue As String In fld.fieldOptionDisplay
        '                                        If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
        '                                            strHtmlBuilder.AppendLine("<option value='" & fldvalue & "'>" & fldvalue & "</option>")
        '                                        Else
        '                                            If fld.fieldListSelection.Contains(fldvalue) Then
        '                                                strHtmlBuilder.AppendLine("<option value='" & fldvalue & "' selected ")
        '                                                strHtmlBuilder.AppendLine(">" & fldvalue & "</option>")
        '                                            Else
        '                                                strHtmlBuilder.AppendLine("<option value='" & fldvalue & "' ")
        '                                                strHtmlBuilder.AppendLine(">" & fldvalue & "</option>")
        '                                            End If
        '                                        End If
        '                                    Next
        '                                End If
        '                            End If
        '                            strHtmlBuilder.AppendLine("</select>")
        '                            strHTML &= strHtmlBuilder.ToString
        '                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
        '                            A0_PDFFormField_LoadProperties(Session, fldNm, p, fld.fieldIndex)
        '                            Dim valList As New List(Of String)
        '                            Dim valListValues As New List(Of String)
        '                            Dim valListDisplay As New List(Of String)
        '                            For Each val1 As String In ComboBox_ItemDisplay.Items
        '                                valList.Add(val1)
        '                            Next
        '                            fld.fieldOptionDisplay = valList.ToArray
        '                            valList = New List(Of String)
        '                            For Each val1 As String In ComboBox_ItemValue.Items
        '                                valList.Add(val1)
        '                            Next
        '                            fld.fieldOptionExport = valList.ToArray
        '                            valList = New List(Of String)
        '                            For Each val1 As String In ComboBox_ItemDisplay.SelectedItems
        '                                valList.Add(val1)
        '                            Next
        '                            fld.fieldListSelection = valList.ToArray
        '                            Dim strCalcOnChange As String = ""
        '                            If PDFField_Calculations_Fields.Checked Then
        '                                Dim fldsCalc As String = ""
        '                                Select Case PDFField_Calculations_Fields_Type.SelectedIndex
        '                                    Case 0
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = "
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 1
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = "
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " * ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 2
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = (("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ") / " & PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Count & ")"
        '                                        strCalcScript &= ";};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 3
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.min("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ");" & Environment.NewLine
        '                                        strCalcScript &= "};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                    Case 4
        '                                        Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                        strCalcScript &= "function " & functionName & "(){"
        '                                        strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.max("
        '                                        Dim selCnt As Integer = -1
        '                                        For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                            If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                selCnt += 1
        '                                            End If
        '                                        Next
        '                                        strCalcScript &= ");" & Environment.NewLine
        '                                        strCalcScript &= "};" & Environment.NewLine
        '                                        strCalcScript &= fldsCalc & Environment.NewLine
        '                                        strCalcOnChange &= functionName & "();"
        '                                End Select
        '                            ElseIf PDFField_Calculations_SimpleFieldNotation.Checked Then
        '                            End If
        '                            strHtmlBuilder.AppendLine("<select tabIndex=""" & fldTabIndexTemp & """ class=""resizeText"" name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' " & IIf(fld.fieldType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST, IIf(fld.fieldSize > 1, "size='" & fld.fieldSize & "' ", "size='3' "), "") & IIf(ListBox_Options_MultipleSelection.Checked, " MULTIPLE ", " ") & " ")
        '                            If Not strCalcScript = "" Then
        '                                strHtmlBuilder.Append("onchange='" & strCalcOnChange & "' ")
        '                            End If
        '                            Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
        '                            strHtmlBuilder.Append(" style=""") '-moz-appearance: none;
        '                            strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
        '                            strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
        '                            strHtmlBuilder.Append("position:absolute;")
        '                            strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
        '                            If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
        '                                strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");") 'strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
        '                                defaultFontSize = PDFField_FontSize.Text
        '                                fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(PDFField_FontSize.Text)))
        '                            Else
        '                                strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(14) * 2.86) & ");")
        '                                fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(12)))
        '                            End If
        '                            strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
        '                            If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
        '                                strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
        '                            Else
        '                                strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
        '                            End If
        '                            strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
        '                            Dim strStyle As String = PDFField_BorderStyle.Text
        '                            Select Case strStyle.ToString.ToLower
        '                                Case "solid", "dashed", "dotted", "inset"
        '                                    strStyle = strStyle & ""
        '                                Case "beveled"
        '                                    strStyle = "ridge"
        '                                Case "underline"
        '                                    strStyle = "solid"
        '                            End Select
        '                            strHtmlBuilder.Append("border-style:" & strStyle & ";")
        '                            strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
        '                            strHtmlBuilder.Append("border-width:" & strStyle & "px;")
        '                            strHtmlBuilder.Append(""" ")
        '                            If PDFField_Required.Checked Then
        '                                strHtmlBuilder.Append(" required")
        '                            End If
        '                            strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
        '                            strHtmlBuilder.Append(">")
        '                            If fld.fieldOptionExport.Length = fld.fieldOptionDisplay.Length Then
        '                                For intVal As Integer = 0 To fld.fieldOptionExport.Length - 1
        '                                    If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
        '                                        strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "'>" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                    Else
        '                                        Try
        '                                            If fld.fieldListSelection.Contains(fld.fieldOptionDisplay(intVal)) Then
        '                                                strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
        '                                                strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                            Else
        '                                                If Not fld.fieldOptionExport Is Nothing Then
        '                                                    If fld.fieldOptionExport.Length > intVal Then
        '                                                        If fld.fieldListSelection.Contains(fld.fieldOptionExport(intVal)) Then
        '                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
        '                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                        Else
        '                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
        '                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                        End If
        '                                                    Else
        '                                                        strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
        '                                                        strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                    End If
        '                                                Else
        '                                                    strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
        '                                                    strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                End If
        '                                            End If
        '                                        Catch exFieldSel As Exception
        '                                            Err.Clear()
        '                                        End Try
        '                                    End If
        '                                Next
        '                            Else
        '                                If fld.fieldOptionExport.Length > 0 Then
        '                                    Dim intVal As Integer = 0
        '                                    For Each fldvalue As String In fld.fieldOptionExport
        '                                        If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
        '                                            strHtmlBuilder.AppendLine("<option value='" & fldvalue & "'>" & fldvalue & "</option>")
        '                                        Else
        '                                            Try
        '                                                If Not fld.fieldOptionExport Is Nothing Then
        '                                                    If fld.fieldOptionExport.Length > intVal Then
        '                                                        If fld.fieldListSelection.Contains(fld.fieldOptionExport(intVal)) Then
        '                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
        '                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                        Else
        '                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
        '                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                        End If
        '                                                    Else
        '                                                        strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
        '                                                        strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
        '                                                    End If
        '                                                End If
        '                                            Catch exFieldSel As Exception
        '                                                Err.Clear()
        '                                            End Try
        '                                        End If
        '                                        intVal += 1
        '                                    Next
        '                                ElseIf fld.fieldOptionDisplay.Length > 0 Then
        '                                    For Each fldvalue As String In fld.fieldOptionDisplay
        '                                        If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
        '                                            strHtmlBuilder.AppendLine("<option value='" & fldvalue & "'>" & fldvalue & "</option>")
        '                                        Else
        '                                            If fld.fieldListSelection.Contains(fldvalue) Then
        '                                                strHtmlBuilder.AppendLine("<option value='" & fldvalue & "' ") 'selected 
        '                                                strHtmlBuilder.AppendLine(">" & fldvalue & "</option>")
        '                                            Else
        '                                                strHtmlBuilder.AppendLine("<option value='" & fldvalue & "' ")
        '                                                strHtmlBuilder.AppendLine(">" & fldvalue & "</option>")
        '                                            End If
        '                                        End If
        '                                    Next
        '                                End If
        '                            End If
        '                            strHtmlBuilder.AppendLine("</select>")
        '                            strHTML &= strHtmlBuilder.ToString
        '                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
        '                            A0_PDFFormField_LoadProperties(Session, fldNm, p, fld.fieldIndex)
        '                            If Not PDFField_MultiLine.Checked Then
        '                                Dim labelLength As Integer = 0
        '                                Select Case PuchButton_Options_Behavior.SelectedIndex
        '                                    Case 0
        '                                        PuchButton_Options_State.SelectedIndex = 0
        '                                        If PuchButton_Options_Label.Text.ToString.ToLower.Contains("reset") Then
        '                                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='reset' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                        Else
        '                                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='submit' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                        End If
        '                                        strHtmlBuilder.Append(" value ='" & PuchButton_Options_Label.Text & "' ")
        '                                        labelLength = PuchButton_Options_Label.Text.Length
        '                                    Case 1
        '                                        PuchButton_Options_State.SelectedIndex = 0
        '                                        If PuchButton_Options_Label.Text.ToString.ToLower.Contains("reset") Then
        '                                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='reset' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                        Else
        '                                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='submit' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                        End If
        '                                        strHtmlBuilder.Append(" value ='" & PuchButton_Options_Label.Text & "' ") 'up
        '                                        strHtmlBuilder.Append(" onmouseout='JavaScript:this.value=""" & PuchButton_Options_Label.Text & """;' ") 'up
        '                                        strHtmlBuilder.Append(" onmouseup='JavaScript:this.value=""" & PuchButton_Options_Label.Text & """;' ") 'up
        '                                        labelLength = PuchButton_Options_Label.Text.Length
        '                                        PuchButton_Options_State.SelectedIndex = 1
        '                                        strHtmlBuilder.Append(" onmousedown='JavaScript:this.value=""" & PuchButton_Options_Label.Text & """;' ") 'down
        '                                        If labelLength < PuchButton_Options_Label.Text.Length Then
        '                                            labelLength = PuchButton_Options_Label.Text.Length
        '                                        End If
        '                                        PuchButton_Options_State.SelectedIndex = 2
        '                                        strHtmlBuilder.Append(" onmouseover='JavaScript:this.value=""" & PuchButton_Options_Label.Text & """;' ") 'rollover
        '                                        If labelLength < PuchButton_Options_Label.Text.Length Then
        '                                            labelLength = PuchButton_Options_Label.Text.Length
        '                                        End If
        '                                    Case 2
        '                                        PuchButton_Options_State.SelectedIndex = 0
        '                                        If PuchButton_Options_Label.Text.ToString.ToLower.Contains("reset") Then
        '                                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='reset' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                        Else
        '                                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='submit' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                        End If
        '                                        strHtmlBuilder.Append(" value ='" & PuchButton_Options_Label.Text & "' ")
        '                                        labelLength = PuchButton_Options_Label.Text.Length
        '                                    Case 3
        '                                        PuchButton_Options_State.SelectedIndex = 0
        '                                        If PuchButton_Options_Label.Text.ToString.ToLower.Contains("reset") Then
        '                                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='reset' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                        Else
        '                                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='submit' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                        End If
        '                                        strHtmlBuilder.Append(" value ='" & PuchButton_Options_Label.Text & "' ")
        '                                        labelLength = PuchButton_Options_Label.Text.Length
        '                                    Case Else
        '                                        If PuchButton_Options_Label.Text.ToString.ToLower.Contains("reset") Then
        '                                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='reset' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                        Else
        '                                            strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='submit' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
        '                                        End If
        '                                End Select
        '                                Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
        '                                strHtmlBuilder.Append(" style=""-moz-appearance: none;")
        '                                strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
        '                                strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
        '                                strHtmlBuilder.Append("position:absolute;")
        '                                strHtmlBuilder.Append("cursor:pointer;")
        '                                strHtmlBuilder.Append("text-align:" & "center" & ";")
        '                                If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
        '                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");") 'strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
        '                                    defaultFontSize = PDFField_FontSize.Text
        '                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CInt(PDFField_FontSize.Text)))
        '                                Else
        '                                    Dim ftSize As Integer = 12
        '                                    If labelLength > 0 Then
        '                                        Dim continueFontSize As Boolean = True
        '                                        Do Until continueFontSize = False
        '                                            If (ftSize + 1) > r.Height - 4 Then
        '                                                continueFontSize = False
        '                                                '
        '                                            ElseIf ((ftSize + 1) * 0.75) * labelLength >= r.Width - 4 Then
        '                                                continueFontSize = False
        '                                            End If
        '                                            If continueFontSize Then
        '                                                ftSize += 1
        '                                            End If
        '                                        Loop
        '                                    End If
        '                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (14 * 2.86) & ");") ' strHtmlBuilder.Append("font-size:" & String.Format(CSng(ftSize / 14), "#.00") & "em;")
        '                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / ftSize))
        '                                End If
        '                                strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
        '                                If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
        '                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
        '                                Else
        '                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
        '                                End If
        '                                strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
        '                                Dim strStyle As String = PDFField_BorderStyle.Text
        '                                Select Case strStyle.ToString.ToLower
        '                                    Case "solid", "dashed", "dotted", "inset"
        '                                        strStyle = strStyle & ""
        '                                    Case "beveled"
        '                                        strStyle = "ridge"
        '                                    Case "underline"
        '                                        strStyle = "solid"
        '                                End Select
        '                                strHtmlBuilder.Append("border-style:" & strStyle & ";")
        '                                strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
        '                                strHtmlBuilder.Append("border-width:" & strStyle & "px;")
        '                                strHtmlBuilder.Append(""" ")
        '                                strHtmlBuilder.Append(" class=""resizeText"" ")
        '                                strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
        '                                strHtmlBuilder.Append(" />")
        '                                strHTML &= strHtmlBuilder.ToString
        '                            End If
        '                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
        '                            If lstFields(fldNm).Count > 0 Then
        '                                For intValues As Integer = 0 To lstFields(fldNm).Count - 1
        '                                    A0_PDFFormField_LoadProperties(Session, fldNm, p, intValues)
        '                                    fld = lstFields(fldNm)(intValues)
        '                                    If Not fld.fieldDictionary Is Nothing Then
        '                                        If Not fld.fieldDictionary.Get(PdfName.AP) Is Nothing Then
        '                                            Dim tmpDict As PdfDictionary = fld.fieldDictionary.GetAsDict(PdfName.AP)
        '                                            If Not tmpDict.Get(PdfName.N) Is Nothing Then
        '                                                tmpDict = tmpDict.GetAsDict(PdfName.N)
        '                                                For Each k As PdfName In tmpDict.Keys.ToArray()
        '                                                    If Not k.ToString().TrimStart("/"c) = "Off" Then
        '                                                        fld.fieldValue = k.ToString().TrimStart("/"c)
        '                                                    End If
        '                                                Next
        '                                            End If
        '                                        End If
        '                                    End If
        '                                    Dim strCalcOnChange As String = ""
        '                                    If PDFField_Calculations_Fields.Checked Then
        '                                        Dim fldsCalc As String = ""
        '                                        Select Case PDFField_Calculations_Fields_Type.SelectedIndex
        '                                            Case 0 '+
        '                                                Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                                strCalcScript &= "function " & functionName & "(){"
        '                                                strCalcScript &= "document.getElementById('" & fldNm & "').value = "
        '                                                Dim selCnt As Integer = -1
        '                                                For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                                    If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                        fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
        '                                                        strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                        selCnt += 1
        '                                                    End If
        '                                                Next
        '                                                strCalcScript &= ";};" & Environment.NewLine
        '                                                strCalcScript &= fldsCalc & Environment.NewLine
        '                                                strCalcOnChange &= functionName & "();"
        '                                            Case 1 'x
        '                                                Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                                strCalcScript &= "function " & functionName & "(){"
        '                                                strCalcScript &= "document.getElementById('" & fldNm & "').value = "
        '                                                Dim selCnt As Integer = -1
        '                                                For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                                    If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                        fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
        '                                                        strCalcScript &= CStr(IIf(selCnt >= 0, " * ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                        selCnt += 1
        '                                                    End If
        '                                                Next
        '                                                strCalcScript &= ";};" & Environment.NewLine
        '                                                strCalcScript &= fldsCalc & Environment.NewLine
        '                                                strCalcOnChange &= functionName & "();"
        '                                            Case 2 ' avg
        '                                                Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                                strCalcScript &= "function " & functionName & "(){"
        '                                                strCalcScript &= "document.getElementById('" & fldNm & "').value = (("
        '                                                Dim selCnt As Integer = -1
        '                                                For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                                    If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                        fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                        strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                        selCnt += 1
        '                                                    End If
        '                                                Next
        '                                                strCalcScript &= ") / " & PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Count & ")"
        '                                                strCalcScript &= ";};" & Environment.NewLine
        '                                                strCalcScript &= fldsCalc & Environment.NewLine
        '                                                strCalcOnChange &= functionName & "();"
        '                                            Case 3 'min
        '                                                Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                                strCalcScript &= "function " & functionName & "(){"
        '                                                strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.min("
        '                                                Dim selCnt As Integer = -1
        '                                                For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                                    If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                        fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                        strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                        selCnt += 1
        '                                                    End If
        '                                                Next
        '                                                strCalcScript &= ");" & Environment.NewLine
        '                                                strCalcScript &= "};" & Environment.NewLine
        '                                                strCalcScript &= fldsCalc & Environment.NewLine
        '                                                strCalcOnChange &= functionName & "();"
        '                                            Case 4 'max
        '                                                Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
        '                                                strCalcScript &= "function " & functionName & "(){"
        '                                                strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.max("
        '                                                Dim selCnt As Integer = -1
        '                                                For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
        '                                                    If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
        '                                                        fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
        '                                                        strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
        '                                                        selCnt += 1
        '                                                    End If
        '                                                Next
        '                                                strCalcScript &= ");" & Environment.NewLine
        '                                                strCalcScript &= "};" & Environment.NewLine
        '                                                strCalcScript &= fldsCalc & Environment.NewLine
        '                                                strCalcOnChange &= functionName & "();"
        '                                        End Select
        '                                    ElseIf PDFField_Calculations_SimpleFieldNotation.Checked Then
        '                                    End If
        '                                    strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='radio' name='" & cFDFDoc.getFieldName(fld.fieldName) & "' id='" & cFDFDoc.getFieldName(fld.fieldName) & IIf(Not pField.Contains(cFDFDoc.getFieldName(fld.fieldName)), "", "_" & p) & "' value='" & fld.fieldValue & "' ")
        '                                    If Not strCalcScript = "" Then
        '                                        strHtmlBuilder.Append("onchange='" & strCalcOnChange & "' ")
        '                                    End If
        '                                    If Not pField.Contains(cFDFDoc.getFieldName(fld.fieldName)) Then
        '                                        pField.Add(cFDFDoc.getFieldName(fld.fieldName))
        '                                    End If
        '                                    strHtmlBuilder.Append(IIf(PDFField_Value_Checked.Checked, " CHECKED ", ""))
        '                                    If PDFField_Required.Checked Then
        '                                        strHtmlBuilder.Append(" required")
        '                                    End If
        '                                    Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
        '                                    strHtmlBuilder.Append(" style=""-moz-appearance: none;") '
        '                                    strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
        '                                    strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
        '                                    strHtmlBuilder.Append("position:absolute;")
        '                                    strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
        '                                    If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
        '                                        strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");") 'strHtmlBuilder.Append("font-size:" & String.Format(CSng(PDFField_FontSize.Text / 14), "#.00") & "em;")
        '                                        defaultFontSize = PDFField_FontSize.Text
        '                                    Else
        '                                        strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(14) * 2.86) & ");")
        '                                    End If
        '                                    strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
        '                                    If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
        '                                        strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
        '                                    Else
        '                                        strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
        '                                    End If
        '                                    strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
        '                                    Dim strStyle As String = PDFField_BorderStyle.Text
        '                                    Select Case strStyle.ToString.ToLower
        '                                        Case "solid", "dashed", "dotted", "inset"
        '                                            strStyle = strStyle & ""
        '                                        Case "beveled"
        '                                            strStyle = "ridge"
        '                                        Case "underline"
        '                                            strStyle = "solid"
        '                                    End Select
        '                                    strHtmlBuilder.Append("border-style:" & strStyle & ";")
        '                                    strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
        '                                    strHtmlBuilder.Append("border-width:" & strStyle & "px;")
        '                                    strHtmlBuilder.Append(""" ")
        '                                    strHtmlBuilder.AppendLine(" />")
        '                                Next
        '                                strHTML &= strHtmlBuilder.ToString
        '                            End If
        '                        Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
        '                    End Select
        '                    If Not pField.Contains(fld.fieldName) Then
        '                        pField.Add(fld.fieldName)
        '                    End If
        '                Next
        '                If fldTabIndex < fldTabMax Then
        '                    fldTabIndex = fldTabMax
        '                End If
        '                strHTML &= "</div>" & Environment.NewLine
        '                totalPageHeight += pdfReaderDoc.GetPageSizeWithRotation(p).Height * getPercent()
        '                strHTML &= "<script type=""text/javascript"">" & Environment.NewLine
        '                strHTML &= Environment.NewLine & "$(document).ready(function() {var resizeText = function () {$('#page_" & p & " > input').each(function(index, element){if(!$(element).attr('defaultFontSize')==''){var preferredFontSize = parseInt(parseFloat($(element).attr('defaultFontSize') / 16)*100);var preferredSize = " & pageWidth & " * " & pageHeight & ";var currentSize = $(window).width() * $(window).height();var scalePercentage = Math.sqrt(currentSize) / Math.sqrt(preferredSize);var newFontSize = preferredFontSize * scalePercentage;console.log($(element).attr('id') + ':' + $(element).attr('defaultFontSize') + ':' + preferredFontSize);$(element).css('font-size',newFontSize + '%');};});};$(window).bind('resize', function() {resizeText();}).trigger('resize');});"
        '                strHTML &= "</script>" & Environment.NewLine
        '            Next
        '            strHTML &= "<script type=""text/javascript"">" & Environment.NewLine
        '            strHTML &= "" & Environment.NewLine
        '            strHTML &= "$(function() {" & Environment.NewLine
        '            strHTML &= Environment.NewLine & "//$('.social').mask('000-00-0000');"
        '            strHTML &= Environment.NewLine & "//$('.datemask').mask('00/00/0000');"
        '            strHTML &= Environment.NewLine & maskInput.ToString()
        '            strHTML &= Environment.NewLine & "}"c & ")"c & ";"c & Environment.NewLine
        '            strHTML &= "" & Environment.NewLine
        '            If Not strCalcScript = "" Then
        '                strHTML &= (strCalcScript) & Environment.NewLine
        '            End If
        '            strHTML &= "</script>" & Environment.NewLine
        '            strHTML &= "<script type=""text/javascript"">" & Environment.NewLine
        '            strHTML &= File.ReadAllText(ApplicationDataFolder(False, "") & "html\downloadFDF.js").ToString().Replace("{ PDFPATH }", fpath.ToString.Replace("\", "\\\\"))
        '            strHTML &= "</script>"
        '            strHTML &= Environment.NewLine & "</form>" & Environment.NewLine
        '            strHTML &= "</body>" & Environment.NewLine
        '            strHTML &= "</html>" & Environment.NewLine
        '            If Not String.IsNullOrEmpty(fn) Then
        '                System.IO.File.WriteAllText(fn, strHTML)
        '                Process.Start("explorer.exe", "/select,""" & (fn) & """")
        '                Process.Start(fn)
        '            Else
        '                Throw New Exception("File name Is empty")
        '            End If
        '            StatusToolStrip = "Status: HTML File created"
        '        Catch ex As Exception
        '            StatusToolStrip = "Status: Error File NOT created - " & ex.Message.ToString
        '            TimeStampAdd(ex, debugMode)
        '        Finally
        '            ToolStripProgressBar1.Visible = False
        '            DeleteTempFilesImageCache()
        '            Session = b
        '            LoadPDFReaderDoc(pdfOwnerPassword)
        '            A0_LoadPDF()
        '            Me.Show()
        '            Me.BringToFront()
        '        End Try
        '    Case MsgBoxResult.Cancel
        '        Return
        '    Case Else
        '        Try
        '            StatusToolStrip = "Status: HTML File created"
        '        Catch ex As Exception
        '            StatusToolStrip = "Status: Error File NOT created - " & ex.Message.ToString
        '            TimeStampAdd(ex, debugMode)
        '        Finally
        '            DeleteTempFilesImageCache()
        '            Session = b
        '            LoadPDFReaderDoc(pdfOwnerPassword)
        '            A0_LoadPDF()
        '            Me.Show()
        '            Me.BringToFront()
        '        End Try
        'End Select
    End Sub
    Public Function createHTMLFile(Optional pageRange As String = "", Optional blnIncludeFields As Boolean = True, Optional useBase64ImageURL As Boolean = True, Optional htmlSubmitAction As String = "", Optional ByRef ParentForm As Form = Nothing, Optional strBody As String = "", Optional formActionNoPrompt As Boolean = False, Optional htmlPath As String = "", Optional excludeStyleSheets As Boolean = False, Optional minPageWidth As Integer = 720) As String
        Try
            pnlFields.Hide()
            If Not ParentForm Is Nothing Then
                If ParentForm.GetType Is Me.GetType Then
                    Me.Show()
                Else
                    Me.Show()
                    ParentForm.Hide()
                End If
            Else
                Me.Show()
            End If
            Dim reader As PdfReader = pdfReaderDoc.Clone
            Dim b() As Byte = Session
            Dim chtml As New PDF2HTMLnet.PDF2HTMLnet(Session, pdfOwnerPassword, "form1", "", "_self")
            chtml.formMethod = "post"
            chtml.ShowTitles = True
            chtml.TitleReplaceStringsWithSpace = New String() {"_", "-", "."}
            Dim fn As String = fileDirectory() & "html\" & Path.GetFileNameWithoutExtension(fpath) & "\" & Path.GetFileNameWithoutExtension(fpath & "") & ".htm" & ""
            If Not String.IsNullOrEmpty(htmlPath & "") Then
                fn = htmlPath
            End If
            Try
                Dim totalPageHeight As Single = 0, pageWidth As Single, pageHeight As Single
                Dim strHTML As String = ""
                Dim strCalcScript As String = ""
                Try
                    If blnIncludeFields And Not excludeStyleSheets Then
                        strHTML &= "<html>"
                        strHTML &= "<head>"
                        strHTML &= "<style media=""all"" type=""text/css"">" & Environment.NewLine & "@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){html,body,form{font-size:28px}}" & Environment.NewLine & "</style>"
                        strHTML &= "</head>"
                    End If
                    strHTML &= "<body style=""margin:0;padding:0;font-size:28px"">"
                    Dim clsInput As New clsPromptDialog
                    If String.IsNullOrEmpty(htmlSubmitAction & "") Then
                        If Not formActionNoPrompt Then
                            htmlSubmitAction = clsInput.ShowDialog("HTML submit action URL?", "HTML Submit Action URL?", Me, "", "OK")
                        End If
                    End If
                    If String.IsNullOrEmpty(htmlSubmitAction & "") Then
                        strHTML &= Environment.NewLine & "<form method=""post"" id=""form"">" & Environment.NewLine
                    Else
                        strHTML &= Environment.NewLine & "<form action=""" & htmlSubmitAction & """ method=""post"" id=""form"">" & Environment.NewLine
                    End If
                    Dim pField As New List(Of String)
                    ToolStripProgressBar1.Maximum = pdfReaderDoc.NumberOfPages
                    ToolStripProgressBar1.Minimum = 1
                    ToolStripProgressBar1.Value = 1
                    ToolStripProgressBar1.Visible = True
                    Dim dir As String = Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\"
                    If cLinks Is Nothing Then
                        cLinks = New clsLinks(pdfReaderDoc, Me)
                    ElseIf cLinks.Links.Count <= 0 Then
                        cLinks = New clsLinks(pdfReaderDoc, Me)
                        cLinks.LoadLinksOnPage(CInt(pageIndex))
                    End If
                    Dim fieldListFlowType As New Dictionary(Of String, Single)
                    Dim fldTabIndex As Integer = 0
                    Dim fldTabMax As Integer = 0
                    Dim maskInput As New System.Text.StringBuilder
                    For p As Integer = 1 To pdfReaderDoc.NumberOfPages
                        pageIndex = p - 1
                        ToolStripProgressBar1.Value = p
                        pnlFieldTabOrder_Load(True)
                        Dim lstFields As Dictionary(Of String, List(Of fieldInfo)) = GetAllFieldsOnPageiText(Session.ToArray(), pdfOwnerPassword, p, True)
                        pageWidth = pdfReaderDoc.GetPageSizeWithRotation(p).Width
                        pageHeight = pdfReaderDoc.GetPageSizeWithRotation(p).Height
                        LoadPDFReaderDoc(pdfOwnerPassword, True)
                        Dim pdfReaderDocClone As PdfReader = pdfReaderDoc.Clone
                        If blnIncludeFields Then
                            pdfReaderDocClone.RemoveFields()
                        End If
                        Dim imgBytes() As Byte = A0_LoadImageGhostScript(getPDFBytes(pdfReaderDocClone), pdfOwnerPassword, p, pageWidth * CSng(IIf(Not excludeStyleSheets, getPercent() * 1.3F, 1)), pageHeight * CSng(IIf(Not excludeStyleSheets, getPercent() * 1.3F, 1)), False)
                        Dim img As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(imgBytes))
                        Dim imgStream As New MemoryStream
                        img.Save(imgStream, System.Drawing.Imaging.ImageFormat.Png)
                        strHTML &= "<div name=""page_" & p & """ id=""page_" & p & """ style=""background-size: 100%;margin:0 auto;padding:0;display:block;width:" & CStr(IIf(excludeStyleSheets, (pageWidth * getPercent()) & "px", "100%")) & ";height:" & CStr(IIf(excludeStyleSheets, (pageHeight * getPercent()) & "px", "auto")) & ";max-width:100%;font-size:28px;" & CStr(IIf(minPageWidth > 0, "min-width:" & CStr(IIf(pageWidth <= minPageWidth, pageWidth, minPageWidth)) & "px;min-height:" & CInt(minPageWidth * (pageHeight / pageWidth)) & "px;", "")) & "position:relative;"">" 'width:" & CInt(pageWidth * getPercent()) & ";height:" & CInt(pageHeight * getPercent()) & ";
                        If useBase64ImageURL Then
                            strHTML &= "<img src=""data:image/jpeg;base64," & System.Convert.ToBase64String(imgStream.ToArray()).ToString.Replace(" ", "+") & """ style=""width:" & CStr(IIf(excludeStyleSheets, (pageWidth) & "px", "100%")) & ";height:" & CStr(IIf(excludeStyleSheets, (pageHeight) & "px", "auto")) & ";max-width:100%;margin:0 auto;z-index:-1000; width:100%;max-width:100%;height:auto;" & CStr(IIf(minPageWidth > 0, "min-width:" & CStr(IIf(pageWidth <= minPageWidth, pageWidth, minPageWidth)) & "px;min-height:" & CInt(minPageWidth * (pageHeight / pageWidth)) & "px;", "")) & """/>"
                        Else
                            Dim imgFileName As String = dir & "images\" & p.ToString() & "-" & Path.GetFileNameWithoutExtension(fn) & ".png"
                            If Not Directory.Exists(dir & "images\") Then
                                Directory.CreateDirectory(dir & "images\")
                            End If
                            File.WriteAllBytes(imgFileName, imgStream.ToArray())
                            strHTML &= "<img src=""" & "images/" & p.ToString() & "-" & Path.GetFileNameWithoutExtension(fn) & ".png" & """ style=""width:" & CStr(IIf(excludeStyleSheets, (pageWidth) & "px", "100%")) & ";height:" & CStr(IIf(excludeStyleSheets, (pageHeight) & "px", "auto")) & ";max-width:100%;margin:0 auto;z-index:-1000;max-width:100%;" & CStr(IIf(minPageWidth > 0, "min-width:" & CStr(IIf(pageWidth <= minPageWidth, pageWidth, minPageWidth)) & "px;min-height:" & CInt(minPageWidth * (pageHeight / pageWidth)) & "px;", "")) & """/>"
                        End If
                        cLinks.LoadLinksOnPage(CInt(p - 1))
                        If Not cLinks.Links Is Nothing Then
                            If cLinks.Links.Count > 0 Then
                                For lnkIndex As Integer = 0 To cLinks.Links.Count - 1
                                    Dim lnkRectScreen As RectangleF = cLinks.Links(lnkIndex).Link_Rect
                                    Dim strHTMLField As String = ""
                                    Dim strHtmlBuilder As New System.Text.StringBuilder
                                    Dim perc As Single = getPercent()
                                    If cLinks.Links(lnkIndex).Link_Destination_PageIndex >= 0 And String.IsNullOrEmpty(cLinks.Links(lnkIndex).Link_Destination_URI) And cLinks.Links(lnkIndex).Link_ImageBytes Is Nothing Then
                                        Dim intDestPage As Integer = cLinks.Links(lnkIndex).Link_Destination_PageIndex + 0
                                        If intDestPage >= 0 Then
                                            strHtmlBuilder.AppendLine("<a name='p" & p & "_lnk" & lnkIndex & "' id='p" & p & "_lnk" & lnkIndex & "' href=""#page_" & CInt(intDestPage + 1).ToString() & """ ")
                                            Dim r As System.Drawing.RectangleF = lnkRectScreen
                                            strHtmlBuilder.Append(" style=""")
                                            If Not excludeStyleSheets Then
                                                strHtmlBuilder.Append("position:absolute;left:" & (r.Left / (pageWidth * perc)) * 100 & "%;right:" & (r.Right / (pageWidth * perc)) * 100 & "%;top:" & ((r.Top) / (pageHeight * perc)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight * perc)) * 100 & "%;")
                                            Else
                                                strHtmlBuilder.Append("position:absolute;padding-left:" & r.Left & "px;width:" & r.Width & "px;padding-top:" & r.Top & "px;height:" & r.Height & "px;")
                                            End If
                                            strHtmlBuilder.Append("height:" & (r.Height / (pageHeight * perc)) * 100 & "%;width:" & (r.Width / (pageWidth * perc)) * 100 & "%;")
                                            strHtmlBuilder.Append("background-color: Transparent;")
                                            strHtmlBuilder.Append("border-color:Transparent;")
                                            strHtmlBuilder.Append("border-width:0px;")
                                            strHtmlBuilder.Append(""" ")
                                            strHtmlBuilder.Append("> </a>")
                                            strHTML &= strHtmlBuilder.ToString
                                        End If
                                    ElseIf Not String.IsNullOrEmpty(cLinks.Links(lnkIndex).Link_Destination_URI) And cLinks.Links(lnkIndex).Link_ImageBytes Is Nothing Then
                                        Dim strDestUri As String = cLinks.Links(lnkIndex).Link_Destination_URI & ""
                                        strHtmlBuilder.AppendLine("<a target=""_blank"" name='p" & p & "_lnk" & lnkIndex & "' id='p" & p & "_lnk" & lnkIndex & "' href=""" & strDestUri & """ ")
                                        Dim r As System.Drawing.RectangleF = lnkRectScreen
                                        strHtmlBuilder.Append(" style=""")
                                        strHtmlBuilder.Append("position:absolute;left:" & (r.Left / (pageWidth * perc)) * 100 & "%;right:" & (r.Right / (pageWidth * perc)) * 100 & "%;top:" & ((r.Top) / ((pageHeight * perc))) * 100 & "%;bottom:" & ((r.Bottom) / ((pageHeight * perc))) * 100 & "%;")
                                        strHtmlBuilder.Append("height:" & (r.Height / (pageHeight * perc)) * 100 & "%;width:" & (r.Width / (pageWidth * perc)) * 100 & "%;")
                                        strHtmlBuilder.Append("background-color: Transparent;")
                                        strHtmlBuilder.Append("border-color:Transparent;")
                                        strHtmlBuilder.Append("border-width:0px;")
                                        strHtmlBuilder.Append(""" ")
                                        strHtmlBuilder.Append("> </a>")
                                        strHTML &= strHtmlBuilder.ToString
                                    End If
                                Next
                            End If
                        End If
                        strHTML &= (Environment.NewLine & "")
                        If blnIncludeFields Then
                            Try
                                calculationOrderList = CalculationOrder
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                            Dim fldTabIndexTemp As Integer = fldTabIndex
                            If Not lstFields Is Nothing Then
                                If lstFields.Count > 0 Then
                                    For Each fldNm As String In lstFields.Keys.ToArray
                                        strHTML &= (Environment.NewLine & "")
                                        Try
                                            calculationOrderList = CalculationOrder
                                            fldTabIndexTemp = 0
                                            Try
                                                fields_tab_order = FieldTabOrder(True)
                                                Dim iTab As Integer = 0
                                                For Each fldRect As FieldName_Rectangle In fields_tab_order.ToArray()
                                                    If Not fldRect.field_name Is Nothing Then
                                                        If Not String.IsNullOrEmpty(fldRect.field_name) Then
                                                            If fldRect.field_name.ToString.ToLower() & "" = fldNm.ToString.ToLower() Then
                                                                fldTabIndexTemp = fldTabIndex + iTab
                                                                Exit For
                                                            End If
                                                        End If
                                                    End If
                                                    iTab += 1
                                                Next
                                            Catch ex As Exception
                                                TimeStampAdd(ex, debugMode)
                                            End Try
                                            If fldTabIndexTemp > fldTabMax Then
                                                fldTabMax = fldTabIndexTemp
                                            End If
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                        Dim fld As fieldInfo = lstFields(fldNm)(0)
                                        Dim strHTMLField As String = ""
                                        Dim strHtmlBuilder As New System.Text.StringBuilder
                                        Dim defaultFontSize As Integer = 12
                                        Select Case fld.fieldType
                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                                                Dim currencySymbol As String = "", currencyPrepend As Boolean = True
                                                A0_PDFFormField_LoadProperties(Session, fldNm, p, fld.fieldIndex)
                                                Dim inputType As String = "text"
                                                Dim classStringTextbox As String = fldNm & "_" & fld.fieldIndex, formatStringTextbox As String = ""
                                                Dim strJS As String = PDFField_Format_Custom_Format_Script.Text
                                                If PDFField_Format_Category.SelectedIndex > 0 Then
                                                    classStringTextbox = fldNm & "_" & fld.fieldIndex
                                                    If strJS.TrimStart("/"c).ToLower.StartsWith("AFNumber_Format".ToLower) Then
                                                        inputType = "number"
                                                        strJS = strJS.Replace(CStr("AFNumber_Format"), "")
                                                        strJS = strJS.TrimEnd(CStr(";"))
                                                        strJS = strJS.TrimEnd(CStr(")"))
                                                        strJS = strJS.TrimStart(CStr("("))
                                                        Dim strJSParameters() As String = strJS.Split(","c)
                                                        Try
                                                            formatStringTextbox = "[.]"
                                                            For i As Integer = 0 To CInt(strJSParameters(0)) - 1
                                                                formatStringTextbox &= "0"
                                                            Next
                                                        Catch exF As Exception
                                                            TimeStampAdd(exF, debugMode)
                                                        End Try
                                                        Try
                                                            If PDFField_Validations_Range.Checked Then
                                                                If Not String.IsNullOrEmpty(PDFField_Validation_Range_To.Text) Then
                                                                    Dim numPrefix As String = "", numPrefixCount As Integer = 0
                                                                    If PDFField_Validation_Range_To.Text.Contains(".") Then
                                                                        numPrefixCount = PDFField_Validation_Range_To.Text.Split(".")(0).Length - 1
                                                                    Else
                                                                        numPrefixCount = PDFField_Validation_Range_To.Text.Length - 1
                                                                    End If
                                                                    Select Case CInt(strJSParameters(1))
                                                                        Case 0
                                                                            For i As Integer = 0 To numPrefixCount
                                                                                If numPrefix.Contains(",") Then
                                                                                    If numPrefix.Split(",")(0).Length >= 2 Then
                                                                                        numPrefix = "," & "0" & numPrefix
                                                                                    Else
                                                                                        numPrefix = "0" & numPrefix
                                                                                    End If
                                                                                Else
                                                                                    If numPrefix.Length >= 2 Then
                                                                                        numPrefix = "," & "0" & numPrefix
                                                                                    Else
                                                                                        numPrefix = "0" & numPrefix
                                                                                    End If
                                                                                End If
                                                                            Next
                                                                            numPrefix = numPrefix.TrimStart(","c)
                                                                            formatStringTextbox = numPrefix & formatStringTextbox
                                                                        Case 1
                                                                            For i As Integer = 0 To numPrefixCount
                                                                                numPrefix = "0" & numPrefix
                                                                            Next
                                                                            numPrefix = numPrefix
                                                                            formatStringTextbox = "0" & formatStringTextbox
                                                                        Case 2
                                                                            formatStringTextbox = "0.0" & formatStringTextbox.Replace(".", ",")
                                                                        Case 3
                                                                            formatStringTextbox = "" & formatStringTextbox.Replace(".", ",")
                                                                    End Select
                                                                Else
                                                                    Select Case CInt(strJSParameters(1))
                                                                        Case 0
                                                                            formatStringTextbox = "0,0" & formatStringTextbox
                                                                        Case 1
                                                                            formatStringTextbox = "0" & formatStringTextbox
                                                                        Case 2
                                                                            formatStringTextbox = "0.0" & formatStringTextbox.Replace(".", ",")
                                                                        Case 3
                                                                            formatStringTextbox = "" & formatStringTextbox.Replace(".", ",")
                                                                    End Select
                                                                End If
                                                            Else
                                                                Select Case CInt(strJSParameters(1))
                                                                    Case 0
                                                                        formatStringTextbox = "0,0" & formatStringTextbox
                                                                    Case 1
                                                                        formatStringTextbox = "0" & formatStringTextbox
                                                                    Case 2
                                                                        formatStringTextbox = "0.0" & formatStringTextbox.Replace(".", ",")
                                                                    Case 3
                                                                        formatStringTextbox = "" & formatStringTextbox.Replace(".", ",")
                                                                End Select
                                                            End If
                                                        Catch exF As Exception
                                                            TimeStampAdd(exF, debugMode)
                                                        End Try
                                                        Try
                                                        Catch exF As Exception
                                                            TimeStampAdd(exF, debugMode)
                                                        End Try
                                                        Try
                                                        Catch exF As Exception
                                                            TimeStampAdd(exF, debugMode)
                                                        End Try
                                                        Try
                                                        Catch exF As Exception
                                                            TimeStampAdd(exF, debugMode)
                                                        End Try
                                                        Try
                                                        Catch exF As Exception
                                                            PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
                                                            TimeStampAdd(exF, debugMode)
                                                        End Try
                                                        Try
                                                            Select Case CStr(strJSParameters(4) & "").Trim()
                                                                Case ""
                                                                    formatStringTextbox = "" & formatStringTextbox
                                                                Case """"""
                                                                    formatStringTextbox = "" & formatStringTextbox
                                                                Case CStr(" ""\u0024""").Trim()
                                                                    currencySymbol = "&#036;"
                                                                    currencyPrepend = True
                                                                Case CStr(" ""\u0020\u0044\u004d""").Trim()
                                                                    currencySymbol = "(DM)"
                                                                    currencyPrepend = False
                                                                Case CStr(" ""\u20ac""").Trim()
                                                                    currencySymbol = "&euro;"
                                                                    currencyPrepend = True
                                                                Case CStr(" ""\u0066\u006c""").Trim()
                                                                    currencySymbol = "fl"
                                                                    currencyPrepend = True
                                                                Case CStr(" ""\u0020\u0046""").Trim()
                                                                    currencySymbol = "&#8355;"
                                                                    currencyPrepend = False
                                                                Case CStr(" ""\u0020\u006b\u0072""").Trim()
                                                                    currencySymbol = "kr"
                                                                    currencyPrepend = False
                                                                Case CStr(" ""\u004c\u002e\u0020""").Trim()
                                                                    currencySymbol = "&#8356; "
                                                                    currencyPrepend = True
                                                                Case CStr(" ""\u0020\u0050\u0074\u0073""").Trim()
                                                                    currencySymbol = "&#8359; "
                                                                    currencyPrepend = False
                                                                Case CStr(" ""\u00a3""").Trim()
                                                                    currencySymbol = "&pound;"
                                                                    currencyPrepend = True
                                                                Case CStr(" ""\u00a5""").Trim()
                                                                    currencySymbol = "&yen;"
                                                                    currencyPrepend = True
                                                                Case Else
                                                                    currencySymbol = ((strJSParameters(4).ToString().Replace("""", "").Replace(" ", "")) & "")
                                                                    If currencySymbol.Contains("\u") Then
                                                                        currencySymbol = currencySymbol.Replace("\u", "&#x")
                                                                    End If
                                                                    If PDFField_Format_Number_CurrencySymbol_Prepend.Checked = True Then
                                                                        currencyPrepend = True
                                                                    Else
                                                                        currencyPrepend = False
                                                                    End If
                                                            End Select
                                                            currencyPrepend = PDFField_Format_Number_CurrencySymbol_Prepend.Checked
                                                        Catch exF As Exception
                                                            TimeStampAdd(exF, debugMode)
                                                        End Try
                                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFPercent_Format".ToLower) Then
                                                        strJS = strJS.Replace(CStr("AFPercent_Format"), "")
                                                        strJS = strJS.TrimEnd(CStr(";"))
                                                        strJS = strJS.TrimEnd(CStr(")"))
                                                        strJS = strJS.TrimStart(CStr("("))
                                                        Dim strJSParameters() As String = strJS.Split(","c)
                                                        Try
                                                            formatStringTextbox = "[.]"
                                                            For i As Integer = 0 To CInt(strJSParameters(0)) - 1
                                                                formatStringTextbox &= "0"
                                                            Next
                                                        Catch exF As Exception
                                                            TimeStampAdd(exF, debugMode)
                                                        End Try
                                                        Try
                                                            Try
                                                                Select Case CInt(strJSParameters(1))
                                                                    Case 0
                                                                        formatStringTextbox = "0,0" & formatStringTextbox
                                                                    Case 1
                                                                        formatStringTextbox = "0" & formatStringTextbox
                                                                    Case 2
                                                                        formatStringTextbox = "0.0" & formatStringTextbox.Replace(".", ",")
                                                                    Case 3
                                                                        formatStringTextbox = "" & formatStringTextbox.Replace(".", ",")
                                                                End Select
                                                            Catch exF As Exception
                                                                TimeStampAdd(exF, debugMode)
                                                            End Try
                                                        Catch exF As Exception
                                                            TimeStampAdd(exF, debugMode)
                                                        End Try
                                                        formatStringTextbox &= "%"
                                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFDate_FormatEx".ToLower) Then
                                                        inputType = "date"
                                                        strJS = strJS.Replace(CStr("AFDate_FormatEx"), "")
                                                        strJS = strJS.TrimEnd(CStr(";"))
                                                        strJS = strJS.TrimEnd(CStr(")"))
                                                        strJS = strJS.TrimStart(CStr("("))
                                                        strJS = strJS.TrimStart("""")
                                                        strJS = strJS.TrimEnd("""")
                                                        Dim selIndex As Integer = -1
                                                        For iVal As Integer = 0 To PDFField_Format_Dates.Items.Count - 1
                                                            If strJS = PDFField_Format_Dates.Items(iVal).ToString Then
                                                                selIndex = iVal
                                                                Exit For
                                                            End If
                                                        Next
                                                        If selIndex >= 0 Then
                                                            PDFField_Format_Dates.SelectedIndex = selIndex
                                                            For i As Integer = 0 To PDFField_Format_Dates.Items(PDFField_Format_Dates.SelectedIndex).ToString.ToCharArray().Length - 1
                                                                Dim chrX As Char = PDFField_Format_Dates.Items(PDFField_Format_Dates.SelectedIndex).ToString.ToCharArray()(i)
                                                                If Not chrX = "/" And Not chrX = "\" And Not chrX = ":" Then
                                                                    formatStringTextbox &= "0"
                                                                Else
                                                                    formatStringTextbox &= chrX
                                                                End If
                                                            Next
                                                        Else
                                                        End If
                                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_Format(".ToLower) Then
                                                        inputType = "time"
                                                        Dim strJSTemp As String = strJS
                                                        strJS = strJS.Replace(CStr("AFTime_Format"), "")
                                                        strJS = strJS.TrimEnd(CStr(";"))
                                                        strJS = strJS.TrimEnd(CStr(")"))
                                                        strJS = strJS.TrimStart(CStr("("))
                                                        strJS = strJS.TrimStart("""")
                                                        strJS = strJS.TrimEnd("""")
                                                        Dim selIndex As Integer = CInt(strJS)
                                                        If selIndex >= 0 Then
                                                            PDFField_Format_Dates.SelectedIndex = selIndex
                                                            For i As Integer = 0 To PDFField_Format_Times.Items(PDFField_Format_Times.SelectedIndex).ToString.ToCharArray().Length - 1
                                                                Dim chrX As Char = PDFField_Format_Times.Items(PDFField_Format_Times.SelectedIndex).ToString().ToCharArray()(i)
                                                                If Not chrX = "/" And Not chrX = "\" And Not chrX = ":" Then
                                                                    formatStringTextbox &= "0"
                                                                Else
                                                                    formatStringTextbox &= chrX
                                                                End If
                                                            Next
                                                        Else
                                                        End If
                                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFTime_FormatEx(".ToLower) Then
                                                        inputType = "time"
                                                        Dim strJSTemp As String = strJS
                                                        strJS = strJS.Replace(CStr("AFTime_FormatEx"), "")
                                                        strJS = strJS.TrimEnd(CStr(";"))
                                                        strJS = strJS.TrimEnd(CStr(")"))
                                                        strJS = strJS.TrimStart(CStr("("))
                                                        strJS = strJS.TrimStart("""")
                                                        strJS = strJS.TrimEnd("""")
                                                        Dim selIndex As Integer = -1
                                                        For iVal As Integer = 0 To PDFField_Format_Times.Items.Count - 1
                                                            If strJS = PDFField_Format_Times.Items(iVal).ToString Then
                                                                selIndex = iVal
                                                                Exit For
                                                            End If
                                                        Next
                                                        If selIndex >= 0 Then
                                                            PDFField_Format_Dates.SelectedIndex = selIndex
                                                            For i As Integer = 0 To PDFField_Format_Times.Items(PDFField_Format_Times.SelectedIndex).ToString.ToCharArray().Length - 1
                                                                Dim chrX As Char = PDFField_Format_Times.Items(PDFField_Format_Times.SelectedIndex).ToString().ToCharArray()(i)
                                                                If Not chrX = "/" And Not chrX = "\" And Not chrX = ":" Then
                                                                    formatStringTextbox &= "0"
                                                                Else
                                                                    formatStringTextbox &= chrX
                                                                End If
                                                            Next
                                                        Else
                                                        End If
                                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_Format(".ToLower) Then
                                                        Dim strJSTemp As String = strJS
                                                        strJS = strJS.Replace(CStr("AFSpecial_Format"), "")
                                                        strJS = strJS.TrimEnd(CStr(";"))
                                                        strJS = strJS.TrimEnd(CStr(")"))
                                                        strJS = strJS.TrimStart(CStr("("))
                                                        strJS = strJS.TrimStart("""")
                                                        strJS = strJS.TrimEnd("""")
                                                        Dim selIndex As Integer = CInt(strJS)
                                                        PDFField_Format_Category.SelectedIndex = 5
                                                        If selIndex >= 0 Then
                                                            PDFField_Format_Specials.SelectedIndex = selIndex
                                                            PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                                            PDFField_Format_Special_Custom.Visible = False
                                                        Else
                                                            PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                                            PDFField_Format_Special_Custom.Text = strJSTemp.ToString
                                                            PDFField_Format_Special_Custom.Visible = True
                                                        End If
                                                    ElseIf strJS.TrimStart("/"c).ToLower.StartsWith("AFSpecial_FormatEx(".ToLower) Then
                                                        Dim strJSTemp As String = strJS
                                                        strJS = strJS.Replace(CStr("AFSpecial_FormatEx"), "")
                                                        strJS = strJS.TrimEnd(CStr(";"))
                                                        strJS = strJS.TrimEnd(CStr(")"))
                                                        strJS = strJS.TrimStart(CStr("("))
                                                        strJS = strJS.TrimStart("""")
                                                        strJS = strJS.TrimEnd("""")
                                                        Dim selIndex As Integer = -1
                                                        PDFField_Format_Category.SelectedIndex = 5
                                                        For iVal As Integer = 0 To PDFField_Format_Specials.Items.Count - 1
                                                            If strJS = PDFField_Format_Specials.Items(iVal).ToString Then
                                                                selIndex = iVal
                                                                Exit For
                                                            End If
                                                        Next
                                                        If selIndex >= 0 Then
                                                            PDFField_Format_Specials.SelectedIndex = selIndex
                                                            PDFField_Format_Special_Custom.Text = PDFField_Format_Specials.Items(selIndex).ToString
                                                            PDFField_Format_Special_Custom.Visible = False
                                                        Else
                                                            PDFField_Format_Specials.SelectedIndex = PDFField_Format_Specials.Items.Count - 1
                                                            PDFField_Format_Special_Custom.Text = strJS.ToString
                                                            PDFField_Format_Special_Custom.Visible = True
                                                        End If
                                                    Else
                                                        PDFField_Format_Category.SelectedIndex = 6
                                                    End If
                                                End If
                                                If Not String.IsNullOrEmpty(formatStringTextbox) Then
                                                    maskInput.AppendLine("// $('." & classStringTextbox & "').mask('" & formatStringTextbox & "');")
                                                End If
                                                Dim strMin As String = "", strMax As String = ""
                                                If PDFField_Validations_Range.Checked Then
                                                    If Not String.IsNullOrEmpty(PDFField_Validation_Range_From.Text) Then
                                                        If IsNumeric(PDFField_Validation_Range_From.Text) Then
                                                            strMin = "min=""" & PDFField_Validation_Range_From.Text & """ "
                                                        End If
                                                    End If
                                                    If Not String.IsNullOrEmpty(PDFField_Validation_Range_To.Text) Then
                                                        If IsNumeric(PDFField_Validation_Range_To.Text) Then
                                                            strMax = "max=""" & PDFField_Validation_Range_To.Text & """ "
                                                        End If
                                                    End If
                                                End If
                                                Dim strCalcOnChange As String = ""
                                                If PDFField_Calculations_Fields.Checked Then
                                                    Dim fldsCalc As String = ""
                                                    Select Case PDFField_Calculations_Fields_Type.SelectedIndex
                                                        Case 0
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = "
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 1
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = "
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " * ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 2
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = (("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ") / " & PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Count & ")"
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 3
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.min("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ");" & Environment.NewLine
                                                            strCalcScript &= "};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 4
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.max("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ");" & Environment.NewLine
                                                            strCalcScript &= "};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                    End Select
                                                ElseIf PDFField_Calculations_SimpleFieldNotation.Checked Then
                                                End If
                                                If Not PDFField_MultiLine.Checked Then
                                                    strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='text' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' value='" & PDFField_Value.Text & "' ")
                                                    If PDFField_MaxLenChk.Checked And IsNumeric(PDFField_MaxLen.Text) > 0 Then
                                                        strHtmlBuilder.Append(" maxlength=""" & PDFField_MaxLen.Text & """ ")
                                                    End If
                                                    strHtmlBuilder.Append(strMin & strMax)
                                                    If Not String.IsNullOrEmpty(formatStringTextbox) Then
                                                        If Not String.IsNullOrEmpty(currencySymbol.Trim()) Then
                                                            If currencyPrepend = True Then
                                                            Else
                                                            End If
                                                        Else
                                                        End If
                                                    End If
                                                    If Not strCalcScript = "" Then
                                                        strHtmlBuilder.Append("onchange='" & strCalcOnChange & "' ")
                                                    End If
                                                    Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
                                                    If Not String.IsNullOrEmpty(formatStringTextbox) Then
                                                        strHtmlBuilder.Append(" class=""" & classStringTextbox & """ ")
                                                    End If
                                                    strHtmlBuilder.Append(" style=""")
                                                    strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
                                                    strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
                                                    strHtmlBuilder.Append("position:absolute;")
                                                    strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
                                                    If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
                                                        strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
                                                        defaultFontSize = PDFField_FontSize.Text
                                                        fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(PDFField_FontSize.Text)))
                                                    Else
                                                        Dim ftSize As Integer = 12
                                                        If Not String.IsNullOrEmpty(PDFField_Value.Text) Then
                                                            Dim continueFontSize As Boolean = True
                                                            Do Until continueFontSize = False
                                                                If (ftSize + 1) > r.Height - 4 Then
                                                                    continueFontSize = False
                                                                ElseIf (ftSize + 1) * PDFField_Value.Text.Length >= r.Width - 4 Then
                                                                    continueFontSize = False
                                                                End If
                                                                If continueFontSize Then
                                                                    ftSize += 1
                                                                End If
                                                            Loop
                                                        End If
                                                        strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & 14 * 2.86 & ");")
                                                        fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / ftSize))
                                                    End If
                                                    strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
                                                    If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
                                                        strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
                                                    Else
                                                        strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
                                                    End If
                                                    strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
                                                    Dim strStyle As String = PDFField_BorderStyle.Text
                                                    Select Case strStyle.ToString.ToLower
                                                        Case "solid", "dashed", "dotted", "inset"
                                                            strStyle = strStyle & ""
                                                        Case "beveled"
                                                            strStyle = "ridge"
                                                        Case "underline"
                                                            strStyle = "solid"
                                                    End Select
                                                    strHtmlBuilder.Append("border-style:" & strStyle & ";")
                                                    strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
                                                    strHtmlBuilder.Append("border-width:" & strStyle & "px;")
                                                    strHtmlBuilder.Append(""" ")
                                                    strHtmlBuilder.Append(" class=""resizeText"" ")
                                                    If PDFField_Required.Checked Then
                                                        strHtmlBuilder.Append(" required")
                                                    End If
                                                    strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
                                                    strHtmlBuilder.Append(" />")
                                                    strHTML &= strHtmlBuilder.ToString
                                                Else
                                                    strHtmlBuilder.AppendLine("<textarea tabIndex=""" & fldTabIndexTemp & """ name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                    If PDFField_MaxLenChk.Checked And IsNumeric(PDFField_MaxLen.Text) > 0 Then
                                                        strHtmlBuilder.Append(" maxlength=""" & PDFField_MaxLen.Text & """ ")
                                                    End If
                                                    Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
                                                    strHtmlBuilder.Append(" style=""")
                                                    strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
                                                    strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
                                                    strHtmlBuilder.Append("position:absolute;")
                                                    strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
                                                    If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
                                                        strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
                                                        defaultFontSize = PDFField_FontSize.Text
                                                        fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(PDFField_FontSize.Text)))
                                                    Else
                                                        Dim ftSize As Integer = 12
                                                        strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (14 * 2.86) & ");")
                                                        fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / ftSize))
                                                    End If
                                                    strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
                                                    If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
                                                        strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
                                                    Else
                                                        strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
                                                    End If
                                                    strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
                                                    Dim strStyle As String = PDFField_BorderStyle.Text
                                                    Select Case strStyle.ToString.ToLower
                                                        Case "solid", "dashed", "dotted", "inset"
                                                            strStyle = strStyle & ""
                                                        Case "beveled"
                                                            strStyle = "ridge"
                                                        Case "underline"
                                                            strStyle = "solid"
                                                    End Select
                                                    strHtmlBuilder.Append("border-style:" & strStyle & ";")
                                                    strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
                                                    strHtmlBuilder.Append("border-width:" & strStyle & "px;")
                                                    strHtmlBuilder.Append(""" ")
                                                    strHtmlBuilder.Append(" class=""resizeText"" ")
                                                    If PDFField_Required.Checked Then
                                                        strHtmlBuilder.Append(" required")
                                                    End If
                                                    strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
                                                    strHtmlBuilder.Append(">" & PDFField_Value.Text & "</textarea>")
                                                    strHTML &= strHtmlBuilder.ToString
                                                End If
                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                                A0_PDFFormField_LoadProperties(Session, fldNm, p, fld.fieldIndex)
                                                If Not fld.fieldDictionary Is Nothing Then
                                                    If Not fld.fieldDictionary.Get(PdfName.AP) Is Nothing Then
                                                        Dim tmpDict As PdfDictionary = fld.fieldDictionary.GetAsDict(PdfName.AP)
                                                        If Not tmpDict.Get(PdfName.N) Is Nothing Then
                                                            tmpDict = tmpDict.GetAsDict(PdfName.N)
                                                            For Each k As PdfName In tmpDict.Keys.ToArray()
                                                                If Not k.ToString().TrimStart("/"c) = "Off" Then
                                                                    fld.fieldValue = k.ToString().TrimStart("/"c)
                                                                End If
                                                            Next
                                                        End If
                                                    End If
                                                End If
                                                Dim strCalcOnChange As String = ""
                                                If PDFField_Calculations_Fields.Checked Then
                                                    Dim fldsCalc As String = ""
                                                    Select Case PDFField_Calculations_Fields_Type.SelectedIndex
                                                        Case 0
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = "
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 1
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = "
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " * ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 2
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = (("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ") / " & PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Count & ")"
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 3
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.min("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ");" & Environment.NewLine
                                                            strCalcScript &= "};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 4
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.max("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ");" & Environment.NewLine
                                                            strCalcScript &= "};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                    End Select
                                                ElseIf PDFField_Calculations_SimpleFieldNotation.Checked Then
                                                End If
                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='checkbox' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' value='" & fld.fieldValue & "' ")
                                                If Not strCalcScript = "" Then
                                                    strHtmlBuilder.Append("onchange='" & strCalcOnChange & "' ")
                                                End If
                                                If RadioButton_Checked.Checked Then
                                                    strHtmlBuilder.Append(" CHECKED ")
                                                End If
                                                Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
                                                strHtmlBuilder.Append(" style=""-moz-appearance: none;")
                                                strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
                                                strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
                                                strHtmlBuilder.Append("position:absolute;")
                                                strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
                                                If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
                                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
                                                    defaultFontSize = PDFField_FontSize.Text
                                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(PDFField_FontSize.Text)))
                                                Else
                                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(14) * 2.86) & ");")
                                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(12)))
                                                End If
                                                strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
                                                If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
                                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
                                                Else
                                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
                                                End If
                                                strHtmlBuilder.Append("outline-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
                                                Dim strStyle As String = PDFField_BorderStyle.Text
                                                Select Case strStyle.ToString.ToLower
                                                    Case "solid", "dashed", "dotted", "inset"
                                                        strStyle = strStyle & ""
                                                    Case "beveled"
                                                        strStyle = "ridge"
                                                    Case "underline"
                                                        strStyle = "solid"
                                                End Select
                                                strHtmlBuilder.Append("outline-style:" & strStyle & ";")
                                                strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
                                                strHtmlBuilder.Append("outline-width:" & strStyle & "px;")
                                                strHtmlBuilder.Append(""" ")
                                                strHtmlBuilder.Append(" class=""resizeText"" ")
                                                strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
                                                strHtmlBuilder.Append(" />")
                                                strHTML &= strHtmlBuilder.ToString
                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                                A0_PDFFormField_LoadProperties(Session, fldNm, p, fld.fieldIndex)
                                                Dim valList As New List(Of String)
                                                For Each val1 As String In ComboBox_ItemDisplay.Items
                                                    valList.Add(val1)
                                                Next
                                                fld.fieldOptionDisplay = valList.ToArray
                                                valList = New List(Of String)
                                                For Each val1 As String In ComboBox_ItemValue.Items
                                                    valList.Add(val1)
                                                Next
                                                fld.fieldOptionExport = valList.ToArray
                                                valList = New List(Of String)
                                                For Each val1 As String In ComboBox_ItemDisplay.SelectedItems
                                                    valList.Add(val1)
                                                Next
                                                Dim strCalcOnChange As String = ""
                                                If PDFField_Calculations_Fields.Checked Then
                                                    Dim fldsCalc As String = ""
                                                    Select Case PDFField_Calculations_Fields_Type.SelectedIndex
                                                        Case 0
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = "
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 1
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = "
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " * ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 2
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = (("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ") / " & PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Count & ")"
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 3
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.min("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ");" & Environment.NewLine
                                                            strCalcScript &= "};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 4
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.max("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ");" & Environment.NewLine
                                                            strCalcScript &= "};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                    End Select
                                                ElseIf PDFField_Calculations_SimpleFieldNotation.Checked Then
                                                End If
                                                fld.fieldListSelection = valList.ToArray
                                                strHtmlBuilder.AppendLine("<select tabIndex=""" & fldTabIndexTemp & """ class=""resizeText"" name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' " & " ")
                                                If Not strCalcScript = "" Then
                                                    strHtmlBuilder.Append("onchange='" & strCalcOnChange & "' ")
                                                End If
                                                Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
                                                strHtmlBuilder.Append(" style=""")
                                                strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
                                                strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
                                                strHtmlBuilder.Append("position:absolute;")
                                                strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
                                                If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
                                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
                                                    defaultFontSize = PDFField_FontSize.Text
                                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(PDFField_FontSize.Text)))
                                                Else
                                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(14) * 2.86) & ");")
                                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(12)))
                                                End If
                                                strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
                                                If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
                                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
                                                Else
                                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
                                                End If
                                                strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
                                                Dim strStyle As String = PDFField_BorderStyle.Text
                                                Select Case strStyle.ToString.ToLower
                                                    Case "solid", "dashed", "dotted", "inset"
                                                        strStyle = strStyle & ""
                                                    Case "beveled"
                                                        strStyle = "ridge"
                                                    Case "underline"
                                                        strStyle = "solid"
                                                End Select
                                                strHtmlBuilder.Append("border-style:" & strStyle & ";")
                                                strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
                                                strHtmlBuilder.Append("border-width:" & strStyle & "px;")
                                                strHtmlBuilder.Append(""" ")
                                                If PDFField_Required.Checked Then
                                                    strHtmlBuilder.Append(" required")
                                                End If
                                                strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
                                                strHtmlBuilder.Append(">")
                                                If fld.fieldOptionExport.Length = fld.fieldOptionDisplay.Length Then
                                                    For intVal As Integer = 0 To fld.fieldOptionExport.Length - 1
                                                        If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "'>" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                        Else
                                                            Try
                                                                If fld.fieldListSelection.Contains(fld.fieldOptionDisplay(intVal)) Then
                                                                    strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
                                                                    strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                Else
                                                                    If Not fld.fieldOptionExport Is Nothing Then
                                                                        If fld.fieldOptionExport.Length > intVal Then
                                                                            If fld.fieldListSelection.Contains(fld.fieldOptionExport(intVal)) Then
                                                                                strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
                                                                                strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                            Else
                                                                                strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
                                                                                strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                            End If
                                                                        Else
                                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
                                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                        End If
                                                                    Else
                                                                        strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
                                                                        strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                    End If
                                                                End If
                                                            Catch exFieldSel As Exception
                                                                Err.Clear()
                                                            End Try
                                                        End If
                                                    Next
                                                Else
                                                    If fld.fieldOptionExport.Length > 0 Then
                                                        Dim intVal As Integer = 0
                                                        For Each fldvalue As String In fld.fieldOptionExport
                                                            If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
                                                                strHtmlBuilder.AppendLine("<option value='" & fldvalue & "'>" & fldvalue & "</option>")
                                                            Else
                                                                Try
                                                                    If Not fld.fieldOptionExport Is Nothing Then
                                                                        If fld.fieldOptionExport.Length > intVal Then
                                                                            If fld.fieldListSelection.Contains(fld.fieldOptionExport(intVal)) Then
                                                                                strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
                                                                                strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                            Else
                                                                                strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
                                                                                strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                            End If
                                                                        Else
                                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
                                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                        End If
                                                                    End If
                                                                Catch exFieldSel As Exception
                                                                    Err.Clear()
                                                                End Try
                                                            End If
                                                            intVal += 1
                                                        Next
                                                    ElseIf fld.fieldOptionDisplay.Length > 0 Then
                                                        For Each fldvalue As String In fld.fieldOptionDisplay
                                                            If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
                                                                strHtmlBuilder.AppendLine("<option value='" & fldvalue & "'>" & fldvalue & "</option>")
                                                            Else
                                                                If fld.fieldListSelection.Contains(fldvalue) Then
                                                                    strHtmlBuilder.AppendLine("<option value='" & fldvalue & "' selected ")
                                                                    strHtmlBuilder.AppendLine(">" & fldvalue & "</option>")
                                                                Else
                                                                    strHtmlBuilder.AppendLine("<option value='" & fldvalue & "' ")
                                                                    strHtmlBuilder.AppendLine(">" & fldvalue & "</option>")
                                                                End If
                                                            End If
                                                        Next
                                                    End If
                                                End If
                                                strHtmlBuilder.AppendLine("</select>")
                                                strHTML &= strHtmlBuilder.ToString
                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                                A0_PDFFormField_LoadProperties(Session, fldNm, p, fld.fieldIndex)
                                                Dim valList As New List(Of String)
                                                Dim valListValues As New List(Of String)
                                                Dim valListDisplay As New List(Of String)
                                                For Each val1 As String In ComboBox_ItemDisplay.Items
                                                    valList.Add(val1)
                                                Next
                                                fld.fieldOptionDisplay = valList.ToArray
                                                valList = New List(Of String)
                                                For Each val1 As String In ComboBox_ItemValue.Items
                                                    valList.Add(val1)
                                                Next
                                                fld.fieldOptionExport = valList.ToArray
                                                valList = New List(Of String)
                                                For Each val1 As String In ComboBox_ItemDisplay.SelectedItems
                                                    valList.Add(val1)
                                                Next
                                                fld.fieldListSelection = valList.ToArray
                                                Dim strCalcOnChange As String = ""
                                                If PDFField_Calculations_Fields.Checked Then
                                                    Dim fldsCalc As String = ""
                                                    Select Case PDFField_Calculations_Fields_Type.SelectedIndex
                                                        Case 0 '+
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = "
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 1
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = "
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " * ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 2
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = (("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ") / " & PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Count & ")"
                                                            strCalcScript &= ";};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 3
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.min("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ");" & Environment.NewLine
                                                            strCalcScript &= "};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                        Case 4
                                                            Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                            strCalcScript &= "function " & functionName & "(){"
                                                            strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.max("
                                                            Dim selCnt As Integer = -1
                                                            For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                    fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                    strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                    selCnt += 1
                                                                End If
                                                            Next
                                                            strCalcScript &= ");" & Environment.NewLine
                                                            strCalcScript &= "};" & Environment.NewLine
                                                            strCalcScript &= fldsCalc & Environment.NewLine
                                                            strCalcOnChange &= functionName & "();"
                                                    End Select
                                                ElseIf PDFField_Calculations_SimpleFieldNotation.Checked Then
                                                End If
                                                strHtmlBuilder.AppendLine("<select tabIndex=""" & fldTabIndexTemp & """ class=""resizeText"" name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' " & IIf(fld.fieldType = iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST, IIf(fld.fieldSize > 1, "size='" & fld.fieldSize & "' ", "size='3' "), "") & IIf(ListBox_Options_MultipleSelection.Checked, " MULTIPLE ", " ") & " ")
                                                If Not strCalcScript = "" Then
                                                    strHtmlBuilder.Append("onchange='" & strCalcOnChange & "' ")
                                                End If
                                                Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
                                                strHtmlBuilder.Append(" style=""")
                                                strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
                                                strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
                                                strHtmlBuilder.Append("position:absolute;")
                                                strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
                                                If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
                                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
                                                    defaultFontSize = PDFField_FontSize.Text
                                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(PDFField_FontSize.Text)))
                                                Else
                                                    strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(14) * 2.86) & ");")
                                                    fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CSng(12)))
                                                End If
                                                strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
                                                If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
                                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
                                                Else
                                                    strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
                                                End If
                                                strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
                                                Dim strStyle As String = PDFField_BorderStyle.Text
                                                Select Case strStyle.ToString.ToLower
                                                    Case "solid", "dashed", "dotted", "inset"
                                                        strStyle = strStyle & ""
                                                    Case "beveled"
                                                        strStyle = "ridge"
                                                    Case "underline"
                                                        strStyle = "solid"
                                                End Select
                                                strHtmlBuilder.Append("border-style:" & strStyle & ";")
                                                strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
                                                strHtmlBuilder.Append("border-width:" & strStyle & "px;")
                                                strHtmlBuilder.Append(""" ")
                                                If PDFField_Required.Checked Then
                                                    strHtmlBuilder.Append(" required")
                                                End If
                                                strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
                                                strHtmlBuilder.Append(">")
                                                If fld.fieldOptionExport.Length = fld.fieldOptionDisplay.Length Then
                                                    For intVal As Integer = 0 To fld.fieldOptionExport.Length - 1
                                                        If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "'>" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                        Else
                                                            Try
                                                                If fld.fieldListSelection.Contains(fld.fieldOptionDisplay(intVal)) Then
                                                                    strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
                                                                    strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                Else
                                                                    If Not fld.fieldOptionExport Is Nothing Then
                                                                        If fld.fieldOptionExport.Length > intVal Then
                                                                            If fld.fieldListSelection.Contains(fld.fieldOptionExport(intVal)) Then
                                                                                strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
                                                                                strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                            Else
                                                                                strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
                                                                                strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                            End If
                                                                        Else
                                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
                                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                        End If
                                                                    Else
                                                                        strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
                                                                        strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                    End If
                                                                End If
                                                            Catch exFieldSel As Exception
                                                                Err.Clear()
                                                            End Try
                                                        End If
                                                    Next
                                                Else
                                                    If fld.fieldOptionExport.Length > 0 Then
                                                        Dim intVal As Integer = 0
                                                        For Each fldvalue As String In fld.fieldOptionExport
                                                            If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
                                                                strHtmlBuilder.AppendLine("<option value='" & fldvalue & "'>" & fldvalue & "</option>")
                                                            Else
                                                                Try
                                                                    If Not fld.fieldOptionExport Is Nothing Then
                                                                        If fld.fieldOptionExport.Length > intVal Then
                                                                            If fld.fieldListSelection.Contains(fld.fieldOptionExport(intVal)) Then
                                                                                strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' selected ") '
                                                                                strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                            Else
                                                                                strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
                                                                                strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                            End If
                                                                        Else
                                                                            strHtmlBuilder.AppendLine("<option value='" & fld.fieldOptionExport(intVal) & "' ")
                                                                            strHtmlBuilder.AppendLine(">" & fld.fieldOptionDisplay(intVal) & "</option>")
                                                                        End If
                                                                    End If
                                                                Catch exFieldSel As Exception
                                                                    Err.Clear()
                                                                End Try
                                                            End If
                                                            intVal += 1
                                                        Next
                                                    ElseIf fld.fieldOptionDisplay.Length > 0 Then
                                                        For Each fldvalue As String In fld.fieldOptionDisplay
                                                            If ComboBox_ItemDisplay.SelectedItems Is Nothing Then
                                                                strHtmlBuilder.AppendLine("<option value='" & fldvalue & "'>" & fldvalue & "</option>")
                                                            Else
                                                                If fld.fieldListSelection.Contains(fldvalue) Then
                                                                    strHtmlBuilder.AppendLine("<option value='" & fldvalue & "' ") 'selected 
                                                                    strHtmlBuilder.AppendLine(">" & fldvalue & "</option>")
                                                                Else
                                                                    strHtmlBuilder.AppendLine("<option value='" & fldvalue & "' ")
                                                                    strHtmlBuilder.AppendLine(">" & fldvalue & "</option>")
                                                                End If
                                                            End If
                                                        Next
                                                    End If
                                                End If
                                                strHtmlBuilder.AppendLine("</select>")
                                                strHTML &= strHtmlBuilder.ToString
                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                                A0_PDFFormField_LoadProperties(Session, fldNm, p, fld.fieldIndex)
                                                If Not PDFField_MultiLine.Checked Then
                                                    Dim labelLength As Integer = 0
                                                    Select Case PuchButton_Options_Behavior.SelectedIndex
                                                        Case 0
                                                            PuchButton_Options_State.SelectedIndex = 0
                                                            If PuchButton_Options_Label.Text.ToString.ToLower.Contains("reset") Then
                                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='reset' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                            Else
                                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='submit' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                            End If
                                                            strHtmlBuilder.Append(" value ='" & PuchButton_Options_Label.Text & "' ")
                                                            labelLength = PuchButton_Options_Label.Text.Length
                                                        Case 1
                                                            PuchButton_Options_State.SelectedIndex = 0
                                                            If PuchButton_Options_Label.Text.ToString.ToLower.Contains("reset") Then
                                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='reset' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                            Else
                                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='submit' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                            End If
                                                            strHtmlBuilder.Append(" value ='" & PuchButton_Options_Label.Text & "' ")
                                                            strHtmlBuilder.Append(" onmouseout='JavaScript:this.value=""" & PuchButton_Options_Label.Text & """;' ")
                                                            strHtmlBuilder.Append(" onmouseup='JavaScript:this.value=""" & PuchButton_Options_Label.Text & """;' ")
                                                            labelLength = PuchButton_Options_Label.Text.Length
                                                            PuchButton_Options_State.SelectedIndex = 1
                                                            strHtmlBuilder.Append(" onmousedown='JavaScript:this.value=""" & PuchButton_Options_Label.Text & """;' ")
                                                            If labelLength < PuchButton_Options_Label.Text.Length Then
                                                                labelLength = PuchButton_Options_Label.Text.Length
                                                            End If
                                                            PuchButton_Options_State.SelectedIndex = 2
                                                            strHtmlBuilder.Append(" onmouseover='JavaScript:this.value=""" & PuchButton_Options_Label.Text & """;' ") 'rollover
                                                            If labelLength < PuchButton_Options_Label.Text.Length Then
                                                                labelLength = PuchButton_Options_Label.Text.Length
                                                            End If
                                                        Case 2 'Outline
                                                            PuchButton_Options_State.SelectedIndex = 0
                                                            If PuchButton_Options_Label.Text.ToString.ToLower.Contains("reset") Then
                                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='reset' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                            Else
                                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='submit' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                            End If
                                                            strHtmlBuilder.Append(" value ='" & PuchButton_Options_Label.Text & "' ")
                                                            labelLength = PuchButton_Options_Label.Text.Length
                                                        Case 3 'Invert
                                                            PuchButton_Options_State.SelectedIndex = 0
                                                            If PuchButton_Options_Label.Text.ToString.ToLower.Contains("reset") Then
                                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='reset' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                            Else
                                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='submit' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                            End If
                                                            strHtmlBuilder.Append(" value ='" & PuchButton_Options_Label.Text & "' ")
                                                            labelLength = PuchButton_Options_Label.Text.Length
                                                        Case Else
                                                            If PuchButton_Options_Label.Text.ToString.ToLower.Contains("reset") Then
                                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='reset' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                            Else
                                                                strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='submit' name='" & fld.fieldName & "' id='" & fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex) & "' ")
                                                            End If
                                                    End Select
                                                    Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
                                                    strHtmlBuilder.Append(" style=""-moz-appearance: none;")
                                                    strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
                                                    strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
                                                    strHtmlBuilder.Append("position:absolute;")
                                                    strHtmlBuilder.Append("cursor:pointer;")
                                                    strHtmlBuilder.Append("text-align:" & "center" & ";")
                                                    If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
                                                        strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
                                                        defaultFontSize = PDFField_FontSize.Text
                                                        fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / CInt(PDFField_FontSize.Text)))
                                                    Else
                                                        Dim ftSize As Integer = 12
                                                        If labelLength > 0 Then
                                                            Dim continueFontSize As Boolean = True
                                                            Do Until continueFontSize = False
                                                                If (ftSize + 1) > r.Height - 4 Then
                                                                    continueFontSize = False
                                                                ElseIf ((ftSize + 1) * 0.75) * labelLength >= r.Width - 4 Then
                                                                    continueFontSize = False
                                                                End If
                                                                If continueFontSize Then
                                                                    ftSize += 1
                                                                End If
                                                            Loop
                                                        End If
                                                        strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (14 * 2.86) & ");")
                                                        fieldListFlowType.Add(fld.fieldName & IIf(Not pField.Contains(fld.fieldName), "", "_" & p & "_" & fld.fieldIndex), CSng(r.Width / ftSize))
                                                    End If
                                                    strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
                                                    If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
                                                        strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
                                                    Else
                                                        strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
                                                    End If
                                                    strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
                                                    Dim strStyle As String = PDFField_BorderStyle.Text
                                                    Select Case strStyle.ToString.ToLower
                                                        Case "solid", "dashed", "dotted", "inset"
                                                            strStyle = strStyle & ""
                                                        Case "beveled"
                                                            strStyle = "ridge"
                                                        Case "underline"
                                                            strStyle = "solid"
                                                    End Select
                                                    strHtmlBuilder.Append("border-style:" & strStyle & ";")
                                                    strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
                                                    strHtmlBuilder.Append("border-width:" & strStyle & "px;")
                                                    strHtmlBuilder.Append(""" ")
                                                    strHtmlBuilder.Append(" class=""resizeText"" ")
                                                    strHtmlBuilder.Append(" defaultFontSize=""" & CStr(IIf(String.IsNullOrEmpty(defaultFontSize & ""), "12", defaultFontSize)) & """ ")
                                                    strHtmlBuilder.Append(" />")
                                                    strHTML &= strHtmlBuilder.ToString
                                                End If
                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                                If lstFields(fldNm).Count > 0 Then
                                                    For intValues As Integer = 0 To lstFields(fldNm).Count - 1
                                                        A0_PDFFormField_LoadProperties(Session, fldNm, p, intValues)
                                                        fld = lstFields(fldNm)(intValues)
                                                        If Not fld.fieldDictionary Is Nothing Then
                                                            If Not fld.fieldDictionary.Get(PdfName.AP) Is Nothing Then
                                                                Dim tmpDict As PdfDictionary = fld.fieldDictionary.GetAsDict(PdfName.AP)
                                                                If Not tmpDict.Get(PdfName.N) Is Nothing Then
                                                                    tmpDict = tmpDict.GetAsDict(PdfName.N)
                                                                    For Each k As PdfName In tmpDict.Keys.ToArray()
                                                                        If Not k.ToString().TrimStart("/"c) = "Off" Then
                                                                            fld.fieldValue = k.ToString().TrimStart("/"c)
                                                                        End If
                                                                    Next
                                                                End If
                                                            End If
                                                        End If
                                                        Dim strCalcOnChange As String = ""
                                                        If PDFField_Calculations_Fields.Checked Then
                                                            Dim fldsCalc As String = ""
                                                            Select Case PDFField_Calculations_Fields_Type.SelectedIndex
                                                                Case 0
                                                                    Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                                    strCalcScript &= "function " & functionName & "(){"
                                                                    strCalcScript &= "document.getElementById('" & fldNm & "').value = "
                                                                    Dim selCnt As Integer = -1
                                                                    For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                        If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                            fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
                                                                            strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                            selCnt += 1
                                                                        End If
                                                                    Next
                                                                    strCalcScript &= ";};" & Environment.NewLine
                                                                    strCalcScript &= fldsCalc & Environment.NewLine
                                                                    strCalcOnChange &= functionName & "();"
                                                                Case 1
                                                                    Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                                    strCalcScript &= "function " & functionName & "(){"
                                                                    strCalcScript &= "document.getElementById('" & fldNm & "').value = "
                                                                    Dim selCnt As Integer = -1
                                                                    For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                        If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                            fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange=function(){" & functionName & "();};"
                                                                            strCalcScript &= CStr(IIf(selCnt >= 0, " * ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                            selCnt += 1
                                                                        End If
                                                                    Next
                                                                    strCalcScript &= ";};" & Environment.NewLine
                                                                    strCalcScript &= fldsCalc & Environment.NewLine
                                                                    strCalcOnChange &= functionName & "();"
                                                                Case 2
                                                                    Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                                    strCalcScript &= "function " & functionName & "(){"
                                                                    strCalcScript &= "document.getElementById('" & fldNm & "').value = (("
                                                                    Dim selCnt As Integer = -1
                                                                    For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                        If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                            fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                            strCalcScript &= CStr(IIf(selCnt >= 0, " + ", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                            selCnt += 1
                                                                        End If
                                                                    Next
                                                                    strCalcScript &= ") / " & PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Count & ")"
                                                                    strCalcScript &= ";};" & Environment.NewLine
                                                                    strCalcScript &= fldsCalc & Environment.NewLine
                                                                    strCalcOnChange &= functionName & "();"
                                                                Case 3
                                                                    Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                                    strCalcScript &= "function " & functionName & "(){"
                                                                    strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.min("
                                                                    Dim selCnt As Integer = -1
                                                                    For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                        If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                            fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                            strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                            selCnt += 1
                                                                        End If
                                                                    Next
                                                                    strCalcScript &= ");" & Environment.NewLine
                                                                    strCalcScript &= "};" & Environment.NewLine
                                                                    strCalcScript &= fldsCalc & Environment.NewLine
                                                                    strCalcOnChange &= functionName & "();"
                                                                Case 4
                                                                    Dim functionName As String = "calcOnChange_" & fldNm.ToString.Replace(" ", "_").Replace(".", "_").Replace("-", "_")
                                                                    strCalcScript &= "function " & functionName & "(){"
                                                                    strCalcScript &= "document.getElementById('" & fldNm & "').value = Math.max("
                                                                    Dim selCnt As Integer = -1
                                                                    For lstIdx As Integer = 0 To PDFField_Calculations_Fields_FieldsListBox.Items.Count - 1
                                                                        If PDFField_Calculations_Fields_FieldsListBox.SelectedIndices.Contains(lstIdx) Then
                                                                            fldsCalc &= "document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').onchange= function(){" & functionName & "();};"
                                                                            strCalcScript &= CStr(IIf(selCnt >= 0, ",", " ")) & "parseFloat(document.getElementById('" & PDFField_Calculations_Fields_FieldsListBox.Items(lstIdx).ToString & "').value)"
                                                                            selCnt += 1
                                                                        End If
                                                                    Next
                                                                    strCalcScript &= ");" & Environment.NewLine
                                                                    strCalcScript &= "};" & Environment.NewLine
                                                                    strCalcScript &= fldsCalc & Environment.NewLine
                                                                    strCalcOnChange &= functionName & "();"
                                                            End Select
                                                        ElseIf PDFField_Calculations_SimpleFieldNotation.Checked Then
                                                        End If
                                                        strHtmlBuilder.AppendLine("<input tabIndex=""" & fldTabIndexTemp & """ type='radio' name='" & cFDFDoc.getFieldName(fld.fieldName) & "' id='" & cFDFDoc.getFieldName(fld.fieldName) & IIf(Not pField.Contains(cFDFDoc.getFieldName(fld.fieldName)), "", "_" & p) & "' value='" & fld.fieldValue & "' ")
                                                        If Not strCalcScript = "" Then
                                                            strHtmlBuilder.Append("onchange='" & strCalcOnChange & "' ")
                                                        End If
                                                        If Not pField.Contains(cFDFDoc.getFieldName(fld.fieldName)) Then
                                                            pField.Add(cFDFDoc.getFieldName(fld.fieldName))
                                                        End If
                                                        strHtmlBuilder.Append(IIf(PDFField_Value_Checked.Checked, " CHECKED ", ""))
                                                        If PDFField_Required.Checked Then
                                                            strHtmlBuilder.Append(" required")
                                                        End If
                                                        Dim r As System.Drawing.RectangleF = fld.fieldPositionScreen
                                                        strHtmlBuilder.Append(" style=""-moz-appearance: none;")
                                                        strHtmlBuilder.Append("position:absolute;left:" & (r.Left / pageWidth) * 100 & "%;right:" & (r.Right / pageWidth) * 100 & "%;top:" & ((r.Top) / (pageHeight)) * 100 & "%;bottom:" & ((r.Bottom) / (pageHeight)) * 100 & "%;")
                                                        strHtmlBuilder.Append("height:" & (r.Height / pageHeight) * 100 & "%;width:" & (r.Width / pageWidth) * 100 & "%;")
                                                        strHtmlBuilder.Append("position:absolute;")
                                                        strHtmlBuilder.Append("text-align:" & PDFField_TextAlign.Text & ";")
                                                        If (PDFField_FontSize.Text.ToLower) <> "Auto".ToLower Then
                                                            strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(PDFField_FontSize.Text) * 2.86) & ");")
                                                            defaultFontSize = PDFField_FontSize.Text
                                                        Else
                                                            strHtmlBuilder.Append("font-size: calc(100vw / 1920 * " & (CSng(14) * 2.86) & ");")
                                                        End If
                                                        strHtmlBuilder.Append("color:" & ColorTranslator.ToHtml(PDFField_TextColorPicker.BackColor) & ";")
                                                        If Not (PDFField_BackgroundColorPicker.BackColor) = System.Drawing.Color.Transparent Then
                                                            strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(PDFField_BackgroundColorPicker.BackColor) & ";")
                                                        Else
                                                            strHtmlBuilder.Append("background-color:" & ColorTranslator.ToHtml(System.Drawing.Color.White) & ";")
                                                        End If
                                                        strHtmlBuilder.Append("border-color:" & ColorTranslator.ToHtml(PDFField_BorderColorPicker.BackColor) & ";")
                                                        Dim strStyle As String = PDFField_BorderStyle.Text
                                                        Select Case strStyle.ToString.ToLower
                                                            Case "solid", "dashed", "dotted", "inset"
                                                                strStyle = strStyle & ""
                                                            Case "beveled"
                                                                strStyle = "ridge"
                                                            Case "underline"
                                                                strStyle = "solid"
                                                        End Select
                                                        strHtmlBuilder.Append("border-style:" & strStyle & ";")
                                                        strStyle = CStr(PDFField_BorderWidth.SelectedIndex + 1).ToString
                                                        strHtmlBuilder.Append("border-width:" & strStyle & "px;")
                                                        strHtmlBuilder.Append(""" ")
                                                        strHtmlBuilder.AppendLine(" />")
                                                    Next
                                                    strHTML &= strHtmlBuilder.ToString
                                                End If
                                            Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                        End Select
                                        If Not pField.Contains(fld.fieldName) Then
                                            pField.Add(fld.fieldName)
                                        End If
                                    Next
                                End If
                                If fldTabIndex < fldTabMax Then
                                    fldTabIndex = fldTabMax
                                End If
                            End If
                        End If
                        strHTML &= "</div>" & Environment.NewLine
                        totalPageHeight += pdfReaderDoc.GetPageSizeWithRotation(p).Height * getPercent()
                        '
                    Next
                    If blnIncludeFields And Not excludeStyleSheets Then
                        strHTML &= "<script type=""text/javascript"">" & Environment.NewLine
                        If Not strCalcScript = "" Then
                            strHTML &= (strCalcScript) & Environment.NewLine
                        End If
                        strHTML &= "</script>" & Environment.NewLine
                    End If
                    StatusToolStrip = "Status: HTML File created"
                Catch ex As Exception
                    StatusToolStrip = "Status: Error File NOT created - " & ex.Message.ToString
                    TimeStampAdd(ex, debugMode)
                Finally
                    ToolStripProgressBar1.Visible = False
                    DeleteTempFilesImageCache()
                    Session = b
                    LoadPDFReaderDoc(pdfOwnerPassword)
                    A0_LoadPDF()
                    Me.Show()
                    Me.BringToFront()
                End Try
                If blnIncludeFields And Not excludeStyleSheets Then
                End If
                If blnIncludeFields And Not excludeStyleSheets Then
                End If
                strHTML &= Environment.NewLine & "</form>" & Environment.NewLine
                strHTML &= "</body>" & Environment.NewLine
                If blnIncludeFields And Not excludeStyleSheets Then
                    strHTML &= "</html>" & Environment.NewLine
                End If
                Return strHTML
                StatusToolStrip = "Status: HTML File created"
            Catch ex As Exception
                StatusToolStrip = "Status: Error File NOT created - " & ex.Message.ToString
                TimeStampAdd(ex, debugMode)
            Finally
                ToolStripProgressBar1.Visible = False
                DeleteTempFilesImageCache()
                Session = b
                LoadPDFReaderDoc(pdfOwnerPassword)
                A0_LoadPDF()
                If Not ParentForm Is Nothing Then
                    If ParentForm.GetType Is Me.GetType Then
                        Me.Show()
                    Else
                        Me.Hide()
                        ParentForm.Show()
                    End If
                Else
                    Me.Show()
                End If
            End Try
        Catch ex123 As Exception
            StatusToolStrip = "Status: Error File NOT created - " & ex123.Message.ToString
            TimeStampAdd(ex123, debugMode)
        Finally
            If Not ParentForm Is Nothing Then
                Me.Hide()
                ParentForm.Show()
            Else
                Me.Show()
            End If
        End Try
        Return ""
    End Function
    Private Sub AppendPagesFromScannerToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim class1 As New CommonDialogClass()
        Dim d As Device = class1.ShowSelectDevice(WiaDeviceType.UnspecifiedDeviceType, True, False)
        If d IsNot Nothing Then
            modWIA.DeviceID = d.DeviceID
        Else
            Return
        End If
        Dim WiaCommonDialog As WIA.CommonDialog = New CommonDialogClass()
        Dim hasMorePages As Boolean = True
        Dim x As Integer = 0
        Dim numPages As Integer = 0
        Dim wiaImageFormat As String = WIA.FormatID.wiaFormatBMP.ToString() & ""
        Dim wiaImageQuality As WIA.WiaImageBias = WIA.WiaImageBias.MaximizeQuality
        Select Case MsgBox("Maximum Image Quality?" & Environment.NewLine & "Click ""Yes"" for Maximum Image Quality." & Environment.NewLine & "Click ""No"" for Minimum File Size.", MsgBoxStyle.Question + MsgBoxStyle.YesNo + MsgBoxStyle.ApplicationModal, "Maximum Image Quality?")
            Case MsgBoxResult.Yes, MsgBoxResult.Ok
                wiaImageQuality = WIA.WiaImageBias.MaximizeQuality
            Case Else
                wiaImageQuality = WIA.WiaImageBias.MinimizeSize
        End Select
        While hasMorePages
            Dim manager As DeviceManager = New DeviceManagerClass()
            Dim WiaDev As Device = Nothing
            For Each info As DeviceInfo In manager.DeviceInfos
                If info.DeviceID = modWIA.DeviceID Then
                    Dim infoprop As WIA.Properties = Nothing
                    infoprop = info.Properties
                    WiaDev = info.Connect()
                    Exit For
                End If
            Next
            Dim img As WIA.ImageFile = Nothing
            Dim Item As WIA.Item = TryCast(WiaDev.Items(1), WIA.Item)
            Try
                Me.Hide()
                Dim fn As String = ApplicationDataFolder(False,"temp") & "scanner-import" & DateTime.Now.ToFileTime() & ".bmp"
                img = WiaCommonDialog.ShowAcquireImage(WIA.WiaDeviceType.UnspecifiedDeviceType, WIA.WiaImageIntent.TextIntent, wiaImageQuality, wiaImageFormat, False, False, True)
                Dim v As WIA.Vector = img.FileData
                File.WriteAllBytes(fn, DirectCast(v.BinaryData(), Byte()))
                ImportImage(fn, False, True)
                numPages += 1
                img = Nothing
            Catch ex As Exception
                img = Nothing
                MessageBox.Show("Error: " & ex.Message)
                Exit Try
            Finally
                Item = Nothing
                Dim documentHandlingSelect As WIA.Property = Nothing
                Dim documentHandlingStatus As WIA.Property = Nothing
                For Each prop As WIA.Property In WiaDev.Properties
                    If prop.PropertyID = WIA_PROPERTIES.WIA_DPS_DOCUMENT_HANDLING_SELECT Then
                        documentHandlingSelect = prop
                    End If
                    If prop.PropertyID = WIA_PROPERTIES.WIA_DPS_DOCUMENT_HANDLING_STATUS Then
                        documentHandlingStatus = prop
                    End If
                Next
                hasMorePages = False
                If documentHandlingSelect IsNot Nothing Then
                    If (Convert.ToUInt32(documentHandlingSelect.Value) And WIA_DPS_DOCUMENT_HANDLING_SELECT.FEEDER) <> 0 Then
                        hasMorePages = ((Convert.ToUInt32(documentHandlingStatus.Value) And WIA_DPS_DOCUMENT_HANDLING_STATUS.FEED_READY) <> 0)
                    End If
                End If
                x += 1
            End Try
        End While
    End Sub
    Private Sub AppendPageFromScannerToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AppendPageFromScannerToolStripMenuItem.Click
        Dim fn As String = ""
        Dim useFlatBed As Boolean = False
        Dim colorMode As clsScan.colorMode = clsScan.colorMode.Color
        Dim dpi As clsScan.DPI = clsScan.DPI.HIGH
        Try
            Dim cDialogMultiChoice As New dialogMultiChoice
            Dim cButtons As New List(Of dialogMultiChoice.clsButton)
            cButtons.Add(New dialogMultiChoice.clsButton("FLATBED", True, DialogResult.OK))
            cButtons.Add(New dialogMultiChoice.clsButton("AUTO FEEDER", True, DialogResult.Yes))
            cButtons.Add(New dialogMultiChoice.clsButton("ABORT", False, DialogResult.Abort))
            cButtons.Add(New dialogMultiChoice.clsButton("CANCEL", True, DialogResult.Cancel))
            cDialogMultiChoice = New dialogMultiChoice
            Select Case cDialogMultiChoice.ShowDialog(Me, "SELECT A SCANNER SOURCE:", "SCANNER SOURCE:", cButtons.ToArray())
                Case DialogResult.OK
                    useFlatBed = True
                Case DialogResult.Yes
                    useFlatBed = False
                Case Else
                    Return
            End Select
            cButtons = New List(Of dialogMultiChoice.clsButton)
            cButtons.Add(New dialogMultiChoice.clsButton("75 DPI", True, DialogResult.OK))
            cButtons.Add(New dialogMultiChoice.clsButton("100 DPI", True, DialogResult.Yes))
            cButtons.Add(New dialogMultiChoice.clsButton("200 DPI", True, DialogResult.Abort))
            cButtons.Add(New dialogMultiChoice.clsButton("300 DPI", True, DialogResult.Cancel))
            cDialogMultiChoice = New dialogMultiChoice
            Select Case cDialogMultiChoice.ShowDialog(Me, "SELECT DPI RESOLUTON:", "DPI RESOLUTION:", cButtons.ToArray())
                Case DialogResult.OK
                    dpi = clsScan.DPI.LOW
                Case DialogResult.Yes
                    dpi = clsScan.DPI.MID
                Case DialogResult.Abort
                    dpi = clsScan.DPI.HIGH
                Case DialogResult.Cancel
                    dpi = clsScan.DPI.MAX
                Case Else
                    dpi = clsScan.DPI.MAX
            End Select
            cButtons = New List(Of dialogMultiChoice.clsButton)
            cButtons.Add(New dialogMultiChoice.clsButton("B&W", True, DialogResult.OK))
            cButtons.Add(New dialogMultiChoice.clsButton("COLOR", True, DialogResult.Yes))
            cButtons.Add(New dialogMultiChoice.clsButton("GRAYSCALE", True, DialogResult.Abort))
            cButtons.Add(New dialogMultiChoice.clsButton("CANCEL", True, DialogResult.Cancel))
            cDialogMultiChoice = New dialogMultiChoice
            Select Case cDialogMultiChoice.ShowDialog(Me, "SELECT COLOR MODE:", "COLOR MODE:", cButtons.ToArray())
                Case DialogResult.OK
                    colorMode = clsScan.colorMode.BW
                Case DialogResult.Yes
                    colorMode = clsScan.colorMode.Color
                Case DialogResult.Abort
                    colorMode = clsScan.colorMode.Grayscale
                Case Else
                    Return
            End Select
            Dim imageList As List(Of System.Drawing.Image) = clsScan.Scan(Me, Not useFlatBed, useFlatBed, colorMode, dpi, 8.5F, 11.0F)
            LoadPDFReaderDoc(pdfOwnerPassword)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            Try
                If Me.Visible = False Then
                    Me.Show()
                    Me.BringToFront()
                    refreshPDFImage()
                End If
            Catch exDel As Exception
                TimeStampAdd(exDel, debugMode)
            End Try
        End Try
    End Sub
    Private Sub AppendPageFromTWAINScannerToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AppendPageFromTWAINScannerToolStripMenuItem.Click
    End Sub
    Private Sub FromFileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FromFileToolStripMenuItem.Click
        ImportImageToolStripMenuItem_Click(Me, New EventArgs())
    End Sub
    Private Sub FromScannerToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FromScannerToolStripMenuItem.Click
        AppendPageFromScannerToolStripMenuItem_Click(Me, New EventArgs())
    End Sub
    Private Sub FromBlankPageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FromBlankPageToolStripMenuItem.Click
        ImportBlankPageToolStripMenuItem_Click(Me, New EventArgs())
    End Sub
    Private Sub FromClipboardToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FromClipboardToolStripMenuItem.Click
        Dim returnImage As System.Drawing.Image = Nothing
        Dim extensions As New List(Of String)
        extensions.AddRange(New String() {".fdf", ".xfdf", ".xdp", ".xml", ".pdf", ".xpdf"})
        Dim imageExtensions As New List(Of String)
        imageExtensions.AddRange(New String() {".jpg", ".gif", ".png", ".jpeg", ".tif", ".tiff"})
        Try
            If Clipboard.ContainsImage() Then
                Select Case MsgBox("Import Image from Clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Import Image?")
                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                        returnImage = Clipboard.GetImage()
                        ImportImageFromImage(returnImage.Clone())
                    Case Else
                        Return
                End Select
            ElseIf Clipboard.ContainsData(System.Windows.Forms.DataFormats.Bitmap) Then
                Select Case MsgBox("Import Image from Clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Import Image?")
                    Case MsgBoxResult.Yes, MsgBoxResult.Ok
                        Dim oDataObj As IDataObject = System.Windows.Forms.Clipboard.GetDataObject()
                        If oDataObj.GetDataPresent(System.Windows.Forms.DataFormats.Bitmap) Then
                            returnImage = oDataObj.GetData(DataFormats.Bitmap, True)
                            ImportImageFromImage(returnImage.Clone())
                        End If
                    Case Else
                        Return
                End Select
            ElseIf Clipboard.ContainsText(System.Windows.Forms.TextDataFormat.Text) Then
                Dim oDataString As String = System.Windows.Forms.Clipboard.GetText(TextDataFormat.Text).ToString() & ""
                If FileExists(oDataString & "") Then
                    If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Import Image from Clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Import Image?")
                            Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                    returnImage = System.Drawing.Image.FromFile(oDataString)
                                    ImportImageFromImage(returnImage.Clone())
                                    returnImage.Dispose()
                                    returnImage = Nothing
                                    addOpenHistoryListItem(oDataString)
                                End If
                            Case Else
                                Return
                        End Select
                        Return
                    ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Open PDF From Clipboard?", MsgBoxStyle.Question + MsgBoxStyle.OkCancel + MsgBoxStyle.ApplicationModal, "Open Document?")
                            Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                fpath = oDataString.ToString().Trim()
                                If String.IsNullOrEmpty(fpath & "") Then
                                    fpath = appPath & "acro.pdf"
                                    OpenFile(fpath, False)
                                Else
                                    OpenFile(fpath, False)
                                End If
                                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                A0_PictureBox1.Enabled = True
                                A0_PictureBox2.Enabled = True
                                Return
                            Case Else
                                Exit Select
                        End Select
                    End If
                End If
            ElseIf Clipboard.ContainsText(System.Windows.Forms.TextDataFormat.UnicodeText) Then
                Dim oDataString As String = System.Windows.Forms.Clipboard.GetText(TextDataFormat.UnicodeText).ToString & ""
                If FileExists(oDataString & "") Then
                    If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Import Image from Clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Import Image?")
                            Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                    returnImage = System.Drawing.Image.FromFile(oDataString)
                                    ImportImageFromImage(returnImage.Clone())
                                    returnImage.Dispose()
                                    returnImage = Nothing
                                    addOpenHistoryListItem(oDataString)
                                End If
                            Case Else
                                Return
                        End Select
                        Return
                    ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Open PDF From Clipboard?", MsgBoxStyle.Question + MsgBoxStyle.OkCancel + MsgBoxStyle.ApplicationModal, "Open Document?")
                            Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                fpath = oDataString.ToString().Trim()
                                If String.IsNullOrEmpty(fpath & "") Then
                                    fpath = appPath & "acro.pdf"
                                    OpenFile(fpath, False)
                                Else
                                    OpenFile(fpath, False)
                                End If
                                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                A0_PictureBox1.Enabled = True
                                A0_PictureBox2.Enabled = True
                                Return
                            Case Else
                                Exit Select
                        End Select
                    End If
                End If
            ElseIf Clipboard.GetFileDropList.Count > 0 Then
                Dim oDataString As String = Clipboard.GetFileDropList(0).ToString()
                If FileExists(oDataString & "") Then
                    If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Import Image from Clipboard?", MsgBoxStyle.OkCancel + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Import Image?")
                            Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                If imageExtensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                                    returnImage = System.Drawing.Image.FromFile(oDataString)
                                    ImportImageFromImage(returnImage.Clone())
                                    returnImage.Dispose()
                                    returnImage = Nothing
                                    addOpenHistoryListItem(oDataString)
                                End If
                            Case Else
                                Return
                        End Select
                        Return
                    ElseIf extensions.Contains("." & GetFileExtension(oDataString & "").ToString.TrimStart("."c).ToLower & "") Then
                        Select Case MsgBox("Open PDF From Clipboard?", MsgBoxStyle.Question + MsgBoxStyle.OkCancel + MsgBoxStyle.ApplicationModal, "Open Document?")
                            Case MsgBoxResult.Ok, MsgBoxResult.Yes
                                fpath = oDataString.ToString().Trim()
                                If String.IsNullOrEmpty(fpath & "") Then
                                    fpath = appPath & "acro.pdf"
                                    OpenFile(fpath, False)
                                Else
                                    OpenFile(fpath, False)
                                End If
                                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                A0_PictureBox1.Enabled = True
                                A0_PictureBox2.Enabled = True
                                Return
                            Case Else
                                Exit Select
                        End Select
                        Return
                    End If
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
        End Try
        Return
    End Sub
    Private Sub btnSetTabOrder_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSetTabOrder.Click
        Try
            pnlFieldTabOrder_TabsModePage.SelectedIndex = CInt(pageIndex)
            pnlFieldTabOrder_Load(True)
            If Not String.IsNullOrEmpty(fldNameHighlighted & "") Then
                pnlFieldTabOrder_Listbox.SelectedItem = fldNameHighlighted.ToString
            End If
            pnlFieldTabOrder.Show()
            pnlFieldTabOrder.BringToFront()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Function defaulFilePath() As String
        Try
            If Not fpath = "" Then
                If File.Exists(fpath) Then
                    Return System.IO.Path.GetDirectoryName(fpath)
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Return appPath
    End Function

    Private Sub InsertImageOverPageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles InsertImageOverPageToolStripMenuItem.Click
        Dim returnImage As System.Drawing.Image = Nothing
        Dim extensions As New List(Of String)
        extensions.AddRange(New String() {".fdf", ".xfdf", ".xdp", ".xml", ".pdf", ".xpdf"})
        Dim imageExtensions As New List(Of String)
        imageExtensions.AddRange(New String() {".jpg", ".gif", ".png", ".jpeg", ".tif", ".tiff"})
        Try
            cUserRect.pauseDraw = True
            If True = True Then
                preventClickDialog = True
                Try
                    OpenFileDialog2.Filter = "Image Formats|*.jpg;*.jpeg;*.bmp;*.gif;*.png;*.tif;*.tiff|JPG|*.jpg|JPEG|*.jpeg|BMP|*.bmp|GIF|*.gif|PNG|*.png|Tif|*.tif|TIFF|*.tiff|All Files|*.*"
                    OpenFileDialog2.FilterIndex = 0
                    OpenFileDialog2.FileName = ""
                    Dim fn As String = ""
                    OpenFileDialog2.InitialDirectory = ApplicationDataFolder(False, "")
                    Select Case OpenFileDialog2.ShowDialog(Me)
                        Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                            If Not String.IsNullOrEmpty(OpenFileDialog2.FileName) Then
                                fn = OpenFileDialog2.FileName & ""
OPENFILE_KNOWN_FILENAME:
                                Using jpg As System.Drawing.Image = System.Drawing.Image.FromFile(fn)
                                    AddImageToPage(jpg, True)
                                    jpg.Dispose()
                                End Using
                            End If
                        Case Else
                            Return
                    End Select
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    timerPreventDefaultExpires.Enabled = True
                End Try
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            cUserRect.pauseDraw = False
        End Try
        Return
    End Sub
    Private Sub processAddStartProcess(c As Control, ext As String, text As String)
        Try
            Dim fn As String = ApplicationDataFolder(False, "temp") & "" & c.Name.ToString() & CStr(IIf(ext = "", ".txt", "." & ext.TrimStart("."c)))
            Dim p As New Process
            p.StartInfo.FileName = fn
            p.StartInfo.CreateNoWindow = True
            p.StartInfo.WindowStyle = ProcessWindowStyle.Maximized
            If jsProcess.Count <= 0 Then
                jsProcess.Add(c, p)
            Else
                If Not jsProcess.ContainsValue(p) Then
                    jsProcess.Add(c, p)
                Else
                    jsProcess(c) = p
                End If
            End If
            If Not p.StartInfo.FileName = "" Then
                If Not text = "" Then
                    File.WriteAllText(p.StartInfo.FileName, text & "", System.Text.Encoding.UTF8)
                End If
                p.Start()
                p.WaitForExit()
                process_Exited(p, New EventArgs())
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Public Sub processCloseAll()
        If jsProcess.Count <= 0 Then Return
        For Each c As Control In jsProcess.Keys
            Try
                If Not jsProcess(c).HasExited Then
                    RemoveHandler jsProcess(c).Exited, AddressOf process_Exited
                    jsProcess(c).Close()
                End If
                jsProcess.Remove(c)
            Catch ex As Exception
                Err.Clear()
            End Try
        Next
    End Sub
    Public Sub processRemove(p As Process)
        If jsProcess.Count <= 0 Then Return
        For Each c As Control In jsProcess.Keys
            Try
                If jsProcess(c) Is p Then
                    If Not jsProcess(c).HasExited Then
                        RemoveHandler jsProcess(c).Exited, AddressOf process_Exited
                        jsProcess(c).Close()
                    End If
                    jsProcess.Remove(c)
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
        Next
    End Sub
    Private Sub process_Exited(ByVal sender As Object, ByVal e As System.EventArgs)
        If jsProcess.Count <= 0 Then Return
        Dim p As Process = sender
        If Not p Is Nothing Then
            For Each c As Control In jsProcess.Keys.ToArray
                If jsProcess(c).StartInfo Is p.StartInfo Then
                    If c.GetType Is GetType(System.Windows.Forms.TextBox) Then
                        If Not c.Text = File.ReadAllText(p.StartInfo.FileName, System.Text.Encoding.UTF8) & "" Then
                            Select Case MessageBox.Show(Me, "Update from changed file?" & Environment.NewLine & "Control:" & c.Name.ToString().Replace("_"c, " "c).Replace("  ", " "), "Update changes?")
                                Case DialogResult.Yes, DialogResult.OK
                                    c.Text = File.ReadAllText(p.StartInfo.FileName, System.Text.Encoding.UTF8) & ""
                                    File.Delete(p.StartInfo.FileName)
                                    processRemove(p)
                                    Exit Sub
                                Case Else
                                    File.Delete(p.StartInfo.FileName)
                                    processRemove(p)
                                    Exit Sub
                            End Select
                        Else
                            File.Delete(p.StartInfo.FileName)
                            processRemove(p)
                            Exit Sub
                        End If
                    End If
                End If
            Next
        End If
    End Sub
    Private Sub InsertImageUnderPageToolStripMenuItem_CheckStateChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles InsertImageUnderPageToolStripMenuItem.CheckStateChanged
    End Sub
    Private Sub InsertImageUnderPageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles InsertImageUnderPageToolStripMenuItem.Click
        Dim returnImage As System.Drawing.Image = Nothing
        Dim extensions As New List(Of String)
        extensions.AddRange(New String() {".fdf", ".xfdf", ".xdp", ".xml", ".pdf", ".xpdf"})
        Dim imageExtensions As New List(Of String)
        imageExtensions.AddRange(New String() {".jpg", ".gif", ".png", ".jpeg", ".tif", ".tiff"})
        Try
            cUserRect.pauseDraw = True
            If True = True Then
                preventClickDialog = True
                Try
                    OpenFileDialog2.Filter = "Image Formats|*.jpg;*.jpeg;*.bmp;*.gif;*.png;*.tif;*.tiff|JPG|*.jpg|JPEG|*.jpeg|BMP|*.bmp|GIF|*.gif|PNG|*.png|Tif|*.tif|TIFF|*.tiff|All Files|*.*"
                    OpenFileDialog2.FilterIndex = 0
                    OpenFileDialog2.FileName = ""
                    Dim fn As String = ""
                    OpenFileDialog2.InitialDirectory = ApplicationDataFolder(False, "")
                    Select Case OpenFileDialog2.ShowDialog(Me)
                        Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                            If Not String.IsNullOrEmpty(OpenFileDialog2.FileName) Then
                                fn = OpenFileDialog2.FileName & ""
OPENFILE_KNOWN_FILENAME:
                                Using jpg As System.Drawing.Image = System.Drawing.Image.FromFile(fn)
                                    AddImageToPage(jpg, False)
                                    jpg.Dispose()
                                End Using
                            End If
                        Case Else
                            Return
                    End Select
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    timerPreventDefaultExpires.Enabled = True
                End Try
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            cUserRect.pauseDraw = False
        End Try
        Return
    End Sub
    Private Sub ToolStripStatusLabel2_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles ToolStripStatusLabel2.Click
        Try
            If clsBruteForcePw.InUse = True Then
                If Not pwCrack Is Nothing Then
                    pwCrack.forcePause = True
                    Return
                End If
            End If
            If ToolStripStatusLabel2.Text.ToString.ToLower.StartsWith("link: ") Then
                Process.Start("""" & (ToolStripStatusLabel2.Text.ToString.Replace("Link: ", "").Trim()) & """")
            Else
                If String.IsNullOrEmpty(fpath & "") Then Return
                If FileExists(fpath & "") Then
                    Try
                        Process.Start("explorer.exe", "/select,""" & (fpath) & """")
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    Finally
                        If Not clsFF Is Nothing Then
                            clsFF = Nothing
                        End If
                    End Try
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub ReplaceCurrentPageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReplaceCurrentPageToolStripMenuItem.Click
        Try
            Dim pgReplaced As Integer = CInt(pageIndex) + 1
            Dim m As New MemoryStream
            Dim pageSelectedIndex As Integer = pageIndex
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Using stmp As New PdfStamper(pdfReaderDoc, m)
                Dim o As New OpenFileDialog
                o.Filter = "PDF|*.pdf|Image Formats|*.jpg;*.jpeg;*.bmp;*.gif;*.png;*.tif;*.tiff|JPG|*.jpg|JPEG|*.jpeg|BMP|*.bmp|GIF|*.gif|PNG|*.png|Tif|*.tif|TIFF|*.tiff"
                o.FilterIndex = 0
                o.DefaultExt = ".pdf"
                o.Title = "Select Imported PDF:"
                o.InitialDirectory = Path.GetDirectoryName(fpath)
                Dim fn As String = ""
                Me.Hide()
                Select Case o.ShowDialog(Me)
                    Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                        fn = o.FileName.ToString()
                        Select Case GetFileExtension(fn).ToString.ToLower.Replace(".", "")
                            Case "pdf".ToLower
                                Dim r As New PdfReader(UnlockSecurePDF(File.ReadAllBytes(fn)))
                                Dim pgImported As Integer = 1
                                Dim cdialog As New clsPromptDialog()
                                Dim pgImportedStr As String = cdialog.ShowDialog("Replace which page from imported PDF?", "Select Imported Page:", Me, "1")
                                If IsNumeric(pgImportedStr & "") Then
                                    pgImported = CInt(pgImportedStr)
                                Else
                                    Return
                                End If
                                stmp.ReplacePage(r, pgImported, pgReplaced)
                                stmp.Writer.CloseStream = False
                                stmp.Close()
                                If m.Length > 0 Then
                                    Session = m.ToArray
                                    A0_LoadPDF(True)
                                End If
                            Case "jpg".ToLower, "png".ToLower, "gif".ToLower, "bmp".ToLower, "tiff".ToLower
                                Dim jpg As System.Drawing.Image = System.Drawing.Image.FromFile(fn)
                                Dim jpgStream As New MemoryStream
                                Dim frmImgRot As New frmImageRotation
                                frmImgRot.imgRect = New RectangleF(0, 0, jpg.Width, jpg.Height)
                                frmImgRot.LoadPictureBox(jpg)
                                Dim rotType As System.Drawing.RotateFlipType = RotateFlipType.RotateNoneFlipNone
                                Select Case frmImgRot.ShowDialog(Me)
                                    Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                                        If frmImgRot.cancelled Then
                                            Me.Show()
                                            Me.BringToFront()
                                            Return
                                        End If
                                        rotType = frmImgRot.rotType
                                    Case Else
                                        Return
                                End Select
                                Me.Show()
                                Me.BringToFront()
                                If frmImgRot.cancelled Then
                                    Return
                                End If
                                jpg.RotateFlip(rotType)
                                Dim bitmap As New Bitmap(jpg)
                                Dim mPDF As New MemoryStream()
                                jpg.Save(jpgStream, System.Drawing.Imaging.ImageFormat.Png)
                                If jpgStream.CanSeek Then
                                    jpgStream.Seek(0, SeekOrigin.Begin)
                                End If
                                jpg.Dispose()
                                jpg = Nothing
                                Dim bmp As New Bitmap(jpgStream)
                                Dim page_width As String, page_height As String
                                Try
                                    page_width = bmp.Width
                                    page_height = bmp.Height
                                    Dim rectImage As New iTextSharp.text.Rectangle(page_width, page_height)
                                    blnModelPopupClose = MsgBoxResult.Ignore
                                    pnlPageSize_MaintainAspectRatio.Checked = False
                                    Load_PageSizePanel(rectImage)
                                    pnlPageSizeApsectRation_Update()
                                    Me.Show()
                                    Me.BringToFront()
                                    pnlPageSize.Show()
                                    If modelPopup_DoEvents(blnModelPopupClose) Then
                                        pnlPageSize.Hide()
                                    End If
                                    If blnModelPopupClose <> MsgBoxResult.Ok Then Return
                                    page_width = pageSizes("CUSTOM").Width
                                    page_height = pageSizes("CUSTOM").Height
                                Catch ex As Exception
                                    page_width = bmp.Width
                                    page_height = bmp.Height
                                    TimeStampAdd(ex, debugMode)
                                End Try
                                Dim r As New iTextSharp.text.Rectangle(CInt(page_width), CInt(page_height))
                                Dim doc As New Document(r, CSng(pnlPageSize_MarginLeft.Text & "") + 0, CSng(pnlPageSize_MarginRight.Text & "") + 0, CSng(pnlPageSize_MarginTop.Text & "") + 0, CSng(pnlPageSize_MarginBottom.Text & "") + 0)
                                Dim writer As PdfWriter = PdfWriter.GetInstance(doc, mPDF)
                                Dim pages As Integer = bmp.GetFrameCount(Imaging.FrameDimension.Page)
                                doc.Open()
                                Dim cb As PdfContentByte = writer.DirectContent
                                doc.Add(New Paragraph(" "))
                                For i As Integer = 0 To pages - 1
                                    Dim image As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Png)
                                    image.SetAbsolutePosition(0, 0)
                                    image.ScaleAbsoluteHeight(doc.PageSize.Height)
                                    image.ScaleAbsoluteWidth(doc.PageSize.Width)
                                    writer.DirectContent.AddImage(image)
                                    doc.NewPage()
                                Next i
                                writer.CloseStream = False
                                doc.Close()
                                Dim reader As New PdfReader(mPDF.ToArray())
                                If Not Session Is Nothing Then
                                    If Session.Length > 0 Then
                                        Dim pgImported As Integer = 1
                                        If reader.NumberOfPages > 1 Then
                                            Dim cdialog As New clsPromptDialog()
                                            Dim pgImportedStr As String = cdialog.ShowDialog("Replace which page from imported PDF?", "Select Imported Page:", Me, "1")
                                            If IsNumeric(pgImportedStr & "") Then
                                                pgImported = CInt(pgImportedStr)
                                            Else
                                                pgImported = 1
                                            End If
                                        End If
                                        stmp.ReplacePage(reader, pgImported, pgReplaced)
                                        stmp.Writer.CloseStream = False
                                        stmp.Close()
                                        If m.Length > 0 Then
                                            Session = m.ToArray
                                            A0_LoadPDF(True)
                                            _cFDFDoc = cFDFDoc(True)
                                        End If
                                    Else
                                        Session("output") = mPDF.ToArray
                                    End If
                                Else
                                    Session("output") = mPDF.ToArray
                                End If
                                writer.Close()
                                writer = Nothing
                                A0_LoadPDF(True)
                                LoadPageList(Me.btnPage)
                                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                A0_PictureBox1.Enabled = True
                                A0_PictureBox2.Enabled = True
                                pageIndex = pageSelectedIndex
                                btnPage_SelectedIndexChanged(Me, New EventArgs())
                            Case Else
                                Return
                        End Select
                    Case Else
                        Return
                End Select
            End Using
        Catch ex As Exception
            Throw ex
        Finally
            Me.Show()
            Me.BringToFront()
        End Try
    End Sub
    Private Sub CleanUpFormFieldsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CleanUpFormFieldsToolStripMenuItem.Click
        CleanUpFields()
    End Sub
    Public Class Rotate
        Inherits PdfPageEventHelper
        Protected rotation As PdfNumber = PdfPage.PORTRAIT
        Public Sub setRotation(ByVal rot As PdfNumber)
            rotation = rot
        End Sub
        Public Overrides Sub onEndPage(ByVal writer As PdfWriter, ByVal doc As Document)
            writer.AddPageDictEntry(PdfName.ROTATE, rotation)
        End Sub
    End Class
    Public Class ScaleEvent
        Inherits PdfPageEventHelper
        Protected scale As Single = 1.0F
        Protected pageDict As PdfDictionary
        Public Sub New(scaleSingle As Single)
            scale = scaleSingle
        End Sub
        Public Sub setPageDict(pageDictPdfDict As PdfDictionary)
            pageDict = pageDictPdfDict
        End Sub
        Public Overrides Sub onStartPage(writer As PdfWriter, doc As Document)
            writer.AddPageDictEntry(PdfName.ROTATE, pageDict.GetAsNumber(PdfName.ROTATE))
            writer.AddPageDictEntry(PdfName.MEDIABOX, scaleDown(pageDict.GetAsArray(PdfName.MEDIABOX), scale))
            writer.AddPageDictEntry(PdfName.CROPBOX, scaleDown(pageDict.GetAsArray(PdfName.CROPBOX), scale))
        End Sub
        Public Function scaleDown(original As PdfArray, scale As Single) As PdfArray
            If (original Is Nothing) Then
                Return Nothing
            End If
            Dim width As Single = original.GetAsNumber(2).FloatValue() - original.GetAsNumber(0).FloatValue()
            Dim height As Single = original.GetAsNumber(3).FloatValue() - original.GetAsNumber(1).FloatValue()
            Return New PdfRectangle(width * scale, height * scale)
        End Function
    End Class
    Public Function rotatePDFBytes(ByVal pdfIn() As Byte, ByVal pdfOwnerPassword() As Byte, ByVal pgNumber As Integer, ByVal pgRotation As Integer) As Byte()
        Dim reader As New PdfReader(pdfIn, pdfOwnerPassword)
        Dim n As Integer = reader.NumberOfPages()
        Dim page As PdfDictionary
        Dim rotate As PdfNumber
        page = reader.GetPageN(pgNumber)
        rotate = page.GetAsNumber(PdfName.ROTATE)
        If rotate Is Nothing Then
            page.Put(PdfName.ROTATE, New PdfNumber(pgRotation))
        Else
            page.Put(PdfName.ROTATE, New PdfNumber((rotate.IntValue() + pgRotation) Mod 360))
        End If
        Return getPDFBytes(reader)
    End Function
    Public Sub rotateDoc(ByVal fileIn() As Byte, ByVal pdfownerPw As String, ByVal pgNumber As Integer, ByVal rotation As Integer)
        Dim m As New MemoryStream
        Dim document As New iTextSharp.text.Document
        Dim writer As PdfWriter = PdfWriter.GetInstance(document, m)
        document.Open()
        Dim reader As iTextSharp.text.pdf.PdfReader = New iTextSharp.text.pdf.PdfReader(fileIn, getBytes(pdfownerPw & ""))
        For i As Integer = 1 To reader.NumberOfPages
            Dim page As PdfImportedPage = writer.GetImportedPage(reader, i)
            Dim image As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(page)
            Dim pagesize As iTextSharp.text.Rectangle = reader.GetPageSizeWithRotation(i)
            If pgNumber = i Then
                If rotation = 90 Then
                    document.SetPageSize(pagesize.Rotate())
                    image.SetAbsolutePosition(0, 0)
                ElseIf rotation = 270 Then
                    document.SetPageSize(pagesize.Rotate())
                    image.SetAbsolutePosition(0, 0)
                Else
                    document.SetPageSize(pagesize)
                    image.SetAbsolutePosition(0, 0)
                End If
                document.Add(image)
            Else
                document.SetPageSize(pagesize)
                document.Add(page)
            End If
        Next
        document.Close()
    End Sub
    Public Function Rotate_Image(ByVal Image_NoRotation As System.Drawing.Image, ByVal _rotationDegrees As Integer) As System.Drawing.Image
        Try
            Using g As System.Drawing.Image = Image_NoRotation.Clone
                Select Case (_rotationDegrees)
                    Case 0
                        Return g.Clone
                    Case 90
                        g.RotateFlip(RotateFlipType.Rotate90FlipNone)
                        Return g.Clone
                    Case 180
                        g.RotateFlip(RotateFlipType.Rotate180FlipNone)
                        Return g.Clone
                    Case 270
                        g.RotateFlip(RotateFlipType.Rotate270FlipNone)
                        Return g.Clone
                    Case -180
                        g.RotateFlip(RotateFlipType.Rotate180FlipNone)
                        Return g.Clone
                    Case -90
                        g.RotateFlip(RotateFlipType.Rotate270FlipNone)
                        Return g.Clone
                    Case -270
                        g.RotateFlip(RotateFlipType.Rotate90FlipNone)
                        Return g.Clone
                    Case Else
                        Using g2 As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(g)
                            g2.TranslateTransform(g.Width / 2, g.Height / 2)
                            g2.RotateTransform(_rotationDegrees)
                            g2.Save()
                            Return g.Clone
                        End Using
                End Select
            End Using
        Catch ex As Exception
            Err.Clear()
        End Try
        Return Image_NoRotation.Clone
    End Function
    Private Sub RotatePageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RotatePageToolStripMenuItem.Click
        Try
            Dim page1 As PdfDictionary
            Dim rotation1 As PdfNumber
            Dim reader As New PdfReader(Session, getBytes(pdfOwnerPassword & ""))
            page1 = reader.GetPageN(page)
            Try
                rotation1 = New PdfNumber(reader.GetPageRotation(page) + 0)
            Catch ex1 As Exception
                rotation1 = New PdfNumber(0)
            End Try
            Dim rot As Integer = rotation1.IntValue
goto_doOver:
            Me.Hide()
            Dim img As System.Drawing.Image = A0_PictureBox1.Image.Clone
            img = Rotate_Image(img.Clone, rot * -1).Clone
            Using dlgRot As New dialogRotatePage(img, rot, img.Width, img.Height)
                Select Case dlgRot.ShowDialog(Me)
                    Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                        rot = dlgRot.rotationDegrees - CInt(IIf(dlgRot.CheckBox1.Checked, rot, 0))
                        dlgRot.Close()
                    Case Else
                        dlgRot.Close()
                        Me.Show()
                        Me.BringToFront()
                        Return
                End Select
            End Using
            If rot < -360 Or rot > 360 Then
                GoTo goto_doOver
            End If
            Me.Show()
            Me.BringToFront()
            Dim m As New MemoryStream
            m = New MemoryStream(rotatePDFBytes(Session, getBytes(pdfOwnerPassword & ""), page, rot))
            Session("output") = m.ToArray
            tmpPercent = Nothing
            A0_LoadPDF(True)
            refreshPDFImage()
            cmbPercent_SelectedIndexChanged(Me, New EventArgs())
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub PDFField_Value_Checked_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Value_Checked.CheckedChanged
        Try
            RadioButton_Checked.Checked = PDFField_Value_Checked.Checked
            RadioButton_Checked_CheckedChanged(Me, New EventArgs())
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub SelectedPageRangeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SelectedPageRangeToolStripMenuItem.Click
        Try
            Me.Hide()
            frmEmail1 = New frmEmail
            Dim r As New PdfReader(Session, getBytes(pdfOwnerPassword & ""))
            If r.NumberOfPages > 1 Then
                Dim pgImported As Integer = 1
                Dim cdialog As New clsPromptDialog()
                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range", "Select page range for email attachment:", Me, "1-" & r.NumberOfPages.ToString & "")
                Dim m As MemoryStream
                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                    r.SelectPages(pgImportedStr)
                    m = New MemoryStream(getPDFBytes(r))
                Else
                    m = New MemoryStream(Session)
                End If
                If m.Length > 0 Then
                    frmEmail1.addAutoCompleteFields(m.ToArray(), pdfOwnerPassword, Me)
                    frmEmail.pageRange = pgImportedStr & ""
                    frmEmail1.ShowDialog(Me, pgImportedStr)
                End If
            Else
                frmEmail1.addAutoCompleteFields(Session, pdfOwnerPassword, Me)
                frmEmail.pageRange = "1"
                frmEmail1.ShowDialog(Me, "1")
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            frmEmail1 = Nothing
        Finally
            Me.Show()
            Me.BringToFront()
        End Try
    End Sub
    Private Sub btnPDFField_Dimensions_Width_Height_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPDFField_Dimensions_Width_Height.Click
        Try
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        Try
            If PDFField_Dimensions_Paste_4_Width.Checked And PDFField_Dimensions_Paste_5_Height.Checked Then
                PDFField_Dimensions_Paste_4_Width.Checked = False
                PDFField_Dimensions_Paste_5_Height.Checked = False
            Else
                PDFField_Dimensions_Paste_4_Width.Checked = True
                PDFField_Dimensions_Paste_5_Height.Checked = True
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub ExtractImages(ByVal reader As PdfReader, ByVal destFolder As String)
        Dim parser As iTextSharp.text.pdf.parser.PdfReaderContentParser = New iTextSharp.text.pdf.parser.PdfReaderContentParser(reader)
        Dim listener As clsImageRenderListener = New clsImageRenderListener("PdfImage-", destFolder)
        Dim i As Integer = 1
        Do While (i <= reader.NumberOfPages)
            parser.ProcessContent(i, listener)
            i = (i + 1)
        Loop
    End Sub
    Public Sub ExtractImages(ByVal reader As PdfReader, ByVal destFolder As String, ByVal prefix As String)
        Dim parser As iTextSharp.text.pdf.parser.PdfReaderContentParser = New iTextSharp.text.pdf.parser.PdfReaderContentParser(reader)
        Dim listener As clsImageRenderListener = New clsImageRenderListener(prefix, destFolder)
        Dim i As Integer = 1
        Do While (i <= reader.NumberOfPages)
            parser.ProcessContent(i, listener)
            i = (i + 1)
        Loop
    End Sub
    Public Sub ExtractImages(ByVal reader As PdfReader, ByVal destFolder As String, ByVal page As Integer)
        Dim parser As iTextSharp.text.pdf.parser.PdfReaderContentParser = New iTextSharp.text.pdf.parser.PdfReaderContentParser(reader)
        Dim listener As clsImageRenderListener = New clsImageRenderListener("PdfImage-", destFolder)
        parser.ProcessContent(page, listener)
    End Sub
    Public Sub ExtractImages(ByVal reader As PdfReader, ByVal destFolder As String, ByVal prefix As String, ByVal page As Integer)
        Dim parser As iTextSharp.text.pdf.parser.PdfReaderContentParser = New iTextSharp.text.pdf.parser.PdfReaderContentParser(reader)
        Dim listener As clsImageRenderListener = New clsImageRenderListener(prefix, destFolder)
        parser.ProcessContent(page, listener)
    End Sub
    Private Sub AllPagesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AllPagesToolStripMenuItem.Click
        Try
            Dim r As New PdfReader(Session, getBytes(pdfOwnerPassword & ""))
            If Not Directory.Exists(ApplicationDataFolder(False, "") & "images\") Then
                Directory.CreateDirectory(ApplicationDataFolder(False, "") & "images\")
            End If
            If Not Directory.Exists(ApplicationDataFolder(False, "") & "images\" & Path.GetFileNameWithoutExtension(fpath) & "") Then
                Directory.CreateDirectory(ApplicationDataFolder(False, "") & "images\" & Path.GetFileNameWithoutExtension(fpath) & "")
            End If
            For pg As Integer = 1 To r.NumberOfPages
                ExtractImages(r, ApplicationDataFolder(False, "") & "images\" & Path.GetFileNameWithoutExtension(fpath) & "", Path.GetFileNameWithoutExtension(fpath) & "-" & pg, pg)
            Next
            Process.Start(ApplicationDataFolder(False, "") & "images\" & Path.GetFileNameWithoutExtension(fpath) & "")
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub CurrentPageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CurrentPageToolStripMenuItem.Click
        Try
            Dim r As New PdfReader(Session, getBytes(pdfOwnerPassword & ""))
            If Not Directory.Exists(ApplicationDataFolder(False, "") & "images\") Then
                Directory.CreateDirectory(ApplicationDataFolder(False, "") & "images\")
            End If
            If Not Directory.Exists(ApplicationDataFolder(False, "") & "images\" & Path.GetFileNameWithoutExtension(fpath) & "") Then
                Directory.CreateDirectory(ApplicationDataFolder(False, "") & "images\" & Path.GetFileNameWithoutExtension(fpath) & "")
            End If
            Dim pg As Integer = Me.page
            r.SelectPages(pg.ToString())
            ExtractImages(r, ApplicationDataFolder(False, "") & "images\" & Path.GetFileNameWithoutExtension(fpath) & "", Path.GetFileNameWithoutExtension(fpath) & "-" & pg, pg)
            Process.Start(ApplicationDataFolder(False, "") & "images\" & Path.GetFileNameWithoutExtension(fpath) & "")
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub pictureboxThumb_Click(ByVal sender As Object, ByVal e As EventArgs)
        Try
            If sender.GetType Is GetType(PictureBox) Then
                Dim p As PictureBox = DirectCast(sender, PictureBox)
                Dim pgSel As Integer = CInt(p.Name.ToString.Replace("pictureBoxThumb_", ""))
                If pgSel > 0 Then
                    pageIndex = pgSel - 1
                    btnPage_SelectedIndexChanged(Me, New EventArgs())
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub Load_Thumbnails1_Panel(Optional ByVal visible As Boolean = True, Optional ByVal forceUpdate As Boolean = False)
        Try
            If visible Then
                If True = True Then
                    Thumbnails1_Panel.Visible = True
                    Thumbnails1_Panel.Dock = DockStyle.None
                    Thumbnails1_Panel.Width = 210
                    Thumbnails1_Panel.Left = 0
                    Thumbnails1_Panel.Top = 33
                    Thumbnails1_Panel.Height = Me.Height - FlowLayoutPanel1.Height - StatusStrip1.Height - 38 - 15
                    Thumbnails1_Panel.AutoScroll = True
                    PictureBox1_Panel.Left = Thumbnails1_Panel.Right
                    PictureBox1_Panel.Width = Me.Width - 15 - Thumbnails1_Panel.Width
                    PictureBox1_Panel.Visible = True
                End If
                If pdfReaderDoc Is Nothing Then Return
                If Thumbnails1_Panel.Controls.Count <> pdfReaderDoc.NumberOfPages Or forceUpdate Then
                    Dim panelHeightOverall As Integer = 0
                    pictureboxThumb.Clear()
                    pictureboxThumb = New List(Of PictureBox)
                    For pg As Integer = 1 To pdfReaderDoc.NumberOfPages
                        Try
                            pictureboxThumb.Add(New PictureBox)
                            pictureboxThumb(pictureboxThumb.Count - 1).BorderStyle = BorderStyle.Fixed3D
                            pictureboxThumb(pictureboxThumb.Count - 1).Cursor = Cursors.Hand
                            pictureboxThumb(pictureboxThumb.Count - 1).SizeMode = PictureBoxSizeMode.AutoSize
                            pictureboxThumb(pictureboxThumb.Count - 1).Width = 185
                            pictureboxThumb(pictureboxThumb.Count - 1).Image = System.Drawing.Image.FromStream(New MemoryStream(A0_LoadImage(Session, pg, pictureboxThumb(pictureboxThumb.Count - 1).Width, 0)))
                            pictureboxThumb(pictureboxThumb.Count - 1).Margin = New Windows.Forms.Padding(3, 5, 3, 5)
                            pictureboxThumb(pictureboxThumb.Count - 1).Top = panelHeightOverall
                            pictureboxThumb(pictureboxThumb.Count - 1).Left = 0
                            pictureboxThumb(pictureboxThumb.Count - 1).Name = "pictureBoxThumb_" & pg.ToString
                            panelHeightOverall += pictureboxThumb(pictureboxThumb.Count - 1).Margin.Top + pictureboxThumb(pictureboxThumb.Count - 1).Height + pictureboxThumb(pictureboxThumb.Count - 1).Margin.Bottom
                            Thumbnails1_Panel.Controls.Add(pictureboxThumb(pictureboxThumb.Count - 1))
                            AddHandler DirectCast(Thumbnails1_Panel.Controls(CInt(pg - 1)), PictureBox).DoubleClick, AddressOf pictureboxThumb_Click
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Next
                End If
            Else
                Thumbnails1_Panel.Visible = False
                PictureBox1_Panel.Width = Me.Width - 15
                PictureBox1_Panel.Left = 0
                PictureBox1_Panel.Visible = True
                If pdfReaderDoc Is Nothing Then Return
                If Thumbnails1_Panel.Controls.Count <> pdfReaderDoc.NumberOfPages Or forceUpdate Then
                    For ctrl As Integer = Thumbnails1_Panel.Controls.Count - 1 To 0 Step -1
                        Try
                            RemoveHandler DirectCast(Thumbnails1_Panel.Controls(ctrl), PictureBox).DoubleClick, AddressOf pictureboxThumb_Click
                            DirectCast(Thumbnails1_Panel.Controls(ctrl), PictureBox).Image = Nothing
                            DirectCast(Thumbnails1_Panel.Controls(ctrl), PictureBox).Dispose()
                            Thumbnails1_Panel.Controls.RemoveAt(ctrl)
                            pictureboxThumb(ctrl).Dispose()
                            pictureboxThumb(ctrl) = Nothing
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    Next
                    pictureboxThumb.Clear()
                    pictureboxThumb = New List(Of PictureBox)
                End If
            End If
        Catch exThumbs As Exception
            TimeStampAdd(exThumbs, debugMode)
        Finally
            cmbPercent_SelectedIndexChanged(Me, New EventArgs())
        End Try
    End Sub
    Private Sub ThumbnailsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ThumbnailsToolStripMenuItem.Click
        Try
            Load_Thumbnails1_Panel(ThumbnailsToolStripMenuItem.Checked)
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub ImageRotation_btnOK_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImageRotation_btnOK.Click
        Try
            rotType = getImageRotation()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub ImageRotation_btnCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImageRotation_btnCancel.Click
        Try
            rotType = RotateFlipType.RotateNoneFlipNone
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub SelectPageRangeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SelectPageRangeToolStripMenuItem.Click
        Try
            Dim r As New PdfReader(Session, getBytes(pdfOwnerPassword & ""))
            If r.NumberOfPages > 1 Then
                Dim pgImported As Integer = 1
                Dim cdialog As New clsPromptDialog()
                Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range", "Select page range:", Me, "1-" & r.NumberOfPages.ToString & "")
                Dim m As MemoryStream
                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                    r.SelectPages(pgImportedStr)
                    m = New MemoryStream(getPDFBytes(r))
                    If m.Length > 0 Then
                        Session = m.ToArray
                        Load_DropDowns()
                        LoadPageList(Me.btnPage, cFDFDoc)
                        A0_LoadPDF(True, False, True)
                    End If
                End If
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub OpenDocumentFromURLToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenDocumentFromURLToolStripMenuItem.Click
        Try
            OpenFileFromUrl("")
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub UseIntellegentCaching_Thumnails_ToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles UseIntellegentCaching_Thumnails_ToolStripMenuItem.Click
        Try
            SaveSetting("PDFormsNet", "settings", "IntellegentCache-Thumbnails", CBool(UseIntellegentCaching_Thumnails_ToolStripMenuItem.Checked.ToString))
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub ViewToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ViewToolStripMenuItem.Click
    End Sub
    Public Property cFDFDoc(Optional ByVal forceNew As Boolean = False) As FDFApp.FDFDoc_Class
        Get
            Try
                If forceNew Or _cFDFDoc Is Nothing Then
                    If Not Session Is Nothing Then
                        If Session.Length > 0 Then
                            _cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword & "")
                        Else
                            _cFDFDoc = New FDFApp.FDFDoc_Class
                        End If
                    Else
                        _cFDFDoc = New FDFApp.FDFDoc_Class
                    End If
                ElseIf _cFDFDoc Is Nothing Then
                    If Not Session Is Nothing Then
                        If Session.Length > 0 Then
                            _cFDFDoc = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword & "")
                        Else
                            _cFDFDoc = New FDFApp.FDFDoc_Class
                        End If
                    Else
                        _cFDFDoc = New FDFApp.FDFDoc_Class
                    End If
                End If
                Return _cFDFDoc
            Catch ex As Exception
                Return New FDFApp.FDFDoc_Class()
            End Try
        End Get
        Set(ByVal value As FDFApp.FDFDoc_Class)
            _cFDFDoc = value
        End Set
    End Property
    Private Sub OpenApplicationFolderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenApplicationFolderToolStripMenuItem.Click
        Try
            If Not String.IsNullOrEmpty(appPath & "") Then
                Process.Start(appPath)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub CopyToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CopyToolStripMenuItem.Click
        Try
            If Not String.IsNullOrEmpty(fldNameHighlighted & "") Then
                fldNameHighlightedCopy = fldNameHighlighted
                PDFField_Copy.Checked = True
                PDFField_Copy_CheckedChanged(Me, New EventArgs())
                cUserRect.rect = Nothing
                cUserRect.rectBackup = Nothing
                cUserRect.rectOld = Nothing
                fldNameHighlighted = fldNameHighlightedCopy
                pnlFields.Hide()
                refreshPDFImage()
                CancelToolStripMenuItem.Visible = True
                DeleteToolStripMenuItem.Visible = False
                CopyToolStripMenuItem.Visible = False
            End If
            PictureBox1_Panel.Focus()
            StatusToolStrip = "Status: Draw copied field on form."
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub DeleteToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DeleteToolStripMenuItem.Click
        Try
            If Not String.IsNullOrEmpty(fldNameHighlighted & "") Then
                btnRemoveField_Click(Me, New EventArgs())
                cUserRect.rect = Nothing
                fldNameHighlighted = ""
                fldNameHighlightedCopy = ""
                A0_ClearPanelFieldProperties()
                pnlFields.Hide()
                If Not PictureBox1_Panel.Focused Then PictureBox1_Panel.Focus()
                StatusToolStrip = "Status: Field successfully deleted."
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PictureBox1_MouseDoubleClick(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles A0_PictureBox2.MouseDoubleClick
        cUserRect.mIsClick = False
        Try
            If fldKidIndex < 0 And fldNameHighlighted = "" Then
                mMove = False
                fldNameHighlighted = ""
                fldNameHighlightedCopy = ""
                'PDFField_Copy.Checked = False
                Try
                    If PDFField_CopyAppearance.Checked Then
                        PDFField_CopyAppearance.Checked = False
                    End If
                    If PDFField_Copy.Checked Then
                        PDFField_Copy.Checked = False
                    End If
                    If PDFField_CopyValidation.Checked Then
                        PDFField_CopyValidation.Checked = False
                    End If
                Catch ex As Exception
                    Err.Clear()
                End Try
                cUserRect.rect = Nothing
                cUserRect.pauseDraw = False
                cUserRect.rectBackup = Nothing
                cUserRect.rectOld = Nothing
                DrawImageFieldPositions()
                PDFField_Dimensions_Paste_0_Left_llx.Checked = False
                PDFField_Dimensions_Paste_1_Bottom_lly.Checked = False
                PDFField_Dimensions_Paste_2_Right_urx.Checked = False
                PDFField_Dimensions_Paste_3_Top_ury.Checked = False
                PDFField_Dimensions_Paste_4_Width.Checked = False
                PDFField_Dimensions_Paste_5_Height.Checked = False
                GoTo goto_LinksStart
            ElseIf (cUserRect.mIsClick Or isDimensionsChecked() = True) And _clickPoints.Count > 1 And cUserRect.rect.Width > 0 And cUserRect.rect.Height > 0 And Not fldNameHighlighted = "" Then
                Try
                    Dim h As Single = getPDFHeight()
                    If (cUserRect.mIsClick Or isDimensionsChecked() = True) And _clickPoints.Count > 1 Then
                        If cUserRect.rect = Nothing Then
                            mMove = False
                            DrawImageFieldPositions()
                            Return
                        Else
                            If _clickPoints.Count > 1 Then
                                _clickPoints(0) = New PointF(cUserRect.rect.Left, cUserRect.rect.Top)
                                _clickPoints(1) = New PointF(cUserRect.rect.Right, cUserRect.rect.Bottom)
                            End If
                            Dim ptOrigin As New System.Drawing.Point
                            If _clickPoints(0).Y > _clickPoints(1).Y Then
                                btnTop.Text = _clickPoints(1).Y
                                btnBottom.Text = _clickPoints(0).Y
                                ptOrigin.Y = _clickPoints(1).Y
                            Else
                                btnTop.Text = _clickPoints(0).Y
                                btnBottom.Text = _clickPoints(1).Y
                                ptOrigin.Y = _clickPoints(0).Y
                            End If
                            btnHeight.Text = Math.Abs(CSng(btnBottom.Text) - CSng(btnTop.Text))
                            If _clickPoints(0).X > _clickPoints(1).X Then
                                btnLeft.Text = _clickPoints(1).X
                                btnRight.Text = _clickPoints(0).X
                                ptOrigin.X = _clickPoints(1).X
                            Else
                                btnLeft.Text = _clickPoints(0).X
                                btnRight.Text = _clickPoints(1).X
                                ptOrigin.X = _clickPoints(0).X
                            End If
                            btnWidth.Text = Math.Abs(CSng(btnRight.Text) - CSng(btnLeft.Text))
                            If Not isDimensionsChecked() Then
                                Return
                            Else
                            End If
                        End If
                        Try

                            'btnLeft.Text = _dimensionsList(0)
                            'btnBottom.Text = _dimensionsList(1)
                            'btnRight.Text = _dimensionsList(2)
                            'btnTop.Text = _dimensionsList(3)
                            'btnWidth.Text = _dimensionsList(4)
                            'btnHeight.Text = _dimensionsList(5)
                            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                                btnLeft.Text = _dimensionsList(0) + 0
                            End If
                            If PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                                btnBottom.Text = _dimensionsList(1) + 0
                            End If
                            If PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                                btnRight.Text = _dimensionsList(2) + 0
                            End If
                            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                                btnTop.Text = _dimensionsList(3) + 0
                            End If
                            If PDFField_Dimensions_Paste_4_Width.Checked Then
                                btnWidth.Text = _dimensionsList(4) + 0
                            End If
                            If PDFField_Dimensions_Paste_5_Height.Checked Then
                                btnHeight.Text = _dimensionsList(5) + 0
                            End If
                            'If PDFField_Dimensions_Paste_3_Top_ury.Checked Or PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                            '    If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                            '        btnHeight.Text = CSng(btnTop.Text) - CSng(btnBottom.Text)
                            '    Else
                            '        btnHeight.Text = CSng(btnBottom.Text) - CSng(btnTop.Text)
                            '    End If
                            'End If
                            'If PDFField_Dimensions_Paste_5_Height.Checked Then
                            '    btnHeight.Text = _dimensionsList(5) + 0
                            '    If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                            '        If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                            '            btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                            '        Else
                            '            btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                            '        End If
                            '    ElseIf PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                            '        If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                            '            btnTop.Text = CSng(btnBottom.Text) + CSng(btnHeight.Text)
                            '        Else
                            '            btnTop.Text = CSng(btnBottom.Text) - CSng(btnHeight.Text)
                            '        End If
                            '    Else
                            '        If CSng(btnTop.Text) > CSng(btnBottom.Text) Then
                            '            btnBottom.Text = CSng(btnTop.Text) - CSng(btnHeight.Text)
                            '        Else
                            '            btnBottom.Text = CSng(btnTop.Text) + CSng(btnHeight.Text)
                            '        End If
                            '    End If
                            'End If
                            Dim r As New iTextSharp.text.Rectangle(CSng(btnLeft.Text), h - CSng(btnBottom.Text) + 0, CSng(btnRight.Text), h - CSng(btnTop.Text) + 0)
                            Try
                                If isDimensionsChecked() And Not fldNameHighlighted.isNullOrEmpty() Then
                                    Dim r2 As RectangleF = New RectangleF(CSng(btnLeft.Text), CSng(btnTop.Text) + 0, CSng(btnWidth.Text), CSng(btnHeight.Text))
                                    r2 = getRectangleScreen(r2)
                                    Dim r3 As RectangleF = cUserRect.rectScreen
                                    If (r2.Width > 0 And r2.Height > 0) And (Not Math.Abs(r2.Width - r3.Width) < 0.5F Or Not Math.Abs(r2.Height - r3.Height) < 0.5F Or Not Math.Abs(r2.Left - r3.Left) < 0.5F Or Not Math.Abs(r2.Right - r3.Right) < 0.5F Or Not Math.Abs(r2.Top - r3.Top) < 0.5F Or Not Math.Abs(r2.Bottom - r3.Bottom) < 0.5F) Then
                                        r = New iTextSharp.text.Rectangle(CSng(r2.Left), r2.Bottom, r2.Right, r2.Top)
                                        r = getRectanglePDF(r)
                                        r = GetFieldPositionsReverse(Session(), r)
                                        cUserRect.rect = GetFieldPositionsReverse2(Session(), getRectanglePDF(r))
                                        If Not PDFField_Copy.Checked Then
                                            If Not PDFField_Copy.Checked And Not fldNameHighlighted.isNullOrEmpty() And CheckfieldNameExits(fldNameHighlighted & "") Then
                                                mMove = True
                                                _dragging = False
                                                cUserRect.rect = (GetFieldPositionsReverse(r))
                                                _dragging = False
                                                Session("output") = A0_PDFFormField_Modify(Session("output"), fldNameHighlighted, Me.PDFField_Name.Text & "", New BaseColor(PDFField_TextColorPicker.BackColor.R, PDFField_TextColorPicker.BackColor.G, PDFField_TextColorPicker.BackColor.B, PDFField_TextColorPicker.BackColor.A), New BaseColor(PDFField_BackgroundColorPicker.BackColor.R, PDFField_BackgroundColorPicker.BackColor.G, PDFField_BackgroundColorPicker.BackColor.B, PDFField_BackgroundColorPicker.BackColor.A), New BaseColor(PDFField_BorderColorPicker.BackColor.R, PDFField_BorderColorPicker.BackColor.G, PDFField_BorderColorPicker.BackColor.B, PDFField_BorderColorPicker.BackColor.A), r)
                                                _dragging = False
                                                _dragging = False
                                                Exit Try
                                            ElseIf Not PDFField_Copy.Checked And CheckfieldNameExits(Me.PDFField_Name.Text & "") Then
                                            Else
                                                Me.lblFieldType.Text = "PROPERTIES"
                                            End If
                                            cUserRect.rect = GetFieldPositionsReverse(Session, Me.PDFField_Name.Text)
                                        Else
                                            cUserRect.rect = GetFieldPositionsReverse(Session, Me.PDFField_Name.Text)
                                        End If
                                    End If
                                Else
                                    Return
                                End If
                            Catch ex As Exception
                                TimeStampAdd(ex, debugMode)
                            End Try
                        Catch exDimensions As Exception
                            TimeStampAdd(exDimensions, debugMode) ' NK 2016-06-30 'NK DM
                        End Try
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    If Not fldNameHighlighted = "" Then
                        lblFieldType.Text = PDFField_Name.Text & ""
                    End If
                End Try
            Else
goto_LinksStart:
                If Not isDimensionsChecked() Then
                    If cLinks Is Nothing Then
                        cLinks = New clsLinks(pdfReaderDoc, Me)
                        cLinks.LoadLinksOnPage(CInt(pageIndex))
                    ElseIf cLinks.Links.Count <= 0 Then
                        cLinks = New clsLinks(pdfReaderDoc, Me)
                        cLinks.LoadLinksOnPage(CInt(pageIndex))
                        'ElseIf e.Button = MouseButtons.Left Then
                        '    cLinks = New clsLinks(pdfReaderDoc, Me)
                        '    cLinks.LoadLinksOnPage(CInt(pageIndex))
                    End If
                    If Not cLinks.Links Is Nothing OrElse cLinks.Links.Count > 0 Then
                        Dim intDestPage As Integer = cLinks.LinkClickedDestinationPage(CInt(pageIndex), e.Location) + 0
                        If intDestPage > 0 Then
                            pageIndex = intDestPage + 0
                            btnPage_SelectedIndexChanged(Me, New EventArgs())
                            cUserRect.rect = Nothing
                            cUserRect.rectBackup = Nothing
                            cUserRect.rectOld = Nothing
                            mMove = False
                            DrawImageFieldPositions()
                            Return
                        End If
                        Dim linkPopup As clsLinks.Link = Nothing
                        linkPopup = cLinks.LinkClickedPopupLink(CInt(pageIndex), e.Location)
                        If Not linkPopup.Link_Rect = Nothing Then
                            Dim StickNote_PopupRect As System.Drawing.RectangleF = linkPopup.Link_StickNote_PopupLinkRect
                            If Not StickNote_PopupRect = Nothing Then
                                Dim strPopupText As String = linkPopup.Link_Text
                                Dim dlg As New dialogPopup()
                                dlg.setPopupText(strPopupText & "")
                                dlg.Text = "Popup Annotation:"
                                dlg.chkOpened.Checked = linkPopup.Link_StickNote_Open
                                Try
                                    Me.Hide()
                                    Select Case dlg.ShowDialog(Me)
                                        Case DialogResult.OK 'save popup text
                                            Dim reader As PdfReader = pdfReaderDoc.Clone
                                            Dim pg As PdfDictionary = reader.GetPageN(CInt(btnPage.SelectedIndex + 1))
                                            Dim annots As PdfArray = pg.GetAsArray(PdfName.ANNOTS)
                                            Dim stickyLink As PdfDictionary = annots.GetAsDict(linkPopup.Link_AnnotationIndex)
                                            stickyLink.Put(PdfName.OPEN, New PdfBoolean(dlg.chkOpened.Checked))
                                            'Dim stickyRect As PdfArray = linkPopup 'sticky.GetAsArray(PdfName.RECT)
                                            'dim stickyRectangle As PdfRectangle = New PdfRectangle(stickyRect.GetAsNumber(0).FloatValue() - 120, stickyRect.GetAsNumber(1).FloatValue() - 70,stickyRect.GetAsNumber(2).FloatValue(), stickyRect.GetAsNumber(3).FloatValue() - 30)
                                            'sticky.Put(PdfName.RECT, stickyRectangle)
                                            'Dim stickyPopup As PdfDictionary = stickyLink.GetAsDict(PdfName.PARENT) 'linkPopup.Link_StickyNoteDict '
                                            'Dim stickyPopup As PdfDictionary = stickyLink.GetAsDict(PdfName.PARENT) 'linkPopup.Link_StickyNoteDict '
                                            Dim stickyPopup As PdfDictionary = Nothing ' annots.GetAsDict(linkPopup.Link_AnnotationIndex + 1) 'pdfReaderDoc.GetPdfObject(linkPopup.Link_StickyNotePopupIndirectRef.Number)
                                            stickyPopup = stickyLink.GetAsDict(PdfName.PARENT)
                                            Dim annoIdx As Integer = -1
                                            For annoIdx = 0 To annots.Size - 1
                                                If annots(annoIdx).IsIndirect Then
                                                    If annots.GetAsIndirectObject(annoIdx).Number = stickyLink.GetAsIndirectObject(PdfName.PARENT).Number Then
                                                        stickyPopup = annots.GetAsDict(annoIdx)
                                                        Exit For
                                                    End If
                                                End If
                                            Next
                                            'Dim popupRect As PdfArray = popup.GetAsArray(PdfName.RECT)
                                            'Dim popupRectangle As PdfRectangle = New PdfRectangle(popupRect.GetAsNumber(0).FloatValue() - 250, popupRect.GetAsNumber(1).FloatValue(), popupRect.GetAsNumber(2).FloatValue(), popupRect.GetAsNumber(3).FloatValue() - 250)
                                            'popup.Put(PdfName.RECT, popupRectangle)
                                            If Not stickyPopup Is Nothing Then
                                                Dim contentsRcXhtml As String = "<?xml version=""1.0""?><body xmlns=""http://www.w3.org/1999/xhtml"" xmlns:xfa=""http://www.xfa.org/schema/xfa-data/1.0/"" xfa:APIVersion=""Acrobat:8.0.0"" xfa:spec=""2.0.2"" ><p dir=""ltr""><span dir=""ltr"" style=""font-size:10.0pt;text-align:left;color:#000000;font-weight:normal;font-style:normal"">" & dlg.txtPopupText.Text & "</span></p></body>" '.Replace(Environment.NewLine, "&#13;")
                                                stickyPopup.Put(PdfName.RC, New PdfString(contentsRcXhtml, PdfObject.TEXT_UNICODE))
                                                'Dim contents As String = System.Text.Encoding.Unicode.GetString(System.Text.Encoding.UTF8.GetBytes(dlg.txtPopupText.Text))
                                                Dim contents As String = dlg.txtPopupText.Text & ""
                                                stickyPopup.Put(PdfName.CONTENTS, New PdfString(contents, PdfObject.TEXT_UNICODE))
                                            End If
                                            Dim m As New MemoryStream
                                            Dim stamper As PdfStamper = getStamper(reader, m)
                                            stamper.Writer.CloseStream = False
                                            stamper.Close()
                                            Session = m.ToArray
                                            A0_LoadPDF()
                                        Case Else

                                    End Select
                                Catch ex As Exception
                                    Err.Clear()
                                Finally
                                    Me.Show()
                                End Try
                                Return
                            End If
                        End If

                        Dim strDestUri As String = cLinks.LinkClickedDestinationUriString(CInt(pageIndex), e.Location) & ""
                        Dim lnk As clsLinks.Link = Nothing 'cLinks.ImageClickedLink(CInt(pageIndex), e.Location)
                        If Not String.IsNullOrEmpty(strDestUri & "") Then
                            Select Case MessageBox.Show(Me, "Open Link in new window:" & Environment.NewLine & strDestUri.ToString, "Link:", vbYesNo)
                                Case DialogResult.Yes, DialogResult.OK
                                    Process.Start(strDestUri & "")
                                Case Else
                            End Select
                            cUserRect.rect = Nothing
                            cUserRect.rectBackup = Nothing
                            cUserRect.rectOld = Nothing
                            mMove = False
                            For Each lnk In cLinks.Links.ToArray()
                                If getRectangleScreen(lnk.Link_Rect).Contains(e.Location) Then
                                    DrawImageFieldPositions()
                                End If
                            Next
                            Return
                        End If
                        lnk = cLinks.ImageClickedLink(CInt(pageIndex), e.Location)
                        Dim imageBytes() As Byte = cLinks.ImageClicked(CInt(pageIndex), e.Location)
                        If Not (imageBytes) Is Nothing Then
                            Dim dBarCodes As New dialogBarCodesZXING(Me)
                            dBarCodes.barCodeData = imageBytes
                            dBarCodes.barCodeBitmap = Bitmap.FromStream(New MemoryStream(imageBytes))
                            dBarCodes.txtBarcodeWidth.Text = dBarCodes.barCodeBitmap.Width 'lnk.Link_ImageSize_Pdf.Width 'dBarCodes.barCodeBitmap.Width
                            dBarCodes.txtBarcodeHeight.Text = dBarCodes.barCodeBitmap.Height 'lnk.Link_ImageSize_Pdf.Height 'dBarCodes.barCodeBitmap.Height
                            If dBarCodes.isValidBarCode(imageBytes) Then
                                Select Case dBarCodes.ShowDialog(Me)
                                    Case DialogResult.Yes, DialogResult.OK
                                        imageBytes = dBarCodes.barCodeData
                                        Session = clsPDFOptimization.Replace_Image_Shared(Session.ToArray(), Me.page, pdfOwnerPassword.toBytesPdfOwnerPassword, lnk.Link_RefNum, dBarCodes.barCodeBitmap, lnk.Link_ImageFormat)
                                        'jpg.Dispose()
                                        'jpg = Nothing
                                        LoadPDFReaderDoc(pdfOwnerPassword, True)
                                        refreshPDFImage()
                                        A0_LoadPDF(True, True, True, -1, True)
                                        Return
                                    Case Else
                                        Return
                                        Exit Select
                                End Select
                            End If
                            Dim frmImgRot As New frmImageRotation
                            frmImgRot.imgMaskBytes = lnk.Link_ImageMaskBytes
                            frmImgRot.LoadPictureBox(imageBytes.ToArray())
                            frmImgRot.imgFormat = lnk.Link_ImageFormat

                            Dim clsO As New clsPDFOptimization
                            clsPDFOptimization.cancelOptimize_Shared = False
                            Dim pgNumber As Integer = CInt(page)
                            clsO.LoadImageList(Me.Session, pdfOwnerPassword.toBytesPdfOwnerPassword, pgNumber)
                            Dim listImages As System.Collections.Generic.List(Of clsPDFOptimization.ImageScaleInfo) = clsO.imgList.Pages(pgNumber)
                            Dim newSize As New Size(frmImgRot.imgOriginal.Width, frmImgRot.imgOriginal.Height)
                            frmImgRot.ImageRotation_txtResizeWidth.Text = CInt(frmImgRot.imgOriginal.Width) 'lnk.Link_ImageSize_Pdf.Width 'CInt(frmImgRot.imgOriginal.Width) 'CInt(Math.Abs(lnk.Link_Rect.Width + 100))
                            frmImgRot.ImageRotation_txtResizeHeight.Text = CInt(frmImgRot.imgOriginal.Height) 'lnk.Link_ImageSize_Pdf.Height 'CInt(frmImgRot.imgOriginal.Height) 'CInt(Math.Abs(lnk.Link_Rect.Height + 100))
                            For Each img As clsPDFOptimization.ImageScaleInfo In listImages
                                If bytesMatch(img.ImageBytes, imageBytes) Then
                                    newSize = New Size(CInt(img.CtmSize.Width), CInt(img.CtmSize.Height))
                                    If frmImgRot.ImageRotation_PictureBox.Image.Width > newSize.Width And frmImgRot.ImageRotation_PictureBox.Image.Height > newSize.Height Then
                                        newSize = New Size(CInt(newSize.Width), CInt(newSize.Height))
                                        frmImgRot.ImageRotation_txtResizeWidth.Text = newSize.Width
                                        frmImgRot.ImageRotation_txtResizeHeight.Text = newSize.Height
                                    End If
                                    Exit For
                                End If
                            Next
                            frmImgRot.cancelled = True
                            frmImgRot.showImageResizeOptions = True
                            Dim rotType As System.Drawing.RotateFlipType = RotateFlipType.RotateNoneFlipNone ' frmImageRotation_DoEvents(frmImgRot, False) 'RotateFlipType.RotateNoneFlipNone
                            frmImgRot.imgFormat = lnk.Link_ImageFormat
                            Select Case frmImgRot.ShowDialog(Me)
                                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                                    If frmImgRot.cancelled Then
                                        Exit Select
                                    End If
                                Case DialogResult.Cancel
                                    If frmImgRot.deleteImage Then
                                        Session = clsPDFOptimization.RemoveImageFromPage(Me.page, Me, pdfReaderDoc, lnk.Link_RefNum, lnk.Link_RefName)
                                        LoadPDFReaderDoc(pdfOwnerPassword, True)
                                        refreshPDFImage()
                                        A0_LoadPDF(True, True, True, -1, True)
                                        Me.Show()
                                        Me.BringToFront()
                                        frmImgRot.Close()
                                        frmImgRot.Dispose()
                                        Return
                                    End If
                                    rotType = frmImgRot.rotType
                                Case Else
                                    Return
                            End Select
                            Me.Show()
                            Me.BringToFront()
                            If frmImgRot.cancelled Then
                                frmImgRot.Close()
                                frmImgRot.Dispose()
                                Return
                            End If
                            imageBytes = frmImgRot.imgBytes
                            ' REPLACE IMAGE

                            If Not imageBytes Is Nothing Then
                                If imageBytes.Length > 0 Then
                                    Dim pdfBytesTemp() As Byte = Session
                                    frmImgRot.imgFormat = lnk.Link_ImageFormat
                                    Dim imgFrmat As String = ""
                                    Select Case lnk.Link_ImageFormat.GetHashCode()
                                        Case System.Drawing.Imaging.ImageFormat.Jpeg.GetHashCode()
                                            imgFrmat = "jpg"
                                        Case System.Drawing.Imaging.ImageFormat.Bmp.GetHashCode()
                                            imgFrmat = "bmp"
                                        Case System.Drawing.Imaging.ImageFormat.Emf.GetHashCode()
                                            imgFrmat = "emf"
                                        Case System.Drawing.Imaging.ImageFormat.Gif.GetHashCode()
                                            imgFrmat = "gif"
                                        Case System.Drawing.Imaging.ImageFormat.MemoryBmp.GetHashCode()
                                            imgFrmat = "membmp"
                                        Case System.Drawing.Imaging.ImageFormat.Png.GetHashCode()
                                            imgFrmat = "png"
                                        Case System.Drawing.Imaging.ImageFormat.Tiff.GetHashCode()
                                            imgFrmat = "tiff"
                                        Case System.Drawing.Imaging.ImageFormat.Wmf.GetHashCode()
                                            imgFrmat = "wmf"
                                        Case Else


                                    End Select
                                    Session = clsPDFOptimization.Replace_Image_Shared(Session.ToArray(), Me.page, pdfOwnerPassword.toBytesPdfOwnerPassword, lnk.Link_RefNum, frmImgRot.ImageRotation_PictureBox.Image, lnk.Link_ImageFormat)
                                    'jpg.Dispose()
                                    'jpg = Nothing
                                    LoadPDFReaderDoc(pdfOwnerPassword, True)
                                    refreshPDFImage()
                                    A0_LoadPDF(True, True, True, -1, True)
                                End If
                            End If
                            frmImgRot.Close()
                            frmImgRot.Dispose()
                            If cLinks Is Nothing Then
                                cLinks = New clsLinks(pdfReaderDoc, Me)
                                cLinks.LoadLinksOnPage(pageIndex)
                            ElseIf cLinks.Links.Count <= 0 Then
                                cLinks = New clsLinks(pdfReaderDoc, Me)
                                cLinks.LoadLinksOnPage(CInt(pageIndex))
                            End If
                            Return
                        End If
                    End If
                    fldNameHighlighted = ""
                    fldNameHighlightedCopy = ""
                    PDFField_Copy.Checked = False
                    cUserRect.rect = Nothing
                    cUserRect.pauseDraw = False
                    cUserRect.rectBackup = Nothing
                    cUserRect.rectOld = Nothing
                    mMove = False
                    DrawImageFieldPositions()
                End If
            End If
        Catch exMain As Exception
            TimeStampAdd(exMain, debugMode) ' NK 2016-06-30 'NK DM
        Finally
            cUserRect.mIsClick = False
            cLinks = New clsLinks(pdfReaderDoc, Me)
        End Try
    End Sub
    Private Sub CancelToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CancelToolStripMenuItem.Click
        Try
            PDFField_Copy.Checked = False
            cUserRect.rect = Nothing
            cUserRect.rectBackup = Nothing
            cUserRect.rectOld = Nothing
            fldNameHighlighted = ""
            fldNameHighlightedCopy = ""
            pnlFields.Hide()
            refreshPDFImage()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub MassPopulateToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MassPopulateToolStripMenuItem.Click
        Try
            Me.Hide()
            frmMassPopulateAndEmail1 = New frmMerge
            frmMassPopulateAndEmail1.LoadPDF(Session, pdfOwnerPassword)
            frmMassPopulateAndEmail1.ShowDialog(Me)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            Me.Show()
            Me.BringToFront()
        End Try
    End Sub
    Public Function getMegaBytesText(ByVal differenceTemp As Double) As String
        Try
            Dim diffText As String = "bytes"
            Dim difference As Single = Math.Abs(differenceTemp) + 0
            If difference > 1024 Then
                difference = difference / 1024
                diffText = "kb"
                If difference > 1024 Then
                    difference = difference / 1024
                    diffText = "Mb"
                    If difference > 1024 Then
                        difference = difference / 1024
                        diffText = "GB"
                        If difference > 1024 Then
                            difference = difference / 1024
                            diffText = "TB"
                        End If
                    End If
                End If
            End If
            If differenceTemp < 0 Then
                difference = difference * -1
            End If
            Return CStr(Math.Round(difference, 2) & " " & diffText).ToString & ""
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            Err.Clear()
        End Try
        Return ""
    End Function
    Private Sub OptimizeImagesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OptimizeImagesToolStripMenuItem.Click
        Dim frmDialogImageOptimization As dialogImageOptimization = New dialogImageOptimization(Me)
        Try
            Select Case frmDialogImageOptimization.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    Return
                Case Else
                    Return
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not frmDialogImageOptimization Is Nothing Then
                If frmDialogImageOptimization.Visible Then frmDialogImageOptimization.Visible = False
                frmDialogImageOptimization.Dispose()
                frmDialogImageOptimization = Nothing
            End If
        End Try
    End Sub
    Private Sub AppendPagesFromDirectoryToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AppendPagesFromDirectoryToolStripMenuItem.Click
        Try
            StatusToolStrip = "Status: Importing images."
            Dim d As New FolderSelect.FolderSelectDialog()
            If String.IsNullOrEmpty(fpath & "") Then d.InitialDirectory = ApplicationDataFolder(False, "") Else d.InitialDirectory = Path.GetDirectoryName(fpath)
            d.Title = "Select Directory:"
            Dim errStr As String = ""
            StatusToolStrip = "Status: Importing images.."
            Select Case d.ShowDialog(Me.Handle)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    Me.Show()
                    Dim dir As String = d.FileName & ""
                    If Not String.IsNullOrEmpty(dir & "") Then
                        If Directory.Exists(dir & "") Then
                            Dim files() As String = Directory.GetFiles(dir & "")
                            If files.Count > 0 Then
                                Dim ext As New List(Of String)
                                ext.AddRange(New String() {".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff", ".tif"})
                                ext.AddRange(New String() {"jpg", "jpeg", "png", "gif", "bmp", "tiff", "tif"})
                                StatusToolStrip = "Status: Importing images..."
                                Dim fcntr As Integer = files.Length
                                Dim blnDontAskAgain As Boolean = False
                                For Each f As String In files.ToArray
                                    Try
                                        fcntr -= 1
                                        If ext.Contains(CStr(Path.GetExtension(f) & "").ToString.TrimStart("."c) & "") Then
                                            If blnDontAskAgain Then
                                                ImportImage(f, False)
                                            Else
                                                Dim msg As New dialogMultiChoice(Me)
                                                Select Case msg.ShowDialog("Import this file?" & Environment.NewLine & "File: " & f.ToString & Environment.NewLine & "Files remaining: " & fcntr.ToString() & "", 0, "Import File:")
                                                    Case MsgBoxResult.Yes
                                                        ImportImage(f)
                                                        blnDontAskAgain = False
                                                    Case MsgBoxResult.No
                                                        blnDontAskAgain = False
                                                    Case MsgBoxResult.Cancel
                                                        Exit For
                                                    Case Windows.Forms.DialogResult.Abort
                                                        blnDontAskAgain = True
                                                        ImportImage(f, False)
                                                End Select
                                            End If
                                        End If
                                    Catch ex As Exception
                                        TimeStampAdd(ex, debugMode)
                                    End Try
                                Next
                                StatusToolStrip = "Status: Importing images completed successfully"
                            End If
                        End If
                    End If
                Case Else
                    Return
            End Select
        Catch ex As Exception
            StatusToolStrip = "Error: Importing Images"
            TimeStampAdd(ex, debugMode)
        Finally
            Me.Show()
        End Try
    End Sub
    Private Sub btnNav_Previous_MouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btnNav_Previous.MouseClick
    End Sub
    Private Sub btnNav_Next_MouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btnNav_Next.MouseClick
    End Sub
    Private Sub SplitIntoMultiplePDFFilesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SplitIntoMultiplePDFFilesToolStripMenuItem.Click
        Try
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Dim r As PdfReader = pdfReaderDoc.Clone
            Dim pgImported As Integer = 1
            Dim cdialog As New clsPromptDialog()
            Dim pgImportedStr As String = cdialog.ShowDialog("Select Page Range", "Select page range:", Me, "1-" & r.NumberOfPages.ToString & "")
            If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                Dim d As New FolderSelect.FolderSelectDialog()
                If String.IsNullOrEmpty(fpath & "") Then d.InitialDirectory = ApplicationDataFolder(False, "") Else d.InitialDirectory = Path.GetDirectoryName(fpath)
                d.Title = "Select Directory:"
                Dim errStr As String = ""
                Select Case d.ShowDialog(Me.Handle)
                    Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                        Dim folderPath As String = d.FileName
                        r = pdfReaderDoc.Clone
                        r.SelectPages(pgImportedStr)
                        If r.NumberOfPages > 1 Then
                            For pg As Integer = 1 To r.NumberOfPages
                                Dim pgSel As PdfReader = r.Clone
                                pgSel.SelectPages(pg.ToString)
                                Using m As New MemoryStream(getPDFBytes(pgSel))
                                    If m.Length > 0 Then
                                        If m.CanSeek Then
                                            m.Seek(0, SeekOrigin.Begin)
                                        End If
                                        File.WriteAllBytes(folderPath.ToString.TrimEnd("\"c) & "\" & pg.ToString("#000") & "-" & Path.GetFileName(fpath & ""), m.ToArray())
                                    End If
                                    m.Close()
                                    m.Dispose()
                                End Using
                            Next
                            Process.Start(folderPath)
                        End If
                    Case Else
                        Return
                End Select
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Public Sub Convert_ImportURl2ImageFile(Optional ByVal fp As String = "", Optional closeDocument As Boolean = True)
        Try
            Try
                If closeDocument Then
                    If A0_CloseDocument(False, True) = False Then
                        Return
                    End If
                    cUserRect.rect = Nothing
                    Try
                        cFDFDoc = New FDFApp.FDFDoc_Class()
                        cFDFDoc.DefaultEncoding = System.Text.Encoding.UTF8
                        cFDFApp.DefaultEncoding = System.Text.Encoding.UTF8
                    Catch ex As Exception
                        cUserRect.rect = Nothing
                    End Try
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            MenuBar_Enabled = False
            Try
                StatusToolStrip("Status: ", True) = "Loading, please wait..."
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                If Not String.IsNullOrEmpty(fp.ToString()) Then
                    fpath = fp.ToString()
                    If IsValidUrl(fpath) Then
                        GoTo GOTO_KNOWN_FILENAME
                    ElseIf FileExists(fp.ToString()) Then
                        OpenFileDialog1.FileName = fp.ToString()
                        GoTo GOTO_KNOWN_FILENAME
                    End If
                End If
                preventClickDialog = True
                Try
                    Me.Hide()
                    Dim pathTemp As String = appPath.ToString().TrimEnd("\"c) & "\resources\html2pdf.htm" ' 
                    If Clipboard.ContainsText Then
                        pathTemp = Clipboard.GetText(TextDataFormat.Text)
                    ElseIf Clipboard.GetFileDropList.Count > 0 Then
                        Try
                            Dim oDataString As String = Clipboard.GetFileDropList(0).ToString()
                            If FileExists(oDataString & "") Then
                                pathTemp = Clipboard.GetFileDropList(0).ToString()
                            End If
                        Catch ex2 As Exception
                            TimeStampAdd(ex2, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                        End Try
                    End If
                    If IsValidUrl(pathTemp) Then
                        If pathTemp.LastIndexOf("/"c) = pathTemp.LastIndexOf("//") + 1 Then
                            pathTemp = pathTemp & "/"
                        ElseIf pathTemp.Replace("//", "|").IndexOf("/"c) <= 0 Then
                            pathTemp = pathTemp & "/"
                        End If
                        pathTemp = pathTemp
                    ElseIf FileExists(pathTemp) Then
                        pathTemp = pathTemp.ToString.ToLower().Replace("file:///", "").Replace("/", "\")
                    ElseIf pathTemp.ToString.ToLower().StartsWith("file:///") Then
                        pathTemp = pathTemp.ToString.ToLower().Replace("file:///", "").Replace("/", "\")
                    End If
                    fpath = New clsPromptDialog().ShowDialogFileSelection("Open web page Url:", pathTemp, "Open File", Me, "HTM|*.htm|HTML|*.html|All Files|*.*")
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    Me.Show()
                End Try
                If Not fpath.isNullOrEmpty() Then
                    If IsValidUrl(fpath) Then
                        GoTo GOTO_KNOWN_FILENAME
                    ElseIf FileExists(fpath) Then
                        OpenFileDialog1.InitialDirectory = Path.GetDirectoryName(fpath & "")
                        OpenFileDialog1.FileName = Path.GetFileName(fpath & "")
                    End If
                Else
                    Return
                End If
                If Not fpath.isNullOrEmpty() Then
                    Dim fn As String = fpath & ""
                    fpath = fn
GOTO_KNOWN_FILENAME:
                    fn = fpath
                    Dim b() As Byte = Nothing
                    If closeDocument Then
                        _outputIndex = 0
                        mem.Clear()
                    End If
                    If IsValidUrl(fpath) Then
                        fn = appPath.ToString.TrimEnd("\"c) & "\temp\" & System.IO.Path.GetFileNameWithoutExtension((New Uri(fpath).LocalPath))
                        If fn.TrimEnd("."c) = appPath.ToString.TrimEnd("\"c) & "\temp\" Then
                            fn &= "default"
                        End If
                        Try
                            Try
                                Try
                                    fn &= ".png"
                                    'fn &= "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".png"
                                    Dim cHTML2Image As New clsHTML2Image()
                                    If fpath.LastIndexOf("/"c) = fpath.LastIndexOf("//") + 1 Then
                                        fpath = fpath & "/"
                                    ElseIf fpath.Replace("//", "|").IndexOf("/"c) <= 0 Then
                                        fpath = fpath & "/"
                                    End If
                                    Dim MinWidth As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page width?", "Page width:", Me, iTextSharp.text.PageSize.LETTER.Width, "OK")) 'iTextSharp.text.PageSize.LETTER.Width
                                    Dim MinHeight As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page height? (-1 = auto height)", "Page height:", Me, "-1", "OK")) '
                                    Dim bitmp As Bitmap = Nothing
                                    If IsNumeric(MinWidth & "") Then
                                        bitmp = cHTML2Image.GenerateScreenshot(fpath & "", CInt(MinWidth) + 0, MinHeight).Clone()
                                    Else
                                        bitmp = cHTML2Image.GenerateScreenshot(fpath & "", 720, -1).Clone()
                                    End If
                                    'Dim cOptimize As New clsPDFOptimization()
                                    'clsPDFOptimization.cancelOptimize_Shared = False
                                    'Dim imgBytes() As Byte = cOptimize.optimizeBitmap(bitmp.Clone(), 1, System.Drawing.Imaging.ImageFormat.Png, InterpolationMode.HighQualityBicubic, SmoothingMode.AntiAlias, CompositingQuality.HighQuality)
                                    'Using imgMem As New MemoryStream(imgBytes)
                                    '    If imgMem.CanSeek Then
                                    '        imgMem.Seek(0, SeekOrigin.Begin)
                                    '    End If
                                    '    bitmp = Bitmap.FromStream(imgMem)
                                    'End Using
                                    Try
                                        If FileExists(fn) Then
                                            System.IO.File.Delete(fn)
                                        End If
                                    Catch exFileExists As Exception
                                        TimeStampAdd(exFileExists, debugMode)
                                    End Try
                                    'bitmp.Save(fn, System.Drawing.Imaging.ImageFormat.Png)
                                    'Dim memStreamBitmap As New MemoryStream
                                    'bitmp.Save(memStreamBitmap, System.Drawing.Imaging.ImageFormat.Png)
                                    'bitmp.Dispose()
                                    'System.IO.File.WriteAllBytes(fn, memStreamBitmap.ToArray)
                                    ImportImage(bitmp.Clone, False, True, closeDocument)
                                    Me.Text = "PDForms.net:  " & System.IO.Path.GetFileName(fpath) & ""
                                    bitmp.Dispose()
                                    bitmp = Nothing
                                    Return
                                Catch exHTML As Exception
                                    Throw exHTML
                                End Try
                            Catch exFilename As Exception
                                Throw exFilename
                            End Try
                        Catch exDownlaod As Exception
                            MsgBox("Download failed!" & Environment.NewLine & Environment.NewLine & "Error: " & exDownlaod.Message, MsgBoxStyle.Critical + MsgBoxStyle.OkOnly + MsgBoxStyle.ApplicationModal, "Download Failed!")
                            Return
                        End Try
                    ElseIf FileExists(fn) Then
                        fn &= "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".png"
                        Dim cHTML2Image As New clsHTML2Image()
                        Dim MinWidth As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page width?", "Page width:", Me, iTextSharp.text.PageSize.LETTER.Width, "OK")) 'iTextSharp.text.PageSize.LETTER.Width
                        Dim MinHeight As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page height? (-1 = auto height)", "Page height:", Me, "-1", "OK")) '
                        Dim bitmp As Bitmap = Nothing
                        If IsNumeric(MinWidth & "") Then
                            bitmp = cHTML2Image.GenerateScreenshot(fpath & "", CInt(MinWidth) + 0, MinHeight).Clone()
                        Else
                            bitmp = cHTML2Image.GenerateScreenshot(fpath & "", 720, -1).Clone()
                        End If
                        Dim cOptimize As New clsPDFOptimization()
                        clsPDFOptimization.cancelOptimize_Shared = False
                        Dim imgBytes() As Byte = cOptimize.optimizeBitmap(bitmp.Clone(), 1, System.Drawing.Imaging.ImageFormat.Png, InterpolationMode.HighQualityBicubic, SmoothingMode.AntiAlias, CompositingQuality.HighQuality)
                        Using imgMem As New MemoryStream(imgBytes)
                            If imgMem.CanSeek Then
                                imgMem.Seek(0, SeekOrigin.Begin)
                            End If
                            bitmp = Bitmap.FromStream(imgMem)
                        End Using
                        ImportImage(bitmp.Clone, False, True, closeDocument)
                        Me.Text = "PDForms.net:  " & System.IO.Path.GetFileName(fpath) & ""
                        bitmp.Dispose()
                        bitmp = Nothing
                    ElseIf FileExists(ApplicationDataFolder(False, "images") & fn) Then
                        fn = ApplicationDataFolder(False, "images") & fn & "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".png"
                        Dim cHTML2Image As New clsHTML2Image()
                        Dim MinWidth As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page width?", "Page width:", Me, iTextSharp.text.PageSize.LETTER.Width, "OK")) 'iTextSharp.text.PageSize.LETTER.Width
                        Dim MinHeight As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page height? (-1 = auto height)", "Page height:", Me, "-1", "OK")) '
                        Dim bitmp As Bitmap = Nothing
                        If IsNumeric(MinWidth & "") Then
                            bitmp = cHTML2Image.GenerateScreenshot(fpath & "", CInt(MinWidth) + 0, MinHeight).Clone()
                        Else
                            bitmp = cHTML2Image.GenerateScreenshot(fpath & "", 720, -1).Clone()
                        End If
                        Dim cOptimize As New clsPDFOptimization()
                        clsPDFOptimization.cancelOptimize_Shared = False
                        Dim imgBytes() As Byte = cOptimize.optimizeBitmap(bitmp.Clone(), 1, System.Drawing.Imaging.ImageFormat.Png, InterpolationMode.HighQualityBicubic, SmoothingMode.AntiAlias, CompositingQuality.HighQuality)
                        Using imgMem As New MemoryStream(imgBytes)
                            If imgMem.CanSeek Then
                                imgMem.Seek(0, SeekOrigin.Begin)
                            End If
                            bitmp = Bitmap.FromStream(imgMem)
                        End Using
                        'bitmp.Save(fn, System.Drawing.Imaging.ImageFormat.Png)
                        'ImportImage(fn & "")
                        'Me.Text = "PDForms.net:  " & System.IO.Path.GetFileName(fpath) & ""
                        ImportImage(bitmp.Clone, False, True, closeDocument)
                        Me.Text = "PDForms.net:  " & System.IO.Path.GetFileName(fpath) & ""
                        bitmp.Dispose()
                        bitmp = Nothing
                    Else
                        Return
                    End If
                    fldRectangles = getFieldRectangles(True)
                    ignoreClick = True
                    If A0_LoadPDF(True, True, True) Then A0_PictureBox1.Visible = True
                    A0_PictureBox2.Visible = True
                    If fldRectangles.Count > 0 Then pnlFields.Visible = True Else pnlFields.Visible = False
                    A0_PictureBox1.Enabled = True
                    A0_PictureBox2.Enabled = True
                    pageIndex = 0
                End If
            Catch exHTML As Exception
                Throw exHTML
            End Try
            timerPreventDefaultExpires.Enabled = True
            tm = New System.Text.StringBuilder
            CheckfieldNameExits("", True)
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    If UseIntellegentCaching_Thumnails_ToolStripMenuItem.Checked Then
                        Load_Thumbnails1_Panel(False, True)
                    End If
                End If
            End If
            Try
                If Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        _cFDFDoc = cFDFDoc(True)
                    End If
                End If
            Catch exLoadFDFDoc As Exception
                TimeStampAdd(exLoadFDFDoc, debugMode) ' NK 2016-06-30 'NK DM
            End Try
            Try
                If Not fpath.isNullOrEmpty() And Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        If True = True Then 'If DoEvents_Wait(500) Then
                            Me.StatusToolStrip = "File loaded: " & (fpath & "")
                        End If
                    End If
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        Catch exMain1 As Exception
            TimeStampAdd(exMain1, debugMode) ' NK 2016-06-30 'NK DM
        Finally
            ignoreClick = False
            MenuBar_Enabled = True
            'Application.DoEvents()
        End Try
    End Sub
    Public Sub Convert_ImportURl2HTMLFile(Optional ByVal fp As String = "", Optional closeDocument As Boolean = True)
        Try
            Try
                If closeDocument Then
                    If A0_CloseDocument(False, True) = False Then
                        Return
                    End If
                    cUserRect.rect = Nothing
                    Try
                        cFDFDoc = New FDFApp.FDFDoc_Class()
                        cFDFDoc.DefaultEncoding = System.Text.Encoding.UTF8
                        cFDFApp.DefaultEncoding = System.Text.Encoding.UTF8
                    Catch ex As Exception
                        cUserRect.rect = Nothing
                    End Try
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            MenuBar_Enabled = False
            Try
                StatusToolStrip("Status: ", True) = "Loading, please wait..."
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                If Not String.IsNullOrEmpty(fp.ToString()) Then
                    fpath = fp.ToString()
                    If IsValidUrl(fpath) Then
                        GoTo GOTO_KNOWN_FILENAME
                    ElseIf FileExists(fp.ToString()) Then
                        OpenFileDialog1.FileName = fp.ToString()
                        GoTo GOTO_KNOWN_FILENAME
                    End If
                End If
                preventClickDialog = True
                Try
                    Me.Hide()
                    Dim pathTemp As String = appPath.ToString().TrimEnd("\"c) & "\resources\html2pdf.htm"
                    If Clipboard.ContainsText Then
                        pathTemp = Clipboard.GetText(TextDataFormat.Text)
                    ElseIf Clipboard.GetFileDropList.Count > 0 Then
                        Try
                            Dim oDataString As String = Clipboard.GetFileDropList(0).ToString()
                            If FileExists(oDataString & "") Then
                                pathTemp = Clipboard.GetFileDropList(0).ToString()
                            End If
                        Catch ex2 As Exception
                            TimeStampAdd(ex2, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                        End Try
                    End If
                    If IsValidUrl(pathTemp) Then
                        If pathTemp.LastIndexOf("/"c) = pathTemp.LastIndexOf("//") + 1 Then
                            pathTemp = pathTemp & "/"
                        ElseIf pathTemp.Replace("//", "|").IndexOf("/"c) <= 0 Then
                            pathTemp = pathTemp & "/"
                        End If
                        pathTemp = pathTemp
                    ElseIf FileExists(pathTemp) Then
                        pathTemp = pathTemp.ToString.ToLower().Replace("file:///", "").Replace("/", "\")
                    ElseIf pathTemp.ToString.ToLower().StartsWith("file:///") Then
                        pathTemp = pathTemp.ToString.ToLower().Replace("file:///", "").Replace("/", "\")
                    End If
                    fpath = New clsPromptDialog().ShowDialogFileSelection("Open web page Url:", pathTemp, "Open File", Me, "HTM|*.htm|HTML|*.html|All Files|*.*")
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    Me.Show()
                End Try
                If Not fpath.isNullOrEmpty() Then
                    If IsValidUrl(fpath) Then
                        GoTo GOTO_KNOWN_FILENAME
                    ElseIf FileExists(fpath) Then
                        OpenFileDialog1.InitialDirectory = Path.GetDirectoryName(fpath & "")
                        OpenFileDialog1.FileName = Path.GetFileName(fpath & "")
                    End If
                Else
                    Return
                End If
                If Not fpath.isNullOrEmpty() Then
                    Dim fn As String = fpath & ""
                    fpath = fn
GOTO_KNOWN_FILENAME:
                    fn = fpath
                    Dim b() As Byte = Nothing
                    If closeDocument Then
                        _outputIndex = 0
                        mem.Clear()
                    End If
                    If IsValidUrl(fpath) Or FileExists(fpath) Then
                        fn = appPath.ToString.TrimEnd("\"c) & "\temp\" & System.IO.Path.GetFileNameWithoutExtension((New Uri(fpath).LocalPath))

                        If fn.TrimEnd("."c) = appPath.ToString.TrimEnd("\"c) & "\temp\" Then
                            fn &= "default"
                        End If
                        Try
                            Try
                                Try
                                    fn &= ".png"
                                    'fn &= "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".png"
                                    Dim cHTML2Image As New clsHTML2Image()
                                    Dim MinWidth As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page width?", "Page width:", Me, iTextSharp.text.PageSize.LETTER.Width, "OK")) 'iTextSharp.text.PageSize.LETTER.Width
                                    Dim MinHeight As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page height? (-1 = auto height)", "Page height:", Me, "-1", "OK")) '

                                    Dim strHTML As String = ""
                                    If IsValidUrl(fpath) Then
                                        If fpath.LastIndexOf("/"c) = fpath.LastIndexOf("//") + 1 Then
                                            fpath = fpath & "/"
                                        ElseIf fpath.Replace("//", "|").IndexOf("/"c) <= 0 Then
                                            fpath = fpath & "/"
                                        End If
                                        Dim wc As New System.Net.WebClient
                                        strHTML = System.Text.Encoding.UTF8.GetString(wc.DownloadData(fpath)).Trim() 'wb.DocumentText 
                                    Else
                                        'If fpath.LastIndexOf("\"c) = fpath.LastIndexOf("\\") + 1 Then
                                        '    fpath = fpath & "\"
                                        'ElseIf fpath.Replace("\\", "|").IndexOf("\"c) <= 0 Then
                                        '    fpath = fpath & "\"
                                        'End If
                                        strHTML = System.IO.File.ReadAllText(fpath)
                                    End If

                                    If Not strHTML.ToString.ToLower.Contains("<base ") Then
                                        strHTML = strHTML.Replace("<head>", "<head><base href=""" & fpath & """/>")
                                    End If
                                    Dim matchPattern As New List(Of String)
                                    matchPattern.Add("src=""([^""]*)")
                                    matchPattern.Add("href=""([^""]*)")
                                    matchPattern.Add("src='([^']*)")
                                    matchPattern.Add("href='([^']*)")
                                    For Each mp As String In matchPattern.ToArray
                                        For Each m As System.Text.RegularExpressions.Match In System.Text.RegularExpressions.Regex.Matches(strHTML, mp)
                                            If m.Success Then
                                                If m.Groups.Count = 1 Then
                                                    Dim strSrc As String = m.Groups(0).Value
                                                    If Not IsValidUrl(strSrc) And Not FileExists(fpath) Then
                                                        strHTML = strHTML.Replace(mp.ToString.Replace("([^""]*)", strSrc), mp.ToString.Replace("([^""]*)", fpath.ToString.Substring(0, fpath.ToString.LastIndexOf("/") + 1).TrimEnd("/"c) & "/" & strSrc.TrimStart("/"c).TrimStart("\"c).Replace("\", "/")))
                                                    ElseIf Not IsValidUrl(strSrc) And Not FileExists(strSrc) And FileExists(fpath) Then
                                                        strHTML = strHTML.Replace(mp.ToString.Replace("([^""]*)", strSrc), mp.ToString.Replace("([^""]*)", fpath.ToString.Substring(0, fpath.ToString.LastIndexOf("\") + 1).TrimEnd("\"c) & "\" & strSrc.TrimStart("\"c).TrimStart("\"c).Replace("\", "\")))
                                                    End If
                                                ElseIf m.Groups.Count = 2 Then
                                                    Dim strSrc As String = m.Groups(1).Value
                                                    If Not IsValidUrl(strSrc) And Not FileExists(fpath) Then
                                                        strHTML = strHTML.Replace(mp.ToString.Replace("([^""]*)", strSrc), mp.ToString.Replace("([^""]*)", fpath.ToString.Substring(0, fpath.ToString.LastIndexOf("/") + 1).TrimEnd("/"c) & "/" & strSrc.TrimStart("/"c).TrimStart("\"c).Replace("\", "/")))
                                                    ElseIf Not IsValidUrl(strSrc) And Not FileExists(strSrc) And FileExists(fpath) Then
                                                        strHTML = strHTML.Replace(mp.ToString.Replace("([^""]*)", strSrc), mp.ToString.Replace("([^""]*)", fpath.ToString.Substring(0, fpath.ToString.LastIndexOf("\") + 1).TrimEnd("\"c) & "\" & strSrc.TrimStart("\"c).TrimStart("\"c).Replace("\", "\")))
                                                    End If
                                                End If
                                            End If
                                        Next
                                    Next
                                    Dim pdfBytes() As Byte
                                    Try
                                        Select Case MsgBox("Strip inline styles, external styles, and JavaScript?", MsgBoxStyle.YesNo + MsgBoxStyle.ApplicationModal, "Strip HTML:")
                                            Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                                strHTML = CStr(stripHtml(strHTML))
                                            Case Else

                                        End Select
                                    Catch ex As Exception
                                        Err.Clear()
                                    End Try
                                    Try
                                        pdfBytes = clsHTML2PDFiText.HTML2PDFCss(strHTML, MinWidth, MinHeight, True, True, fpath.ToString.Replace("\", "/").Substring(0, fpath.ToString.Replace("\", "/").LastIndexOf("/") + 1), True)
                                    Catch ex1 As Exception
                                        Err.Clear()
                                        Try
                                            pdfBytes = clsHTML2PDFiText.HTML2PDFCss(strHTML, MinWidth, MinHeight, True, True, fpath.ToString.Replace("\", "/").Substring(0, fpath.ToString.Replace("\", "/").LastIndexOf("/") + 1), False)
                                        Catch ex2 As Exception
                                            Throw ex2
                                        End Try
                                    End Try
                                    If Not Session Is Nothing Then
                                        If Session.Length > 0 Then
                                            cFDFDoc = New FDFApp.FDFDoc_Class
                                            pdfBytes = PDFConcatenateForms2Buf(New Byte()() {Session, pdfBytes}, New String() {pdfOwnerPassword, ""})
                                        Else
                                            Session("output") = pdfBytes
                                        End If
                                    Else
                                        Session("output") = pdfBytes
                                    End If
                                    fp = ApplicationDataFolder(False, "temp") & "" & Path.GetFileNameWithoutExtension(fn & "") & ".pdf"
                                    File.WriteAllBytes(fp, pdfBytes)
                                    addOpenHistoryListItem(fpath)
                                    OpenFile(fp, False, False)
                                    Me.Text = "PDForms.net:  " & System.IO.Path.GetFileName(fpath) & ""
                                    'COMMENT END
                                    Return
                                Catch exHTML As Exception
                                    Throw exHTML
                                End Try
                            Catch exFilename As Exception
                                Throw exFilename
                            End Try
                        Catch exDownlaod As Exception
                            MsgBox("Download failed!" & Environment.NewLine & Environment.NewLine & "Error: " & exDownlaod.Message, MsgBoxStyle.Critical + MsgBoxStyle.OkOnly + MsgBoxStyle.ApplicationModal, "Download Failed!")
                            Return
                        End Try
                    ElseIf FileExists(fn) Then
                        fn &= "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".png"
                        Dim cHTML2Image As New clsHTML2Image()
                        Dim MinWidth As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page width?", "Page width:", Me, iTextSharp.text.PageSize.LETTER.Width, "OK")) 'iTextSharp.text.PageSize.LETTER.Width
                        Dim MinHeight As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page height? (-1 = auto height)", "Page height:", Me, "-1", "OK")) '
                        Dim bitmp As Bitmap = Nothing
                        If IsNumeric(MinWidth & "") Then
                            bitmp = cHTML2Image.GenerateScreenshot(fpath & "", CInt(MinWidth) + 0, MinHeight).Clone()
                        Else
                            bitmp = cHTML2Image.GenerateScreenshot(fpath & "", 720, -1).Clone()
                        End If
                        Dim cOptimize As New clsPDFOptimization()
                        clsPDFOptimization.cancelOptimize_Shared = False
                        Dim imgBytes() As Byte = cOptimize.optimizeBitmap(bitmp.Clone(), 1, System.Drawing.Imaging.ImageFormat.Png, InterpolationMode.HighQualityBicubic, SmoothingMode.AntiAlias, CompositingQuality.HighQuality)
                        Using imgMem As New MemoryStream(imgBytes)
                            If imgMem.CanSeek Then
                                imgMem.Seek(0, SeekOrigin.Begin)
                            End If
                            bitmp = Bitmap.FromStream(imgMem)
                        End Using
                        'bitmp.Save(fn, System.Drawing.Imaging.ImageFormat.Png)
                        'ImportImage(fn & "")
                        ImportImage(bitmp.Clone, False, True, closeDocument)
                        Me.Text = "PDForms.net:  " & System.IO.Path.GetFileName(fpath) & ""
                        bitmp.Dispose()
                        bitmp = Nothing
                        Me.Text = "PDForms.net:  " & System.IO.Path.GetFileName(fpath) & ""
                    Else
                        Return
                    End If
                    'Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                    fldRectangles = getFieldRectangles(True)
                    ignoreClick = True
                    If A0_LoadPDF(True, True, True) Then A0_PictureBox1.Visible = True
                    A0_PictureBox2.Visible = True
                    If fldRectangles.Count > 0 Then pnlFields.Visible = True Else pnlFields.Visible = False
                    A0_PictureBox1.Enabled = True
                    A0_PictureBox2.Enabled = True
                    pageIndex = 0
                End If
            Catch exHTML As Exception
                Throw exHTML
            End Try
            timerPreventDefaultExpires.Enabled = True
            tm = New System.Text.StringBuilder
            CheckfieldNameExits("", True)
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    If UseIntellegentCaching_Thumnails_ToolStripMenuItem.Checked Then
                        Load_Thumbnails1_Panel(False, True)
                    End If
                End If
            End If
            Try
                If Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        _cFDFDoc = cFDFDoc(True)
                    End If
                End If
            Catch exLoadFDFDoc As Exception
                TimeStampAdd(exLoadFDFDoc, debugMode) ' NK 2016-06-30 'NK DM
            End Try
            Try
                If Not fpath.isNullOrEmpty() And Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        If True = True Then 'If DoEvents_Wait(500) Then
                            Me.StatusToolStrip = "File loaded: " & (fpath & "")
                        End If
                    End If
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        Catch exMain1 As Exception
            TimeStampAdd(exMain1, debugMode) ' NK 2016-06-30 'NK DM
        Finally
            ignoreClick = False
            MenuBar_Enabled = True
            'Application.DoEvents()
        End Try
    End Sub
    Public Sub ConvertHTMLFileFromFile(ByVal fp As String)
        Try
            Try
                If fp.isNullOrEmpty() Then
                    Return
                End If
                'Convert_ImportURl2HTMLFile(fp)
                'return
                If A0_CloseDocument() = False Then
                    Return
                End If
                cUserRect.rect = Nothing
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            MenuBar_Enabled = False
            Try
                StatusToolStrip("Status: ", True) = "Loading, please wait..."
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                If Not String.IsNullOrEmpty(fp.ToString()) Then
                    fpath = fp.ToString()
                    If IsValidUrl(fpath) Or FileExists(fpath) Then
                        addOpenHistoryListItem(fpath)
                        'ConvertHTMLFileFromUrl(fpath)
                        Dim dMultipleChoice As New dialogMultiChoice(Me)
                        dMultipleChoice.lblMessage.Text = "Import HTML page as..."
                        Dim clsBut As New List(Of dialogMultiChoice.clsButton)
                        Dim btn As dialogMultiChoice.clsButton
                        btn = New dialogMultiChoice.clsButton("as HTML", True, DialogResult.OK)
                        clsBut.Add(btn)
                        btn = New dialogMultiChoice.clsButton("as Image", True, DialogResult.Yes)
                        clsBut.Add(btn)
                        btn = New dialogMultiChoice.clsButton("", False, DialogResult.No)
                        clsBut.Add(btn)
                        btn = New dialogMultiChoice.clsButton("Cancel", True, DialogResult.Cancel)
                        clsBut.Add(btn)
                        Select Case dMultipleChoice.ShowDialog(Me, "Import HTML page as:", clsBut.ToArray())
                            Case DialogResult.OK
                                Convert_ImportURl2HTMLFile(fpath & "")
                            Case DialogResult.Yes
                                Convert_ImportURl2ImageFile(fpath & "")
                            Case Else
                                Exit Select
                        End Select
                    ElseIf FileExists(fp.ToString()) Then
                        OpenFileDialog1.FileName = fp.ToString()
                        GoTo GOTO_KNOWN_FILENAME
                    End If
                Else
                    Return
                End If
                preventClickDialog = True
                If Not fpath.isNullOrEmpty() Then
                    Dim fn As String = fpath & ""
                    fpath = fn
GOTO_KNOWN_FILENAME:
                    fn = fpath
                    Dim b() As Byte = Nothing
                    _outputIndex = 0
                    mem.Clear()
                    If File.Exists(fpath.ToString.Replace("file://", "")) Then
                        fn = appPath.ToString.TrimEnd("\"c) & "\temp\" & System.IO.Path.GetFileNameWithoutExtension((New Uri(fpath).LocalPath))
                        If fn.TrimEnd("."c) = appPath.ToString.TrimEnd("\"c) & "\temp\" Then
                            fn &= "default"
                        End If
                        Try
                            Try
                                Try
                                    fn &= ".png"
                                    Dim MinWidth As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page width?", "Page width:", Me, iTextSharp.text.PageSize.LETTER.Width, "OK")) 'iTextSharp.text.PageSize.LETTER.Width
                                    Dim MinHeight As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page height? (-1 = auto height)", "Page height:", Me, "-1", "OK")) '
                                    Dim strHTML As String = System.Text.Encoding.UTF8.GetString(File.ReadAllBytes(fpath)).Trim() 'wb.DocumentText 
                                    If Not strHTML.ToString.ToLower.Contains("<base ") Then
                                        strHTML = strHTML.Replace("<head>", "<head><base href=""" & "file://" & fpath & """/>")
                                    End If
                                    Do While strHTML.Contains("src=""/")
                                        strHTML = strHTML.Replace("src=""/", "src=""" & "file://" & fpath.ToString.Substring(0, fpath.ToString.LastIndexOf("/") + 1))
                                    Loop
                                    Do While strHTML.Contains("href=""/")
                                        strHTML = strHTML.Replace("href=""/", "href=""" & "file://" & fpath.ToString.Substring(0, fpath.ToString.LastIndexOf("/") + 1))
                                    Loop
                                    Dim matchPattern As New List(Of String)
                                    matchPattern.Add("src=""([^""]*)")
                                    matchPattern.Add("href=""([^""]*)")
                                    For Each mp As String In matchPattern.ToArray
                                        For Each m As System.Text.RegularExpressions.Match In System.Text.RegularExpressions.Regex.Matches(strHTML, mp)
                                            If m.Success Then
                                                If m.Groups.Count = 1 Then
                                                    Dim strSrc As String = m.Groups(0).Value
                                                    If Not strSrc.ToLower().StartsWith("file://") Then
                                                        If Not IsValidUrl(strSrc) Then
                                                            If Not System.IO.File.Exists(strSrc) Then
                                                                If System.IO.File.Exists(fpath.ToString.Replace("\", "/").Substring(0, fpath.ToString.Replace("\", "/").LastIndexOf("/") + 1) & strSrc.TrimStart("/"c).TrimStart("\"c)) Then
                                                                    strHTML = strHTML.Replace(mp.Replace("([^""]*)", strSrc), mp.Replace("([^""]*)", "file://" & fpath.ToString.Replace("\", "/").Substring(0, fpath.ToString.Replace("\", "/").LastIndexOf("/") + 1) & strSrc.TrimStart("/"c).TrimStart("\"c).Replace("\", "/")))
                                                                End If
                                                            Else
                                                                strHTML = strHTML.Replace(mp.Replace("([^""]*)", strSrc), mp.Replace("([^""]*)", "file://" & fpath.ToString.Replace("\", "/").Substring(0, fpath.ToString.Replace("\", "/").LastIndexOf("/") + 1) & strSrc.TrimStart("/"c).TrimStart("\"c).Replace("\", "/")))
                                                            End If
                                                        End If
                                                    End If
                                                ElseIf m.Groups.Count = 2 Then
                                                    Dim strSrc As String = m.Groups(1).Value
                                                    If Not strSrc.ToLower().StartsWith("file://") Then
                                                        If Not IsValidUrl(strSrc) Then
                                                            If Not System.IO.File.Exists(strSrc) Then
                                                                If System.IO.File.Exists(fpath.ToString.Replace("\", "/").Substring(0, fpath.ToString.Replace("\", "/").LastIndexOf("/") + 1) & strSrc.TrimStart("/"c).TrimStart("\"c)) Then
                                                                    strHTML = strHTML.Replace(mp.Replace("([^""]*)", strSrc), mp.Replace("([^""]*)", "file://" & fpath.ToString.Replace("\", "/").Substring(0, fpath.ToString.Replace("\", "/").LastIndexOf("/") + 1) & strSrc.TrimStart("/"c).TrimStart("\"c).Replace("\", "/")))
                                                                End If
                                                            Else
                                                                strHTML = strHTML.Replace(mp.Replace("([^""]*)", strSrc), mp.Replace("([^""]*)", "file://" & fpath.ToString.Replace("\", "/").Substring(0, fpath.ToString.Replace("\", "/").LastIndexOf("/") + 1) & strSrc.TrimStart("/"c).TrimStart("\"c).Replace("\", "/")))
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        Next
                                    Next
                                    Dim pdfBytes() As Byte '= clsHTML2PDFiText.HTML2PDFCss(strHTML, MinWidth, MinHeight, False, True, fpath.ToString.Replace("/", "\").Substring(0, fpath.ToString.Replace("/", "\").LastIndexOf("\") + 1))
                                    Try
                                        pdfBytes = clsHTML2PDFiText.HTML2PDFCss(strHTML, MinWidth, MinHeight, True, True, fpath.ToString.Replace("\", "/").Substring(0, fpath.ToString.Replace("\", "/").LastIndexOf("/") + 1), True)
                                    Catch ex1 As Exception
                                        Err.Clear()
                                        Try
                                            pdfBytes = clsHTML2PDFiText.HTML2PDFCss(strHTML, MinWidth, MinHeight, True, True, fpath.ToString.Replace("\", "/").Substring(0, fpath.ToString.Replace("\", "/").LastIndexOf("/") + 1), False)
                                        Catch ex2 As Exception
                                            Throw ex2
                                        End Try
                                    End Try
                                    fp = ApplicationDataFolder(False, "temp") & "" & Path.GetFileNameWithoutExtension(fn & "") & ".pdf"
                                    File.WriteAllBytes(fp, pdfBytes)
                                    addOpenHistoryListItem(fpath)
                                    OpenFile(fp, False, False)
                                    Me.Text = "PDForms.net:  " & System.IO.Path.GetFileName(fpath) & ""
                                    Return
                                Catch exHTML As Exception
                                    Throw exHTML
                                End Try
                            Catch exFilename As Exception
                                Throw exFilename
                            End Try
                        Catch exDownlaod As Exception
                            MsgBox("Download failed!" & Environment.NewLine & Environment.NewLine & "Error: " & exDownlaod.Message, MsgBoxStyle.Critical + MsgBoxStyle.OkOnly + MsgBoxStyle.ApplicationModal, "Download Failed!")
                            Return
                        End Try
                    Else
                        Return
                    End If
                    'Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                    fldRectangles = getFieldRectangles(True)
                    ignoreClick = True
                    If A0_LoadPDF(True, True, True) Then A0_PictureBox1.Visible = True
                    A0_PictureBox2.Visible = True
                    If fldRectangles.Count > 0 Then pnlFields.Visible = True Else pnlFields.Visible = False
                    A0_PictureBox1.Enabled = True
                    A0_PictureBox2.Enabled = True
                    pageIndex = 0
                End If
            Catch exHTML As Exception
                Throw exHTML
            End Try
            timerPreventDefaultExpires.Enabled = True
            tm = New System.Text.StringBuilder
            CheckfieldNameExits("", True)
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    If UseIntellegentCaching_Thumnails_ToolStripMenuItem.Checked Then
                        Load_Thumbnails1_Panel(False, True)
                    End If
                End If
            End If
            Try
                If Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        _cFDFDoc = cFDFDoc(True)
                    End If
                End If
            Catch exLoadFDFDoc As Exception
                TimeStampAdd(exLoadFDFDoc, debugMode) ' NK 2016-06-30 'NK DM
            End Try
            Try
                If Not fpath.isNullOrEmpty() And Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        If True = True Then 'If DoEvents_Wait(500) Then
                            Me.StatusToolStrip = "File loaded: " & (fpath & "")
                        End If
                    End If
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        Catch exMain1 As Exception
            TimeStampAdd(exMain1, debugMode) ' NK 2016-06-30 'NK DM
        Finally
            ignoreClick = False
            MenuBar_Enabled = True
            'Application.DoEvents()
        End Try
    End Sub
    Public Sub AppendPageFromWeb(Optional ByVal fp As String = "")
        Try
            Try
                cUserRect.rect = Nothing
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                StatusToolStrip("Status: ", True) = "Importing,  please wait.."
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
            Try
                If Not String.IsNullOrEmpty(fp.ToString()) Then
                    fp = fp.ToString()
                    If IsValidUrl(fp) Then
                        GoTo GOTO_KNOWN_FILENAME
                    ElseIf FileExists(fp.ToString()) Then
                        OpenFileDialog1.FileName = fp.ToString()
                        GoTo GOTO_KNOWN_FILENAME
                    End If
                End If
                preventClickDialog = True
                Try
                    Me.Hide()
                    Dim pathTemp As String = "http://www."
                    fp = New clsPromptDialog().ShowDialog("Open web page Url:", "Open File", Me, pathTemp)
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    Me.Show()
                End Try
                If Not fp.isNullOrEmpty() Then
                    If IsValidUrl(fp) Then
                        GoTo GOTO_KNOWN_FILENAME
                    ElseIf FileExists(fp) Then
                        OpenFileDialog1.InitialDirectory = Path.GetDirectoryName(fp & "")
                        OpenFileDialog1.FileName = Path.GetFileName(fp & "")
                    End If
                Else
                    Return
                End If
                If Not fp.isNullOrEmpty() Then
                    Dim fn As String = fp & ""
GOTO_KNOWN_FILENAME:
                    fn = fp
                    Dim b() As Byte = Nothing
                    If IsValidUrl(fp) Then
                        fn = appPath.ToString.TrimEnd("\"c) & "\temp\" & System.IO.Path.GetFileNameWithoutExtension((New Uri(fpath).LocalPath))
                        If fn.TrimEnd(".") = appPath.ToString.TrimEnd("\"c) & "\temp\" Then
                            fn &= "default"
                        End If
                        Try
                            Try
                                Try
                                    fn &= "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".png"
                                    Dim cHTML2Image As New clsHTML2Image()
                                    'Dim MinWidth As String = New clsPromptDialog().ShowDialog("Desired page width? (-1 = auto)", "Page width:", Me, "-1", "OK")
                                    Dim MinWidth As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page width?", "Page width:", Me, iTextSharp.text.PageSize.LETTER.Width, "OK")) 'iTextSharp.text.PageSize.LETTER.Width
                                    Dim MinHeight As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page height? (-1 = auto height)", "Page height:", Me, "-1", "OK")) '
                                    Dim bitmp As Bitmap = Nothing
                                    If IsNumeric(MinWidth & "") Then
                                        bitmp = cHTML2Image.GenerateScreenshot(fp & "", CInt(MinWidth) + 0, MinHeight).Clone()
                                    Else
                                        bitmp = cHTML2Image.GenerateScreenshot(fp & "", 720, -1).Clone()
                                    End If
                                    Dim cOptimize As New clsPDFOptimization()
                                    clsPDFOptimization.cancelOptimize_Shared = False
                                    Dim imgBytes() As Byte = cOptimize.optimizeBitmap(bitmp.Clone(), 1, System.Drawing.Imaging.ImageFormat.Png, InterpolationMode.HighQualityBicubic, SmoothingMode.AntiAlias, CompositingQuality.HighQuality)
                                    Using imgMem As New MemoryStream(imgBytes)
                                        If imgMem.CanSeek Then
                                            imgMem.Seek(0, SeekOrigin.Begin)
                                        End If
                                        bitmp = Bitmap.FromStream(imgMem)
                                    End Using
                                    'bitmp.Save(fn, System.Drawing.Imaging.ImageFormat.Png)
                                    Dim bytes() As Byte = Session
                                    'ImportImage(fn & "")
                                    ImportImage(bitmp.Clone, False, True, False)
                                    Me.Text = "PDForms.net:  " & System.IO.Path.GetFileName(fpath) & ""
                                    bitmp.Dispose()
                                    bitmp = Nothing
                                    Return
                                Catch exHTML As Exception
                                    Throw exHTML
                                End Try
                            Catch exFilename As Exception
                                Throw exFilename
                            End Try
                        Catch exDownlaod As Exception
                            MsgBox("Download failed!" & Environment.NewLine & Environment.NewLine & "Error: " & exDownlaod.Message, MsgBoxStyle.Critical + MsgBoxStyle.OkOnly + MsgBoxStyle.ApplicationModal, "Download Failed!")
                            Return
                        End Try
                    ElseIf FileExists(fn) Then
                        fn &= "-" & Guid.NewGuid().ToString.Replace("-", "").Substring(0, 10).ToString() & ".png"
                        Dim cHTML2Image As New clsHTML2Image()
                        Dim MinWidth As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page width?", "Page width:", Me, iTextSharp.text.PageSize.LETTER.Width, "OK")) 'iTextSharp.text.PageSize.LETTER.Width
                        Dim MinHeight As Integer = CInt(New clsPromptDialog().ShowDialog("Desired page height? (-1 = auto height)", "Page height:", Me, "-1", "OK")) '
                        Dim bitmp As Bitmap = Nothing
                        If IsNumeric(MinWidth & "") Then
                            bitmp = cHTML2Image.GenerateScreenshot(fp & "", CInt(MinWidth) + 0, MinHeight).Clone()
                        Else
                            bitmp = cHTML2Image.GenerateScreenshot(fp & "", -1, 720).Clone()
                        End If
                        Dim cOptimize As New clsPDFOptimization()
                        clsPDFOptimization.cancelOptimize_Shared = False
                        Dim imgBytes() As Byte = cOptimize.optimizeBitmap(bitmp.Clone(), 1, System.Drawing.Imaging.ImageFormat.Png, InterpolationMode.HighQualityBicubic, SmoothingMode.HighQuality, CompositingQuality.HighQuality)
                        Using imgMem As New MemoryStream(imgBytes)
                            If imgMem.CanSeek Then
                                imgMem.Seek(0, SeekOrigin.Begin)
                            End If
                            bitmp = Bitmap.FromStream(imgMem)
                        End Using
                        'bitmp.Save(fn, System.Drawing.Imaging.ImageFormat.Png)
                        'ImportImage(fn & "")
                        ImportImage(bitmp.Clone, False, True, False)
                        Me.Text = "PDForms.net:  " & System.IO.Path.GetFileName(fpath) & ""
                        bitmp.Dispose()
                        bitmp = Nothing
                    Else
                        Return
                    End If
                End If
            Catch exHTML As Exception
                Throw exHTML
            End Try
        Catch exMain1 As Exception
            TimeStampAdd(exMain1, debugMode) ' NK 2016-06-30 'NK DM
        Finally
            ignoreClick = False
            MenuBar_Enabled = True
            'Application.DoEvents()
            Me.StatusToolStrip = "Status: Imported web page complete."
        End Try
    End Sub
    Private Sub FromWebPageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FromWebPageToolStripMenuItem.Click
        Try
            'ConvertHTMLFileFromUrl()
            'Convert_ImportURl2ImageFile("", False)
            Dim dMultipleChoice As New dialogMultiChoice(Me)
            dMultipleChoice.lblMessage.Text = "Import HTML page as..."
            Dim clsBut As New List(Of dialogMultiChoice.clsButton)
            Dim btn As dialogMultiChoice.clsButton
            btn = New dialogMultiChoice.clsButton("as HTML", True, DialogResult.OK)
            clsBut.Add(btn)
            btn = New dialogMultiChoice.clsButton("as Image", True, DialogResult.Yes)
            clsBut.Add(btn)
            btn = New dialogMultiChoice.clsButton("", False, DialogResult.No)
            clsBut.Add(btn)
            btn = New dialogMultiChoice.clsButton("Cancel", True, DialogResult.Cancel)
            clsBut.Add(btn)
            Select Case dMultipleChoice.ShowDialog(Me, "Import HTML page as:", clsBut.ToArray())
                Case DialogResult.OK
                    Convert_ImportURl2HTMLFile("", True)
                Case DialogResult.Yes
                    Convert_ImportURl2ImageFile("", True)
                Case Else
                    Exit Select
            End Select
            'Convert_ImportURl2HTMLFile(fpath & "")
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub AppendPageFromWebToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AppendPageFromWebToolStripMenuItem.Click
        Try
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    'AppendPageFromWeb()
                    Try
                        'ConvertHTMLFileFromUrl()
                        'Convert_ImportURl2ImageFile("", False)
                        Dim dMultipleChoice As New dialogMultiChoice(Me)
                        dMultipleChoice.lblMessage.Text = "Import HTML page as..."
                        Dim clsBut As New List(Of dialogMultiChoice.clsButton)
                        Dim btn As dialogMultiChoice.clsButton
                        btn = New dialogMultiChoice.clsButton("as HTML", True, DialogResult.OK)
                        clsBut.Add(btn)
                        btn = New dialogMultiChoice.clsButton("as Image", True, DialogResult.Yes)
                        clsBut.Add(btn)
                        btn = New dialogMultiChoice.clsButton("", False, DialogResult.No)
                        clsBut.Add(btn)
                        btn = New dialogMultiChoice.clsButton("Cancel", True, DialogResult.Cancel)
                        clsBut.Add(btn)
                        Select Case dMultipleChoice.ShowDialog(Me, "Import HTML page as:", clsBut.ToArray())
                            Case DialogResult.OK
                                Convert_ImportURl2HTMLFile("", False)
                            Case DialogResult.Yes
                                Convert_ImportURl2ImageFile("", False)
                            Case Else
                                Exit Select
                        End Select
                        'Convert_ImportURl2HTMLFile(fpath & "")
                    Catch ex As Exception
                        Throw ex
                    End Try
                End If
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Public Class clsCopy_Appearance_frmMain
        Public IsCopied As Boolean = False
        Public PDFField_TextColorPicker_BgColor As System.Drawing.Color = Color.Black
        Public PDFField_BorderColorPicker_BgColor As System.Drawing.Color = Color.Transparent
        Public PDFField_BackgroundColorPicker_BgColor As System.Drawing.Color = Color.Transparent
        Public PDFField_BorderWidth_SelectedIndex As Integer = -1
        Public PDFField_BorderStyle_SelectedIndex As Integer = -1
        Public PDFField_FontSize_SelectedIndex As Integer = -1
        Public PDFField_TextAlign_SelectedIndex As Integer = -1
        Public PDFField_FontFamily_SelectedItem As String = ""
        Public Sub New(ByRef frm As frmMain)
            Try
                Clear()
                Copy(frm)
            Catch ex As Exception
                If frm.debugMode Then Throw ex Else Err.Clear()
            End Try
        End Sub
        Public Sub New()
            Try
                Clear()
            Catch ex3 As Exception
                Err.Clear()
            End Try
        End Sub
        Public Sub Copy(ByRef frm As frmMain)
            Try
                PDFField_TextColorPicker_BgColor = frm.PDFField_TextColorPicker.BackColor
                PDFField_BorderColorPicker_BgColor = frm.PDFField_BorderColorPicker.BackColor
                PDFField_BackgroundColorPicker_BgColor = frm.PDFField_BackgroundColorPicker.BackColor
                PDFField_BorderWidth_SelectedIndex = frm.PDFField_BorderWidth.SelectedIndex
                PDFField_BorderStyle_SelectedIndex = frm.PDFField_BorderStyle.SelectedIndex
                PDFField_FontSize_SelectedIndex = frm.PDFField_FontSize.SelectedIndex
                PDFField_TextAlign_SelectedIndex = frm.PDFField_TextAlign.SelectedIndex
                PDFField_FontFamily_SelectedItem = frm.PDFField_FontFamily.SelectedItem
            Catch ex As Exception
                If frm.debugMode Then Throw ex Else Err.Clear()
            Finally
                IsCopied = True
            End Try
        End Sub
        Public Sub Paste(ByRef frm As frmMain)
            Try
                If IsCopied Then
                    frm.PDFField_TextColorPicker.BackColor = PDFField_TextColorPicker_BgColor
                    frm.PDFField_BorderColorPicker.BackColor = PDFField_BorderColorPicker_BgColor
                    frm.PDFField_BackgroundColorPicker.BackColor = PDFField_BackgroundColorPicker_BgColor
                    frm.PDFField_BorderWidth.SelectedIndex = PDFField_BorderWidth_SelectedIndex
                    frm.PDFField_BorderStyle.SelectedIndex = PDFField_BorderStyle_SelectedIndex
                    frm.PDFField_FontSize.SelectedIndex = PDFField_FontSize_SelectedIndex
                    frm.PDFField_TextAlign.SelectedIndex = PDFField_TextAlign_SelectedIndex
                    If frm.PDFField_FontFamily.Items.Contains(PDFField_FontFamily_SelectedItem) Then
                        frm.PDFField_FontFamily.SelectedItem = PDFField_FontFamily_SelectedItem
                    Else
                        frm.PDFField_FontFamily.Items.Add(PDFField_FontFamily_SelectedItem)
                        frm.PDFField_FontFamily.SelectedItem = PDFField_FontFamily_SelectedItem
                    End If
                End If
            Catch ex As Exception
                If frm.debugMode Then Throw ex Else Err.Clear()
            End Try
        End Sub
        Public Sub Clear()
            Try
                PDFField_TextColorPicker_BgColor = Color.Black
                PDFField_BorderColorPicker_BgColor = Color.Transparent
                PDFField_BackgroundColorPicker_BgColor = Color.Transparent
                PDFField_BorderWidth_SelectedIndex = -1
                PDFField_BorderStyle_SelectedIndex = -1
                PDFField_FontSize_SelectedIndex = -1
                PDFField_TextAlign_SelectedIndex = -1
                PDFField_FontFamily_SelectedItem = ""
            Catch ex As Exception
                Err.Clear()
            Finally
                IsCopied = False
            End Try
        End Sub
    End Class
    Private Sub CopyAppearanceToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CopyAppearanceToolStripMenuItem.Click
        Try
            If Not String.IsNullOrEmpty(fldNameHighlighted & "") Then
                PDFField_CopyAppearance.Checked = True
                _copy_Appearance_frmMain = New clsCopy_Appearance_frmMain(Me)
                _copy_Appearance_frmMain.Copy(Me)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub CancelCopyAppearanceToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CancelCopyAppearanceToolStripMenuItem.Click
        Try
            PDFField_CopyAppearance.Checked = False
            _copy_Appearance_frmMain.Clear()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PasteAppearanceToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PasteAppearanceToolStripMenuItem.Click
        Try
            If _copy_Appearance_frmMain.IsCopied Then
                _copy_Appearance_frmMain.Paste(Me)
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Declare Function GetShortPathName Lib "kernel32.dll" Alias "GetShortPathNameA" _
     (ByVal lpszLongPath As String, ByVal lpszShortPath As String, ByVal cchBuffer _
     As Integer) As Integer
    Private Function ShortPath(ByVal LongPath As String) As String
        Dim shrtPath As String = Space(255)
        GetShortPathName(LongPath, shrtPath, shrtPath.Length)
        Return shrtPath.Substring(0, InStr(shrtPath, Chr(0)) - 1)
    End Function
    Private Sub PrintDocumentToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintDocumentToolStripMenuItem1.Click
        Try
            Dim printDialog1 As New PrintDialog
            Dim readerTemp As PdfReader = pdfReaderDoc.Clone
            printDialog1.AllowSomePages = False
            printDialog1.AllowCurrentPage = False
            Select Case printDialog1.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    If Not pdfReaderDoc Is Nothing Then
                        If pdfReaderDoc.NumberOfPages > 0 Then
                            StatusToolStrip = "Printing: please wait.."
                            Dim fnTempPrint As String = ApplicationDataFolder(False, "temp") & "print-" & Path.GetFileName(fpath & "").ToString().Replace(" ", "-").Replace("""", "").Replace("'"c, "") & ""
                            LoadPDFReaderDoc(pdfOwnerPassword, True)
                            Dim r As PdfReader = pdfReaderDoc.Clone
                            Dim bPDF() As Byte = getPDFBytes(r)
                            Dim exitCode As Integer = -1
                            Try
                                Me.SendToBack()
                                Dim PrinterName1 As String = printDialog1.PrinterSettings.PrinterName.ToString()
                                Dim numCopies As Integer = printDialog1.PrinterSettings.Copies
                                For copy As Integer = 1 To numCopies
                                    Dim i As Integer = -1
                                    Dim numPages As Integer = r.NumberOfPages
                                    Dim start As Integer = 1
                                    printDocIndex = 0
                                    printDocImageList = New List(Of System.Drawing.Image)
                                    printDocHasMorePages = True
                                    printDoc = New Printing.PrintDocument
                                    printDoc.PrinterSettings.PrinterName = PrinterName1
                                    printDoc.PrinterSettings.Collate = printDialog1.PrinterSettings.Collate
                                    printDoc.PrinterSettings.Copies = printDialog1.PrinterSettings.Copies
                                    AddHandler printDoc.PrintPage, AddressOf PD_PrintPage
                                    printTotalPages = numPages
                                    If printDoc.PrinterSettings.Collate Then
                                        For i = r.NumberOfPages To 1 Step -1
                                            If DoEvents_Wait(1000) Then
                                                printDocPageNum = i
                                                printDocImage = System.Drawing.Image.FromStream(New MemoryStream(A0_LoadImageGhostScript(r, i, CInt(r.GetPageSizeWithRotation(i).Width) * CSng(IIf(getPercent(r.Clone, i) > 2, getPercent(r.Clone, i), 2)), CInt(r.GetPageSizeWithRotation(i).Height * CSng(IIf(getPercent(r.Clone, i) > 2, getPercent(r.Clone, i), 2))), False)))
                                                printDocImageList.Add(printDocImage.Clone)
                                            End If
                                        Next
                                        printTotalPages = r.NumberOfPages
                                        printDocIndex = -1
                                        printDoc.Print()
                                    Else
                                        printTotalPages = r.NumberOfPages
                                        For i = 1 To r.NumberOfPages
                                            If DoEvents_Wait(1000) Then
                                                printDocPageNum = i
                                                printDocImage = System.Drawing.Image.FromStream(New MemoryStream(A0_LoadImageGhostScript(r, i, CInt(r.GetPageSizeWithRotation(i).Width) * CSng(IIf(getPercent(r.Clone, i) > 2, getPercent(r.Clone, i), 2)), CInt(r.GetPageSizeWithRotation(i).Height) * CSng(IIf(getPercent(r.Clone, i) > 2, getPercent(r.Clone, i), 2)), False)))
                                                printDocImageList.Add(printDocImage.Clone)
                                            End If
                                        Next
                                        printTotalPages = r.NumberOfPages
                                        printDocIndex = -1
                                        printDoc.Print()
                                    End If
                                    RemoveHandler printDoc.PrintPage, AddressOf PD_PrintPage
                                Next
                                printDoc = Nothing
                                exitCode = 1
                                pdfReaderDoc = readerTemp.Clone
                                LoadPDFReaderDoc(pdfOwnerPassword)
                                Try
                                    Dim cntr As Integer = 0
GOTO_PROCESS_WAIT_REDO:
GoTo_PROCESS_WAIT_OVER:
                                    If exitCode < 1 Then
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Catch exPrintProcess As Exception
                                MessageBox.Show(exPrintProcess.Message, "error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                            Finally
                                Try
                                    If Not exitCode = 1 Then
                                        Exit Try
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                                Try
                                Catch exProcess As Exception
                                    TimeStampAdd(exProcess, debugMode)
                                End Try
                                Try
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            End Try
                        End If
                    End If
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            StatusToolStrip = "Printing: completed."
            Me.BringToFront()
        End Try
    End Sub
    Public printDoc As Printing.PrintDocument
    Public printDocReader As PdfReader
    Public printDocPageNum As Integer = -1
    Public printDocImage As System.Drawing.Image
    Public printDocImageList As List(Of System.Drawing.Image) = Nothing
    Public printDocHasMorePages As Boolean
    Public printTotalPages As Integer = -1
    Public printDocIndex As Integer = -1
    Public Sub PD_PrintPage(ByVal sender As Object, ByVal e As System.Drawing.Printing.PrintPageEventArgs)
        printDocIndex += 1
        If printDocIndex < printDocImageList.Count Then
            If Not printDocImageList(printDocIndex) Is Nothing Then
                printDocImage = printDocImageList(printDocIndex).Clone
                If e.PageSettings.Landscape Then
                    If printDocImage.Width > printDocImage.Height Then
                        printDocImage.RotateFlip(RotateFlipType.Rotate270FlipNone)
                    End If
                End If
                e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic
                e.Graphics.SmoothingMode = SmoothingMode.HighQuality
                e.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality
                e.Graphics.DrawImage(printDocImage, 0, 0, e.PageBounds.Width, e.PageBounds.Height)
                If printDocIndex + 1 < printDocImageList.Count Then
                    e.HasMorePages = True
                Else
                    e.HasMorePages = False
                End If
            Else
                e.HasMorePages = False
            End If
        Else
            e.HasMorePages = False
        End If
    End Sub
    Private Sub PDFField_CopyAppearance_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_CopyAppearance.CheckedChanged
        If PDFField_CopyAppearance.Checked Then
            Try
                If Not String.IsNullOrEmpty(fldNameHighlighted & "") Then
                    _copy_Appearance_frmMain = New clsCopy_Appearance_frmMain(Me)
                    _copy_Appearance_frmMain.Copy(Me)
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        Else
            Try
                If Not String.IsNullOrEmpty(fldNameHighlighted & "") Then
                    _copy_Appearance_frmMain = New clsCopy_Appearance_frmMain()
                End If
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End If
    End Sub
    Private Sub PrintDocumentToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintDocumentToolStripMenuItem.Click
    End Sub
    Private Sub PrintPageRangeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintPageRangeToolStripMenuItem.Click
        Try
            Dim printDialog1 As New PrintDialog
            Dim readerTemp As PdfReader = pdfReaderDoc.Clone
            printDialog1.AllowSomePages = False
            printDialog1.AllowCurrentPage = False
            Select Case printDialog1.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    If Not pdfReaderDoc Is Nothing Then
                        If pdfReaderDoc.NumberOfPages > 0 Then
                            StatusToolStrip = "Printing: please wait.."
                            Dim fnTempPrint As String = ApplicationDataFolder(False, "temp") & "print-" & Path.GetFileName(fpath & "").ToString().Replace(" ", "-").Replace("""", "").Replace("'"c, "") & ""
                            LoadPDFReaderDoc(pdfOwnerPassword, True)
                            Dim r As PdfReader = pdfReaderDoc.Clone
                            If r.NumberOfPages > 1 Then
                                Dim cdialog As New clsPromptDialog
                                Dim pgImportedStr As String = cdialog.ShowDialog("Enter page print range:", "Page Print Range:", Me, "1-" & r.NumberOfPages.ToString & "")
                                If Not String.IsNullOrEmpty(pgImportedStr & "") Then
                                    r.SelectPages(pgImportedStr.ToString & "")
                                End If
                            End If
                            Dim bPDF() As Byte = getPDFBytes(r)
                            Dim exitCode As Integer = -1
                            Try
                                Me.SendToBack()
                                Dim PrinterName1 As String = printDialog1.PrinterSettings.PrinterName.ToString()
                                Dim numCopies As Integer = printDialog1.PrinterSettings.Copies
                                For copy As Integer = 1 To numCopies
                                    Dim i As Integer = -1
                                    Dim numPages As Integer = r.NumberOfPages
                                    Dim start As Integer = 1
                                    printDocIndex = 0
                                    printDocImageList = New List(Of System.Drawing.Image)
                                    printDocHasMorePages = True
                                    printDoc = New Printing.PrintDocument
                                    printDoc.PrinterSettings.PrinterName = PrinterName1
                                    printDoc.PrinterSettings.Collate = printDialog1.PrinterSettings.Collate
                                    printDoc.PrinterSettings.Copies = printDialog1.PrinterSettings.Copies
                                    AddHandler printDoc.PrintPage, AddressOf PD_PrintPage
                                    printTotalPages = numPages
                                    If printDoc.PrinterSettings.Collate Then
                                        For i = r.NumberOfPages To 1 Step -1
                                            If DoEvents_Wait(1000) Then
                                                printDocPageNum = i
                                                printDocImage = System.Drawing.Image.FromStream(New MemoryStream(A0_LoadImageGhostScript(r, i, CInt(r.GetPageSizeWithRotation(i).Width) * CSng(IIf(getPercent(r.Clone, i) > 2, getPercent(r.Clone, i), 2)), CInt(r.GetPageSizeWithRotation(i).Height * CSng(IIf(getPercent(r.Clone, i) > 2, getPercent(r.Clone, i), 2))), False)))
                                                printDocImageList.Add(printDocImage.Clone)
                                            End If
                                        Next
                                        printTotalPages = r.NumberOfPages
                                        printDocIndex = -1
                                        printDoc.Print()
                                    Else
                                        printTotalPages = r.NumberOfPages
                                        For i = 1 To r.NumberOfPages
                                            If DoEvents_Wait(1000) Then
                                                printDocPageNum = i
                                                printDocImage = System.Drawing.Image.FromStream(New MemoryStream(A0_LoadImageGhostScript(r, i, CInt(r.GetPageSizeWithRotation(i).Width) * CSng(IIf(getPercent(r.Clone, i) > 2, getPercent(r.Clone, i), 2)), CInt(r.GetPageSizeWithRotation(i).Height) * CSng(IIf(getPercent(r.Clone, i) > 2, getPercent(r.Clone, i), 2)), False)))
                                                printDocImageList.Add(printDocImage.Clone)
                                            End If
                                        Next
                                        printTotalPages = r.NumberOfPages
                                        printDocIndex = -1
                                        printDoc.Print()
                                    End If
                                    RemoveHandler printDoc.PrintPage, AddressOf PD_PrintPage
                                Next
                                printDoc = Nothing
                                exitCode = 1
                                pdfReaderDoc = readerTemp.Clone
                                LoadPDFReaderDoc(pdfOwnerPassword)
                                Try
                                    Dim cntr As Integer = 0
GOTO_PROCESS_WAIT_REDO:
GoTo_PROCESS_WAIT_OVER:
                                    If exitCode < 1 Then
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            Catch exPrintProcess As Exception
                                MessageBox.Show(exPrintProcess.Message, "error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                            Finally
                                Try
                                    If Not exitCode = 1 Then
                                        Exit Try
                                    End If
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                                Try
                                Catch exProcess As Exception
                                    TimeStampAdd(exProcess, debugMode)
                                End Try
                                Try
                                Catch ex As Exception
                                    TimeStampAdd(ex, debugMode)
                                End Try
                            End Try
                        End If
                    End If
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            StatusToolStrip = "Printing: completed."
            Me.BringToFront()
        End Try
    End Sub
    Public Sub A0_LoadPDF_Properties(Optional loadPDF As Boolean = False)
        If Session Is Nothing Then Return
        If Session.Length <= 0 Then Return
        Try
            cUserRect.pauseDraw = True
            A0_PictureBox1.Visible = False
            A0_PictureBox2.Visible = False
            Using dlgProperties As New dialogDocumentProperties(Me, False)
                Try
                    Dim pgInt As Integer = CInt(dlgProperties.TextBox11.Text) + 0
                    If pgInt >= 1 Then
                        pageIndex = pgInt - 1
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
                Try
                    If dlgProperties.ComboBox5.SelectedIndex > 0 Then
                        If dlgProperties.TextBox1.Text = "" Then
                            Me.Text = "PDForms.net: " & Path.GetFileName(fpath & "") & ""
                        Else
                            Me.Text = "PDForms.net: " & dlgProperties.TextBox1.Text & ""
                        End If
                    Else
                        Me.Text = "PDForms.net: " & Path.GetFileName(fpath & "") & ""
                    End If
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
                Try
                    Select Case dlgProperties.ComboBox3.SelectedIndex
                        Case 0
                        Case 1
                        Case 2
                        Case 3
                        Case 4
                        Case 5
                        Case 6
                        Case Else
                    End Select
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
                Try
                    Select Case dlgProperties.ComboBox4.SelectedIndex
                        Case 0
                            cmbPercent.SelectedIndex = 1
                        Case 1
                            cmbPercent.SelectedIndex = 0
                        Case 2
                            cmbPercent.SelectedIndex = 1
                        Case 3
                            cmbPercent.SelectedIndex = 2
                        Case 4
                            cmbPercent.SelectedIndex = 3
                        Case 5
                            cmbPercent.SelectedIndex = 1
                        Case Else
                            If dlgProperties.ComboBox4.SelectedIndex >= 0 Then
                                Dim percent As String = dlgProperties.ComboBox4.SelectedItem.ToString
                                If percent.Contains("%"c) Then
                                    If cmbPercent.Items.Contains(percent) Then
                                        cmbPercent.SelectedItem = percent
                                    Else
                                        cmbPercent.Items.Add(percent)
                                    End If
                                End If
                            End If
                    End Select
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
                Try
                    cmbPercent_SelectedIndexChanged(Me, New EventArgs())
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
                Try
                    Select Case dlgProperties.ComboBox2.SelectedIndex
                        Case 0
                            ThumbnailsToolStripMenuItem.Checked = False
                        Case 1
                            ThumbnailsToolStripMenuItem.Checked = False
                        Case 2
                            ThumbnailsToolStripMenuItem.Checked = False
                        Case 3
                            ThumbnailsToolStripMenuItem.Checked = False
                        Case 4
                            ThumbnailsToolStripMenuItem.Checked = False
                        Case Else
                            ThumbnailsToolStripMenuItem.Checked = False
                    End Select
                    Load_Thumbnails1_Panel(ThumbnailsToolStripMenuItem.Checked)
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                End Try
                dlgProperties.Close()
            End Using
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            cUserRect.pauseDraw = False
            If loadPDF Then
                A0_LoadPDF(True, False, True)
            End If
            Try
                If Not Session Is Nothing Then
                    If Session.Length > 0 Then
                        If pageIndex >= 0 And Not cUserRect.pauseDraw Then preLoadImages(False)
                    End If
                End If
            Catch exPreload As Exception
                TimeStampAdd(exPreload, debugMode)
            End Try
            A0_PictureBox1.Visible = True
            A0_PictureBox2.Visible = True
        End Try
    End Sub
    Private Sub PropertiesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PropertiesToolStripMenuItem.Click
        Try
            Using dlgProperties As New dialogDocumentProperties(Me, False)
                Try
                    Select Case dlgProperties.ShowDialog(Me)
                        Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                            Return
                        Case Else
                            Return
                    End Select
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    dlgProperties.Close()
                End Try
            End Using
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            Me.Show()
            Me.BringToFront()
        End Try
    End Sub
    Private Sub pnlFields_Move(ByVal sender As Object, ByVal e As System.EventArgs) Handles pnlFields.Move
        Dim p As New RectangleF(pnlFields.Left, pnlFields.Top, pnlFields.Width, pnlFields.Height)
        p = p
    End Sub
    Private Sub pnlFields_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles pnlFields.Paint
    End Sub
    Private Sub pnlFields_VisibleChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles pnlFields.VisibleChanged
        Try
            If Not pnlFields.Visible Then
                'Me.ActiveControl = Me.A0_PictureBox2
                Me.ActiveControl = Me.PictureBox1_Panel
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Public Sub RemoveSignatureFlags()
        Try
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Dim m As New MemoryStream()
            Dim r As PdfReader = pdfReaderDoc.Clone
            Dim s As PdfStamper = getStamper(r, m)
            If Not s.AcroFields.GetSignatureNames Is Nothing Then
                If s.AcroFields.GetSignatureNames.Count > 0 Then
                    For Each sigName As String In s.AcroFields.GetSignatureNames
                        Dim fld As iTextSharp.text.pdf.AcroFields.Item = s.AcroFields.GetFieldItem(sigName)
                        fld.MarkUsed(s.AcroFields, AcroFields.Item.WRITE_VALUE + AcroFields.Item.WRITE_WIDGET)
                        For k As Integer = 0 To fld.Size - 1
                            fld.GetMerged(k).Remove(PdfName.AP)
                            fld.GetMerged(k).Remove(PdfName.AS)
                            fld.GetMerged(k).Remove(PdfName.V)
                            fld.GetMerged(k).Remove(PdfName.DV)
                            fld.GetMerged(k).Remove(PdfName.SV)
                            fld.GetMerged(k).Remove(PdfName.FF)
                            fld.GetMerged(k).Put(PdfName.F, New PdfNumber(PdfAnnotation.FLAGS_PRINT))

                            fld.GetWidget(k).Remove(PdfName.AP)
                            fld.GetWidget(k).Remove(PdfName.AS)
                            fld.GetWidget(k).Remove(PdfName.V)
                            fld.GetWidget(k).Remove(PdfName.DV)
                            fld.GetWidget(k).Remove(PdfName.SV)
                            fld.GetWidget(k).Remove(PdfName.FF)
                            fld.GetWidget(k).Put(PdfName.F, New PdfNumber(PdfAnnotation.FLAGS_PRINT))

                            fld.GetValue(k).Remove(PdfName.AP)
                            fld.GetValue(k).Remove(PdfName.AS)
                            fld.GetValue(k).Remove(PdfName.V)
                            fld.GetValue(k).Remove(PdfName.DV)
                            fld.GetValue(k).Remove(PdfName.SV)
                            fld.GetValue(k).Remove(PdfName.FF)
                            fld.GetValue(k).Put(PdfName.F, New PdfNumber(PdfAnnotation.FLAGS_PRINT))
                        Next
                    Next
                    s.Writer.AcroForm.Remove(PdfName.SIGFLAGS)
                    s.Writer.CloseStream = False
                    s.Close()
                    Session = m.ToArray()
                    s.Dispose()
                    pdfReaderDoc = r.Clone
                End If
            End If
            r.Dispose()
            'Dim r As PdfReader = pdfReaderDoc.Clone
            'r.AcroForm.Remove(PdfName.SIGFLAGS)
            'Session = getPDFBytes(r, True)
            'pdfReaderDoc = r.Clone
            'r.Close()
            'r.Dispose()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            'A0_LoadPDF(True, True, True)
            'refreshPDFImage()
            cmbPercent_SelectedIndexChanged(Me, New EventArgs())
        End Try
    End Sub
    Private Sub RemoveSignatureFlagsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RemoveSignatureFlagsToolStripMenuItem.Click
        Try
            RemoveSignatureFlags()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub ThisDocumentToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ThisDocumentToolStripMenuItem1.Click
        Try
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    Try
                        If frmSecurityPassword Is Nothing Then
                            frmSecurityPassword = New dialogSecurityPassword(Me)
                        End If
                        frmSecurityPassword.pnlPDFEncryption_BtnClear_Click(sender, e)
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    End Try
                End If
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub OpenDocumentToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenDocumentToolStripMenuItem.Click
        preventClickDialog = True
        OpenFileDialog1.InitialDirectory = ApplicationDataFolder(False, "")
        OpenFileDialog1.Filter = "PDF|*.pdf|All Files|*.*"
        OpenFileDialog1.AutoUpgradeEnabled = True
        OpenFileDialog1.DefaultExt = ".pdf"
        OpenFileDialog1.FilterIndex = 1
        OpenFileDialog1.Title = "Open Document"
        OpenFileDialog1.ValidateNames = True
        Dim fn As String = ""
        Try
            If Not String.IsNullOrEmpty(fpath) Then
                If FileExists(fpath) Then
                    OpenFileDialog1.InitialDirectory = Path.GetDirectoryName(fpath & "")
                    OpenFileDialog1.FileName = Path.GetFileName(fpath & "")
                End If
            End If
            Select Case OpenFileDialog1.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    fn = OpenFileDialog1.FileName & ""
GOTO_KNOWN_FILENAME:
                    If Not String.IsNullOrEmpty(fn) Then
                        Dim b() As Byte = Nothing
                        _outputIndex = 0
                        mem.Clear()
                        Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                            Case "pdf"
                                Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                                Try
                                    Select Case MsgBox("Unlock this PDF security?" & Environment.NewLine & "Note:  This will not unlock forms with a user AND an owner password.", MsgBoxStyle.Question + MsgBoxStyle.YesNoCancel + MsgBoxStyle.ApplicationModal, "Info: Unlock PDF Security?")
                                        Case MsgBoxResult.Yes, MsgBoxResult.Ok
                                            ClearPDFEncryptionPanel(True, True)
                                            Dim strModified As New System.IO.MemoryStream(UnlockSecurePDF(File.ReadAllBytes(fn)))
                                            Try
                                                SaveFileDialog1.FileName = Path.GetFileName(fn)
                                                SaveFileDialog1.InitialDirectory = Path.GetDirectoryName(fn)
                                                SaveFileDialog1.Filter = "PDF|*.pdf|All files|*.*"
                                                SaveFileDialog1.FilterIndex = 0
                                                Select Case SaveFileDialog1.ShowDialog(Me)
                                                    Case DialogResult.Yes, DialogResult.OK
                                                        File.WriteAllBytes(SaveFileDialog1.FileName, strModified.ToArray())
                                                        If Not cFDFDoc.PDFisXFA(strModified.ToArray()) Then
                                                            fn = SaveFileDialog1.FileName
                                                            Session = strModified.ToArray()
                                                            LoadPDFEncryptionPanel(Session, False)
                                                            Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                                                            fldRectangles = getFieldRectangles(True)
                                                            LoadPageList(Me.btnPage, cFDFDoc)
                                                            pageIndex = 0
                                                            A0_LoadPDF(True)
                                                            ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                                            A0_PictureBox1.Enabled = True
                                                            A0_PictureBox2.Enabled = True
                                                            MsgBox("The PDF security was successfully reset!", MsgBoxStyle.OkOnly + MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal, "Password Reset")
                                                        Else
                                                            MsgBox("The PDF security was successfully reset!", MsgBoxStyle.OkOnly + MsgBoxStyle.Information + MsgBoxStyle.ApplicationModal, "Password Reset")
                                                        End If
                                                    Case Else
                                                        Return
                                                End Select
                                            Catch ex As Exception
                                                Err.Clear()
                                            End Try
                                            Return
                                        Case Else
                                            Return
                                    End Select
                                Catch ex As Exception
                                    Throw ex
                                    Return
                                Finally
                                    PdfReader.unethicalreading = False
                                End Try
                            Case Else
                                Return
                        End Select
                    End If
                Case Else
                    Return
            End Select
        Catch ex As Exception
            Throw ex
        Finally
            timerPreventDefaultExpires.Enabled = True
        End Try
    End Sub
    Private Sub FromPDFsInFolderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FromPDFsInFolderToolStripMenuItem.Click
        Dim MemStream As New MemoryStream
        Try
            If True = True Then
                Dim fsel As New FolderSelect.FolderSelectDialog()
                fsel.InitialDirectory = ApplicationDataFolder(False, "")
                fsel.Title = "Select a folder with PDF forms:"
                Select Case fsel.ShowDialog(Me.Handle)
                    Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                        Dim selFolder As String = fsel.FileName.ToString
                        Dim files As New List(Of String)
                        For Each f As String In Directory.GetFiles(selFolder & "")
                            If Not String.IsNullOrEmpty(f & "") Then
                                If GetFileExtension(f & "").ToString.Replace(".", "").ToLower() = "pdf" Then
                                    If Not files.Contains(f & "") Then
                                        Try
                                            files.Add(f & "")
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode)
                                        End Try
                                    End If
                                End If
                            End If
                        Next
                        If files.Count > 0 Then
                            Select Case MessageBox.Show("Flatten PDF forms?", "Flatten:", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                                Case DialogResult.Yes, DialogResult.OK
                                    MemStream = New MemoryStream(MergePDFs(files.ToArray(), True))
                                Case Else
                                    Select Case MessageBox.Show("Rename identical form fields?", "Rename?", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                                        Case DialogResult.Yes, DialogResult.OK
                                            MemStream = New MemoryStream(MergePDFs(files.ToArray(), Nothing, False, True, False))
                                        Case Else
                                            MemStream = New MemoryStream(MergePDFs(files.ToArray(), False))
                                    End Select
                            End Select
                        End If
                    Case Else
                        Return
                End Select
                If Not MemStream Is Nothing Then
                    If MemStream.Length <= 0 Then Return
                    Dim b() As Byte = GetUsedBytesOnly(MemStream, True)
                    preventClickDialog = True
                    If String.IsNullOrEmpty(fpath & "") Then
                        SaveFileDialog1.InitialDirectory = ApplicationDataFolder(False, "") & ""
                    Else
                        SaveFileDialog1.InitialDirectory = System.IO.Path.GetDirectoryName(fpath)
                    End If
                    SaveFileDialog1.Filter = "PDF|*.pdf"
                    If String.IsNullOrEmpty(fpath & "") Then
                        SaveFileDialog1.FileName = ""
                    Else
                        SaveFileDialog1.FileName = System.IO.Path.GetFileName(fpath & "")
                    End If
                    SaveFileDialog1.AutoUpgradeEnabled = True
                    SaveFileDialog1.DefaultExt = ".pdf"
                    SaveFileDialog1.FilterIndex = 1
                    SaveFileDialog1.Title = "Save As"
                    SaveFileDialog1.ValidateNames = True
                    SaveFileDialog1.OverwritePrompt = True
                    Try
                        Select Case SaveFileDialog1.ShowDialog(Me)
                            Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                                If Not String.IsNullOrEmpty(SaveFileDialog1.FileName) Then
                                    Dim fn As String = SaveFileDialog1.FileName & ""
                                    Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                                        Case "pdf"
                                            File.WriteAllBytes(fn, b)
                                            OpenFile(fn, False)
                                        Case "png"
                                            b = A0_LoadImage(b)
                                            File.WriteAllBytes(fn, b)
                                        Case "jpg"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Jpeg)
                                        Case "bmp"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Bmp)
                                        Case "gif"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Gif)
                                        Case "tiff"
                                            b = A0_LoadImage(b)
                                            Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                                            i.Save(fn, System.Drawing.Imaging.ImageFormat.Tiff)
                                        Case Else
                                            File.WriteAllBytes(fn, b)
                                    End Select
                                End If
                            Case Else
                                Return
                        End Select
                    Catch ex As Exception
                        TimeStampAdd(ex, debugMode)
                    Finally
                        timerPreventDefaultExpires.Enabled = True
                    End Try
                End If
            Else
                Return
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Public Function getDirectory(filePath As String) As String
        Try
            If Not filePath Is Nothing Then
                If Not filePath.IsNullOrEmpty Then
                    Return System.IO.Path.GetDirectoryName(filePath).ToString().TrimEnd("\"c) & "\"c
                End If
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
        Return filePath.ToString().TrimEnd("\") & "\"c
    End Function
    Public Property defaultOpenDirectory() As String
        Get
            Try
                Return GetSetting(Application.ProductName.ToString(), "settings", "defaultOpenDirectory", CStr(IIf(fpath.isNullOrEmpty, ApplicationDataFolder(False, ""), getDirectory(fpath))))
            Catch ex As Exception
                Err.Clear()
            End Try
            Return appPath
        End Get
        Set(value As String)
            SaveSetting(Application.ProductName.ToString(), "settings", "defaultOpenDirectory", value)
        End Set
    End Property
    Private Sub FromImagesInFolderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FromImagesInFolderToolStripMenuItem.Click
        Try
            StatusToolStrip = "Status: Importing images."
            Dim d As New FolderSelect.FolderSelectDialog()
            'If fpath.IsNullOrEmpty() Then d.InitialDirectory = defaultOpenDirectory() Else d.InitialDirectory = Path.GetDirectoryName(fpath)
            d.InitialDirectory = defaultOpenDirectory()
            d.Title = "Select Directory:"
            Dim errStr As String = ""
            Select Case d.ShowDialog(Me.Handle)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    Me.Show()
                    Dim dir As String = d.FileName & ""
                    If Not String.IsNullOrEmpty(dir & "") Then
                        If Directory.Exists(dir & "") Then
                            defaultOpenDirectory = dir
                            Dim files() As String = Directory.GetFiles(dir & "")
                            If files.Length > 0 Then
                                Dim ext As New List(Of String)
                                ext.AddRange(New String() {".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff", ".tif"})
                                ext.AddRange(New String() {"jpg", "jpeg", "png", "gif", "bmp", "tiff", "tif"})
                                StatusToolStrip = "Status: Importing images..."
                                Dim fcntr As Integer = files.Length
                                Dim promptUser As Boolean = True
                                For Each f As String In files.ToArray
                                    Try
                                        If ext.Contains(CStr(Path.GetExtension(f) & "").ToString.TrimStart("."c) & "") Then
                                            If promptUser Then
                                                Dim clsPrompt As New dialogMultiChoice(Me)
                                                Dim clsButtons As New List(Of dialogMultiChoice.clsButton)
                                                clsButtons.Add(New dialogMultiChoice.clsButton("ALL", True, 4))
                                                clsButtons.Add(New dialogMultiChoice.clsButton("YES", True, 1))
                                                clsButtons.Add(New dialogMultiChoice.clsButton("NO", True, 2))
                                                clsButtons.Add(New dialogMultiChoice.clsButton("CANCEL", True, 3))
                                                Select Case clsPrompt.ShowDialog(Me, "Import this file?" & Environment.NewLine & "File: " & Path.GetFileName(f.ToString) & Environment.NewLine & "Files remaining: " & fcntr.ToString() & "", "Import File:", clsButtons.ToArray)
                                                    Case 1
                                                        ImportImage(f, promptUser, False)
                                                    Case 2
                                                    Case 3
                                                        Return
                                                    Case 4
                                                        promptUser = False
                                                        ImportImage(f, promptUser, False)
                                                End Select
                                            Else
                                                'Application.DoEvents()
                                                ImportImage(f, promptUser, False)
                                            End If
                                        End If
                                        fcntr -= 1

                                    Catch ex As Exception
                                        TimeStampAdd(ex, debugMode)
                                    Finally
                                        StatusToolStrip("Status: ", True) = String.Format("Importing images - {0} files remaining...", fcntr.ToString)
                                    End Try
                                Next
                                Try
                                    A0_LoadPDF(True)
                                    LoadPageList(Me.btnPage)
                                    If pnlFields.Visible Then pnlFields.Visible = False
                                    ComboBox1_SelectedIndexChanged(Me, New EventArgs())
                                    A0_PictureBox1.Enabled = True
                                    A0_PictureBox2.Enabled = True
                                    pageIndex = Me.btnPage.Items.Count - 1
                                    btnPage_SelectedIndexChanged(Me, New EventArgs())
                                Catch exLoadDoc As Exception
                                    TimeStampAdd(exLoadDoc, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
                                End Try
                                StatusToolStrip = "Status: Importing images completed successfully"
                            End If
                        End If
                    End If
                Case Else
                    Return
            End Select
        Catch ex As Exception
            StatusToolStrip = "Error: Importing Images"
            TimeStampAdd(ex, debugMode)
        Finally
            Me.Show()
        End Try
    End Sub

    'Private Sub FromImagesInFolderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FromImagesInFolderToolStripMenuItem.Click
    '    Try
    '        StatusToolStrip = "Status: Importing images."
    '        Dim d As New FolderSelect.FolderSelectDialog()
    '        If String.IsNullOrEmpty(fpath & "") Then d.InitialDirectory = ApplicationDataFolder(False, "") Else d.InitialDirectory = Path.GetDirectoryName(fpath)
    '        d.Title = "Select Directory:"
    '        Dim errStr As String = ""
    '        Select Case d.ShowDialog(Me.Handle)
    '            Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
    '                Me.Show()
    '                Dim dir As String = d.FileName & ""
    '                If Not String.IsNullOrEmpty(dir & "") Then
    '                    If Directory.Exists(dir & "") Then
    '                        Dim files() As String = Directory.GetFiles(dir & "")
    '                        If files.Length > 0 Then
    '                            Dim ext As New List(Of String)
    '                            ext.AddRange(New String() {".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff", ".tif"})
    '                            ext.AddRange(New String() {"jpg", "jpeg", "png", "gif", "bmp", "tiff", "tif"})
    '                            StatusToolStrip = "Status: Importing images..."
    '                            Dim fcntr As Integer = files.Length
    '                            Dim promptUser As Boolean = True
    '                            For Each f As String In files.ToArray
    '                                Try
    '                                    fcntr -= 1
    '                                    If ext.Contains(CStr(Path.GetExtension(f) & "").ToString.TrimStart("."c) & "") Then
    '                                        If promptUser Then
    '                                            Dim clsPrompt As New dialogMultiChoice(Me)
    '                                            Dim clsButtons As New List(Of dialogMultiChoice.clsButton)
    '                                            clsButtons.Add(New dialogMultiChoice.clsButton("YES", True, 1))
    '                                            clsButtons.Add(New dialogMultiChoice.clsButton("NO", True, 2))
    '                                            clsButtons.Add(New dialogMultiChoice.clsButton("CANCEL", True, 3))
    '                                            clsButtons.Add(New dialogMultiChoice.clsButton("ALL", True, 4))
    '                                            Select Case clsPrompt.ShowDialog(Me, "Import this file?" & Environment.NewLine & "File: " & Path.GetFileName(f.ToString) & Environment.NewLine & "Files remaining: " & fcntr.ToString() & "", "Import File:", clsButtons.ToArray)
    '                                                Case 1
    '                                                    ImportImage(f, promptUser, False, True)
    '                                                Case 2
    '                                                Case 3
    '                                                    Return
    '                                                Case 4
    '                                                    promptUser = False
    '                                                    ImportImage(f, promptUser, False, True)
    '                                            End Select
    '                                        Else
    '                                            ImportImage(f, promptUser, False, True)
    '                                        End If
    '                                    End If
    '                                Catch ex As Exception
    '                                    TimeStampAdd(ex, debugMode)
    '                                Finally
    '                                    StatusToolStrip("Status: ", True) = String.Format("Importing images - {0} files remaining...", fcntr.ToString)
    '                                End Try
    '                            Next
    '                            Try
    '                                A0_LoadPDF(True)
    '                                LoadPageList(Me.btnPage)
    '                                If pnlFields.Visible Then pnlFields.Visible = False
    '                                ComboBox1_SelectedIndexChanged(Me, New EventArgs())
    '                                A0_PictureBox1.Enabled = True
    '                                A0_PictureBox2.Enabled = True
    '                                pageIndex = Me.btnPage.Items.Count - 1
    '                                btnPage_SelectedIndexChanged(Me, New EventArgs())
    '                            Catch exLoadDoc As Exception
    '                                TimeStampAdd(exLoadDoc, debugMode)
    '                            End Try
    '                            StatusToolStrip = "Status: Importing images completed successfully"
    '                        End If
    '                    End If
    '                End If
    '            Case Else
    '                Return
    '        End Select
    '    Catch ex As Exception
    '        StatusToolStrip = "Error: Importing Images"
    '        TimeStampAdd(ex, debugMode)
    '    Finally
    '        Me.Show()
    '    End Try
    'End Sub
    Private Sub FTPToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FTPToolStripMenuItem1.Click
        Try
            If dlg Is Nothing Then
                dlgValues = New List(Of String)
            End If
            dlg = New dialogFTP(Me)
            dlg.DialogResult = Windows.Forms.DialogResult.Ignore
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    dlg.ShowUploadControls = True
                End If
            End If
            Me.Hide()
            dlg.Hide()
            Select Case dlg.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK
                Case Windows.Forms.DialogResult.Cancel
                Case Windows.Forms.DialogResult.Abort
                Case Else
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            dlg.Hide()
            Me.Show()
            Me.BringToFront()
        End Try
    End Sub
    Private Sub UploadFileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles UploadFileToolStripMenuItem.Click
        Try
            If dlgValues.Count >= 6 Then
                If dlg Is Nothing Then
                    dlg = New dialogFTP(Me)
                End If
                dlg.DialogResult = Windows.Forms.DialogResult.Ignore
                dlg.LoadDialog(False)
                dlg.txtFileName.Text = Path.GetFileName(fpath)
                If dlg.UploadFile(Path.GetFileName(fpath), Session, False, False) Then
                    MsgBox("Upload success!", MsgBoxStyle.OkOnly + MsgBoxStyle.ApplicationModal + MsgBoxStyle.ApplicationModal, "Upload")
                    StatusToolStrip = "Status: File uploaded successfully."
                    If Not dlg Is Nothing Then
                        If dlg.Visible = False Then
                            dlg.Hide()
                        End If
                    End If
                    Me.BringToFront()
                Else
                    dlg.LoadDialog(True)
                    dlg.ShowUploadControls = True
                    Me.Hide()
                    dlg.Hide()
                    Select Case dlg.ShowDialog(Me)
                        Case DialogResult.Yes, DialogResult.OK
                            dlg.Hide()
                        Case Else
                            dlg.Hide()
                    End Select
                    Return
                End If
            End If
        Catch ex As Exception
            MsgBox("Upload Error!", MsgBoxStyle.OkOnly + MsgBoxStyle.ApplicationModal + MsgBoxStyle.ApplicationModal, "Upload")
            StatusToolStrip = "Error: File not uploaded - " & ex.Message.ToString
            TimeStampAdd(ex, debugMode)
        Finally
            Me.Show()
            Me.BringToFront()
        End Try
    End Sub
    Private Sub DirectoryToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DirectoryToolStripMenuItem.Click
        preventClickDialog = True
        Dim op As New FolderSelect.FolderSelectDialog()
        op.InitialDirectory = ApplicationDataFolder(False, "")
        op.Title = "Select Directory:"
        Dim errStr As String = ""
        Select Case op.ShowDialog(Me.Handle)
            Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                Dim fld As String = op.FileName
                Try
                    Dim i As Integer = 0
                    Dim errX As Integer = 0
                    For Each fn As String In Directory.GetFiles(fld).ToArray
                        If Not String.IsNullOrEmpty(fn) Then
                            Select Case GetFileExtension(fn).ToString.Replace(".", "").ToLower
                                Case "pdf"
                                    Try
                                        Dim b() As Byte = File.ReadAllBytes(fn).ToArray
                                        ClearPDFEncryptionPanel(True, True)
                                        Dim strModified As New System.IO.MemoryStream(UnlockSecurePDF(b.ToArray()))
                                        Dim bunlocked() As Byte = strModified.ToArray()
                                        If Not bunlocked Is Nothing Then
                                            If bunlocked.Length > 0 Then
                                                File.WriteAllBytes(fn, bunlocked)
                                                i += 1
                                            End If
                                        End If
                                    Catch exUnlocked As Exception
                                        errStr &= exUnlocked.Message.ToString & Environment.NewLine
                                        errX += 1
                                        TimeStampAdd(exUnlocked, debugMode)
                                    Finally
                                        PdfReader.unethicalreading = False
                                    End Try
                            End Select
                        End If
                    Next
                    StatusToolStrip = "Status: Finished unlocking " & i & " documents - " & errX & " errors."
                Catch ex As Exception
                    StatusToolStrip = "Error: " & ex.Message
                    TimeStampAdd(ex, debugMode)
                Finally
                    timerPreventDefaultExpires.Enabled = True
                    If Not String.IsNullOrEmpty(errStr.Trim()) Then
                        MsgBox("Errors: " & errStr)
                    End If
                End Try
        End Select
    End Sub
    Private Sub OpenFilesFoldersListToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenFilesFoldersListToolStripMenuItem.Click
        clsFF = New dialogListFiles(Me)
        Try
            If fpath = "" Then
                clsFF.txtFTPRoot.Text = ApplicationDataFolder(False, "")
                clsFF.txtFileName.Text = ""
                clsFF.LoadDialog(ApplicationDataFolder(False, ""), "", False)
            Else
                clsFF.txtFTPRoot.Text = Path.GetDirectoryName(fpath)
                clsFF.txtFileName.Text = Path.GetFileName(fpath)
                clsFF.LoadDialog(Path.GetDirectoryName(fpath), fpath, False)
            End If
            clsFF.DialogResult = Windows.Forms.DialogResult.Ignore
            Select Case clsFF.ShowDialog(Me)
                Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                    If dlgValues.Count >= 5 Then
                        Select Case Path.GetExtension(dlgValues(0)).ToString.ToLower.TrimStart(".")
                            Case "pdf", "xfdf", "fdf", "xdp", "xml"
                                clsFF.Close()
                                clsFF.Dispose()
                                OpenFile(dlgValues(4).ToString.TrimEnd("\"c) & "\" & dlgValues(0).ToString, True, True)
                            Case "jpeg", "jpg", "gif", "png", "bmp", "tif", "tiff"
                                clsFF.Close()
                                clsFF.Dispose()
                                ImportImage(dlgValues(4).ToString.TrimEnd("\"c) & "\" & dlgValues(0).ToString, True)
                            Case Else
                                clsFF.Close()
                                clsFF.Dispose()
                        End Select
                    Else
                        clsFF.Close()
                        clsFF.Dispose()
                    End If
                Case Else
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not clsFF Is Nothing Then
                clsFF = Nothing
            End If
        End Try
    End Sub
    Private Sub pnlPageSize_Resize_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPageSize_Resize.Click
    End Sub
    Private Sub A0_PictureBox1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles A0_PictureBox2.Click
    End Sub
    Private Sub A0_PictureBox2_SizeChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles A0_PictureBox2.SizeChanged
    End Sub
    Private Sub A0_PictureBox1_SizeChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles A0_PictureBox1.SizeChanged
        Try
            A0_PictureBox1.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.SizeMode = PictureBoxSizeMode.CenterImage
            A0_PictureBox2.Width = A0_PictureBox1.Width
            A0_PictureBox2.Height = A0_PictureBox1.Height
            A0_PictureBox2.Enabled = A0_PictureBox1.Enabled
            A0_PictureBox2.Visible = A0_PictureBox1.Visible
            A0_PictureBox2.Parent = A0_PictureBox1
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub A0_PictureBox1_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles A0_PictureBox1.Validating
    End Sub
    Private Sub A0_PictureBox1_VisibleChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles A0_PictureBox1.VisibleChanged
        Try
            A0_PictureBox2.Visible = A0_PictureBox1.Visible
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub ShowLogToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ShowLogToolStripMenuItem.Click
        File.WriteAllText(ApplicationDataFolder(False, "temp") & "log.txt", TimeStampInfo() & "")
        Process.Start(ApplicationDataFolder(False, "temp") & "log.txt")
    End Sub
    Private Sub tmrUpdateAddFieldButton_Tick_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrUpdateAddFieldButton.Tick
    End Sub
    Private Sub btnSignature_Sign_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSignature_Sign.Click
        SignDocument(Session.ToArray())
    End Sub
    Public Function Sign(ByVal fldName As String) As Byte()
        Dim reader As PdfReader = Nothing
        Dim stamper As PdfStamper = Nothing
        Dim digestAlgorithm As [String] = DigestAlgorithms.SHA256
        Dim subfilter As CryptoStandard = CryptoStandard.CMS
        Dim crlList As ICollection(Of ICrlClient) = Nothing, ocspClient As IOcspClient = Nothing, tsaClient As ITSAClient = Nothing, estimatedSize As Integer = 0
        Dim os As New MemoryStream
        Dim frmSign As New frmSignature
        Try
            reader = New PdfReader(Session, getBytes(pdfOwnerPassword))
            stamper = PdfStamper.CreateSignature(reader, os, ControlChars.NullChar, Nothing, True)
            frmSign.SetFrmMain(Me)
            frmSign.backGroundColor = Color.Transparent
            If Not sign_pfxPath = "" Then
                frmSign.TextBoxPFXPath.Text = sign_pfxPath
            End If
            If Not sign_pfxPassword = "" Then frmSign.TextBoxPFXPassword.Text = sign_pfxPassword
            If Not sign_reason = "" Then frmSign.TextBoxReason.Text = sign_reason
            If Not sign_contact = "" Then frmSign.TextBoxSignatureContact.Text = sign_contact
            If Not sign_creator = "" Then frmSign.TextBoxSignatureCreator.Text = sign_creator Else frmSign.TextBoxSignatureCreator.Text = "PDForms.net,iText Technologies"
            If Not sign_location = "" Then frmSign.TextBoxLocation.Text = sign_location
            If Not sign_lineWidthIndex < 0 Then frmSign.ComboBoxSignatureLineWidth.SelectedIndex = sign_lineWidthIndex Else frmSign.ComboBoxSignatureLineWidth.SelectedIndex = 6
            If Not sign_AppearanceRenderModeIndex < 0 Then frmSign.ComboBoxSignatureAppearanceRenderMode.SelectedIndex = sign_AppearanceRenderModeIndex Else frmSign.ComboBoxSignatureAppearanceRenderMode.SelectedIndex = 0
            If Not sign_lineColor = Nothing Then frmSign.sign_LineColor.BackColor = sign_lineColor Else frmSign.sign_LineColor.BackColor = Color.Black
            frmSign.TextBoxSignatureDate.Text = DateTime.Now.ToShortDateString() & " " & DateTime.Now.ToLongTimeString() & ""
            Select Case frmSign.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    Dim appearance As PdfSignatureAppearance = stamper.SignatureAppearance
                    appearance.SignatureRenderingMode = sign_AppearanceRenderModeIndex
                    appearance.SetVisibleSignature(fldName)
                    Dim img As iTextSharp.text.Image
                    Dim ks As New Pkcs12Store()
                    If sign_pfxBytes Is Nothing Then
                        ks.Load(New MemoryStream(System.IO.File.ReadAllBytes(sign_pfxPath)), sign_pfxPassword.ToCharArray())
                    ElseIf sign_pfxBytes.Length <= 0 Then
                        ks.Load(New MemoryStream(System.IO.File.ReadAllBytes(sign_pfxPath)), sign_pfxPassword.ToCharArray())
                    Else
                        ks.Load(New MemoryStream(sign_pfxBytes), sign_pfxPassword.ToCharArray())
                    End If
                    Dim [alias] As [String] = ""
                    For Each al As String In ks.Aliases
                        If ks.IsKeyEntry(al) AndAlso ks.GetKey(al).Key.IsPrivate Then
                            [alias] = al
                            Exit For
                        End If
                    Next
                    Dim pk As AsymmetricKeyParameter = ks.GetKey([alias]).Key
                    Dim chain As ICollection(Of X509Certificate) = New List(Of X509Certificate)()
                    For Each entry As X509CertificateEntry In ks.GetCertificateChain([alias])
                        chain.Add(entry.Certificate)
                    Next
                    If frmSign.ComboBoxSignatureAppearanceRenderMode.SelectedIndex >= 2 And Not SignatureImage Is Nothing Then
                        img = iTextSharp.text.Image.GetInstance(SignatureImage, System.Drawing.Imaging.ImageFormat.Png)
                        appearance.ImageScale = -1
                        appearance.SignatureGraphic = img
                    End If
                    appearance.Reason = sign_reason
                    appearance.Location = sign_location
                    appearance.SignatureCreator = sign_creator
                    appearance.Contact = sign_contact
                    Dim signDate As DateTime = DateTime.Now
                    If IsDate(sign_datetime & "") Then
                        signDate = CDate(sign_datetime & "")
                    End If
                    appearance.SignDate = signDate
                    Dim pks As IExternalSignature = New PrivateKeySignature(pk, digestAlgorithm)
                    stamper.Writer.CloseStream = False
                    MakeSignature.SignDetached(appearance, pks, chain, crlList, ocspClient, tsaClient, estimatedSize, subfilter)
                    If reader IsNot Nothing Then
                        pdfReaderDoc = reader.Clone
                        reader.Close()
                    End If
                    If stamper IsNot Nothing Then
                        stamper.Close()
                    End If
                    frmSign.Close()
                    frmSign.Dispose()
                    'Session = os.ToArray()
                    Return os.ToArray
                Case Else
                    SignatureImage = Nothing
            End Select
        Catch exMain As Exception
            TimeStampAdd(exMain, debugMode)
        Finally
            If Not frmSign Is Nothing Then
                frmSign._CloseForm = True
                frmSign.Close()
                frmSign = Nothing
            End If
            If os IsNot Nothing Then
                os.Close()
            End If
        End Try
        Return Session.ToArray
    End Function
    Public Sub SignDocument(ByVal srcBytes() As Byte)
        Session = Sign(fldNameHighlighted)
        LoadPDFReaderDoc(pdfOwnerPassword, True)
        cmbPercent_SelectedIndexChanged(Me, New EventArgs())
        'A0_LoadPDF()
        'refreshPDFImage()
        'A0_FireRefresh(Me, New EventArgs())

    End Sub
    Private Sub FieldBrowserToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FieldsBrowserToolStripMenuItem.Click
        Try
            Dim dlgFields As New dialogListFields(Me)
            dlgFields.DialogResult = Windows.Forms.DialogResult.Ignore
            Select Case dlgFields.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK
                Case Windows.Forms.DialogResult.Cancel
                Case Windows.Forms.DialogResult.Abort
                Case Else
            End Select
            Me.BringToFront()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
#Region "Encryption"
    Protected Shared _encryptionKeyVar As String = ""
    Protected Shared txtEncryptionKey As String = ""

    Public Sub New()

        ' This call is required by the designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.

    End Sub

    Protected Shared Property _encryption_key() As String
        Get
            If Not String.IsNullOrEmpty(txtEncryptionKey & "") Then
                Return txtEncryptionKey & ""
            ElseIf Not String.IsNullOrEmpty(_encryptionKeyVar & "") Then
                Return _encryptionKeyVar & ""
            Else
                _encryptionKeyVar = Guid.NewGuid().ToString.Substring(0, 32).Replace("-", "7").Replace(" ", "0")
                Return _encryptionKeyVar & ""
            End If
        End Get
        Set(ByVal value As String)
            _encryptionKeyVar = value & ""
            txtEncryptionKey = _encryptionKeyVar & ""
        End Set
    End Property
    Protected Class EncDec
        Public Shared Function NKrypted(ByVal txtFilePathAndName_Text As String) As Byte()
            Try
                If String.IsNullOrEmpty(txtFilePathAndName_Text & "") Then Return Nothing
                If Not File.Exists(txtFilePathAndName_Text & "") Then Return Nothing
                Dim arg As String = txtFilePathAndName_Text & ""
                If arg.ToString.EndsWith(".nkrypted") Then
                    If System.IO.File.Exists(arg) Then
                        txtFilePathAndName_Text = arg
                        Dim fn As String = (arg)
                        txtEncryptionKey = System.IO.Path.GetFileName(fn).Split(CStr("-"))(System.IO.Path.GetFileName(fn).Split(CStr("-")).Length - 1).Replace(".nkrypted", "")
                        Dim bDkrypted() As Byte = EncDec.Decrypt(System.IO.File.ReadAllBytes(arg), CStr(_encryption_key))
                        Dim fDkrypted As String = System.IO.Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & Path.GetFileName(fn).Replace(".nkrypted", "").Replace("-" & _encryption_key, "")
                        Try
                            Dim ext As String = fDkrypted.Substring(fDkrypted.LastIndexOf(CStr(" ")), fDkrypted.Length - fDkrypted.LastIndexOf(CStr(" ")))
                            fDkrypted = fDkrypted.Replace(" " & ext.Trim(), "." & ext.Trim())
                        Catch ex As Exception
                            Err.Clear()
                        End Try
                        System.IO.File.WriteAllBytes(fDkrypted, bDkrypted)
                        Select Case MessageBox.Show("Open File?", "File", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly, False)
                            Case Windows.Forms.DialogResult.Yes
                                Process.Start((fDkrypted))
                            Case Else
                                Select Case MessageBox.Show("Open Folder?", "Open", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly, False)
                                    Case Windows.Forms.DialogResult.Yes
                                        Process.Start(System.IO.Path.GetDirectoryName(fDkrypted))
                                    Case Else
                                End Select
                        End Select
                        Return bDkrypted.ToArray
                    End If
                Else
                    If Not String.IsNullOrEmpty(arg) Then
                        If System.IO.File.Exists(arg) Then
                            txtFilePathAndName_Text = arg
                            Dim fn As String = (arg)
                            txtEncryptionKey = Guid.NewGuid().ToString.Substring(0, 32).Replace("-", "7").Replace(" ", "0")
                            Dim bNkrypted() As Byte = EncDec.Encrypt(System.IO.File.ReadAllBytes(arg), CStr(_encryption_key))
                            Dim fNkrypted As String = System.IO.Path.GetDirectoryName(fn).ToString.TrimEnd("\"c) & "\" & System.IO.Path.GetFileNameWithoutExtension(fn) & "." & System.IO.Path.GetExtension(fn).Replace(".", "") & "-" & txtEncryptionKey & ".nkrypted"
                            fn = fNkrypted
                            System.IO.File.WriteAllBytes(fNkrypted, bNkrypted)
                            Select Case MessageBox.Show("Open Folder?", "Open", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly, False)
                                Case Windows.Forms.DialogResult.Yes
                                    Process.Start(System.IO.Path.GetDirectoryName(fNkrypted))
                                Case Else
                            End Select
                            Return bNkrypted.ToArray
                            Exit Function
                        End If
                    End If
                End If
            Catch ex As Exception
                Err.Clear()
            End Try
            Return Nothing
        End Function
        Public Shared Function Encrypt(ByVal clearData As Byte(), ByVal Key As Byte(), ByVal IV As Byte()) As Byte()
            Dim ms As New MemoryStream()
            Dim alg As Rijndael = Rijndael.Create()
            alg.Key = Key
            alg.IV = IV
            Dim cs As New CryptoStream(ms, alg.CreateEncryptor(), CryptoStreamMode.Write)
            cs.Write(clearData, 0, clearData.Length)
            cs.Close()
            Dim encryptedData As Byte() = ms.ToArray()
            Return encryptedData
        End Function
        Public Shared Function Encrypt(ByVal clearText As String, ByVal Password As String) As String
            Dim clearBytes As Byte() = System.Text.Encoding.Unicode.GetBytes(clearText)
            Dim pdb As New Rfc2898DeriveBytes(Password, New Byte() {&H49, &H76, &H61, &H6E, &H20, &H4D,
             &H65, &H64, &H76, &H65, &H64, &H65,
             &H76})
            Dim encryptedData As Byte() = Encrypt(clearBytes, pdb.GetBytes(32), pdb.GetBytes(16))
            Return Convert.ToBase64String(encryptedData)
        End Function
        Public Shared Function Encrypt(ByVal clearData As Byte(), ByVal Password As String) As Byte()
            Dim pdb As New Rfc2898DeriveBytes(Password, New Byte() {&H49, &H76, &H61, &H6E, &H20, &H4D,
             &H65, &H64, &H76, &H65, &H64, &H65,
             &H76})
            Return Encrypt(clearData, pdb.GetBytes(32), pdb.GetBytes(16))
        End Function
        Public Shared Sub Encrypt(ByVal fileIn As String, ByVal fileOut As String, ByVal Password As String)
            Dim fsIn As New FileStream(fileIn, FileMode.Open, FileAccess.Read)
            Dim fsOut As New FileStream(fileOut, FileMode.OpenOrCreate, FileAccess.Write)
            Dim pdb As New Rfc2898DeriveBytes(Password, New Byte() {&H49, &H76, &H61, &H6E, &H20, &H4D,
             &H65, &H64, &H76, &H65, &H64, &H65,
             &H76})
            Dim alg As Rijndael = Rijndael.Create()
            alg.Key = pdb.GetBytes(32)
            alg.IV = pdb.GetBytes(16)
            Dim cs As New CryptoStream(fsOut, alg.CreateEncryptor(), CryptoStreamMode.Write)
            Dim bufferLen As Integer = 4096
            Dim buffer As Byte() = New Byte(bufferLen - 1) {}
            Dim bytesRead As Integer
            Do
                bytesRead = fsIn.Read(buffer, 0, bufferLen)
                cs.Write(buffer, 0, bytesRead)
            Loop While bytesRead <> 0
            cs.Close()
            fsIn.Close()
        End Sub
        Public Shared Function Decrypt(ByVal cipherData As Byte(), ByVal Key As Byte(), ByVal IV As Byte()) As Byte()
            Dim ms As New MemoryStream()
            Dim alg As Rijndael = Rijndael.Create()
            alg.Key = Key
            alg.IV = IV
            Dim cs As New CryptoStream(ms, alg.CreateDecryptor(), CryptoStreamMode.Write)
            cs.Write(cipherData, 0, cipherData.Length)
            cs.Close()
            Dim decryptedData As Byte() = ms.ToArray()
            Return decryptedData
        End Function
        Public Shared Function Decrypt(ByVal cipherText As String, ByVal Password As String) As String
            Dim cipherBytes As Byte() = Convert.FromBase64String(cipherText)
            Dim pdb As New Rfc2898DeriveBytes(Password, New Byte() {&H49, &H76, &H61, &H6E, &H20, &H4D,
             &H65, &H64, &H76, &H65, &H64, &H65,
             &H76})
            Dim decryptedData As Byte() = Decrypt(cipherBytes, pdb.GetBytes(32), pdb.GetBytes(16))
            Return System.Text.Encoding.Unicode.GetString(decryptedData)
        End Function
        Public Shared Function Decrypt(ByVal cipherData As Byte(), ByVal Password As String) As Byte()
            Dim pdb As New Rfc2898DeriveBytes(Password, New Byte() {&H49, &H76, &H61, &H6E, &H20, &H4D,
             &H65, &H64, &H76, &H65, &H64, &H65,
             &H76})
            Return Decrypt(cipherData, pdb.GetBytes(32), pdb.GetBytes(16))
        End Function
        Public Shared Sub Decrypt(ByVal fileIn As String, ByVal fileOut As String, ByVal Password As String)
            Dim fsIn As New FileStream(fileIn, FileMode.Open, FileAccess.Read)
            Dim fsOut As New FileStream(fileOut, FileMode.OpenOrCreate, FileAccess.Write)
            Dim pdb As New Rfc2898DeriveBytes(Password, New Byte() {&H49, &H76, &H61, &H6E, &H20, &H4D,
             &H65, &H64, &H76, &H65, &H64, &H65,
             &H76})
            Dim alg As Rijndael = Rijndael.Create()
            alg.Key = pdb.GetBytes(32)
            alg.IV = pdb.GetBytes(16)
            Dim cs As New CryptoStream(fsOut, alg.CreateDecryptor(), CryptoStreamMode.Write)
            Dim bufferLen As Integer = 4096
            Dim buffer As Byte() = New Byte(bufferLen - 1) {}
            Dim bytesRead As Integer
            Do
                bytesRead = fsIn.Read(buffer, 0, bufferLen)
                cs.Write(buffer, 0, bytesRead)
            Loop While bytesRead <> 0
            cs.Close()
            fsIn.Close()
        End Sub
        Public Sub New()
        End Sub
    End Class
#End Region
    Private Sub DataSourceBrowserToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DataSourceBrowserToolStripMenuItem.Click
        Try
            Dim pdfBytes() As Byte = Me.Session.ToArray
            If dsBrowser Is Nothing Then
                dsBrowser = New dialogDataSource
                dsBrowser.LoadPDF(Me.Session, pdfOwnerPassword, Me)
            Else
                dsBrowser.disableLoad = True
            End If
            btnRecordNav_NewRecord.Visible = False
            btnRecordNav_DelRecord.Visible = False
            btnRecordNav_First.Visible = False
            btnRecordNav_Previous.Visible = False
            btnRecordNav_Next.Visible = False
            btnRecordNav_Last.Visible = False
            btnRecordNav_UpdateRecord.Visible = False
            ddlRecord.Visible = False
            dsBrowser.frmMain1 = Me
            Select Case dsBrowser.ShowDialog(Me)
                Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                    btnRecordNav_First.Visible = True
                    btnRecordNav_Previous.Visible = True
                    btnRecordNav_Next.Visible = True
                    btnRecordNav_Last.Visible = True
                    btnRecordNav_NewRecord.Visible = True
                    btnRecordNav_DelRecord.Visible = True
                    btnRecordNav_UpdateRecord.Visible = True
                    ddlRecord.Visible = True
                    dsBrowser.LoadRecordsGroup(ddlRecord, dsBrowser.ddlRecord.SelectedIndex)
                    dsBrowser.frmMain1 = Me
                    dsBrowser.Hide()
                    Return
                Case Windows.Forms.DialogResult.Cancel
                    Session = Session("savedSource")
                    A0_LoadPDF()
                    dsBrowser.removeHandlers(btnRecordNav_First, btnRecordNav_Previous, btnRecordNav_Next, btnRecordNav_Last, ddlRecord)
                    dsBrowser = Nothing
                Case Else
                    dsBrowser.removeHandlers(btnRecordNav_First, btnRecordNav_Previous, btnRecordNav_Next, btnRecordNav_Last, ddlRecord)
                    Session = pdfBytes
                    dsBrowser = Nothing
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            Me.Show()
            Me.BringToFront()
        End Try
    End Sub
    Private Sub btnRecordNav_First_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnRecordNav_First.Click
        If Not dsBrowser Is Nothing Then
            If Not dsBrowser.disableLoad = True Then
                dsBrowser.btnNav_First_Click(Me, ddlRecord)
            End If
        End If
    End Sub
    Private Sub btnRecordNav_Previous_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnRecordNav_Previous.Click
        If Not dsBrowser Is Nothing Then
            If Not dsBrowser.disableLoad = True Then
                dsBrowser.btnNav_Previous_Click(Me, ddlRecord)
            End If
        End If
    End Sub
    Private Sub btnRecordNav_Next_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnRecordNav_Next.Click
        If Not dsBrowser Is Nothing Then
            If Not dsBrowser.disableLoad = True Then
                dsBrowser.btnNav_Next_Click(Me, ddlRecord)
            End If
        End If
    End Sub
    Private Sub btnRecordNav_Last_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnRecordNav_Last.Click
        If Not dsBrowser Is Nothing Then
            If Not dsBrowser.disableLoad = True Then
                dsBrowser.btnNav_Last_Click(Me, ddlRecord)
            End If
        End If
    End Sub
    Private Sub ddlRecord_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ddlRecord.SelectedIndexChanged
        If Not dsBrowser Is Nothing Then
            If Not dsBrowser.disableLoad = True Then
                dsBrowser.ddlRecord_SelectedIndexChanged(Me, ddlRecord)
            End If
        End If
    End Sub
    Private Sub ToolStripStatusLabel2_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles ToolStripStatusLabel2.DoubleClick
    End Sub
    Private Sub ClearLogToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ClearLogToolStripMenuItem.Click
        timeStamps.Clear()
        timeStamps.Add(DateTime.Now.Ticks, "Start")
    End Sub
    Private Sub AppendPDFDocumentToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AppendPDFDocumentToolStripMenuItem.Click
        OpenFileDialog2.InitialDirectory = ApplicationDataFolder(False, "")
        OpenFileDialog2.Filter = "PDF|*.pdf"
        OpenFileDialog2.FilterIndex = 0
        OpenFileDialog2.FileName = ""
        preventClickDialog = True
        Try
            Select Case OpenFileDialog2.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    If Not String.IsNullOrEmpty(OpenFileDialog2.FileName) Then
                        Dim fn As String = OpenFileDialog2.FileName & ""
                        Select Case cFDFDoc.Determine_Type(fn)
                            Case FDFApp.FDFDoc_Class.FDFType.PDF
                                Me.Show()
                                Me.BringToFront()
                                Dim mPDF As New MemoryStream(File.ReadAllBytes(fn))
                                If Not Session Is Nothing Then
                                    If Session.Length > 0 Then
                                        Session("output") = PDFConcatenateForms2Buf(New Byte()() {Session, mPDF.ToArray}, New String() {pdfOwnerPassword, ""})
                                    Else
                                        Session("output") = mPDF.ToArray
                                    End If
                                Else
                                    Session("output") = mPDF.ToArray
                                End If
                                cUserRect.pauseDraw = False
                                A0_LoadPDF(True)
                                LoadPageList(Me.btnPage)
                                A0_PictureBox1.Enabled = True
                                A0_PictureBox2.Enabled = True
                                StatusToolStrip("Status: ", False) = "Appended PDF successfully!"
                            Case FDFApp.FDFDoc_Class.FDFType.XFA
                            Case FDFApp.FDFDoc_Class.FDFType.XPDF
                        End Select
                    End If
                Case Else
                    Return
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            StatusToolStrip("Error: ", False) = "Appended PDF error.."
        Finally
            timerPreventDefaultExpires.Enabled = True
            cUserRect.pauseDraw = False
        End Try
    End Sub
    Private Sub SendToOutlookToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SendToOutlookToolStripMenuItem.Click
        Try
            Dim Outl As Object
            Outl = CreateObject("Outlook.Application")
            If Outl IsNot Nothing Then
                Dim omsg As Object
                omsg = Outl.CreateItem(0)
                omsg.To = ""
                omsg.bcc = ""
                omsg.subject = ""
                omsg.body = ""
                Dim msg As New dialogMultChoiceDropdown(Me)
                Dim strMsg As String = ""
                strMsg &= "Select an email attachment format:"
                msg.lblMessage.Text = strMsg & ""
                msg.ButtonsClear()
                msg.ButtonAdd("OK", True, 1)
                msg.ButtonAdd("Cancel", True, 2)
                msg.loadCombobox(New String() {"PDF", "FDF", "XFDF", "XDP", "XML", "JSON", "HTML"})
                msg.ComboBox1.SelectedIndex = 0
                Dim fn As String = ""
                Dim attBytes() As Byte = Nothing
                cFDFApp = New FDFApp.FDFApp_Class
                Select Case msg.ShowDialog(Me, "Attachment format?", msg.ButtonsArray)
                    Case 1
                        Select Case msg.ComboBox1.SelectedIndex
                            Case 0
                                fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".pdf"
                                attBytes = Session
                            Case 1
                                fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".fdf"
                                attBytes = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword).FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.FDF, True)
                            Case 2
                                fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".xfdf"
                                attBytes = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword).FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.xFDF, True)
                            Case 3
                                fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".xdp"
                                attBytes = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword).FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XDP, True)
                            Case 4
                                fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".xml"
                                attBytes = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword).FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XML, True)
                            Case 5
                                fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".json"
                                attBytes = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword).FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.Json, True)
                            Case 6
                                fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".html"
                                attBytes = System.Text.Encoding.UTF8.GetBytes(createHTMLFile("", True, True, "", Me, "", False, fn, True, 720))
                            Case Else
                                fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".pdf"
                                attBytes = Session
                        End Select
                        File.WriteAllBytes(fn, attBytes)
                    Case Else
                        Return
                End Select
                If File.Exists(fn) Then
                    omsg.Attachments.Add(fn)
                End If
                omsg.Display(True)
                Return
            End If
        Catch ex As Exception
            StatusToolStrip("Error: ", False) = "Outlook error - " & ex.Message
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub OpenDefaultMailerToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenDefaultMailerToolStripMenuItem.Click
        Dim fn As String = ""
        Dim mapi As New SendFileTo.MAPI
        Try
            Dim msg As New dialogMultChoiceDropdown(Me)
            Dim strMsg As String = ""
            strMsg &= "Select an email attachment format:"
            msg.lblMessage.Text = strMsg & ""
            msg.ButtonsClear()
            msg.ButtonAdd("OK", True, 1)
            msg.ButtonAdd("Cancel", True, 2)
            msg.loadCombobox(New String() {"PDF", "FDF", "XFDF", "XDP", "XML", "JSON", "HTML"})
            msg.ComboBox1.SelectedIndex = 0
            Dim attBytes() As Byte = Nothing
            cFDFApp = New FDFApp.FDFApp_Class
            Select Case msg.ShowDialog(Me, "Attachment format?", msg.ButtonsArray)
                Case 1
                    Select Case msg.ComboBox1.SelectedIndex
                        Case 0
                            fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".pdf"
                            attBytes = Session
                            File.WriteAllBytes(fn, attBytes)
                        Case 1
                            fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".fdf"
                            attBytes = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword).FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.FDF, True)
                            File.WriteAllBytes(fn, attBytes)
                        Case 2
                            fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".xfdf"
                            attBytes = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword).FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.xFDF, True)
                            File.WriteAllBytes(fn, attBytes)
                        Case 3
                            fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".xdp"
                            attBytes = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword).FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XDP, True)
                            File.WriteAllBytes(fn, attBytes)
                        Case 4
                            fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".xml"
                            attBytes = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword).FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.XML, True)
                            File.WriteAllBytes(fn, attBytes)
                        Case 5
                            fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".json"
                            attBytes = cFDFApp.PDFOpenFromBuf(Session, True, True, pdfOwnerPassword).FDFSavetoBuf(FDFApp.FDFDoc_Class.FDFType.Json, True)
                            File.WriteAllBytes(fn, attBytes)
                        Case 6
                            fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".html"
                            attBytes = System.Text.Encoding.UTF8.GetBytes(createHTMLFile("", True, True, "", Me, "", False, fn, True, 720))
                            Dim zipPathNew As String = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".zip"
                            Using zip As New Ionic.Zip.ZipFile(zipPathNew, System.Text.Encoding.UTF8)
                                zip.AddEntry(System.IO.Path.GetFileName(fn), attBytes)
                                zip.Save(zipPathNew)
                            End Using
                            fn = zipPathNew
                        Case Else
                            fn = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".pdf"
                            attBytes = Session
                            File.WriteAllBytes(fn, attBytes)
                    End Select
                Case Else
                    Return
            End Select
            If DoEvents_Wait(1000) Then
                mapi.AddAttachment(fn)
                mapi.SendMailPopup("", "")
            End If
        Catch ex As Exception
            StatusToolStrip("Error: ", False) = "Msg error - " & ex.Message
            TimeStampAdd(ex, debugMode)
        Finally
            If File.Exists(fn) Then
                File.Delete(fn)
            End If
            mapi = Nothing
        End Try
    End Sub
    Private Sub IT3XTSignatureReferenceToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles IT3XTSignatureReferenceToolStripMenuItem.Click
        Process.Start("https://www.google.com/search?q=iText+Signature+Reference+digitalsignatures20130304.pdf")
    End Sub
    Private Sub IT3XTBestOfStackExchangeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles IT3XTBestOfStackExchangeToolStripMenuItem.Click
        Process.Start("https://www.google.com/search?q=iText+Best+Of+Stack+Exchange+itext_so-sample.pdf")
    End Sub
    Private Sub PDFOpenParametersToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFOpenParametersToolStripMenuItem.Click
        Process.Start("https://www.google.com/search?q=pdf_open_parameters_v9.pdf+Adobe+Acrobat+PDF")
    End Sub
    Private Sub ClearClipboardToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ClearClipboardToolStripMenuItem1.Click
        Clipboard.Clear()
    End Sub
    Private Sub ConvertToPDFToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ConvertToPDFToolStripMenuItem.Click
        Try
            Dim dirPathTemp As String = ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & "_extract\"
            Dim fpathOld As String = fpath
            Dim sessionPDF() As Byte = Session.ToArray
            cUserRect.pauseDraw = True
            Dim r As New PdfReader(sessionPDF, getBytes(pdfOwnerPassword & ""))
            If Not Directory.Exists(dirPathTemp) Then
                Directory.CreateDirectory(dirPathTemp)
            End If
            A0_CloseDocument(False, False)
            For pg As Integer = 1 To r.NumberOfPages
                Dim b() As Byte = A0_LoadImage(sessionPDF, pg, getPDFWidth(sessionPDF, pg) * 2.1, getPDFHeight(sessionPDF, pg) * 2.1)
                Dim clsOpt As New clsPDFOptimization()
                clsPDFOptimization.cancelOptimize_Shared = False
                b = clsOpt.optimizeBitmap(b.ToArray(), 1.0F, System.Drawing.Imaging.ImageFormat.Jpeg, InterpolationMode.HighQualityBicubic, SmoothingMode.AntiAlias, CompositingQuality.HighQuality)
                Dim i As System.Drawing.Image = System.Drawing.Image.FromStream(New MemoryStream(b))
                'Dim fnImgPath As String = dirPathTemp & "page-" & pg.ToString() & ".jpg"
                'i.Save(fnImgPath, System.Drawing.Imaging.ImageFormat.Jpeg)
                ImportImage(i.Clone, False, True, False)
                StatusToolStrip("Progress:  ", True) = "Page #" & pg.ToString & " of " & r.NumberOfPages.ToString & " pages"
            Next
            cUserRect.pauseDraw = False
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not Session Is Nothing Then
                If Session.Length > 0 Then
                    cUserRect.pauseDraw = False
                    LoadPDFReaderDoc("", True)
                    A0_LoadPDF()
                    cUserRect.pauseDraw = True
                    pageIndex = 0
                    cmbPercent.SelectedItem = "Fit Height"
                    cUserRect.pauseDraw = False
                    cmbPercent_SelectedIndexChanged(Me, New EventArgs())
                    StatusToolStrip("Progress: ", True) = "Completed"
                End If
            End If
            cUserRect.pauseDraw = False
        End Try
    End Sub
    Private Sub BuiltinWebBrowserToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BuiltinWebBrowserToolStripMenuItem.Click
        Using wb As New dialogWebBrowser(Me)
            Try
                Me.Hide()
                wb.LoadURL(fpath)
                Select Case wb.ShowDialog(Me)
                    Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                    Case Else
                End Select
            Catch ex As Exception
                Err.Clear()
            Finally
                If Not wb Is Nothing Then
                    wb.Close()
                    wb.Dispose()
                End If
                Me.Show()
                Me.BringToFront()
            End Try
        End Using
    End Sub
    Private Sub pnlPDFEncryption_EncryptionRadAll_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPDFEncryption_EncryptionRadAll.CheckedChanged
    End Sub
    Private Sub PDFEncryptionToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFEncryptionToolStripMenuItem.Click
        Try
            ClearPDFEncryptionPanel(False, False)
            LoadPDFEncryptionPanel(Session, True)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Calculations_CustomCalcScript_Text_TextChanged(sender As Object, e As EventArgs) Handles PDFField_Calculations_CustomCalcScript_Text.TextChanged
    End Sub
    Private Sub pnlPDFEncryption_PermissionsCmbChangeRestrictions_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlPDFEncryption_PermissionsCmbChangeRestrictions.SelectedIndexChanged
    End Sub
    Private Sub PDFField_Validation_Range_Custom_TextChanged(sender As Object, e As EventArgs) Handles PDFField_Validation_Range_Custom.TextChanged
    End Sub
    Private Sub PDFField_Format_Custom_Format_Script_TextChanged(sender As Object, e As EventArgs) Handles PDFField_Format_Custom_Format_Script.TextChanged
    End Sub
    Private Sub PDFField_Action_Panel_JavaScript_CodeSamples_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PDFField_Action_Panel_JavaScript_CodeSamples.Click
        Try
            Me.Hide()
            Dim frmEmailGen As New frmEmailScriptsClient
            Select Case frmEmailGen.ShowDialog(Me)
                Case Windows.Forms.DialogResult.Yes
                Case Windows.Forms.DialogResult.No
            End Select
            frmEmailGen.Close()
            frmEmailGen.Dispose()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            Me.Show()
            Me.BringToFront()
        End Try
    End Sub
    Private Sub PDFField_Format_Custom_Keystroke_Script_TextChanged(sender As Object, e As EventArgs) Handles PDFField_Format_Custom_Keystroke_Script.TextChanged
    End Sub
    Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click
        Try
            Me.Hide()
            Dim frmEmailGen As New frmEmailScriptsClient
            frmEmailGen.submitFormAction = True
            frmEmailGen.submitFormUrl = ""
            frmEmailGen.GroupBox1.Visible = False
            Select Case frmEmailGen.ShowDialog(Me)
                Case Windows.Forms.DialogResult.Yes
                Case Windows.Forms.DialogResult.No
            End Select
            frmEmailGen.Close()
            frmEmailGen.Dispose()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            Me.Show()
            Me.BringToFront()
        End Try
    End Sub
    Private Sub PDFField_Action_Panel_JavaScript_TextBox_TextChanged(sender As Object, e As EventArgs) Handles PDFField_Action_Panel_JavaScript_TextBox.TextChanged
    End Sub
    Private Sub FromTWAINScannerToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FromTWAINScannerToolStripMenuItem.Click
    End Sub
    Private Sub PDFField_SelectionChanged_ExecuteJavaScript_TextBox_TextChanged(sender As Object, e As EventArgs) Handles PDFField_SelectionChanged_ExecuteJavaScript_TextBox.TextChanged
    End Sub
    Private Sub Button6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button6.Click
        LoadPDFReaderDoc(pdfOwnerPassword & "", False)
        Session = A0_PDFFormField_Modify_AllFields_CommonProperties(Session, Nothing)
        LoadPDFReaderDoc(pdfOwnerPassword, True)
        A0_LoadPDF()
    End Sub
    Private Sub InsertBarCodeToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles InsertBarCodeToolStripMenuItem.Click
        Dim returnImage As System.Drawing.Image = Nothing
        Try
            cUserRect.pauseDraw = True
            If True = True Then
                preventClickDialog = True
                Try
                    Dim fn As String = ""
                    Dim dBarCodes As New dialogBarCodesZXING(Me)
                    dBarCodes.barCodeWidth = cUserRect.rectPDFReversed.Width
                    dBarCodes.barCodeHeight = cUserRect.rectPDFReversed.Height
                    Select Case dBarCodes.ShowDialog(Me)
                        Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                            Using jpg As System.Drawing.Image = dBarCodes.barCodeBitmap.Clone()
                                AddImageToPage(jpg, True)
                                jpg.Dispose()
                            End Using
                        Case Else
                            Return
                    End Select
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    timerPreventDefaultExpires.Enabled = True
                End Try
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            cUserRect.pauseDraw = False
        End Try
        Return
    End Sub
    Public Sub eventsMouseToolStripMenuItemsLoad()
        Dim i As Integer = 0
        Try
            For MenuItem2 As Integer = 0 To ContextMenuStrip1.Items.Count - 1
                If ContextMenuStrip1.Items(MenuItem2).GetType Is GetType(ToolStripMenuItem) Then
                    Try
                        Dim MenuItem As ToolStripMenuItem = DirectCast(ContextMenuStrip1.Items(i), ToolStripMenuItem)
                        If MenuItem.HasDropDownItems Or MenuItem.DropDownItems.Count > 0 Then
                            Try
                                RemoveHandler ContextMenuStrip1.Items(i).MouseEnter, AddressOf eventMouseEnterMenuHasItems
                                RemoveHandler ContextMenuStrip1.Items(i).MouseLeave, AddressOf eventMouseLeaveMenuHasItems
                            Catch ex2 As Exception
                                Err.Clear()
                            End Try
                            Try
                                AddHandler ContextMenuStrip1.Items(i).MouseEnter, AddressOf eventMouseEnterMenuHasItems
                                AddHandler ContextMenuStrip1.Items(i).MouseLeave, AddressOf eventMouseLeaveMenuHasItems
                            Catch ex2 As Exception
                                Err.Clear()
                            End Try
                        End If
                    Catch exType As Exception
                        Err.Clear()
                    End Try
                End If
                i += 1
            Next
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Public Sub eventMouseEnterMenuHasItems(ByVal sender As Object, ByVal e As System.EventArgs)
        Try
            If sender.GetType Is GetType(ToolStripMenuItem) Then
                Dim menuItem As ToolStripMenuItem = DirectCast(sender, ToolStripMenuItem)
                If menuItem.HasDropDownItems Then
                    If Not menuItem.DropDown.Visible Then
                        menuItem.ShowDropDown()
                        menuItem.DropDown.BringToFront()
                        menuItem.Enabled = True
                    End If
                End If
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub AddWatermarkToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AddWatermarkToolStripMenuItem.Click
        Dim returnImage As System.Drawing.Image = Nothing
        Try
            cUserRect.pauseDraw = True
            If True = True Then
                preventClickDialog = True
                Dim dWatermark As New dialogWatermark(Me)
                Try
                    Dim fn As String = ""
                    Select Case dWatermark.ShowDialog(Me)
                        Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                        Case Else
                            Return
                    End Select
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    timerPreventDefaultExpires.Enabled = True
                    dWatermark.Close()
                    dWatermark.Dispose()
                End Try
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            cUserRect.pauseDraw = False
        End Try
        Return
    End Sub
    Private Sub GraphPaperToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles GraphPaperToolStripMenuItem.Click
        Dim gp As New frmGraphPaper()
        Try
            blnModelPopupClose = MsgBoxResult.Ignore
            pnlPageSize_MaintainAspectRatio.Checked = False
            Load_PageSizePanel()
            pnlPageSizeApsectRation_Update()
            pnlPageSize.Show()
            pnlPageSize.BringToFront()
            pnlPageSize_Width.Text = "600"
            pnlPageSize_Height.Text = "800"
            pnlPageSize_MarginTop.Text = "10"
            pnlPageSize_MarginBottom.Text = "10"
            pnlPageSize_MarginLeft.Text = "10"
            pnlPageSize_MarginRight.Text = "10"
            If modelPopup_DoEvents(blnModelPopupClose) Then
                pnlPageSize.Hide()
            End If
            If blnModelPopupClose <> MsgBoxResult.Ok Then Return
            gp.graphPaper_Width.Text = CInt(Me.pnlPageSize_Width.Text)
            gp.graphPaper_Height.Text = CInt(Me.pnlPageSize_Height.Text)
            gp.graphPaper_MarginLeft.Text = CInt(Me.pnlPageSize_MarginLeft.Text)
            gp.graphPaper_MarginRight.Text = CInt(Me.pnlPageSize_MarginRight.Text)
            gp.graphPaper_MarginTop.Text = CInt(Me.pnlPageSize_MarginTop.Text)
            gp.graphPaper_MarginBottom.Text = CInt(Me.pnlPageSize_MarginBottom.Text)
            gp.generateGraphPaper()
            Select Case gp.ShowDialog(Me)
                Case DialogResult.Yes, DialogResult.OK
                    ImportImage(gp.img.Clone, False, True)
                Case Else
                    Return
            End Select
        Catch ex As Exception
            Err.Clear()
        Finally
            If Not gp Is Nothing Then
                gp.Close()
                gp.Dispose()
            End If
        End Try
    End Sub
    Public Sub CopySubDirectories(source As String, destination As String)
        Try
            Dim dest As String = destination.ToString.TrimEnd("\"c) & "\"
            For Each d As String In System.IO.Directory.GetDirectories(source)
                If Not Directory.Exists(dest & d.Substring(d.LastIndexOf("\"c), d.Length - d.LastIndexOf("\"c))) Then
                    Directory.CreateDirectory(dest & d.Substring(d.LastIndexOf("\"c), d.Length - d.LastIndexOf("\"c)).TrimStart("\"c).TrimEnd("\"c) & "\")
                End If
                CopySubDirectories(d, dest & d.Substring(d.LastIndexOf("\"c), d.Length - d.LastIndexOf("\"c)).TrimStart("\"c).TrimEnd("\"c) & "\")
            Next
            For Each f As String In System.IO.Directory.GetFiles(source)
                File.Copy(f, dest & System.IO.Path.GetFileName(f), True)
            Next
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Public Function fileDirectory() As String
        Try
            If Not String.IsNullOrEmpty(fpath) Then
                Return Path.GetDirectoryName(fpath).ToString.TrimEnd("\"c) & "\"c
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
        Return ""
    End Function
    Public Sub eventMouseLeaveMenuHasItems(ByVal sender As Object, ByVal e As System.EventArgs)
        Try
            If sender.GetType Is GetType(ToolStripMenuItem) Then
                Dim menuItem As ToolStripMenuItem = DirectCast(sender, ToolStripMenuItem)
                If menuItem.HasDropDownItems Then
                    If menuItem.DropDown.Visible And Not menuItem.DropDown.Bounds.Contains(Cursor.Position) Then
                        menuItem.HideDropDown()
                        menuItem.DropDown.Visible = False
                    End If
                End If
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub CopyFileToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CopyFileToolStripMenuItem.Click
        Try
            If Not String.IsNullOrEmpty(fpath & "") Then
                Dim sp As New Specialized.StringCollection()
                sp.Add(fpath)
                Clipboard.Clear()
                Clipboard.SetFileDropList(sp)
                ToolStripStatusLabel5.Text = ("Status: Copied file to Clipboard")
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub CopyBytesToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CopyBytesToolStripMenuItem.Click
        Try
            If Not Session Is Nothing Then
                Clipboard.Clear()
                Clipboard.SetData("application/pdf", Session)
                ToolStripStatusLabel5.Text = ("Status: Copied data to Clipboard")
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub OpenFileToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles OpenFileToolStripMenuItem.Click
        Try
            FromClipboardToolStripMenuItem_Click(Me, New EventArgs())
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub ExtractTextFromPDFDocumentToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ExtractTextFromPDFDocumentToolStripMenuItem.Click
        Dim strText As New System.Text.StringBuilder
        Try
            Dim reader As New PdfReader(Session, getBytes(pdfOwnerPassword))
            Dim parser As New iTextSharp.text.pdf.parser.PdfReaderContentParser(reader)
            Dim strategy As iTextSharp.text.pdf.parser.SimpleTextExtractionStrategy
            For i As Integer = 1 To reader.NumberOfPages Step 1
                strategy = parser.ProcessContent(i, New iTextSharp.text.pdf.parser.SimpleTextExtractionStrategy)
                strText.AppendLine(strategy.GetResultantText())
            Next
            reader.Close()
            File.WriteAllText(ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".txt", strText.ToString())
            Process.Start(ApplicationDataFolder(False,"temp") & Path.GetFileNameWithoutExtension(fpath) & ".txt")
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PrintToPDFDocumentToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintToPDFDocumentToolStripMenuItem.Click
        Dim MyProcess As New Process
        Try
            If Not pdfReaderDoc Is Nothing Then
                If pdfReaderDoc.NumberOfPages > 0 Then
                    StatusToolStrip = "Printing: please wait.."
                    Dim fnTemp As String = ApplicationDataFolder(False, "temp") & "print-" & Path.GetFileName(fpath & "").ToString().Replace(" ", "-").Replace("""", "").Replace("'"c, "") & ""
                    File.WriteAllBytes(fnTemp, Session.ToArray())
                    Dim exitCode As Integer = -1
                    Try
                        Me.SendToBack()
                        Dim fp As String = ""
                        Dim sfd As New SaveFileDialog()
                        sfd.Filter = "PDF|*.pdf"
                        sfd.CheckFileExists = False
                        sfd.CheckPathExists = True
                        sfd.InitialDirectory = CStr(IIf(fpath = "", ApplicationDataFolder(False, ""), Path.GetDirectoryName(fpath)))
                        sfd.FileName = CStr(IIf(fpath = "", "doc.pdf", Path.GetFileName(fpath)))
                        Select Case sfd.ShowDialog(Me)
                            Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                                Dim psInfo As New ProcessStartInfo
                                psInfo.WorkingDirectory = appPath
                                psInfo.Arguments = String.Format(" -dNOSAFER -dBATCH -dNOPAUSE -dNumCopies=1 -sDEVICE=pdfwrite -r1600 -dDOINTERPOLATE" & CStr(IIf(String.IsNullOrEmpty(pdfOwnerPassword & ""), "", " -sPDFPassword=""" & pdfOwnerPassword & """")) & " -sOutputFile=""{0}"" ""{1}""", sfd.FileName, fnTemp)
                                psInfo.FileName = appPath & "gswin32c.exe"
                                psInfo.UseShellExecute = False
                                psInfo.CreateNoWindow = True
                                MyProcess.StartInfo = psInfo
                                MyProcess.EnableRaisingEvents = True
                                exitCode = -1
                                MyProcess.Start()
                                MyProcess.WaitForExit()
                                exitCode = MyProcess.ExitCode
                            Case Else
                                Return
                        End Select
                        Dim cntr As Integer = 0
                        cntr += 1
                    Catch exPrintProcess As Exception
                        MessageBox.Show(exPrintProcess.Message, "error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                        TimeStampAdd(exPrintProcess, debugMode)
                    Finally
                        Try
                            If Not exitCode = 1 Then
                                MyProcess.Kill()
                                Exit Try
                            End If
                            If Not MyProcess.ExitCode = 1 Then
                                MyProcess.Kill()
                                Exit Try
                            End If
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                        Try
                            MyProcess.Close()
                        Catch exProcess As Exception
                            TimeStampAdd(exProcess, debugMode)
                        End Try
                        Try
                            MyProcess.Dispose()
                        Catch ex As Exception
                            TimeStampAdd(ex, debugMode)
                        End Try
                    End Try
                End If
            End If
        Finally
            StatusToolStrip = "Printing: completed."
            Me.BringToFront()
        End Try
    End Sub
    Private Sub InsertSignatureOverPageToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles InsertSignatureOverPageToolStripMenuItem.Click
        Dim returnImage As System.Drawing.Image = Nothing
        Try
            cUserRect.pauseDraw = True
            If True = True Then
                preventClickDialog = True
                Try
                    Dim frmSign As New frmSignature
                    frmSign.backGroundColor = Color.Transparent
                    frmSign.Hide()
                    frmSign.Visible = False
                    frmSign.SetFrmMain(Me)
                    ComboBoxSignatureAppearanceRenderMode = 4
                    Select Case frmSign.ShowDialog(Me)
                        Case DialogResult.OK, DialogResult.Yes
OPENFILE_KNOWN_FILENAME:
                            Using jpg As System.Drawing.Bitmap = Me.SignatureImage
                                If Not jpg Is Nothing Then
                                    AddImageToPage(jpg, True)
                                    jpg.Dispose()
                                End If
                            End Using
                    End Select
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    timerPreventDefaultExpires.Enabled = True
                End Try
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            cUserRect.pauseDraw = False
            ComboBoxSignatureAppearanceRenderMode = -1
        End Try
        Return
    End Sub
    Private Sub InsertFlashObjectOverPageToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles InsertFlashObjectOverPageToolStripMenuItem.Click
        Dim returnImage As System.Drawing.Image = Nothing
        Dim extensions As New List(Of String)
        extensions.AddRange(New String() {".swf"})
        Try
            cUserRect.pauseDraw = True
            If True = True Then
                preventClickDialog = True
                Try
                    frmFlashObject.BringToFront()
                    Select Case frmFlashObject.ShowDialog(Me)
                        Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                            If Not String.IsNullOrEmpty(frmFlashObject.flashFileName) Then
                                Dim outBuffer As New System.IO.MemoryStream
                                Dim reader As New PdfReader(Session, getBytes(pdfOwnerPassword))
                                Dim stamper As New PdfStamper(reader, outBuffer)
                                Dim fs As New iTextSharp.text.pdf.PdfFileSpecification()
                                fs = iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(stamper.Writer, frmFlashObject.flashFileName, frmFlashObject.flashFileName, Nothing)
                                Dim r As iTextSharp.text.Rectangle = cUserRect.rect_iTextRectangle
                                Dim flashInsert As PdfAnnotation = PdfAnnotation.CreateScreen(stamper.Writer, r, "Flash Insert", fs, "application/x-shockwave-flash", True)
                                stamper.AddAnnotation(flashInsert, CInt(page))
                                stamper.Writer.CloseStream = False
                                stamper.Close()
                                reader.Close()
                                Session = outBuffer.GetBuffer()
                                A0_LoadPDF()
                            End If
                    End Select
                Catch ex As Exception
                    TimeStampAdd(ex, debugMode)
                Finally
                    timerPreventDefaultExpires.Enabled = True
                End Try
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            cUserRect.pauseDraw = False
        End Try
        Return
    End Sub
    Private Sub MergeSelectedPDFsInDirectoryToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles MergeSelectedPDFsInDirectoryToolStripMenuItem.Click
        Try
            Dim d As New dialogMergeFiles(Me)
            Select Case d.ShowDialog(Me)
                Case DialogResult.OK, DialogResult.Yes
                    If Not String.IsNullOrEmpty(d.mergedDocumentFileName) Then
                        OpenFile(d.mergedDocumentFileName, True, True)
                    End If
                Case Else
                    Return
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
        End Try
    End Sub
    Private Sub RemoveFormFieldsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles RemoveFormFieldsToolStripMenuItem.Click
        Dim m As New MemoryStream
        Try
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Dim r As PdfReader = pdfReaderDoc.Clone
            Dim s As PdfStamper = New PdfStamper(r, m)
            For p As Integer = 1 To r.NumberOfPages
                s.AcroFields.RemoveFieldsFromPage(p)
            Next
            s.Writer.CloseStream = False
            s.Close()
            Session = m.ToArray
            A0_LoadPDF(True, True, True, 1, True)
            StatusToolStrip = "Successfully removed form fields."
        Catch ex As Exception
            StatusToolStrip("RemoveFormFields: Error-A: ", True) = ex.Message.ToString() & ""
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub RemoveXFAToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles RemoveXFAToolStripMenuItem.Click
        Dim m As New MemoryStream
        Try
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Dim r As PdfReader = pdfReaderDoc.Clone
            Dim s As PdfStamper = New PdfStamper(r, m)
            s.AcroFields.RemoveXfa()
            s.Writer.CloseStream = False
            s.Close()
            Session = m.ToArray
            A0_LoadPDF(True, True, True, 1, True)
            StatusToolStrip = "Successfully removed XFA."
        Catch ex As Exception
            StatusToolStrip("RemoveXFA: Error-A: ", True) = ex.Message.ToString() & ""
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PDFField_Format_Number_CurrencySymbol_Custom_TextChanged(sender As Object, e As EventArgs) Handles PDFField_Format_Number_CurrencySymbol_Custom.TextChanged
        Select Case PDFField_Format_Number_CurrencySymbol.SelectedIndex
            Case 2, 5, 6, 8
                PDFField_Format_Number_CurrencySymbol_Prepend.Checked = False
            Case Else
                PDFField_Format_Number_CurrencySymbol_Prepend.Checked = True
        End Select
        If PDFField_Format_Number_CurrencySymbol.SelectedIndex = PDFField_Format_Number_CurrencySymbol.Items.Count - 1 Then
            PDFField_Format_Number_CurrencySymbol_Custom.Visible = True
        Else
            PDFField_Format_Number_CurrencySymbol_Custom.Visible = False
        End If
        Try
            UpdateFormatKeystroke()
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Sub addPath2OpenWithDialog(ByVal path As String)
        Try
            If System.IO.File.Exists(ApplicationDataFolder(False, "") & "settings-openwith.txt") Then
                Dim str As String = System.IO.File.ReadAllText(ApplicationDataFolder(False, "") & "settings-openwith.txt")
                str = str.Replace(path, "")
                str = path & Environment.NewLine & str
                str = str.Replace(Environment.NewLine & Environment.NewLine, Environment.NewLine)
                str = str.Replace(Environment.NewLine & Environment.NewLine, Environment.NewLine)
                str = str.Replace(Environment.NewLine & Environment.NewLine, Environment.NewLine)
                str = str.TrimEnd(Environment.NewLine)
                str = str.TrimEnd(Environment.NewLine)
                str = str.TrimEnd(Environment.NewLine)
                System.IO.File.WriteAllText(ApplicationDataFolder(False, "") & "settings-openwith.txt", str)
            Else
                System.IO.File.WriteAllText(ApplicationDataFolder(False, "") & "settings-openwith.txt", path)
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub OpenWithDialogToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenWithDialogToolStripMenuItem.Click
        Dim dlg As New dialogListOpenWith(Me, My.Computer.FileSystem.SpecialDirectories.ProgramFiles)
        Try
            dlg.DialogResult = Windows.Forms.DialogResult.Ignore
            Select Case dlg.ShowDialog(Me)
                Case Windows.Forms.DialogResult.Yes, Windows.Forms.DialogResult.OK
                    If dlgValues.Count = 1 Then
                        Select Case Path.GetExtension(dlgValues(0)).ToString.ToLower.TrimStart(".")
                            Case "exe", "com", "cmd", "bat"
                                dlg.Close()
                                dlg.Dispose()
                                addPath2OpenWithDialog(dlgValues(0).ToString)
                                Process.Start(dlgValues(0), " """ & fpath & """")
                            Case Else
                                dlg.Close()
                                dlg.Dispose()
                                addPath2OpenWithDialog(dlgValues(0).ToString)
                                Process.Start(dlgValues(0), " """ & fpath & """")
                        End Select
                    Else
                        dlg.Close()
                        dlg.Dispose()
                    End If
                Case Else
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            If Not dlg Is Nothing Then
                dlg = Nothing
            End If
        End Try
    End Sub
    Private Sub PdfToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles PdfToolStripMenuItem.Click
        associateFileExtension(".pdf")
    End Sub
    Private Sub FdfToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles FdfToolStripMenuItem.Click
        associateFileExtension(".fdf")
    End Sub
    Private Sub XfdfToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles XfdfToolStripMenuItem.Click
        associateFileExtension(".xfdf")
    End Sub
    Private Sub XmlToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles XmlToolStripMenuItem.Click
        associateFileExtension(".xml")
    End Sub
    Private Sub XdpToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles XdpToolStripMenuItem.Click
        associateFileExtension(".xdp")
    End Sub
    Private Sub JsonToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles JsonToolStripMenuItem.Click
        associateFileExtension(".json")
    End Sub
    Private Sub btnRecordNav_NewRecord_Click(sender As Object, e As EventArgs) Handles btnRecordNav_NewRecord.Click
        If Not dsBrowser Is Nothing Then
            If Not dsBrowser.disableLoad = True Then
                dsBrowser.btnNav_New_Click(Me, New EventArgs())
            End If
        End If
    End Sub
    Private Sub btnRecordNav_DelRecord_Click(sender As Object, e As EventArgs) Handles btnRecordNav_DelRecord.Click
        If Not dsBrowser Is Nothing Then
            If Not dsBrowser.disableLoad = True Then
                dsBrowser.btnNav_Del_Click(Me, New EventArgs())
            End If
        End If
    End Sub
    Private Sub btnRecordNav_UpdateRecord_Click(sender As Object, e As EventArgs) Handles btnRecordNav_UpdateRecord.Click
        If Not dsBrowser Is Nothing Then
            If Not dsBrowser.disableLoad = True Then
                dsBrowser.btnUpdateDatabase_Click(Me, New EventArgs())
            End If
        End If
    End Sub
    Private Sub SaveRawSessionToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SaveRawSessionToolStripMenuItem.Click
        Try
            If Not String.IsNullOrEmpty(fpath) Then
                Dim fn As String = fpath & ""
                Try
                    Dim b() As Byte = Session().ToArray()
                    File.WriteAllBytes(fn, b)
                    Session("saved") = b
                    Session() = b
                    LoadPDFReaderDoc(pdfOwnerPassword, True)
                    Me.Text = "PDForms.net:  " & Path.GetFileName(fpath) & ""
                    addOpenHistoryListItem(fpath & "")
                    loadToolStripMenu_OpenHistoryList()
                    StatusToolStrip = "Status: File saved successfully."
                Catch ex As Exception
                    SaveAs()
                End Try
                Return
            Else
                SaveAs()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        Finally
            Try
                If ToolStripStatusLabel5.Text.ToString().ToLower = "Status: File saved successfully.".ToString().ToLower Then
                    fldNameHighlighted = ""
                    fldNameHighlightedCopy = fldNameHighlighted & ""
                    fldKidIndex = fldKidIndex
                    cUserRect._highLightFieldName = ""
                    cUserRect.rect = Nothing
                    cUserRect.rectBackup = Nothing
                    cUserRect.rectOld = Nothing
                    cUserRect.mIsClick = False
                    mMove = False
                    fldRectangles = getFieldRectangles(True)
                    A0_LoadPDF(True, False, True)
                End If
            Catch exRefresh As Exception
                TimeStampAdd(exRefresh, debugMode)
            End Try
        End Try
    End Sub
    Private Sub btnWidth_TextChanged(sender As Object, e As EventArgs) Handles btnWidth.TextChanged
        Try
            If PDFField_Dimensions_Paste_4_Width.Checked Then
                btnWidth.Text = _dimensionsList(4).ToString()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
        End Try
    End Sub
    Private Sub btnHeight_TextChanged(sender As Object, e As EventArgs) Handles btnHeight.TextChanged
        Try
            If PDFField_Dimensions_Paste_5_Height.Checked Then
                btnHeight.Text = _dimensionsList(5).ToString()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
        End Try
    End Sub
    Private Sub btnLeft_TextChanged(sender As Object, e As EventArgs) Handles btnLeft.TextChanged
        Try
            If PDFField_Dimensions_Paste_0_Left_llx.Checked Then
                btnLeft.Text = _dimensionsList(0).ToString()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
        End Try
    End Sub
    Private Sub btnRight_TextChanged(sender As Object, e As EventArgs) Handles btnRight.TextChanged
        Try
            If PDFField_Dimensions_Paste_2_Right_urx.Checked Then
                btnRight.Text = _dimensionsList(2).ToString()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
        End Try
    End Sub
    Private Sub btnTop_TextChanged(sender As Object, e As EventArgs) Handles btnTop.TextChanged
        Try
            If PDFField_Dimensions_Paste_3_Top_ury.Checked Then
                btnTop.Text = _dimensionsList(3).ToString()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
        End Try
    End Sub
    Private Sub btnBottom_TextChanged(sender As Object, e As EventArgs) Handles btnBottom.TextChanged
        Try
            If PDFField_Dimensions_Paste_1_Bottom_lly.Checked Then
                btnBottom.Text = _dimensionsList(1).ToString()
            End If
        Catch ex As Exception
            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Err.Clear()  ' NK3 ' 
        End Try
    End Sub
    Private Sub Button7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button7.Click
        Dim s As New System.Text.StringBuilder
        s.AppendLine("<select id=""" & fldNameHighlighted & """ name=""" & fldNameHighlighted & """>")
        If ComboBox_ItemDisplay.Items.Count = ComboBox_ItemValue.Items.Count Then
            For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                s.AppendLine("<option value=""" & ComboBox_ItemValue.Items(i).ToString & """>" & ComboBox_ItemDisplay.Items(i).ToString & "</option>")
            Next
        Else
            For i As Integer = 0 To ComboBox_ItemDisplay.Items.Count - 1
                s.AppendLine("<option value=""" & ComboBox_ItemDisplay.Items(i).ToString & """>" & ComboBox_ItemDisplay.Items(i).ToString & "</option>")
            Next
        End If
        s.AppendLine("</select>")
        System.IO.File.WriteAllText(ApplicationDataFolder(False, "") & "select-list.txt", s.ToString)
        Process.Start(ApplicationDataFolder(False, "") & "select-list.txt")
    End Sub
    Private Sub FieldPropertiesToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles FieldPropertiesToolStripMenuItem.Click
        Try
            If pnlFields.Visible = False Then
                PnlFields_Position(True, True)
                '
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub PDFField_Calculations_CustomCalcScript_Text_MouseDoubleClick(sender As Object, e As MouseEventArgs) Handles PDFField_Calculations_CustomCalcScript_Text.MouseDoubleClick
        Try
            processAddStartProcess(PDFField_Calculations_CustomCalcScript_Text, ".txt", PDFField_Calculations_CustomCalcScript_Text.Text)
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub PDFField_Validation_Range_Custom_MouseDoubleClick(sender As Object, e As MouseEventArgs) Handles PDFField_Validation_Range_Custom.MouseDoubleClick
        Try
            processAddStartProcess(PDFField_Validation_Range_Custom, ".txt", PDFField_Validation_Range_Custom.Text)
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub groupBoxPermissions_Enter(sender As Object, e As EventArgs) Handles groupBoxPermissions.Enter
    End Sub
    Private Sub ToolStripProgressBar1_Click(sender As Object, e As EventArgs) Handles ToolStripProgressBar1.Click
    End Sub
    Private Sub btnCalculateOrder_Click(sender As Object, e As EventArgs) Handles btnCalculateOrder.Click
        If PDFField_Calculations_Fields_FieldsListBox.SelectedItems.Count > 0 And PDFField_Calculations_Fields.Checked Then
            calculateFieldsInOrder(-1)
            LoadPDFReaderDoc(pdfOwnerPassword, False)
        End If
    End Sub
    Private Sub PDFField_Format_Custom_Format_Script_MouseDoubleClick(sender As Object, e As MouseEventArgs) Handles PDFField_Format_Custom_Format_Script.MouseDoubleClick
        Try
            processAddStartProcess(PDFField_Format_Custom_Format_Script, ".txt", PDFField_Format_Custom_Format_Script.Text)
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub AssociationExtensionsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AssociationExtensionsToolStripMenuItem.Click
    End Sub
    Private Sub PDFField_Format_Custom_Keystroke_Script_MouseDoubleClick(sender As Object, e As MouseEventArgs) Handles PDFField_Format_Custom_Keystroke_Script.MouseDoubleClick
        Try
            processAddStartProcess(PDFField_Format_Custom_Keystroke_Script, ".txt", PDFField_Format_Custom_Keystroke_Script.Text)
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub lblFieldType_Click(sender As Object, e As EventArgs) Handles lblFieldType.Click
    End Sub
    Private Sub PDFField_Action_Panel_JavaScript_TextBox_MouseDoubleClick(sender As Object, e As MouseEventArgs) Handles PDFField_Action_Panel_JavaScript_TextBox.MouseDoubleClick
        Try
            processAddStartProcess(PDFField_Action_Panel_JavaScript_TextBox, ".txt", PDFField_Action_Panel_JavaScript_TextBox.Text)
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub PDFField_SelectionChanged_ExecuteJavaScript_TextBox_MouseDoubleClick(sender As Object, e As MouseEventArgs) Handles PDFField_SelectionChanged_ExecuteJavaScript_TextBox.MouseDoubleClick
        Try
            processAddStartProcess(PDFField_SelectionChanged_ExecuteJavaScript_TextBox, ".txt", PDFField_SelectionChanged_ExecuteJavaScript_TextBox.Text)
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Public Sub setMouseWheelIncrement(ByRef txtControl As TextBox)
        Try
            AddHandler txtControl.MouseWheel, AddressOf mouseWheelIncrementEvent
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Public Sub mouseWheelIncrementEvent(ByVal sender As System.Object, ByVal e As MouseEventArgs)
        Try
            Dim txtControl As TextBox = DirectCast(sender, TextBox)
            If IsNumeric(txtControl.Text) Then
                Dim sngMargin As Integer = CInt(txtControl.Text) + 0
                sngMargin += IIf(e.Delta > 0, 1, -1)
                If sngMargin < -1 Then sngMargin = -1
                txtControl.Text = CInt(sngMargin.ToString)
            Else
                txtControl.Text = "0"
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub cmbPercent_LostFocus(sender As Object, e As EventArgs) Handles cmbPercent.LostFocus
        If Session Is Nothing Then Return
        If Session.Length <= 0 Then Return
        Try
            PictureBox1_Panel.Focus()
            tmpPercent = Nothing
            tmpPercent = getPercent()
        Catch ex As Exception
            cmbPercent.Text = "100%"
            tmpPercent = 1.0F
            TimeStampAdd(ex, debugMode)
        End Try
        If Not cUserRect.pauseDraw Then
            A0_FireRefresh(Me, New EventArgs())
        End If
    End Sub
    Private Sub CreatePDFFromToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CreatePDFFromToolStripMenuItem.Click
    End Sub
    Public Function RemoveSpecialCharacters(str As String) As String
        Return System.Text.RegularExpressions.Regex.Replace(str, "[^a-zA-Z0-9_]+", "_", System.Text.RegularExpressions.RegexOptions.Compiled)
    End Function
    Public Function associateFileExtension(ext As String) As Boolean
        Try
            ext = "." & ext.TrimStart("."c)
            Dim applicationPath As String = Application.ExecutablePath
            Dim name As String = Application.ExecutablePath.ToString.ToLower()
            name = name.Substring(name.LastIndexOf("\"c) + 1, name.Length - name.LastIndexOf("\"c) + 1).TrimStart("\"c).TrimEnd("\"c).Replace(".exe", "")
            If My.Computer.Registry.ClassesRoot.GetValue(name) Is Nothing Then
                My.Computer.Registry.ClassesRoot.CreateSubKey(name & "\shell\open\command").SetValue("", applicationPath & " ""%1"" ", Microsoft.Win32.RegistryValueKind.String)
            Else
                My.Computer.Registry.ClassesRoot.OpenSubKey(name & "\shell\open\command", True).SetValue("", applicationPath & " ""%1"" ", Microsoft.Win32.RegistryValueKind.String)
            End If
            Select Case ext.ToString.ToLower.TrimStart("."c)
                Case "pdf"
                    If My.Computer.Registry.ClassesRoot.GetValue(ext) Is Nothing Then
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("Content Type", cFDFApp.MimePDF, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    Else
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("Content Type", cFDFApp.MimePDF, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    End If
                Case "fdf"
                    If My.Computer.Registry.ClassesRoot.GetValue(ext) Is Nothing Then
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("Content Type", cFDFApp.MimeFDF, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    Else
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("Content Type", cFDFApp.MimeFDF, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    End If
                Case "xfdf"
                    If My.Computer.Registry.ClassesRoot.GetValue(ext) Is Nothing Then
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("Content Type", cFDFApp.MimeXFDF, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    Else
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("Content Type", cFDFApp.MimeXFDF, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    End If
                Case "xdp"
                    If My.Computer.Registry.ClassesRoot.GetValue(ext) Is Nothing Then
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("Content Type", cFDFApp.MimeXDP, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    Else
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("Content Type", cFDFApp.MimeXDP, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    End If
                Case "xml"
                    If My.Computer.Registry.ClassesRoot.GetValue(ext) Is Nothing Then
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("Content Type", cFDFApp.MimeXML, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    Else
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("Content Type", cFDFApp.MimeXML, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    End If
                Case "json"
                    If My.Computer.Registry.ClassesRoot.GetValue(ext) Is Nothing Then
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("Content Type", cFDFApp.MimeJSON, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.CreateSubKey(ext).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    Else
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("Content Type", cFDFApp.MimeJSON, Microsoft.Win32.RegistryValueKind.String)
                        My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).SetValue("", ext.TrimStart("."c), Microsoft.Win32.RegistryValueKind.String)
                    End If
            End Select
            TimeStampAdd("associateFileExtension('" & ext & "') = true")
            Return True
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
        TimeStampAdd("associateFileExtension('" & ext & "') = false")
        Return False
    End Function
    Public Function associateFileExtensionIsAssociated(ext As String) As Boolean
        Try
            ext = "." & ext.TrimStart("."c)
            Dim applicationPath As String = Application.ExecutablePath
            Dim name As String = Application.ExecutablePath.ToString.ToLower()
            name = name.Substring(name.LastIndexOf("\"c) + 1, name.Length - name.LastIndexOf("\"c) + 1).TrimStart("\"c).TrimEnd("\"c).Replace(".exe", "")
            If My.Computer.Registry.ClassesRoot.GetValue(ext) Is Nothing Then
                Return False
            Else
                If My.Computer.Registry.ClassesRoot.OpenSubKey(ext, True).GetValue("\shell\open\command", Nothing) Is Nothing Then
                    Return False
                End If
                If My.Computer.Registry.ClassesRoot.OpenSubKey(name, True) Is Nothing Then
                    Return False
                Else
                    If My.Computer.Registry.ClassesRoot.OpenSubKey(name, True).GetValue("\shell\open\command", "") <> applicationPath & " ""%1"" " Then
                        Return False
                    End If
                End If
            End If
            TimeStampAdd("associateFileExtensionIsAssociated('" & ext & "') = true")
            Return True
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
            TimeStampAdd("associateFileExtensionIsAssociated('" & ext & "') = false")
            Return False
        End Try
        Return True
    End Function
    Private Sub ToolStripMenuItemClearAllValues_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItemClearAllValues.Click
        Try
            LoadPDFReaderDoc(pdfOwnerPassword)
            If True = True Then
                _cFDFDoc.ClearAllValues()
                Select Case cfdf.Determine_Type(Me.Session, pdfOwnerPassword)
                    Case FDFApp.FDFDoc_Class.FDFType.PDF
                        Session = _cFDFDoc.PDFMergeFDF2Buf(Session, False, pdfOwnerPassword)
                    Case FDFApp.FDFDoc_Class.FDFType.XPDF, FDFApp.FDFDoc_Class.FDFType.XFA
                        Session = _cFDFDoc.PDFMergeXDP2Buf(Session, False, pdfOwnerPassword)
                End Select
            Else
                For Each flds As List(Of fieldInfo) In GetAllFieldsOnPageiText(Session, pdfOwnerPassword, page, True, True).Values
                    For Each fld As fieldInfo In flds
                        If Not fld.fieldDictionary.Get(PdfName.DV) Is Nothing Then
                            If fld.fieldDictionary.Get(PdfName.DV).IsString() Then
                                _cFDFDoc.XDPSetValue(fld.fieldNameLong, fld.fieldDictionary.GetAsString(PdfName.DV).ToUnicodeString() & "", True, True)
                            ElseIf fld.fieldDictionary.Get(PdfName.DV).IsArray Then
                                Dim vals As New List(Of String)
                                For fldIndex As Integer = 0 To fld.fieldDictionary.GetAsArray(PdfName.DV).Size - 1
                                    If fld.fieldDictionary.Get(PdfName.DV).IsString() Then
                                        vals.Add(fld.fieldDictionary.GetAsString(PdfName.DV).ToUnicodeString())
                                    End If
                                Next
                                If vals.Count > 0 Then
                                    _cFDFDoc.FDFSetValues(fld.fieldNameLong, vals.ToArray(), True)
                                End If
                            End If
                        End If
                    Next
                Next
                Select Case cfdf.Determine_Type(Me.Session, pdfOwnerPassword)
                    Case FDFApp.FDFDoc_Class.FDFType.PDF
                        Session = _cFDFDoc.PDFMergeFDF2Buf(Session, False, pdfOwnerPassword)
                    Case FDFApp.FDFDoc_Class.FDFType.XPDF, FDFApp.FDFDoc_Class.FDFType.XFA
                        Session = _cFDFDoc.PDFMergeXDP2Buf(Session, False, pdfOwnerPassword)
                End Select
            End If
            LoadPDFReaderDoc(pdfOwnerPassword)
            A0_LoadPDF(True, True, True, page, True)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Public Property page() As Integer
        Get
            Try
                Return btnPage.SelectedIndex + 1
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End Get
        Set(value As Integer)
            Try
                btnPage.SelectedIndex = value - 1
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End Set
    End Property
    Public Property pageIndex() As Integer
        Get
            Try
                Return btnPage.SelectedIndex
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End Get
        Set(value As Integer)
            Try
                btnPage.SelectedIndex = value
            Catch ex As Exception
                TimeStampAdd(ex, debugMode)
            End Try
        End Set
    End Property
    Private Sub ToolStripMenuItemResetForm_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItemResetForm.Click
        Try
            LoadPDFReaderDoc(pdfOwnerPassword)
            If True = False Then
                _cFDFDoc.ClearAllValues()
                Select Case cfdf.Determine_Type(Me.Session, pdfOwnerPassword)
                    Case FDFApp.FDFDoc_Class.FDFType.PDF
                        Session = _cFDFDoc.PDFMergeFDF2Buf(Session, False, pdfOwnerPassword)
                    Case FDFApp.FDFDoc_Class.FDFType.XPDF, FDFApp.FDFDoc_Class.FDFType.XFA
                        Session = _cFDFDoc.PDFMergeXDP2Buf(Session, False, pdfOwnerPassword)
                End Select
            Else
                For Each flds As List(Of fieldInfo) In GetAllFieldsOnPageiText(Session, pdfOwnerPassword, page, True, True).Values
                    For Each fld As fieldInfo In flds
                        If Not fld.fieldDictionary.Get(PdfName.DV) Is Nothing Then
                            If fld.fieldDictionary.Get(PdfName.DV).IsString() Then
                                _cFDFDoc.XDPSetValue(fld.fieldNameLong, fld.fieldDictionary.GetAsString(PdfName.DV).ToUnicodeString() & "", True, True)
                            ElseIf fld.fieldDictionary.Get(PdfName.DV).IsArray Then
                                Dim vals As New List(Of String)
                                For fldIndex As Integer = 0 To fld.fieldDictionary.GetAsArray(PdfName.DV).Size - 1
                                    If fld.fieldDictionary.Get(PdfName.DV).IsString() Then
                                        vals.Add(fld.fieldDictionary.GetAsString(PdfName.DV).ToUnicodeString())
                                    End If
                                Next
                                If vals.Count > 0 Then
                                    _cFDFDoc.FDFSetValues(fld.fieldNameLong, vals.ToArray(), True)
                                End If
                            End If
                        End If
                    Next
                Next
                Select Case cfdf.Determine_Type(Me.Session, pdfOwnerPassword)
                    Case FDFApp.FDFDoc_Class.FDFType.PDF
                        Session = _cFDFDoc.PDFMergeFDF2Buf(Session, False, pdfOwnerPassword)
                    Case FDFApp.FDFDoc_Class.FDFType.XPDF, FDFApp.FDFDoc_Class.FDFType.XFA
                        Session = _cFDFDoc.PDFMergeXDP2Buf(Session, False, pdfOwnerPassword)
                End Select
            End If
            LoadPDFReaderDoc(pdfOwnerPassword)
            A0_LoadPDF(True, True, True, page, True)
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub ShowRecentFilesDialogToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ShowRecentFilesDialogToolStripMenuItem.Click
        Try
            Dim rf As New dialogRecentFiles(Me, ApplicationDataFolder(False, "") & "open-history.txt")
            Select Case rf.ShowDialog(Me)
                Case DialogResult.OK
                Case Else
                    Return
            End Select
        Catch ex As Exception
            TimeStampAdd(ex, debugMode)
        End Try
    End Sub
    Private Sub PrintDialogToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles PrintDialogToolStripMenuItem.Click
        Try
            Dim pd As New dialogPrint()
            LoadPDFReaderDoc(pdfOwnerPassword, True)
            Dim readerTemp As PdfReader = pdfReaderDoc.Clone
            printDocImageList = New List(Of System.Drawing.Image)
            printDocImageList.Clear()
            Select Case pd.ShowDialog(Me)
                Case Windows.Forms.DialogResult.OK, Windows.Forms.DialogResult.Yes
                    If Not pdfReaderDoc Is Nothing Then
                        If pdfReaderDoc.NumberOfPages > 0 Then
                            StatusToolStrip = "Printing: please wait.."
                            If Not printDocImageList Is Nothing Then
                                If printDocImageList.Count > 0 Then
                                    Dim exitCode As Integer = -1
                                    Dim numCopies As Integer = pd.PrintDialog1.PrinterSettings.Copies
                                    'For copy As Integer = 1 To numCopies
                                    Try
                                        'StatusToolStrip = "Printing: copy #" & copy.ToString & " of " & numCopies.ToString
                                        StatusToolStrip = "Printing: " & numCopies.ToString & " copies."
                                        printDocIndex = 0
                                        printDocHasMorePages = True
                                        printDoc = New Printing.PrintDocument
                                        printDoc.PrinterSettings = pd.PrintDialog1.PrinterSettings
                                        AddHandler printDoc.PrintPage, AddressOf PD_PrintPage
                                        printTotalPages = printDocImageList.Count
                                        printDocIndex = -1
                                        printDoc.Print()
                                        RemoveHandler printDoc.PrintPage, AddressOf PD_PrintPage
                                    Catch ex As Exception
                                        Err.Clear()
                                    End Try
                                    'Next
                                    printDoc = Nothing
                                    exitCode = 1
                                End If
                            End If
                            pdfReaderDoc = readerTemp.Clone
                            LoadPDFReaderDoc(pdfOwnerPassword)
                        End If
                    End If
            End Select
            pd.Dispose()
        Catch ex As Exception
            Err.Clear()
        Finally
            StatusToolStrip = "Printing: complete"
            Me.Show()
            Me.BringToFront()
            If Not printDocImageList Is Nothing Then
                printDocImageList.Clear()
            End If
            printDocImageList = New List(Of System.Drawing.Image)
        End Try
    End Sub
    Private Sub ToolStripSeparator17_Click(sender As Object, e As EventArgs) Handles ToolStripSeparator17.Click
    End Sub
    Private Sub ScanPDFsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ScanPDFsToolStripMenuItem.Click
        Try
            Dim scanPDFs As New frmScanPDFs
            scanPDFs.ShowDialog(Me)
            Do While scanPDFs.Visible
                Application.DoEvents()
            Loop
            scanPDFs.Dispose()
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub

    Private Sub ToolStripMenuItemLicense_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItemLicense.Click
        Try
            Process.Start(appPath & "GNU General Public License v3.0.txt")
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub

    Private Sub ComboBox4_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox4.SelectedIndexChanged
        Dim rects As Dictionary(Of String, RectangleF) = getFieldRectangles(True)
        Dim pd As Boolean = cUserRect.pauseDraw
        Try
            If cUserRect.pauseDraw = False Then
                If ComboBox4.SelectedIndex > 0 Then
                    If ComboBox4.Items(ComboBox4.SelectedIndex).ToString().ToString().Contains("[") Then
                        cUserRect.pauseDraw = False
                        Dim selName() As String = ComboBox4.Items(ComboBox4.SelectedIndex).ToString().Split("["c)
                        Dim selIdx As Integer = CInt(selName(1).Trim("["c).Trim("]"c))
                        fldNameHighlighted = selName(0)
                        fldNameHighlightedCopy = ""
                        fldKidIndex = selIdx
                        PDFField_Name.Text = fldNameHighlighted
                        cUserRect._highLightFieldName = fldNameHighlighted
                        'A0_PDFFormField_LoadProperties(Session, selName(0).Trim("["c).Trim("]"c), CInt(btnPage.SelectedIndex + 1), selIdx)
                        If Not rects Is Nothing Then
                            If rects.Count > 0 Then
                                Select Case GetFormFieldType(Session("output"), fldNameHighlighted)
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                        ComboBox1.SelectedIndex = 0
                                        PDFField_Name.Text = fldNameHighlighted
                                        cUserRect._highLightFieldName = fldNameHighlighted

                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                                        ComboBox1.SelectedIndex = 1
                                        PDFField_Name.Text = fldNameHighlighted
                                        cUserRect._highLightFieldName = fldNameHighlighted

                                        PDFField_DefaultText.Text = cFDFDoc.XDPGetValue(fldNameHighlighted)
                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                        ComboBox1.SelectedIndex = 2
                                        PDFField_Name.Text = fldNameHighlighted
                                        cUserRect._highLightFieldName = fldNameHighlighted

                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                        ComboBox1.SelectedIndex = 3
                                        PDFField_Name.Text = fldNameHighlighted
                                        cUserRect._highLightFieldName = fldNameHighlighted

                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                        ComboBox1.SelectedIndex = 4
                                        PDFField_Name.Text = fldNameHighlighted
                                        cUserRect._highLightFieldName = fldNameHighlighted

                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                        ComboBox1.SelectedIndex = 5
                                        PDFField_Name.Text = fldNameHighlighted
                                        cUserRect._highLightFieldName = fldNameHighlighted

                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                        ComboBox1.SelectedIndex = 6
                                        PDFField_Name.Text = fldNameHighlighted
                                        cUserRect._highLightFieldName = fldNameHighlighted
                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case Else
                                        If Not ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1 Then
                                            ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1 ' = "Data"
                                        End If
                                End Select


                            End If
                        End If
                    ElseIf ComboBox4.Items(ComboBox4.SelectedIndex).ToString().ToString().Contains(".") Then
                        cUserRect.pauseDraw = False
                        Dim selName() As String = ComboBox4.Items(ComboBox4.SelectedIndex).ToString().Split("."c)
                        Dim selIdx As Integer = CInt(selName(1).Trim("."c))
                        fldNameHighlighted = selName(0)
                        fldNameHighlightedCopy = selName(0)
                        fldKidIndex = selIdx
                        PDFField_Name.Text = fldNameHighlighted
                        cUserRect._highLightFieldName = fldNameHighlighted
                        'A0_PDFFormField_LoadProperties(Session, selName(0).Trim("["c).Trim("]"c), CInt(btnPage.SelectedIndex + 1), selIdx)
                        If Not rects Is Nothing Then
                            If rects.Count > 0 Then

                                Select Case GetFormFieldType(Session("output"), fldNameHighlighted)
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON
                                        ComboBox1.SelectedIndex = 0
                                        PDFField_Name.Text = fldNameHighlighted
                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT
                                        ComboBox1.SelectedIndex = 1
                                        PDFField_Name.Text = fldNameHighlighted
                                        PDFField_DefaultText.Text = cFDFDoc.XDPGetValue(fldNameHighlighted)
                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO
                                        ComboBox1.SelectedIndex = 2
                                        PDFField_Name.Text = fldNameHighlighted
                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST
                                        ComboBox1.SelectedIndex = 3
                                        PDFField_Name.Text = fldNameHighlighted
                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON
                                        ComboBox1.SelectedIndex = 4
                                        PDFField_Name.Text = fldNameHighlighted
                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX
                                        ComboBox1.SelectedIndex = 5
                                        PDFField_Name.Text = fldNameHighlighted
                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE
                                        ComboBox1.SelectedIndex = 6
                                        PDFField_Name.Text = fldNameHighlighted
                                        Try
                                            A0_PDFFormField_LoadProperties(Session("output"), fldNameHighlighted, CInt(btnPage.SelectedIndex + 1), selIdx)
                                        Catch ex As Exception
                                            TimeStampAdd(ex, debugMode) ' NK 2016-06-30 ' Throw Ex  ' NK2 '
                                        End Try
                                    Case Else
                                        If Not ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1 Then
                                            ComboBox1.SelectedIndex = ComboBox1.Items.Count - 1 ' = "Data"
                                        End If
                                End Select

                            End If
                        End If
                    End If
                Else
                    cUserRect.pauseDraw = False
                    Dim selName As String = ComboBox4.Items(ComboBox4.SelectedIndex).ToString()
                    Dim selIdx As Integer = 0
                    fldNameHighlighted = selName
                    fldNameHighlightedCopy = selName
                    fldKidIndex = selIdx
                    cUserRect._highLightFieldName = fldNameHighlighted
                    PDFField_Name.Text = fldNameHighlighted
                    A0_PDFFormField_LoadProperties(Session, selName.Trim("["c).Trim("]"c), CInt(btnPage.SelectedIndex + 1), selIdx)
                    'PnlFields_Position(True, True)
                    'cUserRect.DrawPictureBoxImageBox()
                End If
            End If
        Catch ex As Exception
            Err.Clear()
        Finally
            cUserRect.pauseDraw = False

            'Dim newRect As iTextSharp.text.Rectangle = cUserRect.rectPDFReversed 'New iTextSharp.text.Rectangle(cUserRect.rect.Left, getPDFHeight() - cUserRect.rect.Bottom, cUserRect.rect.Right, getPDFHeight() - cUserRect.rect.Top) 'getRectanglePDF(newRectScreen)
            For Each r As KeyValuePair(Of String, RectangleF) In rects.ToArray
                If r.Key.ToString() = fldNameHighlighted & "#" & fldKidIndex Then
                    cUserRect.rect = r.Value
                    cUserRect.rectBackup = r.Value
                    cUserRect.rectOld = r.Value
                    PnlFields_Position(True, True)
                    cUserRect.DrawPictureBoxImageBox()
                    Dim rectTmp As System.Drawing.RectangleF = cUserRect.rect
                    btnWidth.Text = rectTmp.Width
                    btnHeight.Text = rectTmp.Height
                    btnLeft.Text = rectTmp.Left
                    btnRight.Text = rectTmp.Right
                    btnTop.Text = rectTmp.Top
                    btnBottom.Text = rectTmp.Bottom
                    comboBox4Selected = True
                    Exit For
                ElseIf r.Key.ToString() = fldNameHighlighted & "." & fldKidIndex Then
                    cUserRect.rect = r.Value
                    cUserRect.rectBackup = r.Value
                    cUserRect.rectOld = r.Value
                    PnlFields_Position(True, True)
                    cUserRect.DrawPictureBoxImageBox()

                    Dim rectTmp As System.Drawing.RectangleF = cUserRect.rect
                    btnWidth.Text = rectTmp.Width
                    btnHeight.Text = rectTmp.Height
                    btnLeft.Text = rectTmp.Left
                    btnRight.Text = rectTmp.Right
                    btnTop.Text = rectTmp.Top
                    btnBottom.Text = rectTmp.Bottom
                    comboBox4Selected = True
                    Exit For
                ElseIf r.Key.ToString() = ComboBox4.Items(ComboBox4.SelectedIndex).ToString() Then
                    cUserRect.rect = r.Value
                    cUserRect.rectBackup = r.Value
                    cUserRect.rectOld = r.Value
                    PnlFields_Position(True, True)
                    cUserRect.DrawPictureBoxImageBox()
                    Dim rectTmp As System.Drawing.RectangleF = cUserRect.rect
                    btnWidth.Text = rectTmp.Width
                    btnHeight.Text = rectTmp.Height
                    btnLeft.Text = rectTmp.Left
                    btnRight.Text = rectTmp.Right
                    btnTop.Text = rectTmp.Top
                    btnBottom.Text = rectTmp.Bottom
                    comboBox4Selected = True
                    Exit For
                End If
            Next
            cUserRect.pauseDraw = False
        End Try
    End Sub

    Private Sub A0_PictureBox2_KeyUp(sender As Object, e As KeyEventArgs) Handles A0_PictureBox2.KeyUp
        Try
            If Not cUserRect.rect = Nothing Then
                If e Is e Then
                    Dim amount As Integer = 1
                    If e.Alt Then amount += 30
                    If e.Control Then amount += 20
                    If e.Shift Then
                        Select Case e.KeyCode
                            Case Keys.Left
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y, cUserRect.rect.Width - amount, cUserRect.rect.Height)
                            Case Keys.Right
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y, cUserRect.rect.Width + amount, cUserRect.rect.Height)
                            Case Keys.Up
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y, cUserRect.rect.Width, cUserRect.rect.Height - amount)
                            Case Keys.Down
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y, cUserRect.rect.Width, cUserRect.rect.Height + amount)
                            Case Keys.Escape
                                fldNameHighlighted = ""
                                cUserRect.rect = Nothing
                                DrawImageFieldPositions()
                            Case Keys.Enter
                                If Not pnlFields.Visible Then PnlFields_Position(False, True)
                                Me.ActiveControl = Me.PictureBox1_Panel 'Me.ActiveControl = A0_PictureBox2
                        End Select
                    Else
                        Select Case e.KeyCode
                            Case Keys.Left
                                cUserRect.rect = New RectangleF(cUserRect.rect.X - amount, cUserRect.rect.Y, cUserRect.rect.Width, cUserRect.rect.Height)
                            Case Keys.Right
                                cUserRect.rect = New RectangleF(cUserRect.rect.X + amount, cUserRect.rect.Y, cUserRect.rect.Width, cUserRect.rect.Height)
                            Case Keys.Up
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y - amount, cUserRect.rect.Width, cUserRect.rect.Height)
                            Case Keys.Down
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y + amount, cUserRect.rect.Width, cUserRect.rect.Height)
                            Case Keys.Escape
                                fldNameHighlighted = ""
                                cUserRect.rect = Nothing
                                DrawImageFieldPositions()
                            Case Keys.Enter
                                If Not pnlFields.Visible Then PnlFields_Position(False, True)
                                Me.ActiveControl = Me.PictureBox1_Panel 'Me.ActiveControl = A0_PictureBox2
                        End Select
                    End If
                End If
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Private Sub frmMain_CursorChanged(sender As Object, e As EventArgs) Handles Me.CursorChanged
    End Sub
    Private Sub frmMain_KeyUp(sender As Object, e As KeyEventArgs) Handles Me.KeyUp
        Try
            If Not cUserRect.rect = Nothing Then
                If e Is e Then
                    Dim amount As Integer = 1
                    If e.Alt Then amount += 30
                    If e.Control Then amount += 20
                    If e.Shift Then
                        Select Case e.KeyCode
                            Case Keys.Left
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y, cUserRect.rect.Width - amount, cUserRect.rect.Height)
                            Case Keys.Right
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y, cUserRect.rect.Width + amount, cUserRect.rect.Height)
                            Case Keys.Up
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y, cUserRect.rect.Width, cUserRect.rect.Height - amount)
                            Case Keys.Down
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y, cUserRect.rect.Width, cUserRect.rect.Height + amount)
                            Case Keys.Escape
                                fldNameHighlighted = ""
                                cUserRect.rect = Nothing
                                DrawImageFieldPositions()
                            Case Keys.Enter
                                If Not pnlFields.Visible Then PnlFields_Position(False, True)
                                Me.ActiveControl = Me.PictureBox1_Panel 'Me.ActiveControl = Me.PictureBox1_Panel'Me.ActiveControl = A0_PictureBox2
                        End Select
                    Else
                        Select Case e.KeyCode
                            Case Keys.Left
                                cUserRect.rect = New RectangleF(cUserRect.rect.X - amount, cUserRect.rect.Y, cUserRect.rect.Width, cUserRect.rect.Height)
                            Case Keys.Right
                                cUserRect.rect = New RectangleF(cUserRect.rect.X + amount, cUserRect.rect.Y, cUserRect.rect.Width, cUserRect.rect.Height)
                            Case Keys.Up
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y - amount, cUserRect.rect.Width, cUserRect.rect.Height)
                            Case Keys.Down
                                cUserRect.rect = New RectangleF(cUserRect.rect.X, cUserRect.rect.Y + amount, cUserRect.rect.Width, cUserRect.rect.Height)
                            Case Keys.Escape
                                fldNameHighlighted = ""
                                cUserRect.rect = Nothing
                                DrawImageFieldPositions()
                            Case Keys.Enter
                                If Not pnlFields.Visible Then PnlFields_Position(False, True)
                                Me.ActiveControl = Me.PictureBox1_Panel 'Me.ActiveControl = A0_PictureBox2
                        End Select
                    End If
                End If
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub

    Private Sub CopyPageImageToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CopyPageImageToolStripMenuItem.Click
        Try
            If Not fpath.isNullOrEmpty() Then
                Clipboard.Clear()
                Dim imgBytes() As Byte = A0_LoadImageGhostScript(Session, CInt(btnPage.SelectedIndex + 1), CInt(getPDFWidth() * 2), CInt(getPDFHeight() * 2), False)
                If Not imgBytes Is Nothing Then
                    If imgBytes.Length > 0 Then
                        Clipboard.SetImage(Bitmap.FromStream(New MemoryStream(imgBytes)).Clone())
                        'Clipboard.SetFileDropList(sp)
                        ToolStripStatusLabel5.Text = ("Status: Copied image to Clipboard")
                        Return
                    End If
                End If
            End If
            ToolStripStatusLabel5.Text = ("Status: Error Copying image to Clipboard")
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub

    Private Sub ClearClipboardToolStripMenuItem2_Click(sender As Object, e As EventArgs) Handles ClearClipboardToolStripMenuItem2.Click
        Try
            If MsgBox("Clear clipboard?", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.ApplicationModal, "Confirm") = MsgBoxResult.Yes Then
                Clipboard.Clear()
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub

    Private Sub AddHyperlinkToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles AddHyperlinkToolStripMenuItem1.Click
        Try
            If Not cUserRect.rect = Nothing Then
                If cUserRect.rect.Width > 0 And cUserRect.rect.Height > 0 Then
                    'Dim dest As String = "C:/itextExamples/linkAnnotation.pdf"
                    Dim m As New MemoryStream
                    Dim reader As PdfReader = pdfReaderDoc.Clone
                    Dim s As iTextSharp.text.pdf.PdfStamper = getStamper(reader, m)
                    'Dim writer As iTextSharp.text.pdf.PdfWriter = s.Writer
                    'Dim linkLocation As New iTextSharp.text.Rectangle(523, 770, 559, 806)
                    Dim linkLocation As iTextSharp.text.Rectangle = cUserRect.rect_iTextRectangle()
                    Dim destination As New iTextSharp.text.pdf.PdfDestination(PdfDestination.FIT)
                    Dim url As String = ""
                    Try
                        url = InputBox("Link Url?", "Link URL:", "")
                    Catch exGetURL As Exception
                        url = ""
                        Err.Clear()
                    End Try
                    If Not url.isNullOrEmpty Then
                        Dim pdfAction As iTextSharp.text.pdf.PdfAction = New iTextSharp.text.pdf.PdfAction(url)
                        Dim link As iTextSharp.text.pdf.PdfAnnotation = iTextSharp.text.pdf.PdfAnnotation.CreateLink(s.Writer(), linkLocation, PdfAnnotation.HIGHLIGHT_NONE, pdfAction)
                        link.Border = New PdfBorderArray(0, 0, 0)
                        s.AddAnnotation(link, 1)
                        s.Writer.CloseStream = False
                        s.Close()
                        Session = m.ToArray
                        s.Dispose()
                        reader.Dispose()
                        m.Dispose()
                    End If
                End If
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub

    Private Sub PDFField_Listbox_Value_SelectedIndexChanged(sender As Object, e As EventArgs) Handles PDFField_Listbox_Value.SelectedIndexChanged
        Try
            If ComboBox_ItemDisplay.Items.Count > 0 And PDFField_Listbox_Value.Enabled = True Then
                If ComboBox_ItemDisplay.Items(PDFField_Listbox_Value.SelectedIndex) = PDFField_Listbox_Value.Items(PDFField_Listbox_Value.SelectedIndex) Then
                    ComboBox_ItemDisplay.Enabled = True
                    'ComboBox_ItemDisplay.SelectedIndex = PDFField_Listbox_Value.SelectedIndex
                    If PDFField_Listbox_Value.SelectionMode = SelectionMode.MultiSimple Then
                        For idx As Integer = 0 To PDFField_Listbox_Value.Items.Count - 1
                            PDFField_Listbox_Value.Enabled = False
                            ComboBox_ItemDisplay.SetSelected(idx, PDFField_Listbox_Value.SelectedIndices.Contains(idx.ToString()))
                            PDFField_Listbox_Value.Enabled = False
                        Next
                    Else
                        ComboBox_ItemDisplay.SelectedIndex = PDFField_Listbox_Value.SelectedIndex
                    End If
                    'ComboBox_ItemDisplay.Enabled = True
                End If
            End If
        Catch ex As Exception
            Err.Clear()
        Finally
            PDFField_Listbox_Value.Enabled = True
            PDFField_Listbox_Value.Visible = True
            PDFField_Listbox_Value.BringToFront()
        End Try
    End Sub

    Private Sub SavePageImageToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SavePageImageToolStripMenuItem.Click
        Try
            If Not fpath.isNullOrEmpty() Then
                Clipboard.Clear()
                'Dim imgBytes() As Byte = A0_LoadImageGhostScript(Session, CInt(btnPage.SelectedIndex + 1), CInt(getPDFWidth() * 2), CInt(getPDFHeight() * 2), False)
                'If Not imgBytes Is Nothing Then
                '    If imgBytes.Length > 0 Then
                '        Clipboard.SetImage(Bitmap.FromStream(New MemoryStream(imgBytes)).Clone())
                '        'Clipboard.SetFileDropList(sp)
                '        ToolStripStatusLabel5.Text = ("Status: Copied image to Clipboard")
                '        Return
                '    End If
                'End If
                SavePageImageAs()
            End If
            ToolStripStatusLabel5.Text = ("Status: Error saving image")
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    'Private Sub PDFField_Combobox_Value_SelectedIndexChanged(sender As Object, e As EventArgs) Handles PDFField_Listbox_Value.SelectedIndexChanged
    '    Try
    '        If ComboBox_ItemDisplay.Items.Count > 0 And PDFField_Listbox_Value.Enabled = True Then
    '            If ComboBox_ItemDisplay.Items(PDFField_Listbox_Value.SelectedIndex) = PDFField_Listbox_Value.Items(PDFField_Listbox_Value.SelectedIndex) Then
    '                'ComboBox_ItemDisplay.SelectedIndex = PDFField_Listbox_Value.SelectedIndex
    '                For idx As Integer = 0 To PDFField_Listbox_Value.Items.Count - 1
    '                    PDFField_Listbox_Value.Enabled = False
    '                    ComboBox_ItemDisplay.SetSelected(idx, PDFField_Listbox_Value.SelectedIndices.Contains(idx.ToString()))
    '                    PDFField_Listbox_Value.Enabled = False
    '                Next
    '                'ComboBox_ItemDisplay.Enabled = True
    '            End If
    '        End If
    '    Catch ex As Exception
    '        Err.Clear()
    '    Finally
    '        PDFField_Listbox_Value.Enabled = True
    '        PDFField_Listbox_Value.Visible = True
    '        PDFField_Listbox_Value.BringToFront()
    '    End Try
    'End Sub

    Public Sub displayAdminControls()
        Dim isAdmin As Boolean = False
        Try
            isAdmin = My.User.IsInRole(ApplicationServices.BuiltInRole.Administrator)
            AssociationExtensionsToolStripMenuItem.Visible = isAdmin
            AssociationExtensionsToolStripMenuItem.Enabled = isAdmin
            PdfToolStripMenuItem.Visible = isAdmin
            PdfToolStripMenuItem.Enabled = isAdmin
            FdfToolStripMenuItem.Visible = isAdmin
            FdfToolStripMenuItem.Enabled = isAdmin
            XfdfToolStripMenuItem.Visible = isAdmin
            XfdfToolStripMenuItem.Enabled = isAdmin
            XmlToolStripMenuItem.Visible = isAdmin
            XmlToolStripMenuItem.Enabled = isAdmin
            XdpToolStripMenuItem.Visible = isAdmin
            XdpToolStripMenuItem.Enabled = isAdmin
            JsonToolStripMenuItem.Visible = isAdmin
            JsonToolStripMenuItem.Enabled = isAdmin
        Catch ex As Exception
            isAdmin = False
            AssociationExtensionsToolStripMenuItem.Visible = isAdmin
            AssociationExtensionsToolStripMenuItem.Enabled = isAdmin
            PdfToolStripMenuItem.Visible = isAdmin
            PdfToolStripMenuItem.Enabled = isAdmin
            FdfToolStripMenuItem.Visible = isAdmin
            FdfToolStripMenuItem.Enabled = isAdmin
            XfdfToolStripMenuItem.Visible = isAdmin
            XfdfToolStripMenuItem.Enabled = isAdmin
            XmlToolStripMenuItem.Visible = isAdmin
            XmlToolStripMenuItem.Enabled = isAdmin
            XdpToolStripMenuItem.Visible = isAdmin
            XdpToolStripMenuItem.Enabled = isAdmin
            JsonToolStripMenuItem.Visible = isAdmin
            JsonToolStripMenuItem.Enabled = isAdmin
            Err.Clear()
        End Try
    End Sub

    Private Sub SaveAsCopyToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SaveAsCopyToolStripMenuItem.Click
        SaveAs(True)
    End Sub

    Private Sub SaveAsOneImageToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SaveAsOneImageToolStripMenuItem.Click
        SaveAsOneImage()
    End Sub

    Private Sub AssociationExtensionsToolStripMenuItem_DoubleClick(sender As Object, e As EventArgs) Handles AssociationExtensionsToolStripMenuItem.DoubleClick
        Try
            If My.User.IsInRole(ApplicationServices.BuiltInRole.Administrator) Then
                associateFileExtension(".pdf")
                associateFileExtension(".fdf")
                associateFileExtension(".xfdf")
                associateFileExtension(".xml")
                associateFileExtension(".xdp")
                associateFileExtension(".json")
            End If
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Public Property imageProcessor() As Integer
        Get
            Return CInt(GetSetting(Application.ProductName.ToString, "SETTINGS", "imaging", "0"))
        End Get
        Set(value As Integer)
            SaveSetting(Application.ProductName.ToString, "SETTINGS", "imaging", value)
        End Set
    End Property
    Private Sub ToolStripComboBoxImageProcessor_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub AttachmentsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AttachmentsToolStripMenuItem.Click
    End Sub
    Private Sub AttachmentsAddToolstripMenuItem_Click(sender As Object, e As EventArgs) Handles AttachmentsAddToolstripMenuItem.Click
        Try
            Dim o As New OpenFileDialog
            o.CheckFileExists = True
            o.Filter = "All Files|*.*"
            o.FilterIndex = 0
            o.InitialDirectory = System.IO.Path.GetDirectoryName(fpath)
            o.Multiselect = False
            o.Title = "Select file"
            Select Case o.ShowDialog(Me)
                Case DialogResult.Yes, DialogResult.OK
                    Dim PDFD As New iTextSharp.text.Document(iTextSharp.text.PageSize.LETTER)
                    Dim m As New MemoryStream()
                    For Each att As frmMain.FileContent In GetAttachments(pdfReaderDoc.Clone)
                        If att.Name = o.FileName Then
                            pdfReaderDoc = RemoveAttachment(pdfReaderDoc.Clone, o.FileName)
                        End If
                    Next
                    Dim s As iTextSharp.text.pdf.PdfStamper = getStamper(pdfReaderDoc.Clone, m)
                    Dim w As iTextSharp.text.pdf.PdfWriter = s.Writer
                    Dim pfs As iTextSharp.text.pdf.PdfFileSpecification = iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(w, o.FileName, System.IO.Path.GetFileName(o.FileName), Nothing)
                    Try
                        Dim params As New iTextSharp.text.pdf.PdfDictionary()
                        Dim ct As DateTime = System.IO.File.GetCreationTime(o.FileName)
                        Dim ctString As String = New iTextSharp.text.pdf.PdfDate(ct).ToUnicodeString()
                        params.Put(iTextSharp.text.pdf.PdfName.MODDATE, New iTextSharp.text.pdf.PdfString(New iTextSharp.text.pdf.PdfDate(System.IO.File.GetLastWriteTime(o.FileName)).ToUnicodeString()))
                        params.Put(iTextSharp.text.pdf.PdfName.SIZE, New iTextSharp.text.pdf.PdfString(New System.IO.FileInfo(o.FileName).Length))
                        params.Put(iTextSharp.text.pdf.PdfName.CREATIONDATE, New iTextSharp.text.pdf.PdfString(ctString))
                        pfs = iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(w, o.FileName, System.IO.Path.GetFileName(o.FileName), System.IO.File.ReadAllBytes(o.FileName), False, "application/octet-stream", params)
                        pfs.AddDescription(o.FileName, True)
                    Catch exParams As Exception
                        Err.Clear()
                    End Try
                    w.AddFileAttachment(pfs)
                    s.Writer.CloseStream = False
                    s.Close()
                    Session = m.ToArray
                    A0_LoadPDF(True, True, True, page, True)
                    Dim frmAtt As New frmAttachments(Me, System.IO.Path.GetFileName(o.FileName))
                    Select Case frmAtt.ShowDialog(Me)
                        Case DialogResult.OK, DialogResult.Yes
                        Case Else
                    End Select
                Case Else
                    Return
            End Select
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub
    Public Class FileContent
        Public Property Name As String
        Public Property Content As Byte()
        Public Property Length As Integer
        Public Property Modified As DateTime
        Public Property Created As DateTime
    End Class
    Public Class FileContentDataGrid
        Public Property Name As String
        Public Property Length As Integer
        Public Property Modified As DateTime
        Public Property Created As DateTime
    End Class
    Public Function GetAttachments(ByVal reader As PdfReader) As List(Of FileContent)
        Dim catalog As PdfDictionary = Nothing
        Dim documentNames As PdfDictionary = Nothing
        Dim embeddedFiles As PdfDictionary = Nothing
        Dim fileArray As PdfDictionary = Nothing
        Dim file As PdfDictionary = Nothing
        Dim stream As PRStream = Nothing
        Dim fContent As FileContent = Nothing
        Dim lstAtt As List(Of FileContent) = Nothing
        catalog = reader.Catalog
        lstAtt = New List(Of FileContent)()
        documentNames = CType(PdfReader.GetPdfObject(catalog.[Get](PdfName.NAMES)), PdfDictionary)
        If documentNames IsNot Nothing Then
            embeddedFiles = CType(PdfReader.GetPdfObject(documentNames.[Get](PdfName.EMBEDDEDFILES)), PdfDictionary)
            If embeddedFiles IsNot Nothing Then
                Dim filespecs As PdfArray = embeddedFiles.GetAsArray(PdfName.NAMES)
                If filespecs.Size > 1 Then
                    For i As Integer = 0 To filespecs.Size - 1
                        Try
                            fileArray = filespecs.GetAsDict(i)
                            file = fileArray.GetAsDict(PdfName.EF)
                            Dim nameContent As New Dictionary(Of String, Byte())
                            For Each key As PdfName In file.Keys
                                stream = CType(PdfReader.GetPdfObject(file.GetAsIndirectObject(key)), PRStream)
                                fContent = New FileContent()
                                fContent.Name = fileArray.GetAsString(key).ToString()
                                fContent.Content = PdfReader.GetStreamBytes(stream)
                                If Not nameContent.ContainsKey(fContent.Name) Then
                                    Try
                                        Dim params As PdfDictionary = Nothing
                                        If Not stream Is Nothing Then
                                            If Not stream.Get(PdfName.PARAMS) Is Nothing Then
                                                If stream.Get(PdfName.PARAMS).IsDictionary Or stream.Get(PdfName.PARAMS).IsIndirect Then
                                                    params = stream.GetAsDict(PdfName.PARAMS)
                                                End If
                                            End If
                                            If Not params Is Nothing Then
                                                If Not params.Get(PdfName.CREATIONDATE) Is Nothing Then
                                                    If params.Get(PdfName.CREATIONDATE).IsString Then
                                                        If Not String.IsNullOrEmpty(params.GetAsString(PdfName.CREATIONDATE).ToUnicodeString()) Then
                                                            If IsDate(PdfDate.Decode(params.GetAsString(PdfName.CREATIONDATE).ToUnicodeString())) Then
                                                                fContent.Created = CDate(PdfDate.Decode(params.GetAsString(PdfName.CREATIONDATE).ToUnicodeString()))
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                                If Not params.Get(PdfName.MODDATE) Is Nothing Then
                                                    If params.Get(PdfName.MODDATE).IsString Then
                                                        If Not String.IsNullOrEmpty(params.GetAsString(PdfName.MODDATE).ToUnicodeString()) Then
                                                            If IsDate(PdfDate.Decode(params.GetAsString(PdfName.MODDATE).ToUnicodeString())) Then
                                                                fContent.Modified = CDate(PdfDate.Decode(params.GetAsString(PdfName.MODDATE).ToUnicodeString()))
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                                If Not params.Get(PdfName.SIZE) Is Nothing Then
                                                    If params.Get(PdfName.SIZE).IsString Then
                                                        If Not String.IsNullOrEmpty(params.GetAsString(PdfName.SIZE).ToUnicodeString()) Then
                                                            If IsDate(params.GetAsString(PdfName.SIZE).ToUnicodeString()) Then
                                                                fContent.Length = CInt(params.GetAsString(PdfName.SIZE).ToUnicodeString())
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    Catch exParams As Exception
                                        Err.Clear()
                                    End Try
                                    nameContent.Add(fContent.Name, fContent.Content)
                                    lstAtt.Add(fContent)
                                End If
                            Next
                        Catch ex As Exception
                            Err.Clear()
                        End Try
                    Next
                End If
            End If
        End If
        Return lstAtt
    End Function
    Public Function RemoveAttachment(ByRef reader As PdfReader, strName As String) As PdfReader
        Dim catalog As PdfDictionary = Nothing
        Dim documentNames As PdfDictionary = Nothing
        Dim embeddedFiles As PdfDictionary = Nothing
        Dim fileArray As PdfDictionary = Nothing
        Dim file As PdfDictionary = Nothing
        Dim stream As PRStream = Nothing
        Dim fContent As FileContent = Nothing
        Dim lstAtt As List(Of FileContent) = Nothing
        catalog = reader.Catalog
        lstAtt = New List(Of FileContent)()
        documentNames = CType(PdfReader.GetPdfObject(catalog.[Get](PdfName.NAMES)), PdfDictionary)
        If documentNames IsNot Nothing Then
            embeddedFiles = CType(PdfReader.GetPdfObject(documentNames.[Get](PdfName.EMBEDDEDFILES)), PdfDictionary)
            If embeddedFiles IsNot Nothing Then
                Dim filespecs As PdfArray = embeddedFiles.GetAsArray(PdfName.NAMES)
                If filespecs.Size > 1 Then
                    For i As Integer = 0 To filespecs.Size - 1
                        i += 1
                        fileArray = filespecs.GetAsDict(i)
                        file = fileArray.GetAsDict(PdfName.EF)
                        For Each key As PdfName In file.Keys
                            stream = CType(PdfReader.GetPdfObject(file.GetAsIndirectObject(key)), PRStream)
                            fContent = New FileContent()
                            fContent.Name = fileArray.GetAsString(key).ToString()
                            fContent.Content = PdfReader.GetStreamBytes(stream)
                            If strName = fContent.Name Then
                                filespecs.Remove(i)
                                embeddedFiles.Put(PdfName.NAMES, DirectCast(filespecs, PdfArray))
                                documentNames.Put(PdfName.EMBEDDEDFILES, DirectCast(embeddedFiles, PdfDictionary))
                                Return reader
                            End If
                        Next
                    Next
                End If
            End If
        End If
        Return reader
    End Function
    Public Function RemoveAttachment(ByRef reader As PdfReader, strName As String, selIndex As Integer) As PdfReader
        Dim catalog As PdfDictionary = Nothing
        Dim documentNames As PdfDictionary = Nothing
        Dim embeddedFiles As PdfDictionary = Nothing
        Dim fileArray As PdfDictionary = Nothing
        Dim file As PdfDictionary = Nothing
        Dim stream As PRStream = Nothing
        Dim fContent As FileContent = Nothing
        Dim lstAtt As List(Of FileContent) = Nothing
        catalog = reader.Catalog
        lstAtt = New List(Of FileContent)()
        documentNames = CType(PdfReader.GetPdfObject(catalog.[Get](PdfName.NAMES)), PdfDictionary)
        If documentNames IsNot Nothing Then
            embeddedFiles = CType(PdfReader.GetPdfObject(documentNames.[Get](PdfName.EMBEDDEDFILES)), PdfDictionary)
            If embeddedFiles IsNot Nothing Then
                Dim filespecs As PdfArray = embeddedFiles.GetAsArray(PdfName.NAMES)
                If filespecs.Size > 0 Then
                    Dim cntr As Integer = -1
                    For i As Integer = 0 To filespecs.Size - 1
                        Try
                            fileArray = filespecs.GetAsDict(i)
                            file = fileArray.GetAsDict(PdfName.EF)
                            cntr += 1
                            For Each key As PdfName In file.Keys
                                stream = CType(PdfReader.GetPdfObject(file.GetAsIndirectObject(key)), PRStream)
                                fContent = New FileContent()
                                fContent.Name = fileArray.GetAsString(key).ToString()
                                fContent.Content = PdfReader.GetStreamBytes(stream)
                                If strName = fContent.Name And cntr = selIndex Then
                                    filespecs.Remove(i)
                                    embeddedFiles.Put(PdfName.NAMES, DirectCast(filespecs, PdfArray))
                                    documentNames.Put(PdfName.EMBEDDEDFILES, DirectCast(embeddedFiles, PdfDictionary))
                                End If
                            Next
                        Catch ex As Exception
                            Err.Clear()
                        End Try
                    Next
                End If
            End If
        End If
        Return reader
    End Function
    Private Sub AttachmentsViewToolstripMenuItem_Click(sender As Object, e As EventArgs) Handles AttachmentsViewToolstripMenuItem.Click
        Dim frmAtt As New frmAttachments
        Select Case frmAtt.ShowDialog(Me)
            Case DialogResult.OK, DialogResult.Yes
            Case Else
        End Select
    End Sub
    Private Sub A0_PictureBox2_BackgroundImageChanged(sender As Object, e As EventArgs) Handles A0_PictureBox2.BackgroundImageChanged
    End Sub

    Private Sub OpenAppDataToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles OpenAppDataToolStripMenuItem1.Click
        Try
            Process.Start(ApplicationDataFolder(False, ""))
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub

    Private Sub OpenTempFolderToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles OpenTempFolderToolStripMenuItem1.Click
        Try
            Process.Start(ApplicationDataFolder(False, "temp"))
        Catch ex As Exception
            Err.Clear()
        End Try
    End Sub

    Private Sub frmMain_Paint(sender As Object, e As PaintEventArgs) Handles Me.Paint
    End Sub

    Private Sub CopyFileLocationToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles CopyFileLocationToolStripMenuItem1.Click
        If Not fpath.isNullOrEmpty Then
            'Dim sp As New Specialized.StringCollection()
            'sp.Add(fpath)
            Clipboard.Clear()
            Clipboard.SetText(fpath)
            ToolStripStatusLabel5.Text = ("Status: Copied file location to Clipboard")
        End If
    End Sub

    Private Sub ToolStripMenuItemExportImageMagick_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItemExportImageMagick.Click
        'Dim imgbytes As New MemoryStream(A0_LoadImageMagick(Session.ToArray, False))
        'System.IO.File.WriteAllBytes()
        A0_LoadImageMagick(Session.ToArray, False)
    End Sub

    Private Sub ToolStripComboBoxImageProcessor_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ToolStripComboBoxImageProcessor.SelectedIndexChanged
        Try
            Select Case ToolStripComboBoxImageProcessor.SelectedIndex
                Case 1
                    imageProcessor = 1
                Case Else
                    imageProcessor = 0
            End Select
        Catch ex As Exception
            imageProcessor = 0
        End Try
    End Sub

    Private Sub A0_PictureBox2_PaddingChanged(sender As Object, e As EventArgs) Handles A0_PictureBox2.PaddingChanged

    End Sub
End Class
