<?xml version="1.0"?>
<doc>
<assembly>
<name>
PDFEditorNet
</name>
</assembly>
<members>
<member name="T:PDFEditorNet.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:PDFEditorNet.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:PDFEditorNet.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:PDFEditorNet.My.Resources.Resources.barbutton">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:PDFEditorNet.My.Resources.Resources.transparent1">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="T:PDFEditorNet.My.Resources.resourceScripts">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:PDFEditorNet.My.Resources.resourceScripts.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:PDFEditorNet.My.Resources.resourceScripts.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:PDFEditorNet.My.Resources.resourceScripts.pdf_email_php">
<summary>
  Looks up a localized string similar to &lt;?php
header(&apos;Content-type: application/vnd.fdf&apos;);
//DO NOT REMOVE THE FOLLOWING COMMENTS
//PHP MAIL SCRIPT
//NK-INC.COM, PDFEmail.net, FDFToolkit.net - All rights reserved.
//Email: sales@nk-inc.com
//Support: support@nk-inc.com
//Support: http://www.NK-INC.com/support/
//WWW: http://www.pdfemail.net/
//DATE:&lt;DATE&gt;
//DO NOT REDISTRIBUTE - PRIVATE SOURCE CODE - NOT FOR PUBLIC
//NEED HELP? CONTACT PDFEMAIL.NET SUPPORT (support@nk-inc.com)
//Copyright(C) 2016 - NK-INC.COM, PDFEmail.net, FDFToolkit [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:PDFEditorNet.My.Resources.resourceScripts.pdf_email_php_pear">
<summary>
  Looks up a localized string similar to &lt;?php 
header(&apos;Content-type: application/vnd.fdf&apos;);
require_once &quot;Mail.php&quot;; 
require_once &quot;Mail/mime.php&quot;;
//DO NOT REMOVE THE FOLLOWING COMMENTS
//PHP PEAR SCRIPT
//NK-INC.COM, PDFEmail.net, FDFToolkit.net - All rights reserved.
//Email: sales@nk-inc.com
//Support: support@nk-inc.com
//Support: http://www.NK-INC.com/support/
//WWW: http://www.pdfemail.net/
//DATE:&lt;DATE&gt;
//DO NOT REDISTRIBUTE - PRIVATE SOURCE CODE - NOT FOR PUBLIC
//NEED HELP? CONTACT PDFEMAIL.NET SUPPORT (support@nk-inc.com)
 [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:PDFEditorNet.My.Resources.resourceScripts.scriptPdfEmailNet20">
<summary>
  Looks up a localized string similar to &lt;%@ Page Language=&quot;VB&quot; Debug=&quot;TRUE&quot; %&gt;
&lt;%@ Import Namespace=&quot;System.Net.Mail&quot; %&gt;
&lt;%@ Import Namespace=&quot;System.IO&quot; %&gt;
&lt;script runat=&quot;server&quot;&gt;   
    &apos;********************************************************************
    &apos;**** EMAIL PDF SUBMISSIONS WITH ASP.NET w/o 3rd Party Tools    *****
    &apos;**** NK-INC - Nicholas Kowalewicz                              *****
    &apos;**** http://www.nk-inc.com/support/                            *****
    &apos;**** NK-INC SUPPORT (support@nk-inc.com)                    [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="M:PDFEditorNet.clsEmail.clsEmail_HTML.ConvertToBase64String(System.Byte[])">
 <summary>
 Converts a byte array to base64 string
 </summary>
 <param name="Filebytes">File bytes array</param>
 <returns>Base64 String</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsEmail.clsEmail_HTML.ConvertToBase64String(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Converts an System.Drawing.Image to Base64 string
 </summary>
 <param name="image">System.Drawing.Image</param>
 <param name="newFormat">System.Drawing.Imaging.ImageFormat (JPG/GIF/PNG/BMP/EMF only)</param>
 <returns>Base64 string of Image</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsEmail.clsEmail_HTML.ConvertToBase64String(System.Drawing.Image)">
 <summary>
 Converts an System.Drawing.Image to Base64 string
 </summary>
 <param name="image">System.Drawing.Image</param>
 <returns>Base64 string of Image</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsEmail.clsEmail_HTML.ConvertToBase64Byte(System.Byte[])">
 <summary>
 Converts an Byte Array to Base64 string
 </summary>
 <param name="FileBytes">System.Drawing.Image</param>
 <returns>Base64 string</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsEmail.clsEmail_HTML.ConvertFromBase64ToString(System.String,System.Text.Encoding)">
 <summary>
 Converts a Base64 encoded string to a default enocoded string
 </summary>
 <param name="strEncodedBase64">Base64 encoded string to convert</param>
 <param name="ToEncoding">To specific encoding (UTF-8)</param>
 <returns>Encoded String</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsEmail.clsEmail_HTML.ConvertFromBase64ToByte(System.String,System.Text.Encoding)">
 <summary>
 Converts a Base64 encoded string to a default enocoded byte array
 </summary>
 <param name="strEncodedBase64">Base64 encoded string to convert</param>
 <param name="ToEncoding">To specific encoding (UTF-8)</param>
 <returns>Encoded Byte Array</returns>
 <remarks></remarks>
</member>
<member name="T:PDFEditorNet.Encryption.Hash">
 <summary>
 Hash functions are fundamental to modern cryptography. These functions map binary 
 strings of an arbitrary length to small binary strings of a fixed length, known as 
 hash values. A cryptographic hash function has the property that it is computationally
 infeasible to find two distinct inputs that hash to the same value. Hash functions 
 are commonly used with digital signatures and for data integrity.
 </summary>
</member>
<member name="T:PDFEditorNet.Encryption.Hash.Provider">
 <summary>
 Type of hash; some are security oriented, others are fast and simple
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.Hash.Provider.CRC32">
 <summary>
 Cyclic Redundancy Check provider, 32-bit
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.Hash.Provider.SHA1">
 <summary>
 Secure Hashing Algorithm provider, SHA-1 variant, 160-bit
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.Hash.Provider.SHA256">
 <summary>
 Secure Hashing Algorithm provider, SHA-2 variant, 256-bit
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.Hash.Provider.SHA384">
 <summary>
 Secure Hashing Algorithm provider, SHA-2 variant, 384-bit
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.Hash.Provider.SHA512">
 <summary>
 Secure Hashing Algorithm provider, SHA-2 variant, 512-bit
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.Hash.Provider.MD5">
 <summary>
 Message Digest algorithm 5, 128-bit
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Hash.#ctor(PDFEditorNet.Encryption.Hash.Provider)">
 <summary>
 Instantiate a new hash of the specified type
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Hash.Value">
 <summary>
 Returns the previously calculated hash
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Hash.Calculate(System.IO.Stream@)">
 <summary>
 Calculates hash on a System.IO.Stream of arbitrary length
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Hash.Calculate(PDFEditorNet.Encryption.clsData)">
 <summary>
 Calculates hash for fixed length <see cref="N:System.Data"/>
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Hash.Calculate(PDFEditorNet.Encryption.clsData,PDFEditorNet.Encryption.clsData)">
 <summary>
 Calculates hash for a string with a prefixed salt value. 
 A "salt" is random data prefixed to every hashed value to prevent 
 common dictionary attacks.
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Hash.CalculatePrivate(System.Byte[])">
 <summary>
 Calculates hash for an array of bytes
 </summary>
</member>
<member name="T:PDFEditorNet.Encryption.Symmetric">
 <summary>
 Symmetric encryption uses a single key to encrypt and decrypt. 
 Both parties (encryptor and decryptor) must share the same secret key.
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.Symmetric.Provider.DES">
 <summary>
 The Data Encryption Standard provider supports a 64 bit key only
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.Symmetric.Provider.RC2">
 <summary>
 The Rivest Cipher 2 provider supports keys ranging from 40 to 128 bits, default is 128 bits
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.Symmetric.Provider.Rijndael">
 <summary>
 The Rijndael (also known as AES) provider supports keys of 128, 192, or 256 bits with a default of 256 bits
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.Symmetric.Provider.TripleDES">
 <summary>
 The TripleDES provider (also known as 3DES) supports keys of 128 or 192 bits with a default of 192 bits
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.#ctor(PDFEditorNet.Encryption.Symmetric.Provider,System.Boolean)">
 <summary>
 Instantiates a new symmetric encryption object using the specified provider.
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Symmetric.KeySizeBytes">
 <summary>
 Key size in bytes. We use the default key size for any given provider; if you 
 want to force a specific key size, set this property
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Symmetric.KeySizeBits">
 <summary>
 Key size in bits. We use the default key size for any given provider; if you 
 want to force a specific key size, set this property
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Symmetric.Key">
 <summary>
 The key used to encrypt/decrypt data
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Symmetric.IntializationVector">
 <summary>
 Using the default Cipher Block Chaining (CBC) mode, all data blocks are processed using
 the value derived from the previous block; the first data block has no previous data block
 to use, so it needs an InitializationVector to feed the first block
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.RandomInitializationVector">
 <summary>
 generates a random Initialization Vector, if one was not provided
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.RandomKey">
 <summary>
 generates a random Key, if one was not provided
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.ValidateKeyAndIv(System.Boolean)">
 <summary>
 Ensures that _crypto object has valid Key and IV
 prior to any attempt to encrypt/decrypt anything
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.Encrypt(PDFEditorNet.Encryption.clsData,PDFEditorNet.Encryption.clsData)">
 <summary>
 Encrypts the specified Data using provided key
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.Encrypt(PDFEditorNet.Encryption.clsData)">
 <summary>
 Encrypts the specified Data using preset key and preset initialization vector
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.Encrypt(System.IO.Stream,PDFEditorNet.Encryption.clsData,PDFEditorNet.Encryption.clsData)">
 <summary>
 Encrypts the System.IO.Stream to memory using provided key and provided initialization vector
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.Encrypt(System.IO.Stream,PDFEditorNet.Encryption.clsData)">
 <summary>
 Encrypts the System.IO.Stream to memory using specified key
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.Encrypt(System.IO.Stream)">
 <summary>
 Encrypts the specified System.IO.Stream to memory using preset key and preset initialization vector
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.Decrypt(PDFEditorNet.Encryption.clsData,PDFEditorNet.Encryption.clsData)">
 <summary>
 Decrypts the specified data using provided key and preset initialization vector
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.Decrypt(System.IO.Stream,PDFEditorNet.Encryption.clsData)">
 <summary>
 Decrypts the specified System.IO.Stream using provided key and preset initialization vector
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.Decrypt(System.IO.Stream)">
 <summary>
 Decrypts the specified System.IO.Stream using preset key and preset initialization vector
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Symmetric.Decrypt(PDFEditorNet.Encryption.clsData)">
 <summary>
 Decrypts the specified data using preset key and preset initialization vector
 </summary>
</member>
<member name="T:PDFEditorNet.Encryption.Asymmetric">
 <summary>
 Asymmetric encryption uses a pair of keys to encrypt and decrypt.
 There is a "public" key which is used to encrypt. Decrypting, on the other hand, 
 requires both the "public" key and an additional "private" key. The advantage is 
 that people can send you encrypted messages without being able to decrypt them.
 </summary>
 <remarks>
 The only provider supported is the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/>
 </remarks>
</member>
<member name="T:PDFEditorNet.Encryption.Asymmetric.PublicKey">
 <summary>
 Represents a public encryption key. Intended to be shared, it 
 contains only the Modulus and Exponent.
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PublicKey.ToConfigSection">
 <summary>
 Returns *.config file XML section representing this public key
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PublicKey.ExportToConfigFile(System.String)">
 <summary>
 Writes the *.config file representation of this public key to a file
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PublicKey.LoadFromXml(System.String)">
 <summary>
 Loads the public key from its XML string
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PublicKey.ToParameters">
 <summary>
 Converts this public key to an RSAParameters object
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PublicKey.ToXml">
 <summary>
 Converts this public key to its XML string representation
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PublicKey.ExportToXmlFile(System.String)">
 <summary>
 Writes the Xml representation of this public key to a file
 </summary>
</member>
<member name="T:PDFEditorNet.Encryption.Asymmetric.PrivateKey">
 <summary>
 Represents a private encryption key. Not intended to be shared, as it 
 contains all the elements that make up the key.
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PrivateKey.ToParameters">
 <summary>
 Converts this private key to an RSAParameters object
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PrivateKey.ToConfigSection">
 <summary>
 Returns *.config file XML section representing this private key
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PrivateKey.ExportToConfigFile(System.String)">
 <summary>
 Writes the *.config file representation of this private key to a file
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PrivateKey.LoadFromXml(System.String)">
 <summary>
 Loads the private key from its XML string
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PrivateKey.ToXml">
 <summary>
 Converts this private key to its XML string representation
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.PrivateKey.ExportToXmlFile(System.String)">
 <summary>
 Writes the Xml representation of this private key to a file
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.#ctor">
 <summary>
 Instantiates a new asymmetric encryption session using the default key size; 
 this is usally 1024 bits
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.#ctor(System.Int32)">
 <summary>
 Instantiates a new asymmetric encryption session using a specific key size
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Asymmetric.KeyContainerName">
 <summary>
 Sets the name of the key container used to store this key on disk; this is an 
 unavoidable side effect of the underlying Microsoft CryptoAPI. 
 </summary>
 <remarks>
 http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/q322/3/71.asp&amp;NoWebContent=1
 </remarks>
</member>
<member name="P:PDFEditorNet.Encryption.Asymmetric.KeySizeBits">
 <summary>
 Returns the current key size, in bits
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Asymmetric.KeySizeMaxBits">
 <summary>
 Returns the maximum supported key size, in bits
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Asymmetric.KeySizeMinBits">
 <summary>
 Returns the minimum supported key size, in bits
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Asymmetric.KeySizeStepBits">
 <summary>
 Returns valid key step sizes, in bits
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Asymmetric.DefaultPublicKey">
 <summary>
 Returns the default public key as stored in the *.config file
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.Asymmetric.DefaultPrivateKey">
 <summary>
 Returns the default private key as stored in the *.config file
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.GenerateNewKeyset(PDFEditorNet.Encryption.Asymmetric.PublicKey@,PDFEditorNet.Encryption.Asymmetric.PrivateKey@)">
 <summary>
 Generates a new public/private key pair as objects
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.GenerateNewKeyset(System.String@,System.String@)">
 <summary>
 Generates a new public/private key pair as XML strings
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.Encrypt(PDFEditorNet.Encryption.clsData)">
 <summary>
 Encrypts data using the default public key
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.Encrypt(PDFEditorNet.Encryption.clsData,PDFEditorNet.Encryption.Asymmetric.PublicKey)">
 <summary>
 Encrypts data using the provided public key
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.Encrypt(PDFEditorNet.Encryption.clsData,System.String)">
 <summary>
 Encrypts data using the provided public key as XML
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.Decrypt(PDFEditorNet.Encryption.clsData)">
 <summary>
 Decrypts data using the default private key
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.Decrypt(PDFEditorNet.Encryption.clsData,PDFEditorNet.Encryption.Asymmetric.PrivateKey)">
 <summary>
 Decrypts data using the provided private key
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.Decrypt(PDFEditorNet.Encryption.clsData,System.String)">
 <summary>
 Decrypts data using the provided private key as XML
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Asymmetric.GetRSAProvider">
 <summary>
 gets the default RSA provider using the specified key size; 
 note that Microsoft's CryptoAPI has an underlying file system dependency that is unavoidable
 </summary>
 <remarks>
 http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/q322/3/71.asp&amp;NoWebContent=1
 </remarks>
</member>
<member name="T:PDFEditorNet.Encryption.clsData">
 <summary>
 represents Hex, Byte, Base64, or String data to encrypt/decrypt;
 use the .Text property to set/get a string representation 
 use the .Hex property to set/get a string-based Hexadecimal representation 
 use the .Base64 to set/get a string-based Base64 representation 
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.clsData.DefaultEncoding">
 <summary>
 Determines the default text encoding across ALL Data instances
 </summary>
</member>
<member name="F:PDFEditorNet.Encryption.clsData.Encoding">
 <summary>
 Determines the default text encoding for this Data instance
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.clsData.#ctor">
 <summary>
 Creates new, empty encryption data
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.clsData.#ctor(System.Byte[])">
 <summary>
 Creates new encryption data with the specified byte array
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.clsData.#ctor(System.String)">
 <summary>
 Creates new encryption data with the specified string; 
 will be converted to byte array using default encoding
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.clsData.#ctor(System.String,System.Text.Encoding)">
 <summary>
 Creates new encryption data using the specified string and the 
 specified encoding to convert the string to a byte array.
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.IsEmpty">
 <summary>
 returns true if no data is present
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.StepBytes">
 <summary>
 allowed step interval, in bytes, for this data; if 0, no limit
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.StepBits">
 <summary>
 allowed step interval, in bits, for this data; if 0, no limit
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.MinBytes">
 <summary>
 minimum number of bytes allowed for this data; if 0, no limit
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.MinBits">
 <summary>
 minimum number of bits allowed for this data; if 0, no limit
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.MaxBytes">
 <summary>
 maximum number of bytes allowed for this data; if 0, no limit
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.MaxBits">
 <summary>
 maximum number of bits allowed for this data; if 0, no limit
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.Bytes">
 <summary>
 Returns the byte representation of the data; 
 This will be padded to MinBytes and trimmed to MaxBytes as necessary!
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.Text">
 <summary>
 Sets or returns text representation of bytes using the default text encoding
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.Hex">
 <summary>
 Sets or returns Hex string representation of this data
 </summary>
</member>
<member name="P:PDFEditorNet.Encryption.clsData.Base64">
 <summary>
 Sets or returns Base64 string representation of this data
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.clsData.ToString">
 <summary>
 Returns text representation of bytes using the default text encoding
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.clsData.ToBase64">
 <summary>
 returns Base64 string representation of this data
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.clsData.ToHex">
 <summary>
 returns Hex string representation of this data
 </summary>
</member>
<member name="T:PDFEditorNet.Encryption.Utils">
 <summary>
 Friend class for shared utility methods used by multiple Encryption classes
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Utils.ToHex(System.Byte[])">
 <summary>
 converts an array of bytes to a string Hex representation
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Utils.FromHex(System.String)">
 <summary>
 converts from a string Hex representation to an array of bytes
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Utils.FromBase64(System.String)">
 <summary>
 converts from a string Base64 representation to an array of bytes
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Utils.ToBase64(System.Byte[])">
 <summary>
 converts from an array of bytes to a string Base64 representation
 </summary>
</member>
<member name="M:PDFEditorNet.Encryption.Utils.GetXmlElement(System.String,System.String)">
 <summary>
 retrieve an element from an XML string
 </summary>
</member>
<member name="T:PDFEditorNet.clsPdfDirectory2Csv">
 <summary>
 Call clsPdfDirectory2Csv.createCsv("C:\path\to\pdf\directory\")
 </summary>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsPdfEdit.Add_Submit_Button(System.Byte[],System.Windows.Forms.TextBox,System.Windows.Forms.ComboBox,System.Windows.Forms.TextBox,System.Windows.Forms.TextBox,System.Windows.Forms.TextBox,System.Windows.Forms.TextBox,System.Windows.Forms.TextBox,System.Windows.Forms.ComboBox,System.Windows.Forms.ComboBox,System.Windows.Forms.TextBox,System.Windows.Forms.ComboBox,System.Windows.Forms.ComboBox,System.Windows.Forms.ComboBox,System.Windows.Forms.ComboBox)">
 <summary>
 Adds a Submit Button to Existing PDF Form
 </summary>
 <param name="PDFForm">Byte Array containing Existing PDF Form to add a button to</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsPdfEdit.Download_RestrictedFile(System.String)">
 <summary>
 Downloads Restricted File into a Stream
 </summary>
 <param name="PDF_URL">Name of PDF or File to download</param>
 <returns>Stream containing restricted file</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsPdfEdit.Download_RestrictedFile(System.String,System.String,System.String)">
 <summary>
 Downloads Restricted File into a Stream
 </summary>
 <param name="PDF_URL">Name of PDF or File to download</param>
 <param name="Username">Credential Username</param>
 <param name="Password">Credential Password</param>
 <returns>Stream containing restricted file</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsPdfEdit.Download_RestrictedFile(System.String,System.String,System.String,System.String)">
 <summary>
 Downloads Restricted File into a Stream
 </summary>
 <param name="PDF_URL">Name of PDF or File to download</param>
 <param name="Username">Credential Username</param>
 <param name="Password">Credential Password</param>
 <param name="Domain">Credential Domain</param>
 <returns>Stream containing restricted file</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsPdfEdit.PDFForceDownload(System.Byte[],System.String)">
 <summary>
 Forces download of PDF file
 </summary>
 <param name="FileBytes">Byte array of file</param>
 <param name="FileName">PDF File name</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.clsScan.WIAScanner.Scan(PDFEditorNet.clsScan.ScanSettings)">
 <summary>
 Use scanner to scan an image (with user selecting the scanner from a dialog).
 </summary>
 <returns>Scanned images.</returns>
</member>
<member name="M:PDFEditorNet.clsScan.WIAScanner.Scan(System.String,PDFEditorNet.clsScan.ScanSettings)">
 <summary>
 Use scanner provided scanner id to scan an image.
 </summary>
 <returns>Scanned images.</returns>
</member>
<member name="M:PDFEditorNet.clsScan.WIAScanner.GetDevices">
 <summary>
 Gets the list of available WIA devices.
 </summary>
 <returns></returns>
</member>
<member name="M:PDFEditorNet.clsUserRect.GetCursor(PDFEditorNet.clsUserRect.PosSizableRect)">
 <summary>
 Get cursor for the handle
 </summary>
 <param name="p"></param>
 <returns></returns>
</member>
<member name="T:PDFEditorNet.FolderSelect.FolderSelectDialog">
 <summary>
 Wraps System.Windows.Forms.OpenFileDialog to make it present
 a vista-style dialog.
 </summary>
 
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.#ctor(System.String)">
 <summary>
 Constructor
 </summary>
 <param name="ns">The namespace containing types to be used</param>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.#ctor(System.String,System.String)">
 <summary>
 Constructor
 </summary>
 <param name="an__1">A specific assembly name (used if the assembly name does not tie exactly with the namespace)</param>
 <param name="ns">The namespace containing types to be used</param>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.GetType(System.String)">
 <summary>
 
 </summary>
 <param name="typeName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.New(System.String,System.Object[])">
 <summary>
 Create a new object of a named type passing along any params
 </summary>
 <param name="name">The name of the type to create</param>
 <param name="parameters"></param>
 <returns>An instantiated type</returns>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.Call(System.Object,System.String,System.Object[])">
 <summary>
 Calls method 'func' on object 'obj' passing parameters 'parameters'
 </summary>
 <param name="obj">The object on which to excute function 'func'</param>
 <param name="func">The function to execute</param>
 <param name="parameters">The parameters to pass to function 'func'</param>
 <returns>The result of the function invocation</returns>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.Call2(System.Object,System.String,System.Object[])">
 <summary>
 Calls method 'func' on object 'obj' passing parameters 'parameters'
 </summary>
 <param name="obj">The object on which to excute function 'func'</param>
 <param name="func">The function to execute</param>
 <param name="parameters">The parameters to pass to function 'func'</param>
 <returns>The result of the function invocation</returns>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.CallAs(System.Type,System.Object,System.String,System.Object[])">
 <summary>
 Calls method 'func' on object 'obj' which is of type 'type' passing parameters 'parameters'
 </summary>
 <param name="type">The type of 'obj'</param>
 <param name="obj">The object on which to excute function 'func'</param>
 <param name="func">The function to execute</param>
 <param name="parameters">The parameters to pass to function 'func'</param>
 <returns>The result of the function invocation</returns>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.CallAs2(System.Type,System.Object,System.String,System.Object[])">
 <summary>
 Calls method 'func' on object 'obj' which is of type 'type' passing parameters 'parameters'
 </summary>
 <param name="type">The type of 'obj'</param>
 <param name="obj">The object on which to excute function 'func'</param>
 <param name="func">The function to execute</param>
 <param name="parameters">The parameters to pass to function 'func'</param>
 <returns>The result of the function invocation</returns>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.Get(System.Object,System.String)">
 <summary>
 Returns the value of property 'prop' of object 'obj'
 </summary>
 <param name="obj">The object containing 'prop'</param>
 <param name="prop">The property name</param>
 <returns>The property value</returns>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.GetAs(System.Type,System.Object,System.String)">
 <summary>
 Returns the value of property 'prop' of object 'obj' which has type 'type'
 </summary>
 <param name="type">The type of 'obj'</param>
 <param name="obj">The object containing 'prop'</param>
 <param name="prop">The property name</param>
 <returns>The property value</returns>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.Reflector.GetEnum(System.String,System.String)">
 <summary>
 Returns an enum value
 </summary>
 <param name="typeName">The name of enum type</param>
 <param name="name">The name of the value</param>
 <returns>The enum value</returns>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="P:PDFEditorNet.FolderSelect.FolderSelectDialog.InitialDirectory">
 <summary>
 Gets/Sets the initial folder to be selected. A null value selects the current directory.
 </summary>
</member>
<member name="P:PDFEditorNet.FolderSelect.FolderSelectDialog.Title">
 <summary>
 Gets/Sets the title to show in the dialog
 </summary>
</member>
<member name="P:PDFEditorNet.FolderSelect.FolderSelectDialog.FileName">
 <summary>
 Gets the selected folder
 </summary>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.ShowDialog">
 <summary>
 Shows the dialog
 </summary>
 <returns>True if the user presses OK else false</returns>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.ShowDialog(System.IntPtr)">
 <summary>
 Shows the dialog
 </summary>
 <param name="hWndOwner">Handle of the control to be parent</param>
 <returns>True if the user presses OK else false</returns>
</member>
<member name="T:PDFEditorNet.FolderSelect.FolderSelectDialog.WindowWrapper">
 <summary>
 Creates IWin32Window around an IntPtr
 </summary>
</member>
<member name="M:PDFEditorNet.FolderSelect.FolderSelectDialog.WindowWrapper.#ctor(System.IntPtr)">
 <summary>
 Constructor
 </summary>
 <param name="handle">Handle to wrap</param>
</member>
<member name="P:PDFEditorNet.FolderSelect.FolderSelectDialog.WindowWrapper.Handle">
 <summary>
 Original ptr
 </summary>
</member>
<member name="M:PDFEditorNet.Utilities.NativeMethods.GetImage(System.Windows.Forms.WebBrowser@,System.Drawing.Image@,System.Drawing.Color)">
 <summary>
 Usage: Dim bitmap As New Bitmap(wb.Width, wb.Height); Utilities.NativeMethods.GetImage(wb.ActiveXInstance, bitmap, Color.Transparent);
 </summary>
 <param name="obj">webBrowser control</param>
 <param name="destination">bitmap or image</param>
 <param name="backgroundColor">color</param>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.Utilities.DrawToImage(System.Windows.Forms.WebBrowser)">
 <summary>
 
 </summary>
 <param name="webBrowserControl"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:PDFEditorNet.frmMain._debugVariable">
 <summary>
 DEBUG MODE VARIABLE - BOOLEAN
 </summary>
 <remarks>TRUE = THROW AND TRAP ERRORS; FALSE = CLEAR ERRORS</remarks>
</member>
<member name="P:PDFEditorNet.frmMain.debugMode">
 <summary>
 DEBUG MODE METHOD - BOOLEAN
 </summary>
 <value>TRUE = THROW and TRAP ERRORS; FALSE = CLEAR ERRORS</value>
 <returns>TRUE,FALSE</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.HasUsageRights_PDF(System.String)">
 <summary>
 Checks Usage Rights from a PDF
 </summary>
 <param name="PDFFile">Absolute File Name</param>
 <returns>Returns true if PDF has usage rights enabled</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.HasUsageRights_PDF(System.IO.Stream)">
 <summary>
 Checks Usage Rights from a PDF
 </summary>
 <param name="PDFFile">PDF File Stream from a File Stream or Memory Stream</param>
 <returns>Returns true if PDF has usage rights enabled</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.HasUsageRights_PDF(System.Byte[])">
 <summary>
 Checks Usage Rights from a PDF
 </summary>
 <param name="PDFFile">PDF Byte Array</param>
 <returns>Returns true if PDF has usage rights enabled</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.Download_RestrictedFile(System.String)">
 <summary>
 Downloads Restricted File into a Stream
 </summary>
 <param name="PDF_URL">Name of PDF or File to download</param>
 <returns>Stream containing restricted file</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.Download_RestrictedFile(System.String,System.String,System.String)">
 <summary>
 Downloads Restricted File into a Stream
 </summary>
 <param name="PDF_URL">Name of PDF or File to download</param>
 <param name="Username">Credential Username</param>
 <param name="Password">Credential Password</param>
 <returns>Stream containing restricted file</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.Download_RestrictedFile(System.String,System.String,System.String,System.String)">
 <summary>
 Downloads Restricted File into a Stream
 </summary>
 <param name="PDF_URL">Name of PDF or File to download</param>
 <param name="Username">Credential Username</param>
 <param name="Password">Credential Password</param>
 <param name="Domain">Credential Domain</param>
 <returns>Stream containing restricted file</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.CreateBarCode(System.Byte[],System.Int32,System.String,System.Single,System.Single,System.Int32,System.Int32)">
 <summary>
 Creates bar code
 </summary>
 <param name="pdfFile">pdfFile bytes</param>
 <param name="code">10 digit code</param>
 <param name="width">width of bar code</param>
 <param name="height">height of bar code</param>
 <param name="x">Position X (left=0)</param>
 <param name="y">Position Y (bottom=0)</param>
 <returns>Returns PDF File with barcode</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.PDFConcatenateForms2Buf(System.Byte[][],System.String[],System.Collections.Generic.Dictionary{System.Int32,System.Int32[]})">
 <summary>
 Combines PDF Forms and then outputs to a byte array
 </summary>
 <param name="PDFFiles">PDF Files (Array of Bytes Array)</param>
 <returns>returns true</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.FieldName_Rectangle.sortKid(PDFEditorNet.frmMain.FieldName_Rectangle,PDFEditorNet.frmMain.FieldName_Rectangle)">
 <summary>
 Example usage: kids_fldDicList.Sort(AddressOf SortKids)
 </summary>
 <param name="rect1"></param>
 <param name="rect2"></param>
 <returns>Returns FieldName_Rectangle Kids List sorted by rectangle y+,x-</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.SortField(PDFEditorNet.frmMain.FieldName_Rectangle,PDFEditorNet.frmMain.FieldName_Rectangle)">
 <summary>
 Example usage: fields_tab_order.Sort(AddressOf RectangleSort)
 </summary>
 <param name="rect1"></param>
 <param name="rect2"></param>
 <returns>Returns FieldName_Rectangle List sorted by rectangle y+,x-</returns>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.SelectPages(System.Byte[],System.String,System.String)">
 <summary>
 This class expands a string into a list of numbers. The main use is to select a range of pages. Example: SelectPages(Session(),"1-6,!5")
 </summary>
 <param name="inputPdf">PDF Byte Array</param>
 <param name="pageSelection">[!][o][odd][e][even]start-end</param>
 <param name="ownerPassword">Pdf Owner / Modify Password</param>
 <remarks></remarks>
</member>
<member name="M:PDFEditorNet.frmMain.RemoveUsageRights_PDF(System.Byte[],System.String)">
 <summary>
 Removes Usage Rights from a PDF
 </summary>
 <param name="PDFFile">PDF File Byte Array</param>
 <param name="pdfownerPassword">PDF Owner Password</param>
 <returns>Returns the PDF without usage rights enabled</returns>
 <remarks></remarks>
</member>
</members>
</doc>
